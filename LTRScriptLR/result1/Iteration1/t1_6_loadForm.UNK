// In this version the 


function renderAll() {

	const mypromise = new Promise((resolve, reject) => {
		try {
			const urls = new URL(window.location.href);
			const searchParams = urls.searchParams;
			const oportId = document.getElementById("opportunitypass");
			const projectidEle = document.getElementById("projectid");

			oportId.value = searchParams.get("opportunityId");
			projectidEle.value = searchParams.get("customerid");
			// const checkBoxTexts =  {
			//   page_two: 'I/We, hereby declare that the KYC documents uploaded are genuine and authentic.',
			//   page_four: 'I/We acknowledge that we have read the above information and agree to proceed accordingly.',
			//   page_five: 'I/We, provide consent to proceed with the above mentioned channel partner for the booking.',
			//   common: 'I/We, confirm that the information provided by me is accurate to the best of my/our knowledge.',
			//   terms: 'I/We acknowledge that we have read the above terms & conditions and agree to proceed accordingly.',
			//   page_nine: 'I/We, have read all the terms and conditions and by e-signing/submitting the document agree that all the information in the entirety of the document, as visible in the preview, is accurate.'
			// }

			const requestOptions = {
				method: "POST",
				redirect: "follow",
				body: {},
			};

			const myDocuments = {};
			// localStorage.setItem("mydocument", JSON.stringify(myDocuments));
			mydocument = JSON.stringify(myDocuments);

			fetch(userFormURl, requestOptions)
				.then((response) => response.json())
				.then((json) => {
					schema = json;
					let page = 0;
					let checkText = schema["first-page"]["other"];

					const keys = ["first-page", "identification", "applicant-details", "anexure-a", "booking-source", "self-declaration", "terms-and-conditions", "check-list-documents"];
					mygtcndetails = JSON.parse(
						JSON.stringify(schema["terms-and-conditions"])
					);



					const ctn = document.createDocumentFragment();
					for (const key of keys) {
						if (key === "first-page") {
							++page;

							const pagelist = document.createElement("div");
							pagelist.setAttribute("id", `page-1`);
							const innerCont = document.createElement("div");
							innerCont.setAttribute("class", "home_container");
							const inputGrp = createInputGrp(schema[key]["form"]);
							inputGrp.classList.add("page-1-form");

							const fctn = document.createElement("div");
							fctn.classList.add("page-1-form-ctn");

							inputGrp
								.querySelectorAll("input, textarea, select")
								.forEach((e) => {
									if (!e.classList.contains("not_editable")) {
										e.removeAttribute("disabled");
									}
								});

							fctn.append(inputGrp);

							const new_addformlist = document.createElement("div");
							new_addformlist.setAttribute("id", "new_addformlist");
							var current_applicant = 1;
							const app_detials = schema["first-page"]["applicant_details"];

							if (app_detials.length > 0) {
								for (let i = 0; i < app_detials.length; i++) {
									const apct_list = document.createElement("div");
									apct_list.setAttribute("class", `apct_type_div`);

									const labelEl = document.createElement("span");
									labelEl.setAttribute("class", "apct_type_lable");
									labelEl.innerHTML =
										current_applicant === 1
											? "Primary Applicant"
											: `${pageInfo[current_applicant - 2]}`;

									const apt_type = app_detials[i]["Applicant_Type"];
									const select_ele = ApplicantComp(
										`applicant_${current_applicant}`,
										apt_type
									);

									apct_list.appendChild(labelEl);
									apct_list.appendChild(select_ele);

									if (i === app_detials.length - 1) {
										const plmele = document.createElement("div");
										plmele.setAttribute("class", "plmflex_icon");

										let plusIcon = document.createElement("span");
										plusIcon.setAttribute("class", "my_type_plus");
										plusIcon.innerHTML = "+";

										plusIcon = AppPlusapplicant(plusIcon, current_applicant);
										plmele.appendChild(plusIcon);
										apct_list.appendChild(plmele);
									}

									new_addformlist.append(apct_list);
									fctn.append(new_addformlist);
									current_applicant++;
								}
							}

							const img = schema[key]["image"];
							if (img) {
								const myimage = document.createElement("div");
								myimage.setAttribute("class", "con_displayimage");
								const imgEl = document.createElement("img");
								imgEl.src = img.src;
								document.getElementById("pannel-logo").src = img.src;
								if (img.id) {
									imgEl.setAttribute("id", img.id);
								}
								myimage.appendChild(imgEl);

								innerCont.append(myimage);
							}
							innerCont.append(fctn);
							pagelist.append(innerCont);
							ctn.append(pagelist);

							continue;
						}

						if (key === "identification") {
							++page;
							const pageCtn = document.createElement("div");
							pageCtn.setAttribute("id", `page-${page}`);
							pageCtn.classList.add("hidden");
							ctn.append(pageCtn);
							continue;
						}

						if (key === "applicant-details") {
							++page;
							const mysec = schema["applicant-details"];
							const pageCtn = document.createElement("div");
							pageCtn.setAttribute("id", `page-${page}`);

							pageCtn.classList.add("hidden");
							ctn.append(pageCtn);


							// ++page;

							// const pageCtnAll = document.createElement("div");
							// pageCtnAll.setAttribute("id", `page-${page}`);
							// pageCtnAll.classList.add("hidden");
							// pageCtnAll.append(renderallAboutSection(schema[key]));

							// ctn.append(pageCtn, pageCtnAll);
							continue;
						}

						const perPage = schema[key]["per-page"];

						if (perPage) {
							const rounds = Math.ceil(
								schema[key]["sub-sections"].length / perPage
							);
							for (let i = 0; i < rounds; i++) {
								page++;
								const pageCtn = document.createElement("div");
								pageCtn.setAttribute("id", `page-${page}`);
								pageCtn.classList.add("hidden");
								pageCtn.append(
									renderSection({
										...schema[key],
										"sub-sections": schema[key]["sub-sections"].splice(
											0,
											perPage
										),
										heading: i == 0 ? schema[key]["heading"] : "",
									})
								);
								if (checkText) {
									pageCtn.append(
										acknoledgeCheck(checkBoxTexts.terms, `apptnc_aggre_${page}`)
									);
								}
								ctn.append(pageCtn);
							}
						} else {
							page++;
							const pageCtn = document.createElement("div");
							pageCtn.setAttribute("id", `page-${page}`);
							pageCtn.classList.add("hidden");
							pageCtn.append(renderSection(schema[key]));
							if (checkText) {


								if (page == 11) {
									pageCtn.append(
										acknoledgeCheck(checkBoxTexts.page_nine, `apptnc_aggre_${page}`)
									);
								} else if (page === 4) {
									pageCtn.append(
										acknoledgeCheck(checkBoxTexts.page_four, `apptnc_aggre_${page}`)
									);
								} else if (page === 5) {
									const bookingSrcType = schema['booking-source']['form'][0]['defaultValue'];
									if (bookingSrcType === 'Channel Partner') {
										pageCtn.append(
											acknoledgeCheck(checkBoxTexts.page_five, `apptnc_aggre_${page}`)
										);
									}
									else {
										pageCtn.append(
											acknoledgeCheck(checkBoxTexts.page_five_custom, `apptnc_aggre_${page}`)
										);
									}
								} else if (page === 8) {
									pageCtn.append(
										acknoledgeCheck(checkBoxTexts.page_five_custom, `apptnc_aggre_${page}`)
									);
								} else {
									pageCtn.append(
										acknoledgeCheck(checkText.text, `apptnc_aggre_${page}`)
									);
								}
							}
							if (key === 'booking-source') {

								++page;

								let bookAmt = schema['anexure-a'];

								bookAmt['sub-sections'][bookAmt['sub-sections'].length - 1]['sub-heading'] = 'BOOKING AMOUNT';
								bookAmt['sub-sections'][bookAmt['sub-sections'].length - 1]?.form?.map((v) => { delete v.disabled; return { ...v } })
								const pageCtnAll = document.createElement("div");
								pageCtnAll.setAttribute("id", `page-${page}`);
								pageCtnAll.classList.add("hidden");
								pageCtnAll.append(renderbookingAmountSection(bookAmt));
								if (checkText) {
									pageCtnAll.append(
										acknoledgeCheck(checkBoxTexts.common, `apptnc_aggre_${page}`)
									);
								}
								++page;
								const pageCtnAll2 = document.createElement("div");
								pageCtnAll2.setAttribute("id", `page-${page}`);
								pageCtnAll2.classList.add("hidden");
								pageCtnAll2.append(renderallAboutSection(schema['applicant-details']));
								pageCtnAll2.append(
									acknoledgeCheck(checkBoxTexts.common, `apptnc_aggre_${page}`)
								);

								ctn.append(pageCtn, pageCtnAll, pageCtnAll2);
							} else {
								ctn.append(pageCtn);
							}
						}
					}

					const form = document.querySelector("form");
					form.prepend(ctn);

					resolve(page);
				});
			// .catch((err) => {console.log(err);reject(false)});
		} catch (err) {
			console.log(err);
			reject(false);
		}
	});
	return mypromise;
}

function acknoledgeCheck(text, id) {
	const checkEle = document.createElement("div");
	checkEle.classList.add("acknoledge-element");
	const inputCtn = document.createElement("div");
	inputCtn.classList.add("fitcontent_check", "acknoledge_check");

	const input = document.createElement("input");
	input.setAttribute("id", id);
	input.classList.add("tnc_agree");
	input.setAttribute("name", id);
	input.setAttribute("type", "checkbox");

	const labelEl = document.createElement("label");
	labelEl.innerText = text;
	labelEl.setAttribute("for", id);
	labelEl.classList.add("tnc_agreeText");
	labelEl.style.fontWeight = 500;
	labelEl.style.fontSize = "14px";
	input.onchange = function () {
		labelEl.style.color = "black";
	};

	inputCtn.append(input, labelEl);
	checkEle.appendChild(inputCtn);
	return checkEle;
}

function paymentEditCheck(text, id, form, count) {
	const checkEle = document.createElement("div");
	checkEle.classList.add("payment-edit-element");
	const inputCtn = document.createElement("div");
	inputCtn.classList.add("fitcontent_check", "payment_check");

	const input = document.createElement("input");
	input.setAttribute("id", id + '_' + count);
	input.classList.add("payment_toggle");
	input.setAttribute("name", id + '_' + count);
	input.setAttribute("type", "checkbox");

	const labelEl = document.createElement("label");
	labelEl.innerText = text;
	labelEl.setAttribute("for", id + '_' + count);
	labelEl.classList.add("payment_toggletext");
	labelEl.style.fontWeight = 500;
	labelEl.style.fontSize = "14px";
	input.onchange = function (event) {
		if (event.target.checked == true) {
			var cls = document.getElementsByClassName(`bank-amount-${count}`);
			var cls1 = document.getElementsByClassName(`amount-data-${count}`);
			for (var i = 0; i < cls.length; i++) {
				cls[i].removeAttribute('disabled');
				cls[i].classList.remove("not_editable");
			}
			for (var i = 0; i < cls1.length; i++) {
				cls1[i].removeAttribute('disabled');
				cls1[i].classList.remove("not_editable");
			}
		} else {
			var cls = document.getElementsByClassName(`bank-amount-${count}`);
			var cls1 = document.getElementsByClassName(`amount-data-${count}`);
			for (var i = 0; i < cls.length; i++) {
				cls[i].setAttribute('disabled', true);
				cls[i].classList.add("not_editable");
			}
			for (var i = 0; i < cls1.length; i++) {
				cls1[i].setAttribute('disabled', true);
				cls1[i].classList.add("not_editable");
			}
		}
		labelEl.style.color = "black";
	};

	inputCtn.append(input, labelEl);
	checkEle.appendChild(inputCtn);
	return checkEle;
}

function ApplicantComp(id, defaultva) {
	const inputCtn = document.createElement("div");
	inputCtn.classList.add("inputCtn");

	var applicant_type = [
		{ label: "Individual", value: "Individual" },
		{ label: "Company", value: "Company" },
	];

	const select = document.createElement("select");

	select.setAttribute("id", id);

	select.setAttribute("name", "applicant_type_idt");

	for (const optionVal of applicant_type) {
		const option = document.createElement("option");
		option.setAttribute("value", optionVal.value);
		option.innerText = optionVal.label;

		if (defaultva) {
			if (defaultva === optionVal.value) {
				option.setAttribute("selected", true);
			}
		}

		select.append(option);
	}

	inputCtn.append(select);
	return inputCtn;
}

function AppPlusapplicant(ele, count) {
	ele.onclick = function (e) {
		if (document.querySelectorAll('.apct_type_div').length >= 6) {
			alert('Maximum 3 applicants are allowed');
			return;
		}
		const parentTarget = hasSomeParentTheClass(e.target, "apct_type_div");

		const myele = e.target;
		myele.remove();
		count++;
		const apct_list = document.createElement("div");
		apct_list.setAttribute("class", `apct_type_div`);

		const labelEl = document.createElement("span");
		labelEl.setAttribute("class", "apct_type_lable");
		labelEl.innerHTML = pageInfo[count - 2];

		const select_ele = ApplicantComp(`applicant_${count}`);

		apct_list.appendChild(labelEl);
		apct_list.appendChild(select_ele);

		apct_list.appendChild(labelEl);
		apct_list.appendChild(select_ele);

		const plmele = document.createElement("div");
		plmele.setAttribute("class", "plmflex_icon");

		let minIconlast = document.createElement("span");
		minIconlast.setAttribute("class", "my_type_minus");
		minIconlast.innerHTML = "-";

		minIconlast.onclick = function (e) {
			const removeEle = hasSomeParentTheClass(e.target, "apct_type_div");
			removeEle.remove();
			resetfector();
		};

		plmele.appendChild(minIconlast);

		if (count !== 6) {
			let plusIcon = document.createElement("span");
			plusIcon.setAttribute("class", "my_type_plus");
			plusIcon.innerHTML = "+";
			apct_list.appendChild(plusIcon);
			AppPlusapplicant(plusIcon, count);
			plmele.appendChild(plusIcon);
		}

		apct_list.appendChild(plmele);
		new_addformlist.append(apct_list);
	};

	return ele;
}



function pdfToImage(file) {
	return new Promise((resolve, reject) => {
		const reader = new FileReader();
		reader.onload = async function () {
			try {
				const typedArray = new Uint8Array(this.result);
				const pdf = await pdfjsLib.getDocument({ data: typedArray }).promise;
				const page = await pdf.getPage(1);
				const viewport = page.getViewport({ scale: 3 });
				const canvas = document.createElement("canvas");
				const context = canvas.getContext("2d");
				canvas.width = viewport.width;
				canvas.height = viewport.height;
				const renderContext = {
					canvasContext: context,
					viewport: viewport,
				};
				await page.render(renderContext).promise;
				const imageDataUrl = canvas.toDataURL("image/png");
				resolve(imageDataUrl);
			} catch (error) {
				reject(error);
			}
		};
		reader.onerror = function () {
			reject(new Error("Error reading file"));
		};
		reader.readAsArrayBuffer(file);
	});
}

function pdfBase64ToBlob(pdfBase64) {

	// Convert base64 to binary
	const binaryPDF = atob(pdfBase64);

	// Convert binary data to a Uint8Array
	const uint8Array = new Uint8Array(binaryPDF.length);
	for (let i = 0; i < binaryPDF.length; i++) {
		uint8Array[i] = binaryPDF.charCodeAt(i);
	}

	// Create a Blob from the Uint8Array
	const blob = new Blob([uint8Array], { type: 'application/pdf' });

	return blob;
}

async function showQuotation() {
	const quotPdfBase64 = schema['first-page']['quotationpdf'];
	if (quotPdfBase64.indexOf('.jpg') != -1) {
		document.querySelector('#quot-dialog-content').innerHTML = `<img src=${quotPdfBase64} style='width:70%'>`;
		document.querySelector('#quot-consent-dialog').classList.remove('hidden');
	} else {
		const pdfBlob = pdfBase64ToBlob(quotPdfBase64);

		const filename = 'quotation.pdf';

		//Create a File object with MIME type 'application/pdf'
		const file = new File([pdfBlob], filename, { type: 'application/pdf' });

		quotImageURL = await pdfToImage(file);
		document.querySelector('#quot-dialog-content').innerHTML = `<img src=${quotImageURL} style='width:70%'>`;
		document.querySelector('#quot-consent-dialog').classList.remove('hidden');
	}
}
function pdfToImageBlob(file) {
	return new Promise((resolve, reject) => {
		const reader = new FileReader();
		reader.onload = async function () {
			try {
				const typedArray = new Uint8Array(this.result);
				const pdf = await pdfjsLib.getDocument({ data: typedArray }).promise;
				const page = await pdf.getPage(1);
				const viewport = page.getViewport({ scale: 1 });
				const canvas = document.createElement("canvas");
				const context = canvas.getContext("2d");
				canvas.width = viewport.width;
				canvas.height = viewport.height;
				const renderContext = {
					canvasContext: context,
					viewport: viewport,
				};
				await page.render(renderContext).promise;
				canvas.toBlob(function (blob) {
					resolve(blob);
				}, "image/png");
			} catch (error) {
				reject(error);
			}
		};
		reader.onerror = function () {
			reject(new Error("Error reading file"));
		};
		reader.readAsArrayBuffer(file);
	});
}



function createIdentificationColumn(schema) {
	const { for: name, photoPicker, kyc, signature } = schema;

	const col = document.createElement("div");
	col.classList.add("col");

	const title = document.createElement("label");
	title.style.setProperty("margin-bottom", "15px");
	title.style.setProperty("font-size", "20px");
	title.innerText = applicantNum[name];
	col.append(title);

	if (photoPicker) {
		const { id, key } = photoPicker;

		const pickerCtn = document.createElement("div");
		pickerCtn.classList.add("flex", "user-img-label");
		pickerCtn.style.setProperty("width", "218px");

		const label = document.createElement("label");
		label.style.setProperty("margin-right", "10px");
		// label.setAttribute("for", id);

		const input = document.createElement("input");   // manoj kumar doc

		const previewId = `${id}-preview`;

		input.setAttribute("accept", "image/*");
		input.setAttribute("required", true);
		input.setAttribute("type", "file");
		input.setAttribute("role", "photo-picker");
		input.setAttribute("preview-id", previewId);
		input.setAttribute("id", id);
		input.setAttribute("name", key);

		const img = document.createElement("img");
		img.src = "camera.svg";
		img.title = "Take photo";
		img.id = `${id}-img`;

		img.addEventListener("click", async function (event) {
			event.stopPropagation();

			let stream = null;

			try {
				stream = await navigator.mediaDevices.getUserMedia({
					video: true,
					audio: false,
				});
			} catch (error) {

				return;
			}

			const videoParent = document.getElementById(`${id}-stream`);
			videoParent.style.display = "flex";
			let video = document.getElementById(`${id}-video`);
			video.srcObject = stream;

			const clickButton = document.getElementById(`${id}-click-photo`);
			let canvas = document.getElementById(`${id}-canvas`);
			let counter = 0;
			clickButton.addEventListener("click", function (ev) {
				counter++;
				if (counter > 1) {
					return;
				}
				ev.stopPropagation();
				canvas
					.getContext("2d")
					.drawImage(video, 0, 0, canvas.width, canvas.height);
				let image_data_url = canvas.toDataURL("image/jpeg");

				// const myJson = JSON.parse(localStorage.getItem("mydocument")) || [];
				const myJson = JSON.parse(mydocument) || [];
				myJson[id] = image_data_url;
				// localStorage.setItem("mydocument", JSON.stringify(myJson));
				mydocument = JSON.stringify(myJson);
				const byteCharacters = atob(
					image_data_url.replace(/^data:image\/?[A-z]*;base64,/, "")
				);
				const byteNumbers = new Array(byteCharacters.length);
				for (let i = 0; i < byteCharacters.length; i++) {
					byteNumbers[i] = byteCharacters.charCodeAt(i);
				}
				const byteArray = new Uint8Array(byteNumbers);
				const convFile = new File(
					[new Blob([byteArray], { type: "image/jpeg" })],
					"userImage.jpeg",
					{ type: "image/jpeg" }
				);

				const dataTransfer = new DataTransfer();
				dataTransfer.items.add(convFile);
				const fileInput = document.getElementById(id);
				fileInput.files = dataTransfer.files;

				const showPreview = document.getElementById(previewId);
				showPreview.src = image_data_url;
				videoParent.style.display = "none";
				input.removeAttribute("required");



				// New Logic to Store image in db
				const preview = document.getElementById(previewId);
				let smLoader = createLoader();
				preview.insertAdjacentElement('afterend', smLoader);
				const pickerId = previewId.split('-preview')[0];
				imageUploading.push(pickerId);

				const imgBlob = new Blob([image_data_url], { type: 'image/jpeg' });

				const file = dataURLtoFile(image_data_url, 'user.jpeg');
				compressImage(image_data_url, ev, '', false, file)
					.then(resp => {
						if ((file.size / 1024) >= 500) {
							let type = file.type.split('/')[1];
							file = new File([resp], `user.${type}`, {
								type: resp.type
							});
						}

						storeImageInDB(file, pickerId, 'userImage')
							.then((res) => res.json())
							.then((res) => {
								StoreDocumentName(pickerId, res['file_name']);
								smLoader.innerHTML = '';
								imageUploading = imageUploading.filter(x => x != pickerId);
							}).catch(err => {
								smLoader.innerHTML = '';
								imageUploading = imageUploading.filter(x => x != pickerId);
								alert(`Couldn't upload image`);
								console.log(err);
							})
					})
					.catch(err => {
						smLoader.innerHTML = '';
						imageUploading = imageUploading.filter(x => x != pickerId);
						alert(`Couldn't upload image`);
						console.log(err);
					})
			});
		});

		label.append(img);

		pickerCtn.append(label, input);

		const preview = document.createElement("img");  // to be uncommented
		preview.classList.add("photo");
		preview.setAttribute("id", previewId);

		const streamParent = document.createElement("div");
		streamParent.id = `${id}-stream`;
		streamParent.style.display = "none";
		streamParent.style.flexDirection = "column";
		streamParent.style.alignItems = "center";
		streamParent.style.gap = "5px";
		streamParent.style.marginBottom = "10px";
		streamParent.innerHTML = `
    <video id=${`${id}-video`} width="220" height="auto" autoplay></video>
    <button id=${`${id}-click-photo`} type="button">Click Photo</button>
    <canvas id=${`${id}-canvas`} width="220" height="auto" style="display: none;"></canvas>
    `;
		col.append(pickerCtn, streamParent, preview);
	}

	if (signature) {
		const { id, key } = signature;

		const sign = document.createElement("div");
		sign.classList.add("mt-10");
		sign.innerHTML = `
    <button for="clear-sign" control="${name}_${id}">x</button>
    <canvas
      for="sign"
      required
      name="${key}"
      id="${name}_${id}"
    ></canvas>`;

		col.append(sign);
	}

	const fileUpload = [];
	if (kyc) {
		const { form, documents, type } = kyc;
		form.forEach((element) => {
			if (element?.type === "file") {
				const fctn = document.createElement("div");
				fctn.classList.add("file-upload", "document_fileupload_class");

				const label = document.createElement("label");
				label.innerText = `${element?.label}`;

				let mainUploadContainer = document.createElement("div");
				mainUploadContainer.setAttribute("class", "mainUpload_container");

				const input = document.createElement("input");
				input.setAttribute("type", "file");
				input.setAttribute("required", true);

				if (element?.id) input.setAttribute("id", element?.id);
				if (element?.key) input.setAttribute("name", element?.key);

				input.onclick = (ev) => {

					ev.target.value = null;
				};

				input.addEventListener("change", async (ev) => {

					// if ((ev.target.files[0].size) / (1024 * 1024) > 1) {
					// 	let modal = document.querySelector(".myverModal");
					// 	let modalTextElem = document.querySelector(".myverModal .popup-header");
					// 	modalTextElem.innerText = "Maximum 1MB file size is allowed.";
					// 	modal.classList.toggle("show-modal");
					// 	// previweContainet.append(verifyfailsicon());

					// 	document.querySelector(
					// 		"#myPopup .doc_reuploadBtn"
					// 	).onclick = function () {
					// 		const curEle = document.getElementById(element.id);
					// 		const targetEle = hasSomeNextSiblingTheClass(
					// 			curEle,
					// 			"preview_actionbutton"
					// 		);
					// 		curEle.value = null;
					// 		if (targetEle) {
					// 			targetEle.remove();
					// 		}
					// 		modal.classList.toggle("show-modal");
					// 	};

					// 	document.querySelector(
					// 		"#myPopup .ignorePr_Btn"
					// 	).classList.add('hidden');
					// 	return;
					// }

					try {
						if (ev.target.nextElementSibling) {
							ev.target.nextElementSibling.remove();
						}

						// compress uploaded documents

						let myFileURL = '';
						let imageBlob = '';
						// Check if current document is pdf
						if (ev.target.files[0].type == 'application/pdf') {
							try {
								myFileURL = await pdfToImage(ev.target.files[0]);
								imageBlob = await pdfToImageBlob(ev.target.files[0]);

							} catch (error) {
								console.error('Error converting PDF to image:', error);
							}
						} else {
							myFileURL = URL.createObjectURL(ev.target.files[0]);
						}

						// const myFileURL = URL.createObjectURL(ev.target.files[0]);
						let previweContainet = document.createElement("div");
						previweContainet.setAttribute("class", "preview_actionbutton");
						const linknav = document.createElement("a");
						var imgaddhar = document.createElement("img");
						linknav.setAttribute("href", myFileURL);
						imgaddhar.setAttribute("height", 50);
						imgaddhar.setAttribute("class", "upload_image_preview");
						imgaddhar.src = myFileURL;
						linknav.setAttribute("target", "_blank");
						linknav.append(imgaddhar);
						previweContainet.append(linknav);

						if (myFileURL) {
							const removeEle = document.createElement("div");
							removeEle.classList.add("remove_preview_ele");
							const newSuff = document.createElement("button");
							newSuff.innerHTML = "X";
							removeEle.appendChild(newSuff);

							removeEle.onclick = function (e) {
								const selfEle = e.target;
								const targetEle = hasSomeParentTheClass(
									selfEle,
									"preview_actionbutton"
								);
								imageUploading = imageUploading.filter(x => x != targetEle.parentNode.children[0].id);
								targetEle.remove();
								input.value = null;

							};
							previweContainet.append(removeEle);
						}

						mainUploadContainer.append(previweContainet);
						let smLoader = createLoader();
						previweContainet.append(smLoader);
						imageUploading.push(element.id);

						const showFailureFun = () => {
							smLoader.innerHTML = '';
							imageUploading = imageUploading.filter(x => x != element.id);
							let modal = document.querySelector(".myverModal");
							modal.classList.toggle("show-modal");
							previweContainet.append(verifyfailsicon());

							document.querySelector(
								"#myPopup .doc_reuploadBtn"
							).onclick = function () {
								const curEle = document.getElementById(element.id);
								const targetEle = hasSomeNextSiblingTheClass(
									curEle,
									"preview_actionbutton"
								);
								curEle.value = null;
								if (targetEle) {
									imageUploading = imageUploading.filter(x => x != targetEle.parentNode.children[0].id);
									targetEle.remove();
								}
								modal.classList.toggle("show-modal");
							};

							document.querySelector(
								"#myPopup .ignorePr_Btn"
							).onclick = function () {
								const myigId = element.id + "_ignore";
								ignoreDoc = ignoreDoc.filter((ig) => {
									return ig.name != myigId;
								});
								ignoreDoc.push({ name: myigId, value: '' });
								modal.classList.toggle("show-modal");
							};
						}

						compressImage(myFileURL, ev, imageBlob)
							.then((res) => {
								const formData = new FormData();
								if (ev.target.files[0].type == 'application/pdf') {
									formData.append("upd", ev.target.files[0]);
								}
								else {
									let file;
									if ((ev.target.files[0].size / 1024) < 500) {
										file = ev.target.files[0];
									}
									else {
										let type = ev.target.files[0].type.split('/')[1];
										file = new File([res], `name.${type}`, {
											type: res.type
										});
									}

									formData.append("upd", file);
								}


								// formData.append("file", res);
								const curretValidData = getApplicantData(name);
								verifyDocNew(element.id, formData, name)
									.then((res) => {
										StoreDocumentName(element.id, res.value.file_name);
										smLoader.innerHTML = '';
										imageUploading = imageUploading.filter(x => x != element.id);


										let modal = document.querySelector(".myverModal");
										if (res && res.verified) {

											previweContainet.append(verifiedicon());
											const myigId = element.id + "_ignore";
											ignoreDoc = ignoreDoc.filter((ig) => {
												return ig.name != myigId;
											});
										} else {

											// alert('not then');
											// if (
											// 	res &&
											// 	(res.messages.length > 0 || res.value.length > 0)
											// ) {
											// 	let displayText = "";
											// 	if (res.messages.length > 0) {
											// 		res.messages.forEach((myv) => {
											// 			displayText = displayText + myv + "<br>";
											// 		});
											// 	}
											// 	document.querySelector(
											// 		"#myPopup .popup_warningtext"
											// 	).innerHTML = displayText;

											// 	document
											// 		.querySelector("#myPopup .ignorePr_Btn")
											// 		.classList.remove("hidden");

											// 	document.querySelector(
											// 		"#myPopup .ignorePr_Btn"
											// 	).onclick = function () {
											// 		const myigId = element.id + "_ignore";
											// 		ignoreDoc = ignoreDoc.filter((ig) => {
											// 			return ig.name != myigId;
											// 		});
											// 		ignoreDoc.push({ name: myigId, value: res.value });
											// 		modal.classList.toggle("show-modal");
											// 	};
											// } else {
											// 	document.querySelector(
											// 		"#myPopup .popup_warningtext"
											// 		// ).innerText = "Please upload proper Document.";
											// 	).innerText = "You can Proceed Manually.";


											// 	document
											// 		.querySelector("#myPopup .ignorePr_Btn")
											// 		.classList.add("hidden");
											// }
											// modal.classList.toggle("show-modal");
											// previweContainet.append(verifyfailsicon());
											modal.classList.toggle("show-modal");
											// previweContainet.append(verifyfailsicon());

											document.querySelector(
												"#myPopup .doc_reuploadBtn"
											).onclick = function () {
												const curEle = document.getElementById(element.id);
												const targetEle = hasSomeNextSiblingTheClass(
													curEle,
													"preview_actionbutton"
												);
												curEle.value = null;
												if (targetEle) {
													// console.log(imageUploading);
													imageUploading = imageUploading.filter(x => x != targetEle.parentNode.children[0].id);
													// console.log(imageUploading);
													targetEle.remove();
												}
												modal.classList.toggle("show-modal");
											};

											document.querySelector(
												"#myPopup .ignorePr_Btn"
											).onclick = function () {
												const myigId = element.id + "_ignore";
												ignoreDoc = ignoreDoc.filter((ig) => {
													return ig.name != myigId;
												});
												ignoreDoc.push({ name: myigId, value: res.value });
												modal.classList.toggle("show-modal");
											};
										}

										// document.querySelector(
										// 	"#myPopup .doc_reuploadBtn"
										// ).onclick = function () {
										// 	const curEle = document.getElementById(element.id);
										// 	const targetEle = hasSomeNextSiblingTheClass(
										// 		curEle,
										// 		"preview_actionbutton"
										// 	);
										// 	curEle.value = null;
										// 	if (targetEle) {
										// 		targetEle.remove();
										// 	}
										// 	modal.classList.toggle("show-modal");
										// };

									})
									.catch((err) => {
										showFailureFun();
									});
							})
							.catch((err) => {
								console.log(err);
								showFailureFun();
							});
					} catch (error) {
						console.log({ error });
					}
				});

				mainUploadContainer.append(input);
				fctn.append(label, mainUploadContainer);

				fileUpload.push(fctn);
			} else {
				const { label, type, id, key, validate, defaultValue } = element;
				if (label == 'I do not have a Aadhaar card') {
					const inputCtn = document.createElement("div");
					inputCtn.classList.add("fitcontent_check", "aadhar_check");
					const input = document.createElement("input");
					input.setAttribute("id", id);
					input.setAttribute("name", key);
					input.setAttribute("type", type);

					const labelEl = document.createElement("label");
					labelEl.innerText = label;
					labelEl.setAttribute("for", id);
					if (defaultValue) {
						input.setAttribute("checked", defaultValue);
					}

					// input.setAttribute("disabled", true);
					// input.classList.add("not_editable");
					input.onchange = function (e) {
						const telEle = e.target.parentElement.nextSibling
						const targetEle = hasSomeNextSiblingTheClass(
							telEle,
							"fileupload_contianer"
						);
						const hidEle = targetEle.querySelector(".aadharfront");
						const hidEleback = targetEle.querySelector(".aadharback");
						if (hidEleback) {
							if (e.target.checked) {
								hidEleback.classList.add("hidden");
								hidEleback.querySelectorAll("input, textarea, select").forEach((e) => {
									e.setAttribute("disabled", true);
									e.classList.add("not_editable");
								});
							} else {
								hidEleback.classList.remove("hidden");
								hidEleback.querySelectorAll("input, textarea, select").forEach((e) => {
									e.removeAttribute("disabled");
									e.classList.remove("not_editable");
								});
							}
						}

						if (hidEle) {
							if (e.target.checked) {
								hidEle.classList.add("hidden");
								hidEle.querySelectorAll("input, textarea, select").forEach((e) => {
									e.setAttribute("disabled", true);
									e.classList.add("not_editable");
								});
							} else {
								hidEle.classList.remove("hidden");
								hidEle.querySelectorAll("input, textarea, select").forEach((e) => {
									e.removeAttribute("disabled");
									e.classList.remove("not_editable");
								});
							}
						}
					};

					inputCtn.append(input, labelEl);
					col.append(inputCtn);
				} else {
					const inputCtn = document.createElement("div");
					inputCtn.classList.add("fitcontent_check", "pancard_check");
					const input = document.createElement("input");
					input.setAttribute("id", id);
					input.setAttribute("name", key);
					input.setAttribute("type", type);

					const labelEl = document.createElement("label");
					labelEl.innerText = label;
					labelEl.setAttribute("for", id);
					if (defaultValue) {
						input.setAttribute("checked", defaultValue);
					}

					// input.setAttribute("disabled", true);
					// input.classList.add("not_editable");
					input.onchange = function (e) {
						const telEle = e.target.parentElement.nextSibling.nextSibling
						const targetEle = hasSomeNextSiblingTheClass(
							telEle,
							"fileupload_contianer"
						);
						const hidEle = targetEle.querySelector(".file-upload");
						if (e.target.checked && hidEle) {
							hidEle.classList.add("hidden");
							hidEle.querySelectorAll("input, textarea, select").forEach((e) => {
								e.setAttribute("disabled", true);
								e.classList.add("not_editable");
							});
						} else {
							hidEle.classList.remove("hidden");
							hidEle.querySelectorAll("input, textarea, select").forEach((e) => {
								e.removeAttribute("disabled");
								e.classList.remove("not_editable");
							});
						}
					};

					inputCtn.append(input, labelEl);
					col.append(inputCtn);
				}
			}
		});

		if (fileUpload.length != 0) {
			const div = document.createElement("div");
			div.setAttribute("class", "fileupload_contianer");
			div.append(...fileUpload);
			col.append(div);
		}

		if (documents) {
			const label = document.createElement("label");
			label.setAttribute("class", "other_documentclass");
			label.innerText = "Other Document";
			col.append(label);

			const fileDoc = document.createElement("div");
			fileDoc.setAttribute("class", "doc_selection_container");
			const labelplus = document.createElement("label");
			labelplus.setAttribute("class", "other_documentplus");
			labelplus.innerText = "+";

			// other_documentplus
			labelplus.onclick = function (e) {
				if (hasSomeParentTheClass(e.target, "doc_selection_container")) {
					const mainelement = hasSomeParentTheClass(
						e.target,
						"doc_selection_container"
					);
					if (mainelement) {
						const achivedEle = hasSomeSiblingTheClass(
							mainelement,
							"fileupload_contianer"
						);

						const selectperentNode = hasSomeSiblingTheClass(
							e.target,
							"inputCtn"
						);
						const selectchildNode = hasSomeChildNode(
							selectperentNode,
							"SELECT"
						);
						const myValue = selectchildNode.value;
						const fileCtn = document.createElement("div");

						const label = document.createElement("label");
						label.innerText = myValue;

						fileCtn.classList.add("file-upload", `${myValue.replaceAll(" ", "").toLowerCase()}`);

						let mainUploadContainer = document.createElement("div");
						mainUploadContainer.setAttribute("class", "mainUpload_container");

						const input = document.createElement("input");
						const myid = `${name}_${type}_${myValue
							.replaceAll(" ", "")
							.toLowerCase()}`;
						input.setAttribute("type", "file");
						input.setAttribute("required", true);
						input.setAttribute("id", myid);
						input.setAttribute("name", myid);

						input.onclick = (ev) => {
							ev.target.value = null;
						};

						input.addEventListener("change", async (ev) => {

							try {
								if (ev.target.nextElementSibling) {
									ev.target.nextElementSibling.remove();
								}

								let myFileURL = '';
								let imageBlob = '';
								// Check if current document is pdf
								if (ev.target.files[0].type == 'application/pdf') {
									try {
										myFileURL = await pdfToImage(ev.target.files[0])
										imageBlob = await pdfToImageBlob(ev.target.files[0]);

									} catch (error) {
										console.error('Error converting PDF to image:', error);
									}
								} else {
									myFileURL = URL.createObjectURL(ev.target.files[0]);
								}

								let previweContainet = document.createElement("div");
								previweContainet.setAttribute("class", "preview_actionbutton");
								const linknav = document.createElement("a");
								var imgaddhar = document.createElement("img");
								linknav.setAttribute("href", myFileURL);
								imgaddhar.setAttribute("height", 50);
								imgaddhar.setAttribute("class", "upload_image_preview");
								imgaddhar.src = myFileURL;
								linknav.setAttribute("target", "_blank");
								linknav.append(imgaddhar);
								previweContainet.append(linknav);

								if (myFileURL) {
									const removeEle = document.createElement("div");
									removeEle.classList.add("remove_preview_ele");
									const newSuff = document.createElement("button");
									newSuff.innerHTML = "X";
									removeEle.appendChild(newSuff);


									removeEle.onclick = function (e) {
										const selfEle = e.target;
										const targetEle = hasSomeParentTheClass(
											selfEle,
											"preview_actionbutton"
										);
										imageUploading = imageUploading.filter(x => x != targetEle.parentNode.children[0].id);
										targetEle.remove();
										input.value = null;
									};
									previweContainet.append(removeEle);
								}

								mainUploadContainer.append(previweContainet);

								compressImage(myFileURL, ev, imageBlob)
									.then((res) => {
										// storeDocuement(myid, res);
										const formData = new FormData();
										if (ev.target.files[0].type == 'application/pdf') {
											formData.append("upd", ev.target.files[0]);
										}
										else {

											let file;
											if ((ev.target.files[0].size / 1024) < 500) {
												file = ev.target.files[0];
											}
											else {
												let type = ev.target.files[0].type.split('/')[1];
												file = new File([res], `name.${type}`, {
													type: res.type
												});
											}

											formData.append("upd", file);
										}
										const curretValidData = getApplicantData(name);

										let smLoader = createLoader();
										previweContainet.append(smLoader);
										imageUploading.push(myid);

										const showFailureFun = () => {
											let modal = document.querySelector(".myverModal");
											modal.classList.toggle("show-modal");
											previweContainet.append(verifyfailsicon());

											document.querySelector(
												"#myPopup .doc_reuploadBtn"
											).onclick = function () {
												const curEle = document.getElementById(myid);
												const targetEle = hasSomeNextSiblingTheClass(
													curEle,
													"preview_actionbutton"
												);
												curEle.value = null;
												if (targetEle) {
													targetEle.remove();
												}
												modal.classList.toggle("show-modal");
											};

											document.querySelector(
												"#myPopup .ignorePr_Btn"
											).onclick = function () {
												const myigId = myid + "_ignore";
												ignoreDoc = ignoreDoc.filter((ig) => {
													return ig.name != myigId;
												});
												ignoreDoc.push({ name: myigId, value: '' });
												modal.classList.toggle("show-modal");
											};
										}

										verifyDocNew(myid, formData, name)
											.then((res) => {

												StoreDocumentName(myid, res.value.file_name);
												smLoader.innerHTML = '';
												imageUploading = imageUploading.filter(x => x != myid);
												let modal = document.querySelector(".myverModal");
												if (res && res.verified) {

													previweContainet.append(verifiedicon());
													const myigId = myid + "_ignore";
													ignoreDoc = ignoreDoc.filter((ig) => {
														return ig.name != myigId;
													});

												} else {
													showFailureFun();
												}

											})
											.catch((err) => {
												StoreDocumentName(myid, err.value.file_name);
												smLoader.innerHTML = '';
												imageUploading = imageUploading.filter(x => x != myid);
												showFailureFun();

											});
									})
									.catch(() => {
										previweContainet.append(verifyfailsicon());

									});
							} catch (error) {
								console.log({ error });

							}
						});

						let minuplaod = document.createElement("span");
						minuplaod.setAttribute("class", "minus_uploadcontainer");
						minuplaod.innerHTML = "-";

						minuplaod.onclick = function (e) {
							const deltgele = hasSomeParentTheClass(e.target, "file-upload");
							deltgele.remove();
						};

						mainUploadContainer.append(input);
						fileCtn.append(label, mainUploadContainer, minuplaod);
						achivedEle.append(fileCtn);
					}
				}
			};

			if (!documents.disabled) {
				const { id, key, validate, defaultValue, disabled, editable, values } =
					documents;

				const inputCtn = document.createElement("div");
				inputCtn.classList.add("inputCtn");
				const input = document.createElement("select");
				input.setAttribute("id", id);
				input.setAttribute("name", key);

				const labelEl = document.createElement("label");
				labelEl.setAttribute("for", id);
				inputCtn.append(labelEl);

				for (const optionVal of values) {
					const option = document.createElement("option");
					option.setAttribute("value", optionVal.value);
					option.innerText = optionVal.label;
					input.append(option);
				}

				if (validate) {
					for (const key of Object.keys(validate)) {
						input.setAttribute(key, validate[key]);
					}
				}

				if (editable === "No") {
					input.setAttribute("disabled", true);
				}

				if (disabled) {
					input.setAttribute("disabled", disabled);
					inputCtn.classList.add("hidden");
				}

				inputCtn.append(input);
				fileDoc.append(inputCtn);
			}

			fileDoc.append(labelplus);
			col.append(label, fileDoc);
		}
	}
	return col;
}

function dataURLtoFile(dataurl, filename) {
	var arr = dataurl.split(','),
		mime = arr[0].match(/:(.*?);/)[1],
		bstr = atob(arr[arr.length - 1]),
		n = bstr.length,
		u8arr = new Uint8Array(n);
	while (n--) {
		u8arr[n] = bstr.charCodeAt(n);
	}
	return new File([u8arr], filename, { type: mime });
}

function createLoader() {

	let smLoaderWrapper = document.createElement('div');
	smLoaderWrapper.classList.add('sm-loader-wrapper');
	let smLoader = document.createElement('div');
	smLoader.classList.add('sm-loader');
	let smLoaderText = document.createElement('div');
	smLoaderText.classList.add('sm-loader-text');
	smLoaderText.innerText = 'Uploading...';
	smLoaderWrapper.appendChild(smLoader);
	smLoaderWrapper.appendChild(smLoaderText);

	return smLoaderWrapper;
}

function createList(section) {
	const { list, id } = section;
	const ol = document.createElement("ol");

	if (id) {
		ol.setAttribute("id", id);
	}

	for (const item of list) {
		const li = document.createElement("li");
		li.classList.add("input-group");

		item.forEach((i) => {
			li.append(createInputEl(i));
		});

		ol.append(li);
	}

	return ol;
}

function createInputElBooking(schema, count) {
	const { label, type, id, key, validate, defaultValue, disabled, editable } =
		schema;

	if (disabled) {
		return null;
	} else {

		const inputCtn = document.createElement("div");
		inputCtn.classList.add("inputCtn");


		if (schema.class) {
			inputCtn.classList.add(schema.class);
		}

		if (type == "number") {
			const input = document.createElement("input");
			input.setAttribute("id", id);
			input.setAttribute("name", key);
			input.setAttribute("type", type);
			input.setAttribute("class", count);
			input.setAttribute("placeholder", label);


			const labelEl = document.createElement("label");
			labelEl.innerText = label;
			labelEl.setAttribute("for", id);
			inputCtn.append(labelEl);

			if (validate) {
				for (const key of Object.keys(validate)) {
					input.setAttribute(key, validate[key]);
				}
			}
			if (defaultValue) {
				input.setAttribute("value", defaultValue);
			}

			if (disabled) {
				input.setAttribute("disabled", disabled);
				inputCtn.classList.add("hidden");
			}

			if (editable === "No") {
				input.setAttribute("disabled", true);
				input.classList.add("not_editable");
			}

			if (schema.appearance) {
				const appearance = schema.appearance;
				const presufEle = document.createElement("div");
				presufEle.setAttribute("class", "presufcontainer");

				if (appearance["prefixAdorner"]) {
					const inputpref = document.createElement("span");
					inputpref.setAttribute("class", "inputprefix");
					inputpref.innerHTML = appearance["prefixAdorner"];
					presufEle.append(inputpref);
				}
				presufEle.append(input);
				if (appearance["suffixAdorner"]) {
					const inputsuff = document.createElement("span");
					inputsuff.setAttribute("class", "inputsuffix");
					inputsuff.innerHTML = appearance["suffixAdorner"];
					presufEle.append(inputsuff);
				}

				inputCtn.append(presufEle);
			} else {
				inputCtn.append(input);
			}
		} else if (type == "textfield") {
			const input = document.createElement("input");
			input.setAttribute("id", `${id}-${count}`);
			input.setAttribute("name", key);
			input.setAttribute("type", type == "textfield" ? "text" : type);
			input.setAttribute("class", `bank-amount-${count}`);
			input.setAttribute("placeholder", label);

			const labelEl = document.createElement("label");
			labelEl.innerText = label;
			labelEl.setAttribute("for", id);
			inputCtn.append(labelEl);

			if (validate) {
				for (const key of Object.keys(validate)) {
					input.setAttribute(key, validate[key]);
				}
			}

			if (defaultValue) {
				input.setAttribute("value", defaultValue);
			}

			if (disabled) {
				input.setAttribute("disabled", disabled);
				inputCtn.classList.add("hidden");
			}
			if (editable === "No") {
				input.setAttribute("disabled", true);
				input.classList.add("not_editable");
			}

			if (schema.appearance) {
				const appearance = schema.appearance;
				const presufEle = document.createElement("div");
				presufEle.setAttribute("class", "presufcontainer");

				if (appearance["prefixAdorner"]) {
					const inputpref = document.createElement("span");
					inputpref.setAttribute("class", "inputprefix");
					inputpref.innerHTML = appearance["prefixAdorner"];
					presufEle.append(inputpref);
				}
				presufEle.append(input);
				if (appearance["suffixAdorner"]) {
					const inputsuff = document.createElement("span");
					inputsuff.setAttribute("class", "inputsuffix");
					inputsuff.innerHTML = appearance["suffixAdorner"];
					presufEle.append(inputsuff);
				}

				inputCtn.append(presufEle);
			} else {
				inputCtn.append(input);
			}

		} else if (type == "date" || type == "datetime") {
			const input = document.createElement("input");
			input.setAttribute("id", `${id}-${count}`);
			input.setAttribute("name", key);
			input.setAttribute("type", schema.subtype || "date");
			input.setAttribute("class", `amount-data-${count}`);
			input.setAttribute("placeholder", label);

			const labelEl = document.createElement("label");
			labelEl.innerText = schema.label || "";
			labelEl.setAttribute("for", id);

			const today = new Date();
			const todayDate =
				today.getFullYear() +
				"-" +
				("0" + (today.getMonth() + 1)).slice(-2) +
				"-" +
				("0" + today.getDate()).slice(-2);

			if (schema.isnull == undefined || schema.isnull == false) {
				if (defaultValue) {
					input.defaultValue = defaultValue;
				} else {
					input.defaultValue = todayDate;
				}
			}

			if (validate) {
				for (const key of Object.keys(validate)) {
					input.setAttribute(key, validate[key]);
				}
			}

			if (editable === "No") {
				input.setAttribute("disabled", true);
				input.classList.add("not_editable");
			}

			if (disabled) {
				input.setAttribute("disabled", !disabled);
				inputCtn.classList.add("hidden");
			}

			inputCtn.append(labelEl, input);



		} else if (type == "text") {
			inputCtn.classList.add("form-text", "pl-0");
			const div = document.createElement("label");
			div.innerText = schema.text || "";
			div.classList.add("w-100", "text-title");
			if (id) {
				div.setAttribute("id", id);
			}
			inputCtn.append(div);


		}

		return inputCtn;
	}
}

function createInputEl(schema) {
	const { label, type, id, key, validate, defaultValue, disabled, editable } =
		schema;

	if (disabled) {
		return null;
	} else {
		if (type === "list") {
			return createList(schema);
		}

		const inputCtn = document.createElement("div");
		inputCtn.classList.add("inputCtn");

		if (type === "checkbox") {
			inputCtn.classList.add("fitcontent_check");
		}

		if (schema.class) {
			inputCtn.classList.add(schema.class);
		}

		// if (type == "textarea") {
		//   inputCtn.classList.add("w-100");
		// }

		if (type == "number") {
			const input = document.createElement("input");
			input.setAttribute("id", id);
			input.setAttribute("name", key);
			input.setAttribute("type", type);

			const labelEl = document.createElement("label");
			labelEl.innerText = label;
			labelEl.setAttribute("for", id);
			inputCtn.append(labelEl);

			if (validate) {
				for (const key of Object.keys(validate)) {
					input.setAttribute(key, validate[key]);
				}
			}
			if (defaultValue) {
				input.setAttribute("value", defaultValue);
			}

			if (disabled) {
				input.setAttribute("disabled", disabled);
				inputCtn.classList.add("hidden");
			}

			if (editable === "No") {
				input.setAttribute("disabled", true);
				input.classList.add("not_editable");
			}

			if (schema.appearance) {
				const appearance = schema.appearance;
				const presufEle = document.createElement("div");
				presufEle.setAttribute("class", "presufcontainer");

				if (appearance["prefixAdorner"]) {
					const inputpref = document.createElement("span");
					inputpref.setAttribute("class", "inputprefix");
					inputpref.innerHTML = appearance["prefixAdorner"];
					presufEle.append(inputpref);
				}
				presufEle.append(input);
				if (appearance["suffixAdorner"]) {
					const inputsuff = document.createElement("span");
					inputsuff.setAttribute("class", "inputsuffix");
					inputsuff.innerHTML = appearance["suffixAdorner"];
					presufEle.append(inputsuff);
				}

				inputCtn.append(presufEle);
			} else {
				inputCtn.append(input);
			}
		} else if (type == "textfield") {
			const input = document.createElement("input");
			input.setAttribute("id", id);
			input.setAttribute("name", key);
			input.setAttribute("type", type == "textfield" ? "text" : type);

			const labelEl = document.createElement("label");
			labelEl.innerText = label;
			labelEl.setAttribute("for", id);
			inputCtn.append(labelEl);

			if (validate) {
				for (const key of Object.keys(validate)) {
					input.setAttribute(key, validate[key]);
				}
			}

			if (defaultValue) {
				input.setAttribute("value", defaultValue);
			}

			if (disabled) {
				input.setAttribute("disabled", disabled);
				inputCtn.classList.add("hidden");
			}
			if (editable === "No") {
				input.setAttribute("disabled", true);
				input.classList.add("not_editable");
			}

			if (schema.appearance) {
				const appearance = schema.appearance;
				const presufEle = document.createElement("div");
				presufEle.setAttribute("class", "presufcontainer");

				if (appearance["prefixAdorner"]) {
					const inputpref = document.createElement("span");
					inputpref.setAttribute("class", "inputprefix");
					inputpref.innerHTML = appearance["prefixAdorner"];
					presufEle.append(inputpref);
				}
				presufEle.append(input);
				if (appearance["suffixAdorner"]) {
					const inputsuff = document.createElement("span");
					inputsuff.setAttribute("class", "inputsuffix");
					inputsuff.innerHTML = appearance["suffixAdorner"];
					presufEle.append(inputsuff);
				}

				inputCtn.append(presufEle);
			} else {
				inputCtn.append(input);
			}
		} else if (type == "textarea") {
			const input = document.createElement("textarea");
			input.setAttribute("id", id);
			input.setAttribute("name", key);
			input.setAttribute("type", type);

			const labelEl = document.createElement("label");
			labelEl.innerText = label;
			labelEl.setAttribute("for", id);
			inputCtn.append(labelEl);

			if (defaultValue) {
				input.innerText = defaultValue;
			}

			if (validate) {
				for (const key of Object.keys(validate)) {
					input.setAttribute(key, validate[key]);
				}
			}

			if (editable === "No") {
				input.setAttribute("disabled", true);
				input.classList.add("not_editable");
			}

			if (disabled) {
				input.setAttribute("disabled", !disabled);
				inputCtn.classList.add("hidden");
			}
			inputCtn.append(input);
		} else if (type == "date" || type == "datetime") {
			const input = document.createElement("input");
			input.setAttribute("id", id);
			input.setAttribute("name", key);
			input.setAttribute("type", schema.subtype || "date");

			const labelEl = document.createElement("label");
			labelEl.innerText = schema.label || "";
			labelEl.setAttribute("for", id);

			const today = new Date();
			const todayDate =
				today.getFullYear() +
				"-" +
				("0" + (today.getMonth() + 1)).slice(-2) +
				"-" +
				("0" + today.getDate()).slice(-2);

			if (schema.isnull == undefined || schema.isnull == false) {
				if (defaultValue) {
					input.defaultValue = defaultValue;
				} else {
					input.defaultValue = todayDate;
				}
			}

			if (validate) {
				for (const key of Object.keys(validate)) {
					input.setAttribute(key, validate[key]);
				}
			}

			if (editable === "No") {
				input.setAttribute("disabled", true);
				input.classList.add("not_editable");
			}

			if (disabled) {
				input.setAttribute("disabled", !disabled);
				inputCtn.classList.add("hidden");
			}

			inputCtn.append(labelEl, input);
		} else if (type == "checkbox") {
			const input = document.createElement("input");
			input.setAttribute("id", id);
			input.setAttribute("name", key);
			input.setAttribute("type", type);

			const labelEl = document.createElement("label");
			labelEl.innerText = label;
			labelEl.setAttribute("for", id);

			if (defaultValue) {
				input.setAttribute("checked", defaultValue);
			}

			if (editable === "No") {
				input.setAttribute("disabled", true);
				input.classList.add("not_editable");
			}

			if (disabled) {
				input.setAttribute("disabled", disabled);
				inputCtn.classList.add("hidden");
			}

			inputCtn.append(input, labelEl);
		} else if (type == "select") {
			const input = document.createElement("select");
			input.setAttribute("id", id);
			input.setAttribute("name", key);
			const labelEl = document.createElement("label");
			labelEl.setAttribute("for", id);
			labelEl.innerHTML = schema.label
			inputCtn.append(labelEl);

			const defaultOption = document.createElement("option");
			defaultOption.setAttribute("value", "");
			defaultOption.toggleAttribute("disabled", true);
			defaultOption.toggleAttribute("selected", true);
			defaultOption.classList.add("select-label-option");
			defaultOption.innerText = label;

			input.append(defaultOption);

			for (const optionVal of schema.values) {
				const option = document.createElement("option");
				option.setAttribute("value", optionVal.value);
				option.innerText = optionVal.label;
				input.append(option);
			}

			if (validate) {
				for (const key of Object.keys(validate)) {
					input.setAttribute(key, validate[key]);
				}
			}

			if (defaultValue) {
				input.value = defaultValue;
			}

			if (editable === "No") {
				input.setAttribute("disabled", true);
				input.classList.add("not_editable");
			}

			if (disabled) {
				input.setAttribute("disabled", disabled);
				inputCtn.classList.add("hidden");
			}

			inputCtn.append(input);
		} else if (type == "radio") {
			if (label) {
				const labelEl = document.createElement("label");
				labelEl.innerText = label;
				inputCtn.append(labelEl);
			}

			inputCtn.setAttribute("id", id);
			inputCtn.classList.add("checkbox-ctn");

			const row = document.createElement("div");
			row.classList.add("checkbox-row");
			inputCtn.append(row);

			if (schema.values.length > 3) {
				inputCtn.classList.add("greate_checkbox");
			}

			for (const option of schema.values) {
				const innerLabelEl = document.createElement("label");
				const span = document.createElement("span");
				span.innerText = option.label;
				innerLabelEl.append(span);

				const input = document.createElement("input");
				input.setAttribute("disabled", true);
				input.setAttribute("name", key);
				input.setAttribute("type", type);
				if (option.id) {
					input.setAttribute("id", option.id);
					input.setAttribute("class", option.id);
				}
				input.setAttribute("value", option.value);

				if (validate) {
					for (const key of Object.keys(validate)) {
						input.setAttribute(key, validate[key]);
					}
				}

				if (defaultValue === option.value) {
					input.checked = true;
				}

				if (editable === "No") {
					input.setAttribute("disabled", true);
					input.classList.add("not_editable");
				}

				if (disabled) {
					input.setAttribute("disabled", disabled);
					inputCtn.classList.add("hidden");
				}

				innerLabelEl.append(input);
				row.append(innerLabelEl);
			}
		} else if (type == "image") {
			const input = document.createElement("img");

			input.setAttribute("id", id);
			input.setAttribute("src", schema.source ? schema.source : "#");
			input.setAttribute("alt", schema.alt ? schema.alt : "#");

			return input;
		} else if (type == "checklist") {
			const inputcheck = document.createElement("div");
			inputcheck.setAttribute("class", "input_checklist");
			if (label) {
				const labelEl = document.createElement("label");
				labelEl.innerText = label;
				inputcheck.append(labelEl);
			}

			inputCtn.setAttribute("id", id);
			inputCtn.classList.add("checkbox-ctn");

			const column = document.createElement("div");
			column.classList.add("checkbox-column");

			for (const option of schema.values) {
				const row = document.createElement("div");
				row.classList.add("checkbox-raw");

				const innerLabelEl = document.createElement("label");
				const span = document.createElement("span");
				span.innerText = option.label;
				innerLabelEl.append(span);

				const input = document.createElement("input");
				input.setAttribute("type", "checkbox");
				input.setAttribute("name", option.label);
				input.setAttribute("value", option.value);

				if (editable === "No") {
					input.setAttribute("disabled", true);
					input.classList.add("not_editable");
				}

				if (disabled) {
					input.setAttribute("disabled", disabled);
					inputCtn.classList.add("hidden");
				}

				if (defaultValue === option.value) {
					input.checked = true;
				}
				row.append(input, innerLabelEl);
				column.appendChild(row);
			}

			inputcheck.appendChild(column);
			inputCtn.appendChild(inputcheck);
		} else if (type == "text") {

			inputCtn.classList.add("form-text", "pl-0");
			const div = document.createElement("label");
			div.innerText = schema.text || "";
			div.classList.add("w-100", "text-title");
			if (id) {
				div.setAttribute("id", id);
			}
			inputCtn.append(div);



		} else if (type == "signature") {
			const div = document.createElement("div");

			div.classList.add("flex-col", "mt-20", "w-100");

			let required = false;
			if (validate && validate.required) required = true;

			div.innerHTML = `
      <div>
      <label>Signature :</label>
      <div class="mt-10">
        <!-- name for this wasn't provided in the schema json -->
        <button for="clear-sign" control="${id}">x</button>
        <canvas for="sign" ${required ? "required" : ""
				} name="${key}" id="${id}"></canvas>
      </div>
      </div>`;

			return div;
		}

		if (schema.other && schema.other["type"] == "checkbox") {
			const innerDiv = document.createElement("div");
			innerDiv.classList.add("inner_inputctn");
			const inputinner = document.createElement("input");
			inputinner.setAttribute("type", schema.other["type"]);
			inputinner.setAttribute("id", `${id}_inner`);
			inputinner.setAttribute("data-ref", id);

			inputinner.onchange = function (e) {
				const newRefEle = document.getElementById(schema.other["for"]);
				if (newRefEle) {
					const telEle = hasSomeParentTheClass(newRefEle, "pancard_check");
					const targetEle = hasSomeNextSiblingTheClass(
						telEle,
						"fileupload_contianer"
					);
					const hidEle = targetEle.querySelector(".file-upload");

					if (e.target.checked) {
						document.getElementById(id).setAttribute("disabled", true);
						newRefEle.checked = true;
						hidEle.classList.add("hidden");
						hidEle.querySelectorAll("input, textarea, select").forEach((e) => {
							e.setAttribute("disabled", true);
							e.classList.add("not_editable");
						});
					} else {
						document.getElementById(id).removeAttribute("disabled");
						newRefEle.checked = false;
						hidEle.classList.remove("hidden", "not_editable");
						hidEle.querySelectorAll("input, textarea, select").forEach((e) => {
							e.removeAttribute("disabled");
							e.classList.remove("not_editable");
						});
					}
				}
			};

			const labelElinner = document.createElement("label");
			labelElinner.innerText = schema.other["label"];
			labelElinner.setAttribute("for", `${id}_inner`);
			innerDiv.append(labelElinner, inputinner);
			inputCtn.append(innerDiv);
			inputCtn.classList.add("relatine_ctn");
		}

		return inputCtn;
	}
}

function createDateSignFooter(id) {
	const today = new Date();
	const todayDate =
		today.getFullYear() +
		"-" +
		("0" + (today.getMonth() + 1)).slice(-2) +
		"-" +
		("0" + today.getDate()).slice(-2);

	const ctn = document.createElement("div");
	ctn.classList.add("date-sign-footer");

	ctn.innerHTML = `
  <div class="inputCtn">
    <label for="">Date :</label>
    <input disabled type="date" required value='${todayDate}' />
  </div>

  <div class="flex-col mt-20">
    <label for="${id}">Signature of Applicant's :</label>
    <div class="mt-10">
      <button for="clear-sign" control="${id}">x</button>
      <canvas
        required
        for="sign"
        name="${id}"
        id="${id}"
      ></canvas>
    </div>
  </div>`;

	return ctn;
}

function createInputGrp(form) {
	const inputGrp = document.createElement("div");
	inputGrp.classList.add("input-group");

	for (const formEl of form) {
		const inputEl = createInputEl(formEl);
		if (inputEl) inputGrp.appendChild(inputEl);
	}
	return inputGrp;
}

function renderSection(section) {

	const container = document.createDocumentFragment();

	const { heading, innerHTML } = section;
	//const dateSignFooter = section["date-signature-footer"];
	const subSections = section["sub-sections"];

	const headingEL = document.createElement("h2");
	headingEL.innerText = heading;
	if (heading) container.appendChild(headingEL);

	if (innerHTML) {
		const temp = document.createElement("div");
		temp.innerHTML = innerHTML;
		container.append(temp);
	}

	if (subSections)
		for (const subSection of subSections) {
			const subHeading = subSection["sub-heading"];
			if (subHeading != 'Booking Amount Details:') {

				const ctnLocal = document.createElement("div");
				if (subSection.id) ctnLocal.setAttribute("id", subSection.id);

				const subHeadingEl = document.createElement("h3");
				subHeadingEl.innerText = subHeading;
				ctnLocal.appendChild(subHeadingEl);
				if (subSection.class) subHeadingEl.classList.add(subSection.class);

				const form = subSection["form"];

				if (form) {
					const inputGrp = createInputGrp(form);
					inputGrp.setAttribute("class", "applicant_inputgroup");
					if (inputGrp) ctnLocal.appendChild(inputGrp);
				}

				const list = subSection["list"];
				if (list) {
					const ol = document.createElement("ol");
					for (const item of list) {
						const li = document.createElement("li");
						li.innerHTML = item;
						ol.append(li);
					}

					ctnLocal.appendChild(ol);
				}

				const fileUploads = subSection["file-upload"];
				if (fileUploads && fileUploads.length !== 0) {
					const h4 = document.createElement("h4");
					h4.innerText = "KYC upload";
					const ctn = document.createElement("div");
					ctn.classList.add("mb-50");
					h4.classList.add("kyc-upload");

					for (const file of fileUploads) {
						const fileCtn = document.createElement("div");
						fileCtn.classList.add("file-upload");

						const label = document.createElement("label");
						label.innerText = file.file;

						const input = document.createElement("input");
						input.setAttribute("type", "file");
						input.setAttribute("name", file.key);

						fileCtn.append(label, input);

						ctn.append(fileCtn);
					}

					const layer = document.createElement("div");
					layer.append(h4, ctn);
					ctnLocal.append(layer);
				}

				container.append(ctnLocal);
			}
		}

	const form = section["form"];
	if (form) {
		const inputGrp = createInputGrp(form);
		container.appendChild(inputGrp);
	}

	if (section.heading === "Application Details") {
		var headAddApplicantBtn = document.createElement("div");
		headAddApplicantBtn.setAttribute("class", "add_applicant_contianer");
		var button = document.createElement("a");
		var text = document.createTextNode("ADD APPLICANT");
		button.appendChild(text);
		button.setAttribute("class", "add_applicant_button hidden");
		button.setAttribute("id", "add_applicant_action");
		headAddApplicantBtn.appendChild(button);
		container.appendChild(headAddApplicantBtn);
	}

	let isConcent = true;
	const fir_pData = schema["first-page"];

	if (fir_pData) {
		const formData = fir_pData["consentform"];     // To be uncommented
		// const formData = true;     // To be commented

		if (!formData || formData === "false") {
			isConcent = false;
		}

	}

	//
	const validConsentAndQuot = () => {
		const checkboxes = [];
		if (document.getElementById('preview-btn')) {
			checkboxes.push(document.getElementById('consentCheck'));
		}
		if (document.getElementById('quotation-btn')) {
			checkboxes.push(document.getElementById('quot-consentCheck'));
		}
		return checkboxes.every(checkbox => checkbox.checked == true);
	}

	const enableSubmitButtons = () => {
		//previewButton.setAttribute("class", "green");
		document.getElementById("form-btn").removeAttribute("disabled");
		document.getElementById("sign-button").removeAttribute("disabled");
		//document.querySelector(".fa-check-circle").classList.remove("hidden");
		//previewfaIcon.classList.remove("hidden");
	}

	const disableSubmitButtons = () => {
		document.getElementById("form-btn").setAttribute("disabled", true);
		document.getElementById("sign-button").setAttribute("disabled", true);
	}
	// Add Quotation Preview Button
	if (section.quotaion && fir_pData['quotationpdf']) {
		const quotationButton = document.createElement("button");
		quotationButton.setAttribute("id", "quotation-btn");
		quotationButton.classList.add('hidden', 'btn-common');
		// previewButton.setAttribute("class", "hidden");
		quotationButton.setAttribute("type", "button");
		quotationButton.innerText = 'Preview Quotation';

		// var previewfaIcon = '<i class="fa fa-check-circle hidden" aria-hidden="true"></i>';

		const headAddApplicantpreview = document.createElement("div");
		headAddApplicantpreview.setAttribute("class", "applicatn_preview");
		headAddApplicantpreview.innerText = section.quotaion;
		container.appendChild(headAddApplicantpreview);
		container.appendChild(quotationButton);

		// For Quotation Form
		document.getElementById('quot-acceptConsent').addEventListener('click', function (event) {
			let checkbox = document.getElementById('quot-consentCheck');

			document.getElementById('quot-consentCheck').addEventListener('click', function (event) {
				if (event.target.checked) {
					document.getElementById('quot-acceptText').classList.remove('redAlert');
				}
				else {
					document.getElementById('quot-acceptText').classList.add('redAlert');
				}
			});
			if (checkbox.checked) {
				if (validConsentAndQuot()) {
					enableSubmitButtons();
				}
				document.getElementById('quot-acceptText').classList.remove('redAlert');
				document.getElementById('quot-consent-dialog').classList.add('hidden');
				document.getElementById('quotation-btn').classList.add('consent-verified');
			} else {
				disableSubmitButtons();
				document.getElementById('quot-acceptText').classList.add('redAlert');
				document.getElementById('quotation-btn').classList.remove('consent-verified');
			}
		});

	}
	if (section.preview && isConcent) {
		const previewButton = document.createElement("button");
		previewButton.setAttribute("id", "preview-btn");
		// previewButton.setAttribute("class", "hidden");
		previewButton.setAttribute("type", "button");
		previewButton.innerText = 'Preview Consent';

		const previewfaIcon = document.createElement("i");
		previewfaIcon.setAttribute("id", "preview-btn-icon");
		previewfaIcon.setAttribute("class", "fa fa-check-circle hidden");
		previewfaIcon.setAttribute("aria-hidden", true);

		// var previewfaIcon = '<i class="fa fa-check-circle hidden" aria-hidden="true"></i>';

		var headAddApplicantpreview = document.createElement("div");
		headAddApplicantpreview.setAttribute("class", "applicatn_preview");
		headAddApplicantpreview.innerText = section.preview;
		container.appendChild(headAddApplicantpreview);
		container.appendChild(previewButton);
		container.appendChild(previewfaIcon);


		previewButton.onclick = function (e) {

			// document.getElementById('loader').classList.remove('hideLoader');

			e.preventDefault();
			document.getElementById('consent-dialog').classList.remove('hideConsent');
			document.getElementById('dialog-content').innerHTML = fillAloteesData();
			// fillpdfContent(true).then(res => {
			// 	document.getElementById('loader').classList.add('hideLoader');
			// }).catch(err => {
			// 	document.getElementById('loader').classList.add('hideLoader');
			// })

		}

		// Valid consent and quotation form


		// For Consent Form
		document.getElementById('acceptConsent').addEventListener('click', function (event) {
			let checkbox = document.getElementById('consentCheck');

			document.getElementById('consentCheck').addEventListener('click', function (event) {
				if (event.target.checked) {
					document.getElementById('acceptText').classList.remove('redAlert');
				}
				else {
					document.getElementById('acceptText').classList.add('redAlert');
				}
			});


			if (checkbox.checked) {
				if (validConsentAndQuot()) {
					enableSubmitButtons();
				}
				// Enable button
				document.getElementById('acceptText').classList.remove('redAlert');
				document.getElementById('consent-dialog').classList.add('hideConsent');
				document.getElementById('preview-btn').classList.add('consent-verified');
			} else {
				disableSubmitButtons();
				document.getElementById('acceptText').classList.add('redAlert');
				document.getElementById('preview-btn').classList.remove('consent-verified');
			}
		});

	}



	return container;
}

// ak 
function fillAloteesData() {

	let isConcent = true;
	const fir_pData = schema["first-page"];

	let myquotationPDf = "";
	if (fir_pData) {
		const formData = fir_pData["consentform"];     // To be uncommented
		// const formData = true;     // To be commented

		if (!formData || formData === "false") {
			isConcent = false;
		}

	}
	const mypreviewDetails = createFunctionData();
	let allotees = mypreviewDetails.applicants;

	let names = '';
	let signLines = '';
	let count = 1;
	let countStr = '';
	const towerName = schema['first-page']['form'][1]['defaultValue']
	const unitNo = towerName + '-' + schema['first-page']['form'][2]['defaultValue'];
	let unitNoStr = '';

	for (let allotee of allotees) {
		names += `<p>${allotee.data.name}</p>`;
		unitNoStr += `<p>${unitNo}</p>`;
		signLines += `<p>${count}</p>`;
		countStr += `<p>${count}</p>`;
		count++;
	}
	if (!isConcent) {
		document.querySelector(".concent_mainsec").classList.add("hidden");
		return '';
	} else {
		try {
			document.getElementById('alloteeName').innerHTML = names;
			document.getElementById('alloteeSign').innerHTML = signLines;
			document.getElementById('flatNo').innerHTML = unitNoStr;
			document.getElementById('alloteeSrNo').innerHTML = countStr;
		} catch (error) {

		}
		//document.querySelector(".concent_mainsec").classList.remove("hidden");
		return document.querySelector('.concent_mainsec').innerHTML;
	}
}

function hasSomeParentTheClass(element, classname) {
	if (element.className.split(" ").indexOf(classname) >= 0) return element;
	return (
		element.parentNode && hasSomeParentTheClass(element.parentNode, classname)
	);
}

function hasSomeChildNode(element, classname) {
	const mychild = element.childNodes;
	if (mychild) {
		for (let i = 0; i < mychild.length; i++) {
			if (mychild[i].nodeName == classname) {
				return mychild[i];
			}
		}
	}
}

function hasSomeSiblingTheClass(element, classname) {
	if (element.className.split(" ").indexOf(classname) >= 0) return element;
	return (
		element.previousElementSibling &&
		hasSomeSiblingTheClass(element.previousElementSibling, classname)
	);
}

function hasSomeNextSiblingTheClass(element, classname) {
	if (element.className.split(" ").indexOf(classname) >= 0) return element;
	return (
		element.nextElementSibling &&
		hasSomeSiblingTheClass(element.nextElementSibling, classname)
	);
}

function renderallAboutSection(Section) {
	const container = document.createDocumentFragment();
	//const dateSignFooter = Section["date-signature-footer"];

	let subSection = Section["sub-sections"];
	subSection = subSection[subSection.length - 1];
	const subHeading = subSection["sub-heading"];

	const ctnLocal = document.createElement("div");
	if (subSection.id) ctnLocal.setAttribute("id", subSection.id);

	const subHeadingEl = document.createElement("h3");
	subHeadingEl.innerText = subHeading;
	ctnLocal.appendChild(subHeadingEl);
	if (subSection.class) subHeadingEl.classList.add(subSection.class);

	const form = subSection["form"];

	const inputGrp = createInputGrp(form);
	inputGrp.setAttribute("class", "applicant_inputgroup");
	if (inputGrp) ctnLocal.appendChild(inputGrp);

	const list = subSection["list"];
	if (list) {
		const ol = document.createElement("ol");
		for (const item of list) {
			const li = document.createElement("li");
			li.innerHTML = item;
			ol.append(li);
		}

		ctnLocal.appendChild(ol);
	}

	container.append(ctnLocal);

	// if (dateSignFooter) {
	//   let ft_id = "";
	//   if (subHeading) {
	//     ft_id = subHeading.toLowerCase().replaceAll(" ", "");
	//   } else {
	//     ft_id = "$" + new Date().getUTCMilliseconds() * Math.random();
	//   }
	//   container.append(createDateSignFooter(ft_id));
	// }

	return container;
}
let payment_source_check = 'cheque';
let paymentSourceCount = 0;
function renderbookingAmountSection(Section) {
	paymentSourceCount++;
	const container = document.createDocumentFragment();
	//const dateSignFooter = Section["date-signature-footer"];
	let subSection = Section["sub-sections"];
	subSection = subSection[subSection.length - 1];
	const subHeading = subSection["sub-heading"];

	const ctnLocalGlobal = document.createElement("div");
	ctnLocalGlobal.setAttribute("id", `global-row-${paymentSourceCount}`);

	const ctnLocal = document.createElement("div");
	ctnLocal.setAttribute("id", `header-row-${paymentSourceCount}`);
	if (subSection.id) ctnLocal.setAttribute("id", subSection.id);

	const subHeadingEl = document.createElement("h3");
	subHeadingEl.innerText = subHeading;
	ctnLocal.appendChild(subHeadingEl);
	if (subSection.class) subHeadingEl.classList.add(subSection.class);

	const form = subSection["form"];

	const inputGrp = document.createElement("div");
	inputGrp.classList.add("input-group");
	let payment_check_toggle = '';
	let payment_source_upload = ''
	let payment_source = '';
	let nextformEl = '';
	let payment_source_bank = '';
	for (const formEl of form) {
		if (formEl['type'] == 'checkbox') {
			payment_check_toggle = paymentEditCheck(formEl['label'], formEl['id'], subSection["form"], paymentSourceCount);
		} else if (formEl['type'] == 'file') {
			payment_source_upload = uploadPaymentSource(formEl['label'], formEl['id'], formEl, paymentSourceCount);
		} else if (formEl['type'] == 'select' && !formEl['isbank']) {
			nextformEl = formEl
			payment_source = addPayementSource(formEl['label'], formEl['id'], formEl, paymentSourceCount);
		}
		else if (formEl['type'] == 'select' && formEl['isbank']) {
			payment_source_bank = addBankSource(formEl['label'], formEl['id'], formEl, paymentSourceCount, formEl['key']);
		}
		else {
			const inputEl = createInputElBooking(formEl, paymentSourceCount);
			if (inputEl) {
				inputGrp.appendChild(inputEl);
			}
		}
	}
	// const inputGrp = createInputGrp(form);
	inputGrp.setAttribute("class", "applicant_inputgroup");
	// add edit toggle buttonif
	if (payment_check_toggle) ctnLocalGlobal.append(payment_check_toggle);

	if (payment_source_upload) inputGrp.insertBefore(payment_source_upload, inputGrp.firstChild);

	if (payment_source) inputGrp.insertBefore(payment_source, inputGrp.firstChild);

	if (inputGrp) ctnLocalGlobal.appendChild(inputGrp);

	if (payment_source_bank)
		ctnLocalGlobal.appendChild(payment_source_bank);

	ctnLocal.appendChild(ctnLocalGlobal)


	const list = subSection["list"];
	if (list) {
		const ol = document.createElement("ol");
		for (const item of list) {
			const li = document.createElement("li");
			li.innerHTML = item;
			ol.append(li);
		}

		ctnLocal.appendChild(ol);
	}

	const addAnother = document.createElement("div");
	addAnother.setAttribute("class", `add_another_text section_to_hide_${paymentSourceCount}`);
	addAnother.innerText = "Add another Payment Source";
	if (addAnother) ctnLocal.appendChild(addAnother);

	const payment_source2 = addPayementSource(nextformEl['label'], nextformEl['id'], nextformEl, paymentSourceCount);
	if (payment_source2) ctnLocal.appendChild(payment_source2);


	const fileDoc = document.createElement("div");
	fileDoc.setAttribute("class", "doc_selection_container");
	// ========= Add payment source + icon =======
	const labelplus = document.createElement("label");
	labelplus.setAttribute("class", `other_documentplus section_to_hide_${paymentSourceCount}`);
	labelplus.innerText = "+";
	labelplus.onclick = function (e) {
		paymentSourceCount++
		const test_d = testAdd(Section, paymentSourceCount);

		const labelminusdiv = document.createElement("div");
		labelminusdiv.setAttribute("class", "doc_selection_container_remove");
		const labelminus = document.createElement("label");
		labelminus.setAttribute("class", `other_documentminus`);
		labelminus.setAttribute("id", `remove_${paymentSourceCount}`);
		labelminus.setAttribute("data-id", `${paymentSourceCount}`);

		labelminus.innerText = "-";
		labelminus.onclick = function (e) {
			const headerSec = document.getElementById(`header-sec-${$(this).attr('data-id')}`);
			headerSec.remove();
		};
		labelminusdiv.append(labelminus)
		test_d.append(labelminusdiv)
		inputGrp.append(test_d);
	};
	if (labelplus) {
		fileDoc.append(labelplus);
		ctnLocal.appendChild(fileDoc)
	};

	// Ends here

	if (paymentSourceCount > 1) {
		const fileDocAgain = document.createElement("div");
		fileDocAgain.setAttribute("class", "doc_selection_container");

		const labelminus = document.createElement("label");
		labelminus.setAttribute("class", `other_documentplus`);
		labelminus.setAttribute("id", `remove_${paymentSourceCount}`);
		labelminus.innerText = "-";
		labelminus.onclick = function (e) {
			$(`#new_source_${parseInt($(this).attr('id').split('_')[1]) - 1}`).html('');
		};

		if (labelminus) {
			fileDocAgain.append(labelminus);
			ctnLocal.appendChild(fileDocAgain)
		};
	}

	container.append(ctnLocal);

	// if (dateSignFooter) {
	//   let ft_id = "";
	//   if (subHeading) {
	//     ft_id = subHeading.toLowerCase().replaceAll(" ", "");
	//   } else {
	//     ft_id = "$" + new Date().getUTCMilliseconds() * Math.random();
	//   }
	//   container.append(createDateSignFooter(ft_id));
	// }

	return container;
}

function testAdd(data, count) {
	let subSection = data["sub-sections"];
	subSection = subSection[subSection.length - 1];
	const subHeading = subSection["sub-heading"];

	const ctnLocalGlobal = document.createElement("div");
	ctnLocalGlobal.setAttribute("id", `global-row-${count}`);

	const ctnLocal = document.createElement("div");
	ctnLocal.setAttribute("id", `header-sec-${count}`);
	if (subSection.id) ctnLocal.setAttribute("id", subSection.id);

	const subHeadingEl = document.createElement("h3");
	subHeadingEl.innerText = subHeading;
	ctnLocal.appendChild(subHeadingEl);
	if (subSection.class) subHeadingEl.classList.add(subSection.class);

	const form = subSection["form"];

	const inputGrp = document.createElement("div");
	inputGrp.classList.add("input-group");
	let payment_check_toggle = '';
	let payment_source_upload = ''
	let payment_source = '';
	let nextformEl = '';
	for (const formEl of form) {
		if (formEl['type'] == 'checkbox') {
			payment_check_toggle = paymentEditCheck(formEl['label'], formEl['id'], subSection["form"], count);
		} else if (formEl['type'] == 'file') {
			payment_source_upload = uploadPaymentSource(formEl['label'], formEl['id'], formEl, count);
		} else if (formEl['type'] == 'select') {
			nextformEl = formEl
			payment_source = addPayementSource(formEl['label'], formEl['id'], formEl, count);
		} else {
			const inputEl = createInputElBooking(formEl, count);
			if (inputEl) {
				inputGrp.appendChild(inputEl);
			}
		}
	}
	// const inputGrp = createInputGrp(form);
	inputGrp.setAttribute("class", "applicant_inputgroup");
	// add edit toggle buttonif
	if (payment_check_toggle) ctnLocalGlobal.append(payment_check_toggle);

	if (payment_source_upload) inputGrp.insertBefore(payment_source_upload, inputGrp.firstChild);

	if (payment_source) inputGrp.insertBefore(payment_source, inputGrp.firstChild);

	if (inputGrp) ctnLocalGlobal.appendChild(inputGrp);

	ctnLocal.appendChild(ctnLocalGlobal)
	return ctnLocal;
}

function addBankSource(text, id, data, count, key) {
	const inputCtn = document.createElement("div");
	inputCtn.classList.add("inputCtn");

	const label = document.createElement("label");
	label.setAttribute("for", id);
	label.innerText = text;
	inputCtn.append(label);


	const select = document.createElement("select");
	const defaultva = '';
	// select.setAttribute("id", id + '_' + count);
	// select.setAttribute("name", id + '_' + count);
	select.setAttribute("id", `${id}-${count}`);
	select.setAttribute("name", key);
	select.setAttribute("placeholder", "Bank");
	for (const optionVal of data.values) {
		if (optionVal.value) {
			const option = document.createElement("option");
			option.setAttribute("value", optionVal.value);
			option.innerText = optionVal.label;
			if (defaultva) {
				if (defaultva === optionVal.value) {
					option.setAttribute("selected", true);
				}
			}
			select.append(option);
		}
	}
	select.onchange = function (e) {

		// payment_source_check = e.target.value
		// document
		// 	.querySelector(`.payment_fileupload_class_${count}`)
		// 	.classList.remove("hidden");
		// document
		// 	.querySelector(`.file-upload-lable-${count}`).innerText = payment_source_check  // by manoj

	}
	inputCtn.append(select);
	return inputCtn;
}

function addPayementSource(text, id, data, count) {
	const inputCtn = document.createElement("div");
	inputCtn.classList.add("inputCtn");

	const label = document.createElement("label");
	label.setAttribute("for", id);
	label.innerText = text;
	inputCtn.append(label);


	const select = document.createElement("select");
	const defaultva = 'cheque';
	select.setAttribute("id", id + '_' + count);
	select.setAttribute("name", id + '_' + count);
	for (const optionVal of data.values) {
		if (optionVal.value) {
			const option = document.createElement("option");
			option.setAttribute("value", optionVal.value);
			option.innerText = optionVal.label;
			if (defaultva) {
				if (defaultva === optionVal.value) {
					option.setAttribute("selected", true);
				}
			}
			select.append(option);
		}
	}
	select.onchange = function (e) {

		payment_source_check = e.target.value
		document
			.querySelector(`.payment_fileupload_class_${count}`)
			.classList.remove("hidden");
		document
			.querySelector(`.file-upload-lable-${count}`).innerText = payment_source_check  // by manoj


	}
	inputCtn.append(select);
	return inputCtn;
}
function uploadPaymentSource(text, id, data, count) {

	let fileUploadPayment = []
	const fctn = document.createElement("div");
	fctn.classList.add("file-upload", "bank-slip-upload", `payment_fileupload_class_${count}`);  // Removed hidden class // manoj

	const label = document.createElement("label");
	label.classList.add(`file-upload-lable-${count}`);
	// label.innerText = payment_source_check ? payment_source_check : 'cheque';  // commented by manoj
	label.innerText = 'cheque';  // can be uncommented by manoj
	payment_source_check = 'cheque';  // can be uncommented by manoj

	let mainUploadContainer = document.createElement("div");
	mainUploadContainer.setAttribute("class", "mainUpload_container_payment");

	const input = document.createElement("input");
	input.setAttribute("type", "file");
	// input.setAttribute("required", true);

	input.setAttribute("id", id);
	input.setAttribute("data-row", count);
	input.setAttribute("name", id);

	input.onclick = (ev) => {
		ev.target.value = null;
	};
	input.addEventListener("change", (ev) => {
		try {
			if (ev.target.nextElementSibling) {
				ev.target.nextElementSibling.remove();
			}

			const rowToUpdate = $(ev.target).data('row');
			console.log(rowToUpdate);
			console.log(ev.target);
			const myFileURL = URL.createObjectURL(ev.target.files[0]);
			let previweContainet = document.createElement("div");
			previweContainet.setAttribute("class", "preview_actionbutton");
			const linknav = document.createElement("a");
			var imgaddhar = document.createElement("img");
			linknav.setAttribute("href", myFileURL);
			imgaddhar.setAttribute("height", 50);
			imgaddhar.setAttribute("class", "upload_image_preview");
			imgaddhar.src = myFileURL;
			linknav.setAttribute("target", "_blank");
			linknav.append(imgaddhar);
			previweContainet.append(linknav);

			if (myFileURL) {
				const removeEle = document.createElement("div");
				removeEle.classList.add("remove_preview_ele");
				const newSuff = document.createElement("button");
				newSuff.innerHTML = "X";
				removeEle.appendChild(newSuff);

				removeEle.onclick = function (e) {
					const selfEle = e.target;
					const targetEle = hasSomeParentTheClass(
						selfEle,
						"preview_actionbutton"
					);
					targetEle.remove();
					input.value = null;
				};
				previweContainet.append(removeEle);
			}
			mainUploadContainer.append(previweContainet);
			// let smLoader = createLoader();
			// previweContainet.append(smLoader);

			compressImage(myFileURL, ev)
				.then((res) => {
					const formData = new FormData();
					// storeDocuementWithOutBase('back_check_post', res)
					storeDocuement(`back_check_post_${rowToUpdate}`, res)

					const current_payment_source = document.getElementById(`payment_source_${rowToUpdate}`).value;
					payment_source_check = current_payment_source;

					formData.append("file", res);
					verifyPaymentSource(payment_source_check, formData, rowToUpdate)
						.then((res) => {
							let modal = document.querySelector(".myverModal");
							if (res && res.verified) {
								previweContainet.append(verifiedicon());


								let file;
								if ((ev.target.files[0].size / 1024) < 500) {
									file = ev.target.files[0];
								}
								else {
									let type = ev.target.files[0].type.split('/')[1];
									file = new File([res], `name.${type}`, {
										type: res.type
									});
								}

								storeImageInDB(file, `payment_source_image_${rowToUpdate}`, payment_source_check)
									.then((resp) => resp.json())
									.then((resp) => {
										// StoreDocumentName(picker.id, res['file_name']);
										// smLoader.innerHTML = '';
										// imageUploading = imageUploading.filter(x => x != picker.id);

										if (!jsonData['paymentSources'].find(x => x.rowId == rowToUpdate)) {
											jsonData['paymentSources'].push({
												...res.value,
												'imageSrc': resp['file_name'],
												'rowId': rowToUpdate
											})
										}
										console.log(jsonData['paymentSources']);
									}).catch(err => {
										// smLoader.innerHTML = '';
										// imageUploading = imageUploading.filter(x => x != picker.id);
										alert(`Couldn't upload image`);
									});




								const myigId = payment_source_check + "_ignore";
								ignoreDoc = ignoreDoc.filter((ig) => {
									return ig.name != myigId;
								});
							} else {
								if (
									res &&
									(res.messages.length > 0 || res.value.length > 0)
								) {
									let displayText = "";
									if (res.messages.length > 0) {
										res.messages.forEach((myv) => {
											displayText = displayText + myv + "<br>";
										});
									}
									document.querySelector(
										"#myPopup .popup_warningtext"
									).innerHTML = displayText;

									document
										.querySelector("#myPopup .ignorePr_Btn")
										.classList.remove("hidden");

									document.querySelector(
										"#myPopup .ignorePr_Btn"
									).onclick = function () {
										const myigId = element.id + "_ignore";
										ignoreDoc = ignoreDoc.filter((ig) => {
											return ig.name != myigId;
										});
										ignoreDoc.push({ name: myigId, value: res.value });
										modal.classList.toggle("show-modal");
									};
								} else {
									document.querySelector(
										"#myPopup .popup_warningtext"
									).innerText = "Please upload proper Payment source.";

									document
										.querySelector("#myPopup .ignorePr_Btn")
										.classList.add("hidden");
								}
								modal.classList.toggle("show-modal");
								previweContainet.append(verifyfailsicon());
							}

							document.querySelector(
								"#myPopup .doc_reuploadBtn"
							).onclick = function () {
								const curEle = document.getElementById('payment_source_image');
								const targetEle = hasSomeNextSiblingTheClass(
									curEle,
									"preview_actionbutton"
								);
								curEle.value = null;
								if (targetEle) {
									targetEle.remove();
								}
								modal.classList.toggle("show-modal");
							};
						})
						.catch((error) => {
							console.log(error)
							previweContainet.append(verifyfailsicon());
						});
				})
				.catch((error) => {
					console.log(error)
					previweContainet.append(verifyfailsicon());
				});
		} catch (error) {
			console.log({ error });
		}
	});

	mainUploadContainer.append(input);
	fctn.append(label, mainUploadContainer);
	return fctn;
	fileUploadPayment.push(fctn);
}

function setDefaultCountry(countryName) {
	let currentApplicant = schema['applicant-details']['sub-sections'];

	// Set default value of country for all applicants
	for (let i = 0; i < currentApplicant.length - 1; i++) {
		currentApplicant[i]['form'][20].defaultValue = countryName;
	}

}
function renderIdentification(identificationcols) {
	const frmgrp1 = document.getElementById(`page-2`);

	const h2 = document.createElement("h2");
	h2.innerText = "Identification";

	const ICtn = document.createElement("div");
	ICtn.classList.add("identification-section");

	frmgrp1.append(h2);
	frmgrp1.append(ICtn);

	let count = identificationcols.length % 3;
	count =
		count > 0
			? (identificationcols.length - count) / 3 + 1
			: identificationcols.length / 3;

	for (let i = 0; i < count; i++) {
		const countLocal = document.createElement("div");
		// countLocal.setAttribute("id", `page4${i + 1}`);
		countLocal.setAttribute("id", `page2${i + 1}`);
		const innerCtlcal = document.createElement("div");
		// countLocal.classList.add("hidden");
		innerCtlcal.classList.add("myidentificationsec");
		for (let x = 0; x < 3; x++) {
			if (i * 3 + x < identificationcols.length) {
				innerCtlcal.appendChild(
					createIdentificationColumn(identificationcols[i * 3 + x])
				);
			}
		}


		countLocal.appendChild(innerCtlcal);
		const checkText = schema["first-page"]["other"];
		if (checkText) {
			countLocal.append(
				acknoledgeCheck(checkBoxTexts.page_two, `apptnc_aggre_4${i + 1}`)
			);
		}
		ICtn.append(countLocal);

		// Adding special checkbox to 2nd section of page 3 as suggested by Devna
		// The checkbox text can be found in the config.js file
		// You can also place this code at correct place where other checkboxes are added
		// I couldn't find the correct place to put it so placing here(It will work btw)

		const checkboxTxt = page3tnc.text;
		const page3LastSection = document.getElementById('page-3').lastChild;
		const checkboxCustomId = 'page3_last_custom_id';
		if (!document.getElementById(checkboxCustomId)) {
			const checkboxCont = acknoledgeCheck(checkboxTxt, checkboxCustomId);
			if (page3LastSection) {
				page3LastSection.appendChild(checkboxCont);
			}
		}

	}
	return frmgrp1;
}

function renderapplicantSection(section, count, perPage) {
	const applicant_det = schema["applicant-details"];
	//const dateSignFooter = applicant_det["date-signature-footer"];

	const heading = applicant_det["heading"];

	const headingEL = document.createElement("h2");
	headingEL.innerText = heading;

	const container = document.createDocumentFragment();
	container.append(headingEL);

	for (let i = 0; i < count; i++) {
		const countLocal = document.createElement("div");
		// countLocal.setAttribute("id", `page2${i + 1}`);
		countLocal.setAttribute("id", `page3${i + 1}`);
		// countLocal.classList.add("hidden");
		for (let x = 0; x < perPage; x++) {
			if (i * perPage + x < section.length) {
				const subHeading = section[i * perPage + x]["sub-heading"];
				const ctnLocal = document.createElement("div");
				if (section[i * perPage + x].id)
					ctnLocal.setAttribute("id", section[i * perPage + x].id);
				ctnLocal.classList.add("applicant_container");
				const subHeadingEl = document.createElement("h3");
				subHeadingEl.innerText = subHeading;
				ctnLocal.appendChild(subHeadingEl);
				if (section[i * perPage + x].class)
					subHeadingEl.classList.add(section[i * perPage + x].class);

				const form = section[i * perPage + x]["form"];

				const inputGrp = createInputGrp(form);
				inputGrp.setAttribute("class", "applicant_inputgroup");
				if (inputGrp) ctnLocal.appendChild(inputGrp);

				const list = section[i * perPage + x]["list"];
				if (list) {
					const ol = document.createElement("ol");
					for (const item of list) {
						const li = document.createElement("li");
						li.innerHTML = item;
						ol.append(li);
					}
					ctnLocal.appendChild(ol);
				}
				countLocal.appendChild(ctnLocal);
			}

		}
		const checkText = schema["first-page"]["other"];
		if (checkText) {
			countLocal.append(
				acknoledgeCheck(checkBoxTexts.common, `apptnc_aggre_2${i + 1}`)
			);
		}
		container.append(countLocal);
	}

	return container;
}

function updateAction(element) {
	element.querySelectorAll("input[numLength]").forEach((el) => {
		const numLength = el.getAttribute("numLength");
		el.setAttribute(
			"oninvalid",
			`this.setCustomValidity('Enter a ${numLength} digit number');`
		);
		el.setAttribute("oninput", "this.setCustomValidity('');");
		el.setAttribute("onvalid", "this.setCustomValidity('');");
		el.setAttribute("onchange", "this.setCustomValidity('');");

		el.setAttribute("min", "1" + "0".repeat(numLength - 1));
		el.setAttribute("max", "9".repeat(numLength));
	});

	element.querySelectorAll(".inputCtn").forEach((ctn) => {
		ctn.addEventListener("click", () => {
			ctn.querySelector("input,select, textarea").focus();
		});
		const label = ctn.querySelector("label");
		const input = ctn.querySelector(
			'input[type="text"],input[type="number"],input[type="email"],textarea'
		);

		// if (input && input.tagName === "TEXTAREA") {
		//   ctn.classList.add("w-100");
		// }

		if (label && input) {
			const type = input.getAttribute("type");
			if (type === "checkbox") {
				label.classList.add("flex");
			}

			if (
				ctn.querySelector(".inputprefix") != null ||
				ctn.querySelector(".inputsuffix") != null
			) {
			} else {
				input.setAttribute("placeholder", label.innerText);
				if (input.value === "") label.classList.add("hidden");

				input.addEventListener("focus", function () {
					input.removeAttribute("placeholder");
					label.classList.remove("hidden");
				});
				input.addEventListener("blur", function () {
					if (input.value == "") label.classList.add("hidden");
					input.setAttribute("placeholder", label.innerText);
				});
			}
		}
	});

	let pickers = element.querySelectorAll('input[role="photo-picker"]');
	if (pickers) {
		pickers.forEach((picker) => {
			const preview = document.getElementById(
				picker.getAttribute("preview-id")
			);
			picker.addEventListener("change", async function (ev) {

				// alert('upload photo');

				// Experimental code to reduce pdf size
				// const reader = new FileReader();
				// const file = e.target.files[0];
				// const myFileURL = URL.createObjectURL(e.target.files[0]);

				// compressImage(myFileURL).then((res) => {
				// 	reader.readAsDataURL(res);
				// 	storeDocuement(picker.id, res);

				// });

				// reader.onloadend = function(){
				// 	preview.src = reader.result;
				// }


				const reader = new FileReader();
				const file = ev.target.files[0];
				reader.onload = (e) => {
					preview.src = e.target.result;
				};

				let myFileURL = '';
				// Check if current document is pdf
				if (ev.target.files[0].type == 'application/pdf') {
					try {
						myFileURL = await pdfToImage(ev.target.files[0])

					} catch (error) {
						console.error('Error converting PDF to image:', error);
					}
				} else {
					myFileURL = URL.createObjectURL(ev.target.files[0]);
				}
				let smLoader = createLoader();
				preview.insertAdjacentElement('afterend', smLoader);
				imageUploading.push(picker.id);


				compressImage(myFileURL, ev)
					.then(resp => {

						let file;
						if ((ev.target.files[0].size / 1024) < 500) {
							file = ev.target.files[0];
						}
						else {
							let type = ev.target.files[0].type.split('/')[1];
							file = new File([resp], `name.${type}`, {
								type: resp.type
							});
						}

						storeImageInDB(file, picker.id, 'userImage')
							.then((res) => res.json())
							.then((res) => {
								StoreDocumentName(picker.id, res['file_name']);
								smLoader.innerHTML = '';
								imageUploading = imageUploading.filter(x => x != picker.id);
							}).catch(err => {
								smLoader.innerHTML = '';
								imageUploading = imageUploading.filter(x => x != picker.id);
								alert(`Couldn't upload image`);
							})
					})
					.catch(err => {
						smLoader.innerHTML = '';
						imageUploading = imageUploading.filter(x => x != picker.id);
						alert(`Couldn't upload image`);
					})


				// compressImage(myFileURL).then((res) => {
				// 	storeDocuement(picker.id, res);
				// });

				reader.readAsDataURL(file);

			});
		});
	}

	let signaturePads = {};
	element.querySelectorAll('canvas[for="sign"]').forEach((e) => {
		signaturePads[e.id] = new SignaturePad(e);
		e.width = 220;
		e.height = 80;
	});

	element.querySelectorAll('button[for="clear-sign"]').forEach((e) => {
		e.onclick = (ev) => {
			ev.preventDefault();
			signaturePads[e.getAttribute("control")].clear();
		};
	});

	return signaturePads;
}


function storeImageInDB(image, id, docType = '') {

	const urls = new URL(window.location.href);
	const searchParams = urls.searchParams;
	const opportunityId = searchParams.get("opportunityId") || '';
	const customerId = searchParams.get("customerid") || '';

	const formData = new FormData();
	formData.append('docType', docType);
	formData.append('applicant', `A${id[id.length - 1]}`);
	formData.append('opportunityId', opportunityId);
	formData.append('customerId', customerId);
	// formData.append('imageFileData', image);
	formData.append('upd', image);

	return fetch(docVerification, {
		method: 'POST',
		body: formData
	});
}

function addressField(sch) {
	for (let i = 0; i < address.length; i++) {
		if (address[i] == sch) {
			return true;
		}
	}
	return false;
}

function aapplicatnField(sch) {
	for (let i = 0; i < appcttype.length; i++) {
		if (sch.includes(appcttype[i])) {
			return appcttype[i];
		}
	}
	return false;
}

function finalType(type) {
	const tst = type.toLowerCase();
	if (tst.includes("pancard")) {
		return "pancard";
	} else if (tst.includes("aadhaarfront")) {
		return "aadharfront";
	} else if (tst.includes("aadhaarback")) {
		return "aadharback";
	} else if (tst.includes("passport")) {
		return "passport";
	} else if (tst.includes("aadharstrip")) {
		return "aadharstrip";
	} else {
		return "other";
	}
}
function stringToDate(_date, _format, _delimiter) {
	var formatLowerCase = _format.toLowerCase();
	var formatItems = formatLowerCase.split(_delimiter);
	var dateItems = _date.split(_delimiter);
	var monthIndex = formatItems.indexOf("mm");
	var dayIndex = formatItems.indexOf("dd");
	var yearIndex = formatItems.indexOf("yyyy");
	var month = parseInt(dateItems[monthIndex]);
	month -= 1;
	var formatedDate = new Date(dateItems[yearIndex], month, dateItems[dayIndex]);
	return formatedDate;
}
function formatDateDob(dateString) {
	const result1 = stringToDate(dateString, "dd/MM/yyyy", "/");
	var d = result1,
		month = '' + (d.getMonth() + 1),
		day = '' + d.getDate(),
		year = d.getFullYear();

	if (month.length < 2)
		month = '0' + month;
	if (day.length < 2)
		day = '0' + day;
	return [year, month, day].join('-');
}
function verifyDoc(type, data, myvalue) {
	const mypromise = new Promise((resolve, reject) => {
		function innerValidation() {
			const finalTp = false || finalType(type);
			if (finalTp === "aadharfront") {
				const apiUrl = docVerification + "/aadhar-front";
				fetch(apiUrl, {
					method: "post",
					body: data,
				})
					.then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: [],
							value: null,
						};

						searchUpload(value.result)
							.then((upres) => {
								if (upres) {
									setTimeout(() => {
										var failedVar = [];
										var isNumberErr = false;
										var isNameErr = false;
										let imgNum = value.number;

										let formatAadhar = myvalue.addhar_number
											.match(/.{1,4}/g)
											.join(" ");

										const verifyOne = new Promise((reso, reje) => {
											let regex = new RegExp(
												/^[2-9]{1}[0-9]{3}\s[0-9]{4}\s[0-9]{4}$/
											);
											if (regex.test(imgNum)) {
												verifyMyValues(formatAadhar)
													.then((resp) => {
														if (!resp) {
															failedVar.push("Aadhar Number");
															isNumberErr = true;
														}
														reso(true);
													})
													.catch(() => {
														failedVar.push("Aadhar Number");
														isNumberErr = true;
														reso(true);
													});
											} else {
												failedVar.push("Aadhar Number");
												isNumberErr = true;
												reso(true);
											}
										});

										const verifyTwo = new Promise((reso, reje) => {
											if (value.name) {
												verifyMyValues(generateMyValue(myvalue.name))
													.then((resp) => {
														if (!resp) {
															failedVar.push("Aadhar Name");
															isNameErr = true;
														}
														reso(true);
													})
													.catch(() => {
														failedVar.push("Aadhar Name");
														isNameErr = true;
														reso(true);
													});
											} else {
												failedVar.push("Aadhar Name");
												isNameErr = true;
												reso(true);
											}
										});

										Promise.all([verifyOne, verifyTwo]).then((prares) => {
											if (isNumberErr || isNameErr) {
												details.messages.push(
													`${failedVar.join(
														" and "
													)} in the Uploaded document dose not match with the entered details.${isNumberErr
														? `<br>Uploaded Aadhar Number: ${imgNum}`
														: ""
													}${isNameErr
														? `<br>Uploaded Aadhar Name: ${value.name}`
														: ""
													}${isNumberErr
														? `<br>Entered Aadhar Number in the form: ${formatAadhar}`
														: ""
													}${isNameErr
														? `<br>Entered Aadhar Name in the form: ${generateMyValue(
															myvalue.name
														)}`
														: ""
													}<br>`
												);
												details.verified = false;
												details.value = value;
											}
											resolve(details);
										});
									}, 1500);
								} else {
									resolve(false);
								}
							})
							.catch(() => {
								resolve(false);
							});
					})
					.catch(() => {
						resolve(false);
					});
			} else if (finalTp === "aadharback") {
				const apiUrl = docVerification + "/aadhar-back";
				fetch(apiUrl, {
					method: "post",
					body: data,
				})
					.then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: [],
							value: null,
						};

						var addressValue = value.result;
						if (addressValue) {
							addressValue = addressValue[0]
								? [addressValue[0].name]
								: addressValue;
						}

						searchUpload(addressValue)
							.then((upres) => {
								if (upres) {
									setTimeout(() => {
										const promiseLp = [];
										const addKey = Object.keys(myvalue.address);
										for (let i = 0; i < addKey.length; i++) {
											let verifyAddr = new Promise((reso, reje) => {
												if (value.address) {
													verifyMyValues(myvalue.address[addKey[i]])
														.then((resp) => {
															if (!resp) {
																reso(false);
															} else {
																reso(true);
															}
														})
														.catch(() => reso(false));
												} else {
													reso(false);
												}
											});
											promiseLp.push(verifyAddr);
										}

										Promise.all(promiseLp).then((res) => {
											if (res.join("").includes("false")) {
												details.messages.push(
													`Aadhar address in the Uploaded document dose not match with the entered details. <br> Uploaded Aadhar address: ${value.address
													}  <br> Entered Aadhar address in the form: ${generateMyValue(
														myvalue.address
													)} <br>`
												);
												details.verified = false;
												details.value = value;
											}
											resolve(details);
										});
									}, 1500);
								} else {
									reject(false);
								}
							})
							.catch(() => {
								reject(false);
							});
					})
					.catch((err) => {
						resolve(false);
					});
			} else if (finalTp === "pancard") {
				const apiUrl = docVerification + "/pan";
				fetch(apiUrl, {
					method: "post",
					body: data,
				})
					.then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: [],
							value: null,
						};




						searchUpload(value.result)
							.then((upres) => {
								if (upres) {
									setTimeout(() => {
										const failedVar = [];
										var isNumberErr = false;
										var isNameErr = false;
										let imgNum = value.number
											? value.number.replaceAll(" ", "")
											: "";

										const verifyOne = new Promise((reso, reje) => {
											let regex = new RegExp(/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/);
											if (regex.test(imgNum)) {
												verifyMyValues(myvalue.pan_number)
													.then((resp) => {
														if (!resp) {
															failedVar.push("PAN Number");
															isNumberErr = true;
														}
														reso(true);
													})
													.catch(() => {
														failedVar.push("PAN Number");
														isNumberErr = true;
														reso(true);
													});
											} else {
												failedVar.push("PAN Number");
												isNumberErr = true;
												reso(true);
											}
										});

										const verifyTwo = new Promise((reso, reje) => {
											if (value.name) {
												verifyMyValues(generateMyValue(myvalue.name))
													.then((resp) => {
														if (!resp) {
															failedVar.push("PAN Name");
															isNameErr = true;
														}
														reso(true);
													})
													.catch(() => {
														failedVar.push("PAN Name");
														isNameErr = true;
														reso(true);
													});
											} else {
												failedVar.push("PAN Name");
												isNameErr = true;
												reso(true);
											}
										});

										Promise.all([verifyOne, verifyTwo]).then((prares) => {
											if (isNameErr || isNumberErr) {
												details.messages.push(
													`${failedVar.join(
														" and "
													)} in the Uploaded document dose not match with the entered details.${isNumberErr
														? `<br>Uploaded PAN Number: ${imgNum}`
														: ""
													}${isNameErr
														? `<br>Uploaded PAN Name: ${value.name}`
														: ""
													}${isNumberErr
														? `<br>Entered PAN Number in the form: ${myvalue.pan_number}`
														: ""
													}${isNameErr
														? `<br>Entered PAN Name in the form: ${generateMyValue(
															myvalue.name
														)}`
														: ""
													}<br>`
												);
												details.verified = false;
												details.value = value;
											}
											resolve(details);
										});
									}, 1500);
								} else {
									reject(false);
								}
							})
							.catch((error) => {
								console.log(error)
								reject(false);
							});
					})
					.catch((error) => {
						console.log(error)
						reject(false);
					});
			} else if (finalTp === "passport") {
				const apiUrl = docVerification + "/passport";
				fetch(apiUrl, {
					method: "post",
					body: data,
				})
					.then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: [],
							value: null,
						};

						searchUpload(value.result)
							.then((upres) => {
								if (upres) {
									setTimeout(() => {
										var isNameErr = false;

										const verifyTwo = new Promise((reso, reje) => {
											if (value.name) {
												verifyMyValues(generateMyValue(myvalue.name))
													.then((resp) => {
														if (!resp) {
															isNameErr = true;
														}
														reso(true);
													})
													.catch(() => {
														isNameErr = true;
														reso(true);
													});
											} else {
												isNameErr = true;
												reso(true);
											}
										});

										Promise.all([verifyTwo]).then((prares) => {
											if (isNameErr) {
												details.messages.push(
													`Passport Name in the Uploaded document dose not match with the entered details.${isNameErr
														? `<br>Uploaded Passport Name: ${value.name}`
														: ""
													}${isNameErr
														? `<br>Entered Passport Name in the form: ${generateMyValue(
															myvalue.name
														)}`
														: ""
													}<br>`
												);
												details.verified = false;
												details.value = value;
											}
											resolve(details);
										});
									}, 1500);
								} else {
									resolve(false);
								}
							})
							.catch(() => {
								resolve(false);
							});
					})
					.catch(() => {
						reject(false);
					});
			} else if (finalTp === "other") {
				resolve({
					verified: true,
					messages: [],
					value: null,
				});
			}
		}

		innerValidation();
	});
	return mypromise;
}
function verifyDocNew(type, data, myvalue) {

	let currentApplicant = schema['applicant-details']['sub-sections'];
	const urls = new URL(window.location.href);
	const searchParams = urls.searchParams;

	const opportunityId = searchParams.get("opportunityId") || '';
	const customerId = searchParams.get("customerid") || '';
	data.append('applicant', myvalue);
	data.append('docType', finalType(type) || '');
	data.append('opportunityId', opportunityId);
	data.append('customerId', customerId);


	const mypromise = new Promise((resolve, reject) => {
		function innerValidation() {
			const finalTp = false || finalType(type);

			setTimeout(() => {
				reject(false);
				// alert("It is taking too long. Please proceed Manually.");
			}, 30000);

			if (finalTp === "aadharfront") {
				// const apiUrl = docVerification + "/aadhar-front";
				const apiUrl = docVerification;
				let resp;
				fetch(apiUrl, {
					method: "post",
					body: data,
				})
					.then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: ['Please upload a clear Aadhaar Card. Aadhaar number could not be read from the current Image.You may choose to enter manually on the next screen.'],
							value: value,
						};
						resp = details;
						let SALUTATION_new = 'Mr.';
						if (value.GENDER.trim().toLowerCase() == 'male') {
							SALUTATION_new = 'Mr.';
						}
						if (value.GENDER.trim().toLowerCase() == 'female') {
							SALUTATION_new = 'Ms.';
						}

						// SET EXTRACTED DATA
						const idx = (+myvalue.trim()[1]) - 1;
						currentApplicant[idx]['form'][0].defaultValue = SALUTATION_new
						currentApplicant[idx]['form'][9].defaultValue = value['AADHAR NO'].trim()

						// localStorage.setItem('idDetailsA1', JSON.stringify(currentApplicant));
						idDetailsA1 = JSON.stringify(currentApplicant);
						resolve(details);
					})
					.catch(() => {
						//resolve(false);
						resolve(resp);
					});
			} else if (finalTp === "aadharback") {
				// const apiUrl = docVerification + "/aadhar-back";
				const apiUrl = docVerification;
				fetch(apiUrl, {
					method: "post",
					body: data,
				})
					.then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: ['Please upload a clear Aadhaar Card. Aadhaar number could not be read from the current Image.You may choose to enter manually on the next screen.'],
							value: value,
						};
						resp = details;

						const idx = (+myvalue.trim()[1]) - 1;
						let SALUTATION_new = 'Mr.';
						currentApplicant[idx]['form'][0].defaultValue = SALUTATION_new
						currentApplicant[idx]['form'][13].defaultValue = value['House_no'].trim();
						currentApplicant[idx]['form'][14].defaultValue = value['Building_name'].trim();
						currentApplicant[idx]['form'][15].defaultValue = value['locality'].trim();
						currentApplicant[idx]['form'][16].defaultValue = value['street'].trim();
						currentApplicant[idx]['form'][17].defaultValue = value['city'].trim();
						currentApplicant[idx]['form'][18].defaultValue = value['PIN'].trim();
						currentApplicant[idx]['form'][19].defaultValue = value['state'];
						currentApplicant[idx]['form'][20].defaultValue = value['country'];  // Country


						// localStorage.setItem('idDetailsA1', JSON.stringify(currentApplicant));
						idDetailsA1 = JSON.stringify(currentApplicant);
						resolve(details);
					})
					.catch((error) => {
						//console.log(error)
						//resolve(false);
						resolve(resp);
					});
			} else if (finalTp === "pancard") {

				const apiUrl = docVerification;
				fetch(apiUrl, {
					method: "post",
					body: data,
				}).then(response => response.json())
					.then((value) => {
						// added by manoj
						if (myvalue == 'A1') {
							const name_f = 'Primary'
						} else {
							const name_f = 'Joint'
						}
						var details = {
							verified: true,
							messages: ['Please upload a clear PAN Card. Pan number could not be read from the current Image.You may choose to enter manually on the next screen.'],
							value: value,
						}; resp = details;
						if (value.number == 'N/A') {
							details.verified = false
						}

						if (myvalue == 'A1') {
							// Primary Applicant
							const allaboutyouDob = currentApplicant[currentApplicant.length - 1];
							let myName = value.NAME.trim().split(" ");
							const current_l = myName.length;
							let dob = value.DOB.trim().replaceAll(' ', '/');
							currentApplicant[0]['form'][1].defaultValue = myName[0];
							currentApplicant[0]['form'][2].defaultValue = myName[current_l - 1];
							currentApplicant[0]['form'][8].defaultValue = value.PAN_NO;
							currentApplicant[0]['form'][10].defaultValue = formatDateDob(dob)
							allaboutyouDob['form'][0].defaultValue = formatDateDob(dob)
						}
						else {
							// Joint Applicants
							const idx = (+myvalue.trim()[1]) - 1;
							let myName = value.NAME.trim().split(" ");
							const current_l = myName.length;
							let dob = value.DOB.trim().replaceAll(' ', '/');

							currentApplicant[idx]['form'][1].defaultValue = myName[0]
							currentApplicant[idx]['form'][2].defaultValue = myName[current_l - 1]
							currentApplicant[idx]['form'][8].defaultValue = value.PAN_NO;
							currentApplicant[idx]['form'][10].defaultValue = formatDateDob(dob)
						}

						// localStorage.setItem('idDetailsA1', JSON.stringify(currentApplicant));
						idDetailsA1 = JSON.stringify(currentApplicant);
						resolve(details)
					})
					.catch((error) => {
						resolve(resp);
						//console.log(error)
						//reject(false);
					});
			} else if (finalTp === "passport") {
				const apiUrl = docVerification + "/passport";
				fetch(apiUrl, {
					method: "post",
					body: data,
				})
					.then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: [],
							value: null,
						};

						searchUpload(value.result)
							.then((upres) => {
								if (upres) {
									setTimeout(() => {
										var isNameErr = false;

										const verifyTwo = new Promise((reso, reje) => {
											if (value.name) {
												verifyMyValues(generateMyValue(myvalue.name))
													.then((resp) => {
														if (!resp) {
															isNameErr = true;
														}
														reso(true);
													})
													.catch(() => {
														isNameErr = true;
														reso(true);
													});
											} else {
												isNameErr = true;
												reso(true);
											}
										});

										Promise.all([verifyTwo]).then((prares) => {
											if (isNameErr) {
												details.messages.push(
													`Passport Name in the Uploaded document dose not match with the entered details.${isNameErr
														? `<br>Uploaded Passport Name: ${value.name}`
														: ""
													}${isNameErr
														? `<br>Entered Passport Name in the form: ${generateMyValue(
															myvalue.name
														)}`
														: ""
													}<br>`
												);
												details.verified = false;
												details.value = value;
											}
											resolve(details);
										});
									}, 1500);
								} else {
									resolve(false);
								}
							})
							.catch(() => {
								resolve(false);
							});
					})
					.catch(() => {
						reject(false);
					});
			} else if (finalTp === 'aadharstrip') {
				const apiUrl = docVerification;

				fetch(apiUrl, {
					method: "post",
					body: data,
				})
					.then((res) => res.json())
					.then((value) => {
						let details = {
							verified: true,
							messages: ['Please upload a clear Aadhaar Card. Aadhaar number could not be read from the current Image.You may choose to enter manually on the next screen.'],
							value: value,
						};
						resp = details;
						// Logic for Aadhar Front
						let SALUTATION_new = 'Mr.';
						if (value.GENDER.trim().toLowerCase() == 'male') {
							SALUTATION_new = 'Mr.';
						}
						if (value.GENDER.trim().toLowerCase() == 'female') {
							SALUTATION_new = 'Ms.';
						}

						// Get Applicant's index
						const idx = (+myvalue.trim()[1]) - 1;

						// AADHAR FRONT
						currentApplicant[idx]['form'][0].defaultValue = SALUTATION_new
						currentApplicant[idx]['form'][9].defaultValue = value['AADHAR NO']?.trim();

						// localStorage.setItem('idDetailsA1', JSON.stringify(currentApplicant));
						idDetailsA1 = JSON.stringify(currentApplicant);

						// AADHAR BACK
						currentApplicant[idx]['form'][13].defaultValue = value['House no'].trim();  // House Number
						currentApplicant[idx]['form'][14].defaultValue = value['Building_name'].trim();  // Building Name
						currentApplicant[idx]['form'][15].defaultValue = value['locality'].trim();  // locality 
						currentApplicant[idx]['form'][16].defaultValue = value['street'].trim(); // street
						currentApplicant[idx]['form'][17].defaultValue = value['city'].trim(); // city
						currentApplicant[idx]['form'][18].defaultValue = value['PIN'].trim(); // Postal Code
						currentApplicant[idx]['form'][19].defaultValue = value['state'];  // State
						currentApplicant[idx]['form'][20].defaultValue = value['country'];  // Country
						//setGeoLocation(value['LATITUDE'], value['LONGITUDE'], 'applicant_inputgroup');


						// localStorage.setItem('idDetailsA1', JSON.stringify(currentApplicant));
						idDetailsA1 = JSON.stringify(currentApplicant);
						resolve(details);
					})
					.catch((err) => {
						console.log(err);
						//resolve(false);
						resolve(resp);
					});
			} else if (finalTp === "other") {
				const apiUrl = docVerification;
				fetch(apiUrl, {
					method: "post",
					body: data,
				})
					.then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: ['Please upload a clear document.You may choose to enter manually on the next screen.'],
							value: value,
						};
						resp = details;

						resolve(details);
					})
					.catch(() => {
						resolve(resp);
					});
			}
		}

		innerValidation();
	});
	return mypromise;
}

function setGeoLocation(lat, lng, parentClass) {
	let cont = document.querySelector(`.${parentClass}`);
	const div = document.createElement('div');
	div.classList.add('google-map-cont');
	const a = document.createElement('a');
	a.href = `https://www.google.com/maps/@?api=1&map_action=map&center=${lat},${lng}`;
	a.target = "_blank";
	const img = document.createElement('img');


	const googleAPI = `https://maps.googleapis.com/maps/api/staticmap?center=${lat},${lng}&zoom=14&size=200x200&key=AIzaSyDISrKu3mOEE100DwCDUvNsTeCssciGh4o`
	fetch(googleAPI)
		.then((res) => res.blob())
		.then((blob) => {
			let cont = document.querySelector(`.${parentClass}`);
			if (document.getElementById('userLocationCont')) {
				cont.removeChild(document.getElementById('userLocationCont'))
			}
			const div = document.createElement('div');
			div.classList.add('google-map-cont');
			div.setAttribute('id', 'userLocationCont');
			const a = document.createElement('a');
			a.href = `https://www.google.com/maps/@?api=1&map_action=map&center=${lat},${lng}`;
			a.target = "_blank";
			const img = document.createElement('img');
			img.setAttribute('id', 'userLocation');
			const imageURL = URL.createObjectURL(blob);
			img.src = imageURL;
			img.width = '200';
			img.height = '200';
			a.appendChild(img);
			div.appendChild(a);
			cont.appendChild(div);


		});
}
function verifyPaymentSource(type, data, rowToUpdate) {

	const mypromise = new Promise((resolve, reject) => {
		function innerValidationPayment() {
			if (type == 'Cheque') {
				setTimeout(() => {

					// let myDoc = JSON.parse(localStorage.getItem('mydocument'));
					let myDoc = JSON.parse(mydocument);

					const key_id = `back_check_post_${rowToUpdate}`;
					myDoc = myDoc[key_id].split(',')[1];
					// myDoc = myDoc['back_check_post']

					var myHeaders = new Headers();
					myHeaders.append("token", "c927f8c5f5613991a62be1e74f80ac1b");
					myHeaders.append("Content-Type", "application/json");

					var raw = JSON.stringify({
						"req_id": "ch-req-1",
						"doc_type": "image",
						"blank_cheque": false,
						"doc_base64": myDoc
					});

					var requestOptions = {
						method: 'POST',
						headers: myHeaders,
						body: raw,
						redirect: 'follow'
					};

					fetch("https://ping.arya.ai/api/v1/cheque", requestOptions)
						.then(response => response.json())
						.then(value => {
							let result = value?.result;
							for (let key in result) {
								if (key == 'Amount in Words') {
									document.getElementById('Field_0uooh18-' + rowToUpdate).value = result[key]
								}
								if (key == 'Amount in Figures') {
									document.getElementById('Field_0jpybug-' + rowToUpdate).value = result[key]
								}
								if (key == 'Bank Name') {
									document.getElementById('Field_0l98pn7-' + rowToUpdate).value = result[key]
								}

								// Added by manoj
								if (key == 'Date') {
									if (result[key] == "") {
										document.querySelector(`.amount-data-${rowToUpdate}`).classList.remove('not_editable');
										document.querySelector(`.amount-data-${rowToUpdate}`).disabled = false;

									}
								}
							}

							document.getElementById('Field_0i07h6s-' + rowToUpdate).value = result['Cheque No'];
							var details = {
								verified: true,
								messages: [],
								value: value?.result,
							};
							resolve(details);
						}).catch(error => console.log('error', error));
				}, 500);
			} else if (type == 'Swipe') {
				const apiUrl = extractPaymentSource + "/charge-slip";
				fetch(apiUrl, {
					method: "post",
					body: data,
				}).then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: [],
							value: null,
						};
						let result = value?.result;
						if (result.amount) {
							document.getElementById('Field_0uooh18-' + rowToUpdate).value = ''
							document.getElementById('Field_0jpybug-' + rowToUpdate).value = result.amount
						}
						if (result.merchantRefNo) {
							document.getElementById('Field_0i07h6s-' + rowToUpdate).value = result.merchantRefNo;
						}
						resolve(details);
					})
					.catch((error) => {
						console.log(error)
						resolve(false);
					});
			} else if (type == 'RTGS') {
				const apiUrl = extractPaymentSource + "/charge-slip";
				fetch(apiUrl, {
					method: "post",
					body: data,
				}).then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: [],
							value: null,
						};
						let result = value?.result;
						if (result.amount) {
							document.getElementById('Field_0uooh18-' + rowToUpdate).value = ''
							document.getElementById('Field_0jpybug-' + rowToUpdate).value = result.amount
						}

						document.getElementById('Field_0i07h6s-' + rowToUpdate).value = result.merchantRefNo;;
						resolve(details);
						// resolve(details);
					})
					.catch((error) => {
						console.log(error)
						resolve(false);
					});
			} else if (type == 'NEFT') {
				const apiUrl = extractPaymentSource + "/charge-slip";
				fetch(apiUrl, {
					method: "post",
					body: data,
				}).then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: [],
							value: null,
						};
						let result = value?.result;
						if (result.amount) {
							document.getElementById('Field_0uooh18-' + rowToUpdate).value = ''
							document.getElementById('Field_0jpybug-' + rowToUpdate).value = result.amount
						}

						document.getElementById('Field_0i07h6s-' + rowToUpdate).value = result.merchantRefNo;;
						resolve(details);
						// resolve(details);
					})
					.catch((error) => {
						console.log(error)
						resolve(false);
					});
			}
			else if (type == 'Razorpay') {
				const apiUrl = extractPaymentSource + "/charge-slip";
				fetch(apiUrl, {
					method: "post",
					body: data,
				}).then((res) => res.json())
					.then((value) => {
						var details = {
							verified: true,
							messages: [],
							value: null,
						};
						let result = value?.result;
						if (result.amount) {
							document.getElementById('Field_0uooh18-' + rowToUpdate).value = ''
							document.getElementById('Field_0jpybug-' + rowToUpdate).value = result.amount
						}

						document.getElementById('Field_0i07h6s-' + rowToUpdate).value = result.merchantRefNo;;
						resolve(details);
						// resolve(details);
					})
					.catch((error) => {
						console.log(error)
						resolve(false);
					});
			} else {
				resolve({
					verified: true,
					messages: [],
					value: null,
				});
			}
		}
		innerValidationPayment();
	});
	return mypromise;

}

function matchNameValid(name, check) {
	const list = Object.keys(check);
	for (let i = 0; i < list.length; i++) {
		if (!name.includes(check[list[i]])) {
			return false;
		}
	}
	return true;
}

function generateMyValue(check) {
	const list = Object.keys(check);
	let Name = "";
	for (let i = 0; i < list.length; i++) {
		Name = Name + (i == 0 ? "" : " ") + check[list[i]];
	}
	return Name;
}

function generateAddressValue(check) {
	const list = Object.keys(check);
	let Name = "";
	for (let i = 0; i < list.length; i++) {
		Name = Name + (i == 0 ? "" : ", ") + check[list[i]];
	}
	return Name;
}

function verifiedicon() {
	const closeAction = document.createElement("label");
	closeAction.setAttribute("class", "correct_previewicon");
	closeAction.innerText = "✓";
	return closeAction;
}

function verifyfailsicon() {
	const closeAction = document.createElement("label");
	closeAction.setAttribute("class", "close_previewicon");
	closeAction.innerText = "X";
	return closeAction;
}

function getApplicantData(type) {
	const retValue = {};
	const schArr = schema["applicant-details"]["sub-sections"];
	for (let i = 0; i < schArr.length; i++) {
		if (schArr[i].Applicant_Position === type) {
			const fiarr = Object.keys(myfielddet);
			fiarr.forEach((fia) => {
				const myschma = myfielddet[fia];
				let subvalue = {};
				for (let x = 0; x < myschma.length; x++) {
					const form = schArr[i].form;
					form.forEach((element) => {
						if (myschma[x] === element.label) {
							if (!element.id.toLowerCase().includes("shipping")) {
								const fivalue = document.getElementById(element.id).value;
								if (fia === "addhar_number" || fia === "pan_number") {
									subvalue = fivalue;
								} else {
									subvalue[
										element.label.trim().toLowerCase().replaceAll(" ", "")
									] = fivalue;
								}
							}
						}
					});

					retValue[fia] = subvalue;
				}
			});
		}
	}

	return retValue;
}

function createEsignData() {
	const applicant_detailscols = schema["applicant-details"]["sub-sections"];

	if (applicant_detailscols.length > 0) {
		const myArr = [];
		applicant_detailscols.forEach((apd, i) => {
			if (i < applicant_detailscols.length - 1) {
				const form = apd["form"];
				var details = "";
				form.forEach((fo) => {
					for (let xo = 0; xo < esignData.length; xo++) {
						if (fo.label === esignData[xo]) {
							const value = document.getElementById(fo.id).value;
							details = details + " " + value;
						}
					}
				});
				var myobj = {
					type: apd["Applicant_Position"],
					value: details,
					type: apd.Aplicant_Type,
				};
				myArr.push(myobj);
			}
		});
		return myArr;
	}
}

function resetfector() {
	const myEle = document.querySelectorAll(".apct_type_div");
	myEle.forEach((me, i) => {
		if (i >= 1) {
			const tgele = me.getElementsByClassName("apct_type_lable")[0];
			if (tgele) {
				tgele.innerHTML = pageInfo[i - 1];
			}

			const tgeleFe = me.querySelectorAll("select")[0];
			if (tgeleFe) {
				tgeleFe.setAttribute("id", `applicant_${i + 1}`);
			}

			if (i === myEle.length - 1) {
				const plmele = document.createElement("div");
				plmele.setAttribute("class", "plmflex_icon");

				const plusIcon = document.createElement("span");
				plusIcon.setAttribute("class", "my_type_plus");
				plusIcon.innerHTML = "+";
				const tgchild = me.childNodes;
				tgchild[2].remove();

				const app_ldet = schema["first-page"]["applicant_details"];
				if (i > app_ldet.length - 1) {
					const minIconlast = document.createElement("span");
					minIconlast.setAttribute("class", "my_type_minus");
					minIconlast.innerHTML = "-";

					minIconlast.onclick = function (e) {
						const removeEle = hasSomeParentTheClass(e.target, "apct_type_div");
						removeEle.remove();
						resetfector();
					};
					plmele.appendChild(minIconlast);
				}

				plmele.appendChild(plusIcon);
				me.append(plmele);
				AppPlusapplicant(plusIcon, myEle.length);
			}
		} else {
			if (i === myEle.length - 1) {
				const plmele = document.createElement("div");
				plmele.setAttribute("class", "plmflex_icon");

				const plusIcon = document.createElement("span");
				plusIcon.setAttribute("class", "my_type_plus");
				plusIcon.innerHTML = "+";
				const tgchild = me.childNodes;
				tgchild[2].remove();

				plmele.appendChild(plusIcon);
				me.append(plmele);
				AppPlusapplicant(plusIcon, myEle.length);
			}
		}
	});
}

function verifyMinReq(element) {
	const myEle = element.querySelectorAll(".fileupload_contianer");
	let isValid = true;
	for (let i = 0; i < myEle.length; i++) {
		const mycount = myEle[i].querySelectorAll(".file-upload").length;
		const istarget = myEle[i].querySelector(".fileup_validation");
		if (istarget) {
			istarget.remove();
		}
		if (mycount < 2) {
			const createValidation = document.createElement("p");
			createValidation.classList.add("fileup_validation");
			createValidation.innerHTML = "At least one other document required";
			myEle[i].append(createValidation);
			setTimeout(() => {
				createValidation.remove();
			}, 5000);
			isValid = false;
		}
	}
	return isValid;
}

function sameasPrimary(checked, myid) {
	const addressValue = {};
	const applicant_detailscols = schema["applicant-details"]["sub-sections"];

	if (checked) {
		for (let i = 0; i < applicant_detailscols.length; i++) {
			if (applicant_detailscols[i].Applicant_Position === "A1") {
				const formel = applicant_detailscols[i]
					? applicant_detailscols[i].form
					: [];

				formel.forEach((fl) => {
					if (fl.id) {
						if (!fl.id.toLowerCase().includes("shipping")) {
							if (addressField(fl.label)) {
								const elvalue = document.getElementById(fl.id).value;
								const key = fl.label.replaceAll(" ", "").toLowerCase();
								addressValue[key] = elvalue;
							}
						}
					}
				});
			}
		}
	}

	for (let i = 0; i < applicant_detailscols.length; i++) {
		if (applicant_detailscols[i].Applicant_Position == aapplicatnField(myid)) {
			const formel = applicant_detailscols[i]
				? applicant_detailscols[i].form
				: [];

			formel.forEach((fl) => {
				if (fl.id && fl.disabled != "true") {
					const postVal = fl.label ? fl.label : fl.text;
					if (addressField(postVal)) {
						const tgele = document.getElementById(fl.id);
						const prtarget = hasSomeParentTheClass(tgele, "inputCtn");
						if (checked) {
							if (!fl.id.toLowerCase().includes("shipping")) {
								if (addressField(fl.label)) {
									const key = fl.label.replaceAll(" ", "").toLowerCase();
									document.getElementById(fl.id).value = addressValue[key];
								}
							}

							tgele.setAttribute("disabled", true);
							tgele.classList.add("nonap_disabled");
							if (prtarget) {
								prtarget.classList.add("hidden");
							}
						} else {
							if (!fl.id.toLowerCase().includes("shipping")) {
								if (addressField(fl.label)) {
									const inpEle = document.getElementById(fl.id);
									inpEle.value = "";
									const parentEle = hasSomeParentTheClass(inpEle, "inputCtn");
									if (parentEle) {
										parentEle.querySelector("label").classList.add("hidden");
									}
								}
							}
							if (tgele.checked) {
								tgele.checked = false;
							}
							tgele.removeAttribute("disabled");
							tgele.classList.remove("nonap_disabled");
							if (prtarget) {
								prtarget.classList.remove("hidden");
							}
						}
					}
				}
			});
		}
	}
}

function finalSubmit() {
	const keys = Object.keys(schema);
	var formData = new FormData(form);
	for (const key of keys) {
		if (key === "identification") {
			const mycols = schema[key]["cols"];
			mycols.forEach((cols) => {
				const { photoPicker } = cols;

				if (photoPicker) {
					const { id, key } = photoPicker;
					const element = document.getElementById(id);
					formData.append(key, element.files[0]);
				}
			});

			const fileuploadEle = document.querySelectorAll(".file-upload");
			fileuploadEle.forEach((cols) => {
				const tgele = cols.querySelector("input");
				formData.append(tgele.id, tgele.files[0]);
			});
		} else {
			const pageSchema = schema[key];

			if (pageSchema) {
				if (pageSchema["sub-sections"]) {
					const mysubsec = pageSchema["sub-sections"];
					mysubsec.forEach((subc) => {
						if (subc["form"]) {
							const subform = subc["form"];
							formData = addFormValues(subform, formData);
						}
					});
				}

				if (pageSchema["form"]) {
					const mainform = pageSchema["form"];
					formData = addFormValues(mainform, formData);
				}
			}
		}
	}

	const esgEle = document.querySelectorAll(".esign_maincontainer select");
	if (esgEle) {
		esgEle.forEach((egd) => {
			formData.append(egd.id, egd.value);
		});
	}

	if (ignoreDoc.length > 0) {
		ignoreDoc.forEach((ig) => {
			formData.append(ig.name, ig.value);
		});
	}

	return formData;
}

function factorCdAddress(type, checked) {
	const applicant_detailscols = schema["applicant-details"]["sub-sections"];
	const addressValue = {};

	if (checked) {
		for (let i = 0; i < applicant_detailscols.length; i++) {
			if (applicant_detailscols[i].Applicant_Position === "A1") {
				const formel = applicant_detailscols[i]
					? applicant_detailscols[i].form
					: [];

				formel.forEach((fl) => {
					if (fl.id) {
						if (!fl.id.toLowerCase().includes("shipping")) {
							if (addressField(fl.label)) {
								const elvalue = document.getElementById(fl.id).value;
								const key = fl.label.replaceAll(" ", "").toLowerCase();
								addressValue[key] = elvalue;
							}
						}
					}
				});
			}
		}
	}

	for (let i = 0; i < applicant_detailscols.length; i++) {
		if (applicant_detailscols[i].Applicant_Position == type) {
			const formel = applicant_detailscols[i]
				? applicant_detailscols[i].form
				: [];

			formel.forEach((fl) => {
				if (fl.id && fl.disabled != "true") {
					if (fl.id.toLowerCase().includes("shipping")) {
						if (addressField(fl.label)) {
							const myele = document.getElementById(fl.id);
							const myparent = hasSomeParentTheClass(myele, "inputCtn");
							if (checked) {
								if (fl.id.toLowerCase().includes("shipping")) {
									if (addressField(fl.label)) {
										const key = fl.label.replaceAll(" ", "").toLowerCase();
										document.getElementById(fl.id).value = addressValue[key];
									}
								}

								myele.setAttribute("disabled", true);
								myele.classList.add("nonap_disabled");
								myparent.classList.add("hidden");
							} else {
								if (fl.id.toLowerCase().includes("shipping")) {
									if (addressField(fl.label)) {
										const inpEle = document.getElementById(fl.id);
										inpEle.value = "";
										const parentEle = hasSomeParentTheClass(inpEle, "inputCtn");
										if (parentEle) {
											parentEle.querySelector("label").classList.add("hidden");
										}
									}
								}

								myele.removeAttribute("disabled");
								myele.classList.remove("nonap_disabled");
								myparent.classList.remove("hidden");
							}
						}
					}
				}
			});
		}
	}
}

function addFormValues(form, value) {
	const aprival = value;
	form.forEach((fv) => {
		if (fv.disabled != "true") {
			if (fv.key || fv.id) {
				if (fv.type === "checkbox") {
					const myval = document.getElementsByName(fv.key);
					if (myval.length) {
						aprival.append(fv.key, myval[0].checked);
					}
				} else if (fv.type === "radio") {
					const myval = document.getElementById(fv.id);
					if (myval.length) {
						const radioBtn = myval.querySelectorAll("input");
						radioBtn.forEach((rb) => {
							if (rb.checked) {
								aprival.append(fv.key, rb.checked);
							}
						});
					}
				} else {
					if (fv.type !== "text") {
						const myval = document.getElementsByName(fv.key);
						if (myval.length) {
							aprival.append(fv.key, myval[0].value);
						}
					}
				}
			}
		}
	});
	return value;
}

function sbmitData(isSigned) {
	const tgEle = document.getElementById("esignstaus");
	tgEle.value = isSigned ? "true" : "false";
}

function finalSave() {
	signModal.style.display = "none";
	document.getElementById('loader').classList.remove('hideLoader');
	document.querySelectorAll("input, textarea, select").forEach((e) => {
		e.removeAttribute("disabled");
	});
	fillpdfContent(false).then((res) => {
		// do nothing
	})
		.catch(err => {
			document.getElementById('loader').classList.add('hideLoader');
			alert(err);
			return;
		})
}

function onloadwin() {
	document.getElementById("Field_1o1ufop").value =
		document.getElementById("A1_Individual_Party_firstname_1").value +
		" " +
		document.getElementById("A1_Individual_Party_lastname_1").value;
	document.getElementById("Field_18v8vdz").value =
		document.getElementById("A1_Individual_House_Number__c").value +
		" " +
		document.getElementById("A1_Building_Name__c").value +
		" " +
		document.getElementById("A1_Permanent_Locality__c").value +
		" " +
		document.getElementById("A1_BillingStreet").value +
		" " +
		document.getElementById("A1_BillingCity").value +
		" " +
		document.getElementById("A1_BillingPostalCode").value +
		" " +
		document.getElementById("A1_BillingState").value +
		" " +
		document.getElementById("A1_BillingCountry").value;
}

function verifyMyValues(val) {
	const myHeaders = new Headers();
	myHeaders.append("Content-Type", "application/json");

	const secData = JSON.stringify({
		query: {
			bool: {
				should: [{ match: { "user.name": val ? val.trim() : "" } }],
			},
		},
	});

	const requestOptions2 = {
		method: "POST",
		body: secData,
		headers: myHeaders,
		redirect: "follow",
	};

	return fetch(nameApi, requestOptions2)
		.then((respo) => respo.json())
		.then((respo) => {
			if (respo) {
				const myhits = respo.hits;
				const Score = myhits.max_score;
				if (Score && Score * 100 >= ThresholdScore) {
					const myTotalMatched = myhits.total;
					if (myTotalMatched && myTotalMatched.value > 0) {
						return true;
					}
				}
			}
			return false;
		})
		.catch(() => {
			return false;
		});
}

function searchUpload(imgName) {
	const myHeaders = new Headers();
	myHeaders.append("Content-Type", "application/json");

	const firData = JSON.stringify({
		group: "users",
		user: [
			{
				name: imgName,
			},
		],
	});

	const requestOptions1 = {
		method: "POST",
		body: firData,
		headers: myHeaders,
		redirect: "follow",
	};

	return fetch(searchApi, requestOptions1)
		.then((resp) => resp.json())
		.then((resp) => {
			return true;
		})
		.catch((err) => {
			return false;
		});
}

function calculateSize(img, maxWidth, maxHeight) {
	let width = img.width;
	let height = img.height;

	if (width > height) {
		if (width > maxWidth) {
			height = Math.round((height * maxWidth) / width);
			width = maxWidth;
		}
	} else {
		if (height > maxHeight) {
			width = Math.round((width * maxHeight) / height);
			height = maxHeight;
		}
	}
	return [width, height];
}



function compressImage(myFileURL, event, imageBlob = '', hasEvent = true, dataFile = '') {


	// const MAX_WIDTH = 960;
	// const MAX_HEIGHT = 540;

	const MAX_WIDTH = 1900;
	const MAX_HEIGHT = 1068;
	// const MIME_TYPE = "image/jpeg";
	// const QUALITY = 1.0;

	const myPromise = new Promise((resolve, reject) => {

		// // Old compression Logic
		// const img = new Image();
		// img.src = myFileURL;
		// img.onerror = function () {
		// 	URL.revokeObjectURL(this.src);
		// 	reject(false);
		// };

		// img.onload = function () {
		// 	URL.revokeObjectURL(this.src);

		// 	const [newWidth, newHeight] = calculateSize(img, img.width, img.height);
		// const canvas = document.createElement("canvas");
		// canvas.width = newWidth;
		// canvas.height = newHeight;
		// const ctx = canvas.getContext("2d");
		// 	ctx.drawImage(img, 0, 0, newWidth, newHeight);
		// 	canvas.toBlob(
		// 		(blob) => {
		// 			console.log(blob);
		// 			resolve(blob);

		// 		},
		// 		MIME_TYPE,
		// 		QUALITY
		// 	);

		// };

		// // Old compression Logic Ends here



		// New Compression Logic

		const canvas = document.createElement("canvas");
		const ctx = canvas.getContext("2d");
		let file = '';

		if (hasEvent) {
			file = event.target.files[0];
		}
		else {
			file = dataFile;
		}

		const reader = new FileReader();


		// image.src = myFileURL;
		// image.onerror = function () {
		// 	URL.revokeObjectURL(this.src);
		// 	reject(false);
		// };
		try {
			reader.onload = function (event) {
				const image = new Image();


				image.onload = function () {

					const { width, height } = calculateNewSize(image, MAX_WIDTH, MAX_HEIGHT); // Desired width and height
					canvas.width = width;
					canvas.height = height;
					ctx.drawImage(image, 0, 0, width, height);

					resizedImageBlob = dataURLToBlob(canvas.toDataURL(file.type));
					// console.log(canvas.toDataURL(file.type));
					resolve(resizedImageBlob);

				};
				image.src = event.target.result;
			};

			if (imageBlob != '') {
				reader.readAsDataURL(imageBlob);
			}
			else {
				reader.readAsDataURL(file);
			}
		}
		catch (err) {
			console.log(err);
		}
	});

	return myPromise;
}

function calculateNewSize(image, maxWidth, maxHeight) {
	let width = image.width;
	let height = image.height;

	if (width > maxWidth || height > maxHeight) {
		const aspectRatio = width / height;

		if (width > height) {
			width = maxWidth;
			height = width / aspectRatio;
		} else {
			height = maxHeight;
			width = height * aspectRatio;
		}


		return { width, height };
	}

	// Return default values if the conditions are not met
	return { width, height };
}
function dataURLToBlob(dataURL) {
	const byteString = atob(dataURL.split(',')[1]);
	const mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];
	const arrayBuffer = new ArrayBuffer(byteString.length);
	const uint8Array = new Uint8Array(arrayBuffer);

	for (let i = 0; i < byteString.length; i++) {
		uint8Array[i] = byteString.charCodeAt(i);
	}

	return new Blob([arrayBuffer], { type: mimeString });
}

function createFunctionData() {
	var PreviewData = {
		applicants: [],
		bookingsource: {},
		unitdetails: {},
		bookingamount: {},
		allaboutyou: {},
		selfdeclaration: "",
		gtncdetail: null,
		fir_lot: {},
	};

	const schArr = schema["applicant-details"]["sub-sections"];
	const bookingsourceArr = schema["booking-source"];
	const anexureArr = schema["anexure-a"]["sub-sections"];
	const fir_lot = schema["first-page"]["form"];
	const io_appicants = PreviewData.applicants;
	const io_bookingsrc = PreviewData.bookingsource;
	const io_unitdetails = PreviewData.unitdetails;
	const io_bookingamount = PreviewData.bookingamount;
	const io_allaboutyou = PreviewData.allaboutyou;
	const fir_lotdata = PreviewData.fir_lot;

	function suncreate(fdata, scd, index) {
		const myschma = myPreviewData[fdata];
		let subvalue = [];
		var myarray = {
			paddress: [],
			caddress: [],
		};
		for (let x = 0; x < myschma.length; x++) {
			const form = scd[index].form;
			if (fdata === "address") {
				form.forEach((element) => {
					if (myschma[x] === element.label) {
						const myele = document.getElementById(element.id);
						if (myele) {
							const fivalue = myele.value;
							if (fivalue) {
								if (!element.id.toLowerCase().includes("shipping")) {
									myarray.paddress.push(fivalue);
								} else {
									myarray.caddress.push(fivalue);
								}
							}
						}
					}
				});
			} else {
				form.forEach((element) => {
					if (myschma[x] === element.label) {
						const myele = document.getElementById(element.id);
						const fivalue = myele.checked ? myele.checked : myele.value;
						if (fivalue != "" && fivalue != undefined) {
							subvalue.push(fivalue);
						}
					}
				});
			}
		}
		if (fdata === "address") {
			return myarray;
		}
		return subvalue;
	}

	for (let i = 0; i < schArr.length; i++) {
		if (i === schArr.length - 1) {
			const allaboutForm = schArr[i].form;
			allaboutForm.forEach((element) => {
				const myele = document.getElementById(element.id);
				if (myele) {
					if (element.type === "radio") {
						const tgEle = myele.querySelectorAll(".checkbox-row input");
						tgEle.forEach((tl) => {
							if (tl.checked) {
								io_allaboutyou[
									element.label.trim().toLowerCase().replaceAll(" ", "_")
								] = tl.value;
							}
						});
					} else {
						io_allaboutyou[
							element.label.trim().toLowerCase().replaceAll(" ", "_")
						] = myele.value;
					}
				}
			});
		} else {
			const detials = {
				type: schArr[i].Applicant_Position,
				data: {},
			};
			const fiarr = Object.keys(myPreviewData);
			fiarr.forEach((fia) => {
				const data = suncreate(fia, schArr, i);
				if (fia === "name" || fia === "addhar_number" || fia === "pan_number") {
					detials.data[fia] = data.join(" ");
				} else if (fia === "address" || fia === "email" || fia === "phone") {
					if (fia === "address") {
						detials.data["permanent_address"] = data["paddress"].join(", ");
						detials.data["correspondence_address"] =
							data["caddress"].join(", ");
					} else {
						detials.data[fia] = data.join(", ");
					}
				}
			});
			const panstatus = document.getElementById(`panNotavailable${i + 1}`);
			if (panstatus) {
				detials.isPan = !panstatus.checked;
			}
			io_appicants.push(detials);
		}
	}

	const bookSrcForm = bookingsourceArr.form;
	for (let i = 0; i < bookSrcForm.length; i++) {
		io_bookingsrc[bookSrcForm[i].label.toLowerCase().replaceAll(" ", "_")] =
			document.getElementById(bookSrcForm[i].id)
				? document.getElementById(bookSrcForm[i].id).value
				: "";
	}

	const udForm = anexureArr[0].form;
	const bookingForm = anexureArr[1].form;
	for (let i = 0; i < udForm.length; i++) {
		if (udForm[i].type !== "text") {
			io_unitdetails[
				udForm[i].label.trim().toLowerCase().replaceAll(" ", "_")
			] = document.getElementById(udForm[i].id)
					? document.getElementById(udForm[i].id).value
					: "";
		}
	}

	let arry_bookingamount = '';
	for (let k = 0; k < paymentSourceCount; k++) {
		const ids = k + 1;
		let amount = '';
		let amount_word = '';
		let payment_type = '';
		let bank_type = '';
		let payment_date = '';
		let cheque_favoring_details = '';
		let imgSrc = '';
		// const bank_cheque_img = JSON.parse(localStorage.getItem('mydocument'))
		const bank_cheque_img = JSON.parse(mydocument)
		if (bank_cheque_img['back_check_post_' + ids]) {
			imgSrc = bank_cheque_img['back_check_post_' + ids]
		}
		for (let i = 0; i < bookingForm.length; i++) {
			if (document.getElementById(bookingForm[i].id + '-' + ids)?.placeholder) {
				if (document.getElementById(bookingForm[i].id + '-' + ids).placeholder.trim().toLowerCase().replaceAll(" ", "_") == 'booking_amount_(in_inr)') {
					amount = document.getElementById(bookingForm[i].id + '-' + ids).value;
				}
				if (document.getElementById(bookingForm[i].id + '-' + ids).placeholder.trim().toLowerCase().replaceAll(" ", "_") == 'booking_amount_in_words_(in_inr)') {
					amount_word = document.getElementById(bookingForm[i].id + '-' + ids).value;
				}
				if (document.getElementById(bookingForm[i].id + '-' + ids).placeholder.trim().toLowerCase().replaceAll(" ", "_") == 'dd/po/cheque_no/rtgs/neft') {
					payment_type = document.getElementById(bookingForm[i].id + '-' + ids).value;
				}
				if (document.getElementById(bookingForm[i].id + '-' + ids).placeholder.trim().toLowerCase().replaceAll(" ", "_") == 'bank') {
					bank_type = document.getElementById(bookingForm[i].id + '-' + ids).value;
				}
				if (document.getElementById(bookingForm[i].id + '-' + ids).placeholder.trim().toLowerCase().replaceAll(" ", "_") == 'cheque_favoring_details') {
					cheque_favoring_details = document.getElementById(bookingForm[i].id + '-' + ids).value;
				}
				if (document.getElementById(bookingForm[i].id + '-' + ids).placeholder.trim().toLowerCase().replaceAll(" ", "_") == 'date') {
					payment_date = document.getElementById(bookingForm[i].id + '-' + ids).value;
				}
			}
		}
		arry_bookingamount += `<div class="main_formdetail">
  <div class="main_block table_bookingamount">
  <h3>BOOKING AMOUNT ${ids}</h3>
  <table>
    <tbody>
      <tr>
        <td>Bank:</td>
        <td id="">${bank_type}</td>
        <td>Date:</td>
        <td id="" colspan="3">${payment_date}</td>
      </tr>
      <tr>
        <td>Reference No.:</td>
        <td id="">${payment_type}</td>
        <td>In Favour of:</td>
        <td id="">${cheque_favoring_details}</td>
      </tr>
      <tr>
        <td>Booking Amount (INR):</td>
        <td id="">${amount}</td>
      </tr>
      <tr>
        <td>Amt. in Words (INR):</td>
        <td id="">${amount_word}</td>
      </tr> 
    </tbody>
      </table>
    </div>
    <div class="main_block table_bookingamount">
    <h3>Upload image</h3>
    <table>
      <tbody>
        <tr>
          <td></td>
          <td class=""><img class="back_check_image ${payment_type}" src="${imgSrc}"></td>
        </tr>
        <tr>
      </tbody>
    </table>
  </div>
  </div>`;
	}
	// document.getElementById('page_bookingamount').insertAdjacentHTML("afterend", arry_bookingamount);

	// const bank_cheque_img = JSON.parse(localStorage.getItem('mydocument'))
	const bank_cheque_img = JSON.parse(mydocument)
	if (bank_cheque_img['back_check_image']) {
		document.getElementById('back_check_image').src = bank_cheque_img['back_check_image'];
	}
	for (let i = 0; i < fir_lot.length; i++) {
		if (fir_lot[i].type !== "text") {
			fir_lotdata[fir_lot[i].label.trim().toLowerCase().replaceAll(" ", "_")] =
				document.getElementById(fir_lot[i].id)
					? document.getElementById(fir_lot[i].id).value
					: "";
		}
	}

	PreviewData.applicants = io_appicants;
	PreviewData.bookingsource = io_bookingsrc;
	PreviewData.unitdetails = io_unitdetails;
	PreviewData.bookingamount = io_bookingamount;
	PreviewData.allaboutyou = io_allaboutyou;
	PreviewData.fir_lot = fir_lotdata;
	PreviewData.selfdeclaration = schema["self-declaration"]["innerHTML"];

	for (let i = 0; i < io_appicants.length; i++) {
		io_appicants[i].user = shareDocuement(`applicant-photo-picker${i + 1}`);

		const documents = [];
		const fileUploadELe = document.querySelectorAll(".fileupload_contianer")[i];
		if (fileUploadELe) {
			const documentFiles =
				fileUploadELe.querySelectorAll(".file-upload") || [];
			for (let x = 0; x < documentFiles.length; x++) {
				const detials = {
					label: documentFiles[x].querySelector("label")
						? documentFiles[x].querySelector("label").innerText
						: "",
					url: "",
				};
				const inputEle = documentFiles[x].querySelector("input");
				if (inputEle) {
					detials.url = shareDocuement(inputEle.id);
				}
				if (detials.url) {
					documents.push(detials);
				}
			}
		}

		io_appicants[i].documents = documents;
	}
	return PreviewData;
}

function storeDocuement(id, blob) {
	// const myJson = JSON.parse(localStorage.getItem("mydocument")) || [];
	const myJson = JSON.parse(mydocument) || [];

	if (blob) {
		const reader = new FileReader();
		reader.readAsDataURL(blob);
		reader.addEventListener("load", () => {
			myJson[id] = reader.result;
			// localStorage.setItem("mydocument", JSON.stringify(myJson));
			mydocument = JSON.stringify(myJson);
		});
	}
}

function StoreDocumentName(id, name) {
	const myJson = JSON.parse(mydocument) || [];

	if (name) {
		myJson[id] = name;
		mydocument = JSON.stringify(myJson);
	}
}

function storeDocuementWithOutBase(id, blob) {
	// const myJson = JSON.parse(localStorage.getItem("mydocument")) || [];
	const myJson = JSON.parse(mydocument) || [];

	if (blob) {
		const reader = new FileReader();
		reader.readAsDataURL(blob);
		reader.addEventListener("load", () => {
			myJson[id] = reader.result.split(',')[1];
			// localStorage.setItem("mydocument", JSON.stringify(myJson));
			mydocument = JSON.stringify(myJson);
		});
	}
}

function shareDocuement(id) {
	// const myJson = JSON.parse(localStorage.getItem("mydocument")) || [];
	const myJson = JSON.parse(mydocument) || [];

	return myJson[id] ? myJson[id] : null;
}

function fillpdfContent(isPreview) {

	document.getElementById('loader').classList.remove('hideLoader');

	const mypromise = new Promise((preres, prerej) => {
		// document.getElementById('loader').classList.remove('hideLoader');
		document.querySelector(".canvas_div_pdf").classList.remove("hidden");
		const mypreviewDetails = createFunctionData();
		let allotees = mypreviewDetails.applicants;

		let names = '';
		let signLines = '';
		let count = 1;
		let countStr = '';
		const unitNo = schema['first-page']['form'][2]['defaultValue'];
		let unitNoStr = '';

		for (let allotee of allotees) {
			names += `<p>${allotee.data.name}</p>`;
			unitNoStr += `<p>${unitNo}</p>`;
			signLines += `<p>${count}</p>`;
			countStr += `<p>${count}</p>`;
			count++;
		}


		//

		document.querySelectorAll(".Page_kyc").forEach((ele) => {
			ele.remove();
		});
		document.querySelectorAll(".page_apcdetails").forEach((ele) => {
			ele.remove();
		});

		let isConcent = true;
		const fir_pData = schema["first-page"];

		var myquotationPDf = "";
		if (fir_pData) {
			const formData = fir_pData["consentform"];     // To be uncommented
			// const formData = true;     // To be commented

			if (!formData || formData === "false") {
				isConcent = false;
			}

		}

		jsonData['isConcent'] = isConcent;
		jsonData['unitNo'] = unitNo;
		// jsonData['projectLogo'] = document.getElementById('head_logo2').innerText;
		jsonData['projectLogo'] = '';

		myquotationPDf = fir_pData["quotationpdf"];
		const consform1 = fir_pData["form"][1]["defaultValue"];
		jsonData['consentFormType'] = consform1.toUpperCase();

		if (mypreviewDetails) {
			mypreviewDetails.isConcent = isConcent;
			// localStorage.setItem("myiojson", JSON.stringify(mypreviewDetails));
			myiojson = JSON.stringify(mypreviewDetails);

			const fir_lotData = mypreviewDetails.fir_lot;
			if (fir_lotData) {
				const myNameEle = document.getElementById("first_pname");
				myNameEle.innerText = mypreviewDetails.applicants[0]['data'].name;

				const mytNameEle = document.getElementById("first_tname");
				let myvalue = [];
				myvalue.push(mypreviewDetails.unitdetails.project_name)
				const fitLotData = Object.keys(fir_lotData);
				for (let i = 1; i < fitLotData.length; i++) {
					if (fir_lotData[fitLotData[i]]) {
						myvalue.push(fir_lotData[fitLotData[i]]);
					}
				}
				mytNameEle.innerText = myvalue.join(", ");

				jsonData['firstPage'] = {
					first_pname: mypreviewDetails.applicants[0]['data'].name,
					first_tname: myvalue.join(", "),
				}

			}

			const applicants = mypreviewDetails.applicants;
			if (applicants) {
				const tgEle = document.querySelector(".main-wrapper.page_firstintro");

				const pageNo =
					applicants.length % 3 == 0
						? applicants.length / 3
						: Math.floor(applicants.length / 3) + 1;

				let mainData = "";
				for (dl = 0; dl < pageNo; dl++) {
					let myData = "";
					for (let ix = dl * 3; ix < applicants.length; ix++) {
						const checkboxId = ix == 0 ? `${applicants[ix].type}_Same_as_permanent_address` : `${applicants[ix].type}_Same_as_primary`;
						const isChecked = document.getElementById(checkboxId).checked;
						if (isChecked) {

							if (ix != 0) {
								applicants[ix]['data']['correspondence_address'] = applicants[0]['data']['permanent_address'];
								applicants[ix]['data']['permanent_address'] = applicants[0]['data']['permanent_address'];
							}
							else {
								applicants[ix]['data']['correspondence_address'] = applicants[ix]['data']['permanent_address'];
								applicants[ix]['sameAsPrimary'] = true;
							}
						}
						else {
							applicants[ix]['sameAsPrimary'] = false;
						}
						myData = myData + apcard(applicants[ix], ix);
					}
					mainData =
						mainData +
						`<div class="main-wrapper page_apcdetails">
                    <div class="inner_wrapper">
                      <div class="row justify-content-between">
                        <div class="col header-logo head_logo1"> 
                        </div>
                        <div class="col header-logo head_logo2">
                        </div>
                      </div>
                      <div class="main_formdetail">${myData}</div>
                      <div class="date_wrapper">
                     </div>
                    </div>
                </div>`;
				}
				tgEle.insertAdjacentHTML("afterend", mainData);

				const anxureEle = document.querySelector(
					".main-wrapper.page_Annexures"
				);
				let mtdocmainData = "";
				for (let ix = 0; ix < applicants.length; ix++) {
					const mtDocLen = applicants[ix].documents || [];
					if (mtDocLen.length > 0) {
						let docsArr = [];
						let mtdocData = "";
						for (let dl = 0; dl < mtDocLen.length; dl++) {
							docsArr.push({
								'type': `${dl + 1}. ${mtDocLen[dl].label}`,
								'src': `${mtDocLen[dl].url}`,
								'subtype': `${mtDocLen[dl].label}`
							});
							mtdocData =
								mtdocData +
								`<div class="Applicant_block">
                    <p>${dl + 1}. ${mtDocLen[dl].label}</p>
                    <div class="img_block">
                      <img src="${mtDocLen[dl].url}" alt="">
                    </div>
                  </div> `;
						}

						jsonData['applicantsKyc'].push({
							'appType': applicantNum[applicants[ix].type],
							'docs': docsArr
						})

						mtdocmainData =
							mtdocmainData +
							`<div class="main-wrapper Page_kyc">
                <div class="inner_wrapper">
                  <div>
                  <div class="row justify-content-between">
                    <div class="col header-logo head_logo1">
                    </div>
                    <div class="col header-logo head_logo2">   
                    </div>
                  </div>
                  <div class="main_formdetail">
                    ${ix == 0 ? "<h2>Uploaded KYC Document</h2>" : ""}
                    <h3>${applicantNum[applicants[ix].type]}</h3>
                    <div class="Applicant_wrapper">
                      ${mtdocData}
                    </div>
                  </div>
                  </div>
                  <div>
                    <div class="common_footer sign_blocks_wrapper"> 
                    </div>
                  </div>
                </div>
              </div>`;
					}
				}
				anxureEle.insertAdjacentHTML("afterend", mtdocmainData);

				const signEle = document.querySelectorAll(".sign_blocks_wrapper");
				if (signEle) {
					signEle.forEach((siel) => {
						let data = "";
						for (let id = 0; id < applicants.length; id++) {
							data =
								data +
								`<div class="sign_block_wrapper">
            <div class="sign_block"></div>
          </div>`;
						}
						siel.innerHTML = data;
					});
				}
			}

			const bookingsrc = mypreviewDetails.bookingsource;

			if (bookingsrc) {
				const mybooksrc = preobj.bookingsource;
				const bookey = Object.keys(mybooksrc);
				jsonData['bookingSrc'] = {};
				try {				// Handling special case for booking source type referral
					if (bookingsrc['booking_source'] == 'Referral') {
						bookingsrc['channel_partner_mobile_no'] = bookingsrc['_mobile_no_of_referee'];
						bookingsrc['channel_partner_name'] = bookingsrc['name_of_referee'];
						document.getElementById('tr_io_rera_no').remove();
					} else if (bookingsrc['booking_source'] == 'Direct') {
						document.getElementById('tr_io_nam').remove();
						document.getElementById('tr_io_rera_no').remove();
						document.getElementById('tr_io_cp_mobile').remove();
					} else if (bookingsrc['booking_source'] == 'Channel Partner') {

					} else {
						document.getElementById('tr_io_nam').remove();
						document.getElementById('tr_io_rera_no').remove();
						document.getElementById('tr_io_cp_mobile').remove();
					}
				} catch (error) {

				}
				bookey.forEach((elet) => {

					const tgEle = document.getElementById(elet);

					if (tgEle && mybooksrc[elet]) {
						let val = bookingsrc[
							mybooksrc[elet].toLowerCase().replaceAll(" ", "_")
						]
							? bookingsrc[mybooksrc[elet].toLowerCase().replaceAll(" ", "_")]
							: "NA";
						tgEle.innerText = val;
						jsonData['bookingSrc'][elet] = val;
					} else {
						if (tgEle) {
							tgEle.innerText = "NA";
							jsonData['bookingSrc'][elet] = "NA";

						}
					}
				});
			}

			const unitdetails = mypreviewDetails.unitdetails;
			if (unitdetails) {
				const myunitsrc = preobj.unitdetails;
				const bookey = Object.keys(myunitsrc);
				jsonData['unitDetails'] = {};
				bookey.forEach((elet) => {
					const tgEle = document.getElementById(elet);
					if (tgEle && myunitsrc[elet]) {

						let val = unitdetails[
							myunitsrc[elet].toLowerCase().replaceAll(" ", "_")
						]
							? unitdetails[myunitsrc[elet].toLowerCase().replaceAll(" ", "_")]
							: "NA";
						tgEle.innerText = val;
						jsonData['unitDetails'][elet] = val;
					} else {
						if (tgEle) {
							tgEle.innerText = "NA";
							jsonData['unitDetails'][elet] = "NA";
						}
					}
				});
			}

			function formatDate(date) {
				var d = new Date(date),
					month = '' + (d.getMonth() + 1),
					day = '' + d.getDate(),
					year = d.getFullYear();

				if (month.length < 2)
					month = '0' + month;
				if (day.length < 2)
					day = '0' + day;

				return [day, month, year].join('-');
			}
			const aboutDetails = mypreviewDetails.allaboutyou;
			if (aboutDetails) {
				const aboutsrc = preobj.allaboutyou;
				const bookey = Object.keys(aboutsrc);
				jsonData['about'] = {};
				aboutDetails.date_of_birth = formatDate(aboutDetails.date_of_birth);
				bookey.forEach((elet) => {
					const tgEle = document.getElementById(elet);
					if (tgEle && aboutsrc[elet]) {
						let val = aboutDetails[
							aboutsrc[elet].toLowerCase().replaceAll(" ", "_")
						]
							? aboutDetails[aboutsrc[elet].toLowerCase().replaceAll(" ", "_")]
							: "NA";
						tgEle.innerText = val;
						jsonData['about'][elet] = val;
					} else {
						if (tgEle) {
							tgEle.innerText = "NA";
							jsonData['about'][elet] = "NA";
						}
					}
				});
			}

			const badetails = mypreviewDetails.bookingamount;
			if (badetails) {
				const basrc = preobj.bookingamount;
				const bookey = Object.keys(basrc);
				jsonData['baDetails'] = {};
				bookey.forEach((elet) => {

					const tgEle = document.getElementById(elet);
					if (tgEle && basrc[elet]) {
						let val = badetails[
							basrc[elet].toLowerCase().replaceAll(" ", "_")
						]
							? badetails[basrc[elet].toLowerCase().replaceAll(" ", "_")]
							: "NA";
						tgEle.innerText = val;
						jsonData['baDetails'][elet] = val;
					} else {
						if (tgEle) {
							tgEle.innerText = "NA";
							jsonData['baDetails'][elet] = "NA";
						}
					}
				});
			}

			const declareEle = document.querySelector(
				".page_selfdeclaration .main_formdetail"
			);

			declareEle.innerHTML = mypreviewDetails.selfdeclaration;
		}




		document.querySelectorAll(".date_wrapper").forEach((daw) => {
			daw.innerHTML = `<p><strong>Date:</strong> ${new Date().getDate()}.${new Date().getMonth() + 1
				}.${new Date().getFullYear()}</p>`;
		});


		let numBnk = document.getElementsByName("field_0762z3t").length
		if (numBnk > 0) {

			for (let i = 1; i <= numBnk; i++) {

				// Check if at least one input exists
				if (!document.getElementById(`Field_0jpybug-${i}`)) {
					break;
				}
				if (jsonData['paymentSources'].length == numBnk) {
					jsonData['paymentSources'][i - 1]['Amount__c'] = document.getElementById(`Field_0jpybug-${i}`).value;
					jsonData['paymentSources'][i - 1]['Bank_Name__c'] = document.getElementById(`Field_0l98pn7-${i}`).value;
					jsonData['paymentSources'][i - 1]['Mode_Of_Payment__c'] = document.getElementById(`payment_source_${i}`).value;
					jsonData['paymentSources'][i - 1]['Date_of_payment__c'] = document.getElementById(`Field_1b0ifpldate_check-${i}`).value;
				} else {
					if (jsonData['paymentSources'].length != i - 1) {
						jsonData['paymentSources'][i - 1]['Amount__c'] = document.getElementById(`Field_0jpybug-${i}`).value;
						jsonData['paymentSources'][i - 1]['Bank_Name__c'] = document.getElementById(`Field_0l98pn7-${i}`).value;
						jsonData['paymentSources'][i - 1]['Mode_Of_Payment__c'] = document.getElementById(`payment_source_${i}`).value;
						jsonData['paymentSources'][i - 1]['Date_of_payment__c'] = document.getElementById(`Field_1b0ifpldate_check-${i}`).value;
					} else {
						jsonData['paymentSources'].push({
							"Amount__c": document.getElementById(`Field_0jpybug-${i}`).value,
							"Bank_Name__c": document.getElementById(`Field_0l98pn7-${i}`).value,
							"Mode_Of_Payment__c": document.getElementById(`payment_source_${i}`).value,
							"Date_of_payment__c": document.getElementById(`Field_1b0ifpldate_check-${i}`).value,
							"imageSrc": "",
							"rowId": i
						})
					}
				}


			}

		}


		var HTML_Width = $(".main-wrapper").width();
		var HTML_Height = $(".main-wrapper").height();
		var PDF_Width = 802;
		var PDF_Height = 1151;
		var canvas_image_width = HTML_Width;
		var canvas_image_height = HTML_Height;

		var mypfFile = [];
		const myEles = $(".main-wrapper").not(".hidden");
		let textPayload = '';


		// for (let igt = 0; igt < myEles.length; igt++) {
		// 	textPayload += myEles[igt].innerHTML;
		// 	// let canvas = new Promise((reso, reje) => {

		// 	// 	// console.log(myEles[igt]);

		// 	// 	// Use { allowTaint: true, scale: true } to reduce pdf size
		// 	// 	html2canvas(myEles[igt], { allowTaint: true }).then(async function (
		// 	// 		canvas
		// 	// 	) {
		// 	// 		canvas.getContext("2d");
		// 	// 		let imgData = canvas.toDataURL("image/jpeg", 0.75);

		// 	// 		let pdf = new jsPDF("p", "pt", [PDF_Width, PDF_Height]);
		// 	// 		pdf.addImage(
		// 	// 			imgData,
		// 	// 			"JPG",
		// 	// 			0,
		// 	// 			0,
		// 	// 			canvas_image_width,
		// 	// 			canvas_image_height,
		// 	// 		);

		// 	// 		const FilePDF = new File(
		// 	// 			[pdf.output("blob")],
		// 	// 			`mypdf${igt + 1}.pdf`,
		// 	// 			{
		// 	// 				type: "application/pdf",
		// 	// 			}
		// 	// 		);

		// 	// 		reso(FilePDF);
		// 	// 	});
		// 	// });
		// 	// mypfFile.push(canvas);
		// }
		// var generatedPdfFileName = '';

		// function generatePdf() {
		// 	const requestOptions = {
		// 		method: 'POST',
		// 		headers:
		// 			{ 'content-type': 'text/plain' },

		// 		body: textPayload
		// 	};
		// 	fetch(nodejspdfapilink, requestOptions).then((resp) => {
		// 		return resp.json();
		// 	}).then(
		// 		(res) => {
		// 			generatedPdfFileName = res['fileName'];
		// 			if(generatedPdfFileName==''){
		// 				document.getElementById('loader').classList.add('hideLoader');
		// 				alert(`PDF file couldn't be generated.`);
		// 			}
		// 			else{
		// 				document.getElementById('generatedformPDF').value = generatedPdfFileName;
		// 				document.getElementById("form").submit();
		// 				document.getElementById('loader').classList.add('hideLoader');

		// 			}
		// 		}).catch(err => {
		// 			document.getElementById('loader').classList.add('hideLoader');
		// 		})
		// }

		// generatePdf()

		const getFieldValueById = (id) => {
			if (document.querySelector(`#${id}`)) {
				return document.querySelector(`#${id}`).value;
			} else {
				return '';
			}
		}

		const key_val_map = {
			passport: 'Passport',
			relWithPrimaryApplicant: 'RelationShip'
		}
		
		jsonData.applicants.forEach((applicant, i) => {
			for (let key of Object.keys(key_val_map)) {
				applicant[key] = getFieldValueById(`A${i+1}_${key_val_map[key]}`);
			}
			if(i==0){
				applicant['relWithPrimaryApplicant'] = 'DonotInclude';
			}
		});
		jsonData['userAgent'] = navigator.userAgent;
		// Store payload in textarea
		document.getElementById('pdfContent').textContent = JSON.stringify(jsonData);
		let fileInputs = document.querySelectorAll('input[type="file"]');
		for (let file of fileInputs) {
			file.value = '';
		}
		
		document.getElementById("form").submit();

	}).catch((err) => {
		console.log(err);
	});

	return mypromise;
}


function apcard(data, ix) {
	const mydata = data.data;
	jsonData['applicants'].push({
		type: applicantNum[data.type],
		imageSrc: data.user,
		panNumber: mydata.pan_number
			? mydata.pan_number
			: "NA",
		panValidated: mydata.pan_number ? "check" : "xMark",
		aadharNumber: mydata.addhar_number
			? mydata.addhar_number
			: "NA",
		name: mydata.name ? mydata.name : "NA",
		phone: mydata.phone ? mydata.phone : "NA",
		email: mydata.email ? mydata.email : "NA",
		permAdd: mydata.permanent_address
			? mydata.permanent_address
			: "NA",
		corspAdd: data.sameAsPrimary
			? mydata.permanent_address
			: mydata.correspondence_address,
	})
	const myHtml = `<div class="applicant-card-wrapper">
                    <div class="applicant-detail-wrapper">
                    <h3>${applicantNum[data.type]}</h3>
                      <div class="applicant-card">
                          <div class="applicant-img">
                              <img src="${data.user
		}" class="img-fluid" alt="user" />
                          </div>
                          <div class="applicant-sig"></div>
                          <div class="applicant-info">
                              <ul>
                                  <li class=${mydata.pan_number ? "check" : "xMark"}>
                                      <label>PAN:</label><p>${mydata.pan_number
			? mydata.pan_number
			: "NA"
		}</p>
                                  </li>
                                  <li class="check">
                                      <label>AADHAR:</label><p>${mydata.addhar_number
			? mydata.addhar_number
			: "NA"
		}</p>
                                  </li>
                              </ul>
                          </div>
                      </div>
                      <div class="applicant-detail">
                          <h3>${applicantNum[data.type]}</h3>
                          <ul>
                              <li class="applicant-list">
                                  <label>Name</label><p>${mydata.name ? mydata.name : "NA"
		}</p>
                              </li>
                              <li class="applicant-list">
                                  <label>Phone</label><p>${mydata.phone ? mydata.phone : "NA"
		}</p>
                              </li>
                              <li class="applicant-list">
                                  <label>Email</label><p>${mydata.email ? mydata.email : "NA"
		}</p>
                              </li>
                              <li class="applicant-list">
                                  <label>Permanent Address</label><p>${mydata.permanent_address
			? mydata.permanent_address
			: "NA"
		}</p>
                              </li>
                              ${ix == 0
			? `<li class="applicant-list">
                                  <label>Correspondance Address</label><p>${data.sameAsPrimary
				? mydata.permanent_address
				: mydata.correspondence_address
			}</p>
                              </li>`
			: ""
		}
                          </ul>
                      </div>
                  </div>
                </div>`;


	return myHtml;
}

function myEsignFunction() {
	sbmitData(true);

	signModal.style.display = "block";
	const main_container = document.createElement("div");
	main_container.classList.add("esign_maincontainer");

	const data = createEsignData();
	data.forEach((ap, i) => {
		const aplc_row = document.createElement("div");
		aplc_row.classList.add("aplc_rowcontainer");

		main_container.appendChild(aplc_row);

		const aplc_rowspan = document.createElement("span");
		aplc_rowspan.innerHTML = i + 1;
		aplc_row.appendChild(aplc_rowspan);

		const aplc_rowprag = document.createElement("p");
		aplc_rowprag.innerHTML = ap.value;

		aplc_row.appendChild(aplc_rowprag);

		const inputCtn = document.createElement("div");
		inputCtn.classList.add("inputCtn");
		const select = document.createElement("select");
		select.setAttribute("id", `A${i + 1}_${ap.type}_Signature_Process`);
		select.setAttribute("name", `A${i + 1}_${ap.type}_Signature_Process`);

		for (const optionVal of signingOption) {
			const option = document.createElement("option");
			option.setAttribute("value", optionVal.value);
			option.innerText = optionVal.label;
			select.append(option);
		}

		inputCtn.append(select);
		aplc_row.appendChild(inputCtn);

		main_container.appendChild(aplc_row);
	});

	const modelContent = document.getElementById("signIdContent");
	modelContent.innerHTML = "";
	modelContent.appendChild(main_container);
}

