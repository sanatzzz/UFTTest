<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="1">
  <HTTPTask id="1" hostname="dev.bluealgo.com" path="/smartformup/loadindex?opportunityId=0060o00001eSIJ0AAO&amp;customerid=cust1005&amp;accesstoken=RFpSQVUIgd4Y_oYNL81naExVLAYgKQt7" url="https://dev.bluealgo.com/smartformup/loadindex?opportunityId=0060o00001eSIJ0AAO&amp;customerid=cust1005&amp;accesstoken=RFpSQVUIgd4Y_oYNL81naExVLAYgKQt7" ip="144.126.253.3" port="443" client_ip="192.168.0.112" client_port="64262" connectionId="2220" origin="Primary" encodingType="ANSI" startDateTime="2024-02-16T16:37:19.713+05:30" startTime="2584" endTime="2785" blockedTime="-1" dnsTime="2" connectTime="66" sendTime="4294967295" waitTime="4294967295" receiveTime="14" sslNegotiateTime="38" responseBodySize="4047">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>b3Bwb3J0dW5pdHlJZD0wMDYwbzAwMDAxZVNJSjBBQU8mY3VzdG9tZXJpZD1jdXN0MTAwNSZhY2Nlc3N0b2tlbj1SRnBTUVZVSWdkNFlfb1lOTDgxbmFFeFZMQVlnS1F0Nw==</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="opportunityId" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>MDA2MG8wMDAwMWVTSUowQUFP</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
      <HTTPHeaderEntity name="customerid" index="1">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>Y3VzdDEwMDU=</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
      <HTTPHeaderEntity name="accesstoken" index="2">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>UkZwU1FWVUlnZDRZX29ZTkw4MW5hRXhWTEFZZ0tRdDc=</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name=":method" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VU</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":scheme" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":path" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>L3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":authority" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZGV2LmJsdWVhbGdvLmNvbQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9zbWFydGZvcm11cC9sb2FkaW5kZXg/b3Bwb3J0dW5pdHlJZD0wMDYwbzAwMDAxZVNJSjBBQU8mY3VzdG9tZXJpZD1jdXN0MTAwNSZhY2Nlc3N0b2tlbj1SRnBTUVZVSWdkNFlfb1lOTDgxbmFFeFZMQVlnS1F0Nw0KOmF1dGhvcml0eTogZGV2LmJsdWVhbGdvLmNvbQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPPropertySet>
        <HTTPProperty name="StreamID">1</HTTPProperty>
        <HTTPProperty name="TotalHeadersSize">218</HTTPProperty>
      </HTTPPropertySet>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>4483</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Status" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MjAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="date" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="content-type" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sO2NoYXJzZXQ9SVNPLTg4NTktMQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="content-length" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>NDQ4Mw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="access-control-allow-origin" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Kg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="set-cookie" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SlNFU1NJT05JRD1COEI5REUyNDA1ODE3RDYwMjlFQzM0QzA3NDlEQjJFRjsgUGF0aD0vc21hcnRmb3JtdXA7IEh0dHBPbmx5</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="strict-transport-security" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bWF4LWFnZT0xNTcyNDgwMDsgaW5jbHVkZVN1YkRvbWFpbnM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQNCmNvbnRlbnQtdHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9SVNPLTg4NTktMQ0KY29udGVudC1sZW5ndGg6IDQ0ODMNCmFjY2Vzcy1jb250cm9sLWFsbG93LW9yaWdpbjogKg0Kc2V0LWNvb2tpZTogSlNFU1NJT05JRD1COEI5REUyNDA1ODE3RDYwMjlFQzM0QzA3NDlEQjJFRjsgUGF0aD0vc21hcnRmb3JtdXA7IEh0dHBPbmx5DQpzdHJpY3QtdHJhbnNwb3J0LXNlY3VyaXR5OiBtYXgtYWdlPTE1NzI0ODAwOyBpbmNsdWRlU3ViRG9tYWlucw0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>CgoKPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CjxtZXRhIGNoYXJzZXQ9IlVURi04IiAvPgo8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+CjxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIiAvPgo8bGluayBocmVmPSJzdHlsZXMuY3NzIiByZWw9InN0eWxlc2hlZXQiIC8+Cgo8bGluayByZWw9InByZWNvbm5lY3QiIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20iIC8+CjxsaW5rIHJlbD0icHJlY29ubmVjdCIgaHJlZj0iaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbSIgY3Jvc3NvcmlnaW4gLz4KPGxpbmsKCWhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvOndnaHRAMzAwOzQwMDs1MDA7NzAwJmRpc3BsYXk9c3dhcCIKCXJlbD0ic3R5bGVzaGVldCIgLz4KCjxsaW5rCglocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUlCTStQbGV4K1NhbnM6aXRhbCx3Z2h0QDAsNDAwOzAsNjAwOzEsNDAwJmRpc3BsYXk9c3dhcCIKCXJlbD0ic3R5bGVzaGVldCIgLz4KCjwhLS0gIDxsaW5rIGhyZWY9Imh0dHBzOi8vdW5wa2cuY29tL0BicG1uLWlvL2Zvcm0tanMvZGlzdC9hc3NldHMvZm9ybS1qcy5jc3MiIHJlbD0ic3R5bGVzaGVldCI+ICAtLT4KPGxpbmsKCWhyZWY9Imh0dHBzOi8vdW5wa2cuY29tL0BicG1uLWlvL2Zvcm0tanMvZGlzdC9hc3NldHMvZmxhdHBpY2tyL2xpZ2h0LmNzcyIKCXJlbD0ic3R5bGVzaGVldCIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IgoJaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzYuMy4wL2Nzcy9hbGwubWluLmNzcyIKCWludGVncml0eT0ic2hhNTEyLVN6bHJ4V1VscGZ1elErcGNVQ29zeGNnbFFSTkFxL0RaalZzQzBsRTQweHNBRHNmZVFvRXlwRStlbndjT2lHamsvYlN1R0dLSEV5alNvUTF6VmlzYW5RPT0iCgljcm9zc29yaWdpbj0iYW5vbnltb3VzIiByZWZlcnJlcnBvbGljeT0ibm8tcmVmZXJyZXIiIC8+Cjx0aXRsZT5Gb3JtPC90aXRsZT4KPC9oZWFkPgo8c3R5bGU+Ci5wb3B1cC1vdXRlci13cmFwcGVyIHsKCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCXRvcDogMDsKCWxlZnQ6IDA7Cglib3R0b206IDA7CglyaWdodDogMDsKCWJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yKTsKfQoKLnBvcHVwLXdyYXBwZXIgewoJcG9zaXRpb246IGFic29sdXRlOwoJdG9wOiA1MCU7CglsZWZ0OiA1MCU7Cgl0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsKCWZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmOwoJbWF4LXdpZHRoOiA1MCU7CgltYXJnaW46IDIwcHggYXV0bzsKCXBhZGRpbmc6IDIwcHg7CgliYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKCS8qIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzUsIDIzNSwgMjM1KTsgKi8KCS8qIGJveC1zaGFkb3c6IDJweCAycHggNXB4IHdoaXRlOyAqLwoJYm9yZGVyLXJhZGl1czogMTBweDsKfQoKLnBvcHVwLXdyYXBwZXItaW5uZXIgewoJZGlzcGxheTogZmxleDsKCWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47Cn0KCi5wb3B1cC1oZWFkZXItdGVtcGxhdGUgewoJZGlzcGxheTogZmxleDsKCWZsZXgtZGlyZWN0aW9uOiByb3c7CglqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CgltYXJnaW4tYm90dG9tOiAyMHB4Owp9CgoucG9wdXAtYm9keSB7CglkaXNwbGF5OiBmbGV4OwoJZmxleC1kaXJlY3Rpb246IHJvdzsKCWp1c3RpZnktY29udGVudDogY2VudGVyOwp9CgoucG9wdXAtYm9keS1jb250ZW50IHsKCWRpc3BsYXk6IGZsZXg7CglmbGV4LWRpcmVjdGlvbjogY29sdW1uOwoJcm93LWdhcDogMjBweDsKfQoKLnBvcHVwLW1haW4tc2VjdGlvbiB7CglkaXNwbGF5OiBmbGV4OwoJZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKCWFsaWduLWl0ZW1zOiBjZW50ZXI7Cglib3JkZXItdG9wOiA1cHggc29saWQgIzI1QUU4ODsKCWJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMik7Cglib3JkZXItbGVmdDogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTsKCWJvcmRlci1yaWdodDogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTsKCWJhY2tncm91bmQtY29sb3I6IHdoaXRlOwoJcGFkZGluZzogNDBweCAzMHB4IDIwcHg7Cn0KCi5wb3B1cC1hY3Rpb24tYnRucy13cmFwcGVyIHsKCWRpc3BsYXk6IGZsZXg7CglqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKCWNvbHVtbi1nYXA6IDEwcHg7Cn0KCi5wb3B1cC1mb290ZXItdGVtcGxhdGUgewoJZGlzcGxheTogZmxleDsKCWp1c3RpZnktY29udGVudDogZmxleC1lbmQ7CglmbGV4LWRpcmVjdGlvbjogY29sdW1uOwoJcm93LWdhcDogMTBweDsKCWFsaWduLWl0ZW1zOiBmbGV4LWVuZDsKfQoKLmJyYWRzLXRleHQgewoJZm9udC1zaXplOiAwLjhlbTsKfQoKLnBvcHVwLWFjdGlvbi1idG5zIHsKCXBhZGRpbmc6IDEwcHggMjBweDsKCWJvcmRlci1yYWRpdXM6IDIwcHg7Cglib3JkZXI6IG5vbmU7Cgljb2xvcjogcmdiYSgwLCAwLCAwLCAwLjgpOwp9CgoucG9wdXAtYWN0aW9uLWJ0bnM6aG92ZXIgewoJb3BhY2l0eTogMC45OwoJY3Vyc29yOiBwb2ludGVyOwp9CgpidXR0b24uY2xvc2UtYnRuIHsKCWJhY2tncm91bmQtY29sb3I6ICNmYjRjOTU7Cn0KCmJ1dHRvbi5leHBsb3JlLWJ0biB7CgliYWNrZ3JvdW5kLWNvbG9yOiAjZmZiMTAwOwp9CgouZmEtYnJhbmRzIHsKCWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOCk7CgltYXJnaW4tcmlnaHQ6IDVweDsKfQoKLmZhLWxpbmtlZGluIHsKCW1hcmdpbi1yaWdodDogMHB4Owp9CgoucG9wdXAtbWFpbi1zZWN0aW9uIGgzIHsKCW1hcmdpbi1ib3R0b206IDBweDsKCWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOCk7Cglmb250LXdlaWdodDogNDAwOwp9CgoucG9wdXAtbWFpbi1zZWN0aW9uIHAgewoJZm9udC1zaXplOiAwLjhlbTsKfQoKLmhpZGVQb3B1cCB7CglkaXNwbGF5OiBub25lOwp9Cjwvc3R5bGU+Cjxib2R5IG9ubG9hZD0ib3BlblBvcHVwKCkiPgoKCTxkaXYgY2xhc3M9InBvcHVwLW91dGVyLXdyYXBwZXIgaGlkZVBvcHVwIiBpZD0icG9wdXAiPgoJCTxkaXYgY2xhc3M9InBvcHVwLXdyYXBwZXIiPgoJCQk8ZGl2IGNsYXNzPSJwb3B1cC13cmFwcGVyLWlubmVyIj4KCQkJCQoJCQkJPGRpdiBjbGFzcz0icG9wdXAtYm9keSI+CgkJCQkJPGRpdiBjbGFzcz0icG9wdXAtYm9keS1jb250ZW50Ij4KCQkJCQkJPGRpdiBjbGFzcz0icG9wdXAtbWFpbi1zZWN0aW9uIj4KCQkJCQkJCTxkaXYgY2xhc3M9InN1Y2Nlc3MtaWNvbi13cmFwcGVyIj4KCQkJCQkJCQk8aW1nIHdpZHRoPSI1MHB4IiBoZWlnaHQ9IjUwcHgiIHNyYz0idWkvZXJyb3Iuc3ZnIiBhbHQ9IiI+CgkJCQkJCQk8L2Rpdj4KCQkJCQkJCTxkaXY+CgkJCQkJCQkJPGgzPkVSUk9SITwvaDM+CgkJCQkJCQk8L2Rpdj4KCQkJCQkJCTxkaXY+CgkJCQkJCQkJCgkJCQkJCQkJPGgzPgoJCQkJCQkJCQlTb3JyeSBsaW5rIGV4cGlyZSEKCQkJCQkJCQk8L2gzPgoJCQkJCQkJPC9kaXY+CgkJCQkJCQk8ZGl2PgoJCQkJCQkJCTxwPgoJCQkJCQkJCQlQbGVhc2UgY29udGFjdCB0byBzeXN0ZW0gYWRtaW4hCgkJCQkJCQkJPC9wPgoJCQkJCQkJPC9kaXY+CgkJCQkJCTwvZGl2PgoJCQkJCQkKCQkJCQk8L2Rpdj4KCQkJCTwvZGl2PgoJCQkJCgkJCTwvZGl2PgoJCTwvZGl2PgoJPC9kaXY+CjwvYm9keT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJZnVuY3Rpb24gb3BlblBvcHVwKCkgewoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3B1cCcpLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGVQb3B1cCcpOwoJfQoJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nsb3NlQnRuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9wdXAnKS5jbGFzc0xpc3QuYWRkKCdoaWRlUG9wdXAnKTsKCX0pOwoKCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleHBsb3JlQnRuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9wdXAnKS5jbGFzc0xpc3QuYWRkKCdoaWRlUG9wdXAnKTsKCX0pOwo8L3NjcmlwdD4KPHNjcmlwdAoJc3JjPSJodHRwczovL3VucGtnLmNvbS9AYnBtbi1pby9mb3JtLWpzQDAuMTAuMC9kaXN0L2Zvcm0tdmlld2VyLnVtZC5qcyI+PC9zY3JpcHQ+Cgo8c2NyaXB0CglzcmM9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vc2lnbmF0dXJlX3BhZEA0LjAuMC9kaXN0L3NpZ25hdHVyZV9wYWQudW1kLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJ1aS9sb2FkRm9ybS5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJ1aS9zY3JpcHQuanMiPjwvc2NyaXB0Pgo8L2h0bWw+Cg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <HTTPPropertySet>
        <HTTPProperty name="StreamID">1</HTTPProperty>
        <HTTPProperty name="TotalHeadersSize">189</HTTPProperty>
      </HTTPPropertySet>
    </HTTPResponse>
    <HTTPTask id="2" hostname="dev.bluealgo.com" path="/smartformup/styles.css" url="https://dev.bluealgo.com/smartformup/styles.css" ip="144.126.253.3" port="443" client_ip="192.168.0.112" client_port="64262" connectionId="2220" origin="HTML" encodingType="ANSI" ordinal="1" startDateTime="2024-02-16T16:37:19.900+05:30" startTime="2770" endTime="2909" blockedTime="-1" dnsTime="-1" connectTime="-2" sendTime="4294967295" waitTime="4294967295" receiveTime="1" sslNegotiateTime="-1" responseBodySize="135">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name=":method" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":scheme" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":path" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L3NtYXJ0Zm9ybXVwL3N0eWxlcy5jc3M=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":authority" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZGV2LmJsdWVhbGdvLmNvbQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cookie" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD1COEI5REUyNDA1ODE3RDYwMjlFQzM0QzA3NDlEQjJFRg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9zbWFydGZvcm11cC9zdHlsZXMuY3NzDQo6YXV0aG9yaXR5OiBkZXYuYmx1ZWFsZ28uY29tDQpSZWZlcmVyOiBodHRwczovL2Rldi5ibHVlYWxnby5jb20vc21hcnRmb3JtdXAvbG9hZGluZGV4P29wcG9ydHVuaXR5SWQ9MDA2MG8wMDAwMWVTSUowQUFPJmN1c3RvbWVyaWQ9Y3VzdDEwMDUmYWNjZXNzdG9rZW49UkZwU1FWVUlnZDRZX29ZTkw4MW5hRXhWTEFZZ0tRdDcNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMjEuMC4wLjAgU2FmYXJpLzUzNy4zNg0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KY29va2llOiBKU0VTU0lPTklEPUI4QjlERTI0MDU4MTdENjAyOUVDMzRDMDc0OURCMkVGDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>QjhCOURFMjQwNTgxN0Q2MDI5RUMzNEMwNzQ5REIyRUY=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">3</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">175</HTTPProperty>
        </HTTPPropertySet>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>1100</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Status" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NDA0</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9odG1sO2NoYXJzZXQ9dXRmLTg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTEwMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-allow-origin" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="strict-transport-security" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0xNTcyNDgwMDsgaW5jbHVkZVN1YkRvbWFpbnM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8yLjAgNDA0DQpTdGF0dXM6IDQwNA0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQNCmNvbnRlbnQtdHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNCmNvbnRlbnQtbGVuZ3RoOiAxMTAwDQphY2Nlc3MtY29udHJvbC1hbGxvdy1vcmlnaW46ICoNCmNvbnRlbnQtbGFuZ3VhZ2U6IGVuDQpzdHJpY3QtdHJhbnNwb3J0LXNlY3VyaXR5OiBtYXgtYWdlPTE1NzI0ODAwOyBpbmNsdWRlU3ViRG9tYWlucw0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>PCFkb2N0eXBlIGh0bWw+PGh0bWwgbGFuZz0iZW4iPjxoZWFkPjx0aXRsZT5IVFRQIFN0YXR1cyA0MDQg4oCTIE5vdCBGb3VuZDwvdGl0bGU+PHN0eWxlIHR5cGU9InRleHQvY3NzIj5oMSB7Zm9udC1mYW1pbHk6VGFob21hLEFyaWFsLHNhbnMtc2VyaWY7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO2NvbG9yOndoaXRlO2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtmb250LXNpemU6MTZweDt9IGgzIHtmb250LWZhbWlseTpUYWhvbWEsQXJpYWwsc2Fucy1zZXJpZjtjb2xvcjp3aGl0ZTtiYWNrZ3JvdW5kLWNvbG9yOiM1MjVENzY7Zm9udC1zaXplOjE0cHg7fSBib2R5IHtmb250LWZhbWlseTpUYWhvbWEsQXJpYWwsc2Fucy1zZXJpZjtjb2xvcjpibGFjaztiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO30gYiB7Zm9udC1mYW1pbHk6VGFob21hLEFyaWFsLHNhbnMtc2VyaWY7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gcCB7Zm9udC1mYW1pbHk6VGFob21hLEFyaWFsLHNhbnMtc2VyaWY7YmFja2dyb3VuZDp3aGl0ZTtjb2xvcjpibGFjaztmb250LXNpemU6MTJweDt9IGEge2NvbG9yOmJsYWNrO30gYS5uYW1lIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDQwNCDigJMgTm90IEZvdW5kPC9oMT48aHIgY2xhc3M9ImxpbmUiIC8+PHA+PGI+VHlwZTwvYj4gU3RhdHVzIFJlcG9ydDwvcD48cD48Yj5NZXNzYWdlPC9iPiAmIzQ3O3NtYXJ0Zm9ybXVwJiM0NztzdHlsZXMuY3NzPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgb3JpZ2luIHNlcnZlciBkaWQgbm90IGZpbmQgYSBjdXJyZW50IHJlcHJlc2VudGF0aW9uIGZvciB0aGUgdGFyZ2V0IHJlc291cmNlIG9yIGlzIG5vdCB3aWxsaW5nIHRvIGRpc2Nsb3NlIHRoYXQgb25lIGV4aXN0cy48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS40NTwvaDM+PC9ib2R5PjwvaHRtbD4=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">3</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">135</HTTPProperty>
        </HTTPPropertySet>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="3" hostname="fonts.googleapis.com" path="/css2?family=Roboto:wght@300;400;500;700&amp;display=swap" url="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&amp;display=swap" ip="142.250.192.42" port="443" client_ip="192.168.0.112" client_port="64264" connectionId="2400" origin="HTML" encodingType="ANSI" ordinal="2" startDateTime="2024-02-16T16:37:19.927+05:30" startTime="2799" endTime="3109" blockedTime="-1" dnsTime="33" connectTime="172" sendTime="4294967295" waitTime="4294967295" receiveTime="2" sslNegotiateTime="82" responseBodySize="828">
      <QueryString>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>ZmFtaWx5PVJvYm90bzp3Z2h0QDMwMDs0MDA7NTAwOzcwMCZkaXNwbGF5PXN3YXA=</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </QueryString>
      <HTTPSplittedQueryStrings>
        <HTTPHeaderEntity name="family" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Um9ib3RvOndnaHRAMzAwOzQwMDs1MDA7NzAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="display" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c3dhcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
      </HTTPSplittedQueryStrings>
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name=":method" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":scheme" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":path" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L2NzczI/ZmFtaWx5PVJvYm90bzp3Z2h0QDMwMDs0MDA7NTAwOzcwMCZkaXNwbGF5PXN3YXA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":authority" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Zm9udHMuZ29vZ2xlYXBpcy5jb20=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEAzMDA7NDAwOzUwMDs3MDAmZGlzcGxheT1zd2FwDQo6YXV0aG9yaXR5OiBmb250cy5nb29nbGVhcGlzLmNvbQ0KUmVmZXJlcjogaHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3DQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTIxLjAuMC4wIFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">3</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">55</HTTPProperty>
        </HTTPPropertySet>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>0</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Status" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-type" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3M7IGNoYXJzZXQ9dXRmLTg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-allow-origin" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="timing-allow-origin" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="link" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>PGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20+OyByZWw9cHJlY29ubmVjdDsgY3Jvc3NvcmlnaW4=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="strict-transport-security" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0zMTUzNjAwMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="expires" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cache-control" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHJpdmF0ZSwgbWF4LWFnZT04NjQwMCwgc3RhbGUtd2hpbGUtcmV2YWxpZGF0ZT02MDQ4MDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="last-modified" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowMjozMiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cross-origin-opener-policy" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>c2FtZS1vcmlnaW4tYWxsb3ctcG9wdXBz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cross-origin-resource-policy" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y3Jvc3Mtb3JpZ2lu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-encoding" index="12">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="server" index="13">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RVNG</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-xss-protection" index="14">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-frame-options" index="15">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0FNRU9SSUdJTg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-content-type-options" index="16">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bm9zbmlmZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="alt-svc" index="17">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aDM9Ijo0NDMiOyBtYT0yNTkyMDAwLGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KY29udGVudC10eXBlOiB0ZXh0L2NzczsgY2hhcnNldD11dGYtOA0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQp0aW1pbmctYWxsb3ctb3JpZ2luOiAqDQpsaW5rOiA8aHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbT47IHJlbD1wcmVjb25uZWN0OyBjcm9zc29yaWdpbg0Kc3RyaWN0LXRyYW5zcG9ydC1zZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMA0KZXhwaXJlczogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQNCmRhdGU6IEZyaSwgMTYgRmViIDIwMjQgMTE6MDc6MjAgR01UDQpjYWNoZS1jb250cm9sOiBwcml2YXRlLCBtYXgtYWdlPTg2NDAwLCBzdGFsZS13aGlsZS1yZXZhbGlkYXRlPTYwNDgwMA0KbGFzdC1tb2RpZmllZDogRnJpLCAxNiBGZWIgMjAyNCAxMTowMjozMiBHTVQNCmNyb3NzLW9yaWdpbi1vcGVuZXItcG9saWN5OiBzYW1lLW9yaWdpbi1hbGxvdy1wb3B1cHMNCmNyb3NzLW9yaWdpbi1yZXNvdXJjZS1wb2xpY3k6IGNyb3NzLW9yaWdpbg0KY29udGVudC1lbmNvZGluZzogZ3ppcA0Kc2VydmVyOiBFU0YNCngteHNzLXByb3RlY3Rpb246IDANCngtZnJhbWUtb3B0aW9uczogU0FNRU9SSUdJTg0KeC1jb250ZW50LXR5cGUtb3B0aW9uczogbm9zbmlmZg0KYWx0LXN2YzogaDM9Ijo0NDMiOyBtYT0yNTkyMDAwLGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">3</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">65</HTTPProperty>
        </HTTPPropertySet>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="4" hostname="fonts.googleapis.com" path="/css2?family=IBM+Plex+Sans:ital,wght@0,400;0,600;1,400&amp;display=swap" url="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:ital,wght@0,400;0,600;1,400&amp;display=swap" ip="142.250.192.42" port="443" client_ip="192.168.0.112" client_port="64264" connectionId="2400" origin="HTML" encodingType="ANSI" ordinal="3" startDateTime="2024-02-16T16:37:19.962+05:30" startTime="2833" endTime="3104" blockedTime="-1" dnsTime="1" connectTime="164" sendTime="4294967295" waitTime="4294967295" receiveTime="3" sslNegotiateTime="73" responseBodySize="1134">
      <QueryString>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>ZmFtaWx5PUlCTStQbGV4K1NhbnM6aXRhbCx3Z2h0QDAsNDAwOzAsNjAwOzEsNDAwJmRpc3BsYXk9c3dhcA==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </QueryString>
      <HTTPSplittedQueryStrings>
        <HTTPHeaderEntity name="family" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SUJNK1BsZXgrU2FuczppdGFsLHdnaHRAMCw0MDA7MCw2MDA7MSw0MDA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="display" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c3dhcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
      </HTTPSplittedQueryStrings>
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name=":method" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":scheme" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":path" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L2NzczI/ZmFtaWx5PUlCTStQbGV4K1NhbnM6aXRhbCx3Z2h0QDAsNDAwOzAsNjAwOzEsNDAwJmRpc3BsYXk9c3dhcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":authority" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Zm9udHMuZ29vZ2xlYXBpcy5jb20=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9jc3MyP2ZhbWlseT1JQk0rUGxleCtTYW5zOml0YWwsd2dodEAwLDQwMDswLDYwMDsxLDQwMCZkaXNwbGF5PXN3YXANCjphdXRob3JpdHk6IGZvbnRzLmdvb2dsZWFwaXMuY29tDQpSZWZlcmVyOiBodHRwczovL2Rldi5ibHVlYWxnby5jb20vc21hcnRmb3JtdXAvbG9hZGluZGV4P29wcG9ydHVuaXR5SWQ9MDA2MG8wMDAwMWVTSUowQUFPJmN1c3RvbWVyaWQ9Y3VzdDEwMDUmYWNjZXNzdG9rZW49UkZwU1FWVUlnZDRZX29ZTkw4MW5hRXhWTEFZZ0tRdDcNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMjEuMC4wLjAgU2FmYXJpLzUzNy4zNg0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">1</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">292</HTTPProperty>
        </HTTPPropertySet>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>0</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Status" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-type" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3M7IGNoYXJzZXQ9dXRmLTg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-allow-origin" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="timing-allow-origin" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="link" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>PGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20+OyByZWw9cHJlY29ubmVjdDsgY3Jvc3NvcmlnaW4=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="strict-transport-security" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0zMTUzNjAwMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="expires" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cache-control" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHJpdmF0ZSwgbWF4LWFnZT04NjQwMCwgc3RhbGUtd2hpbGUtcmV2YWxpZGF0ZT02MDQ4MDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="last-modified" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cross-origin-resource-policy" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y3Jvc3Mtb3JpZ2lu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cross-origin-opener-policy" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>c2FtZS1vcmlnaW4tYWxsb3ctcG9wdXBz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-encoding" index="12">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="server" index="13">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RVNG</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-xss-protection" index="14">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-frame-options" index="15">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0FNRU9SSUdJTg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-content-type-options" index="16">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bm9zbmlmZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="alt-svc" index="17">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aDM9Ijo0NDMiOyBtYT0yNTkyMDAwLGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KY29udGVudC10eXBlOiB0ZXh0L2NzczsgY2hhcnNldD11dGYtOA0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQp0aW1pbmctYWxsb3ctb3JpZ2luOiAqDQpsaW5rOiA8aHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbT47IHJlbD1wcmVjb25uZWN0OyBjcm9zc29yaWdpbg0Kc3RyaWN0LXRyYW5zcG9ydC1zZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMA0KZXhwaXJlczogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQNCmRhdGU6IEZyaSwgMTYgRmViIDIwMjQgMTE6MDc6MjAgR01UDQpjYWNoZS1jb250cm9sOiBwcml2YXRlLCBtYXgtYWdlPTg2NDAwLCBzdGFsZS13aGlsZS1yZXZhbGlkYXRlPTYwNDgwMA0KbGFzdC1tb2RpZmllZDogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQNCmNyb3NzLW9yaWdpbi1yZXNvdXJjZS1wb2xpY3k6IGNyb3NzLW9yaWdpbg0KY3Jvc3Mtb3JpZ2luLW9wZW5lci1wb2xpY3k6IHNhbWUtb3JpZ2luLWFsbG93LXBvcHVwcw0KY29udGVudC1lbmNvZGluZzogZ3ppcA0Kc2VydmVyOiBFU0YNCngteHNzLXByb3RlY3Rpb246IDANCngtZnJhbWUtb3B0aW9uczogU0FNRU9SSUdJTg0KeC1jb250ZW50LXR5cGUtb3B0aW9uczogbm9zbmlmZg0KYWx0LXN2YzogaDM9Ijo0NDMiOyBtYT0yNTkyMDAwLGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">1</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">398</HTTPProperty>
        </HTTPPropertySet>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="5" hostname="unpkg.com" path="/@bpmn-io/form-js/dist/assets/flatpickr/light.css" url="https://unpkg.com/@bpmn-io/form-js/dist/assets/flatpickr/light.css" ip="104.16.124.175" port="443" client_ip="192.168.0.112" client_port="64265" connectionId="2408" origin="HTML" encodingType="ANSI" ordinal="4" startDateTime="2024-02-16T16:37:19.963+05:30" startTime="2835" endTime="3150" blockedTime="-1" dnsTime="33" connectTime="114" sendTime="4294967295" waitTime="4294967295" receiveTime="30" sslNegotiateTime="57" responseBodySize="272">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name=":method" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":scheme" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":path" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L0BicG1uLWlvL2Zvcm0tanMvZGlzdC9hc3NldHMvZmxhdHBpY2tyL2xpZ2h0LmNzcw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":authority" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dW5wa2cuY29t</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9AYnBtbi1pby9mb3JtLWpzL2Rpc3QvYXNzZXRzL2ZsYXRwaWNrci9saWdodC5jc3MNCjphdXRob3JpdHk6IHVucGtnLmNvbQ0KUmVmZXJlcjogaHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3DQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTIxLjAuMC4wIFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">1</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">268</HTTPProperty>
        </HTTPPropertySet>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>0</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Status" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MzAy</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9wbGFpbjsgY2hhcnNldD11dGYtOA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-allow-origin" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cache-control" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBzLW1heGFnZT02MDAsIG1heC1hZ2U9NjA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="location" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L0BicG1uLWlvL2Zvcm0tanNAMS43LjAvZGlzdC9hc3NldHMvZmxhdHBpY2tyL2xpZ2h0LmNzcw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="vary" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LCBBY2NlcHQtRW5jb2Rpbmc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="via" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MS4xIGZseS5pbw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="fly-request-id" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MDFIUFJTSldONTc5WEZWVjZGWDJBOVZWOEUtYm9t</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cf-cache-status" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RVhQSVJFRA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="strict-transport-security" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnM7IHByZWxvYWQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-content-type-options" index="12">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bm9zbmlmZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="server" index="13">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2xvdWRmbGFyZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cf-ray" index="14">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ODU2NTUzOGE4ZDUyNmVjYS1CT00=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8yLjAgMzAyDQpTdGF0dXM6IDMwMg0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQNCmNvbnRlbnQtdHlwZTogdGV4dC9wbGFpbjsgY2hhcnNldD11dGYtOA0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQpjYWNoZS1jb250cm9sOiBwdWJsaWMsIHMtbWF4YWdlPTYwMCwgbWF4LWFnZT02MA0KbG9jYXRpb246IC9AYnBtbi1pby9mb3JtLWpzQDEuNy4wL2Rpc3QvYXNzZXRzL2ZsYXRwaWNrci9saWdodC5jc3MNCnZhcnk6IEFjY2VwdCwgQWNjZXB0LUVuY29kaW5nDQpjb250ZW50LWVuY29kaW5nOiBnemlwDQp2aWE6IDEuMSBmbHkuaW8NCmZseS1yZXF1ZXN0LWlkOiAwMUhQUlNKV041NzlYRlZWNkZYMkE5VlY4RS1ib20NCmNmLWNhY2hlLXN0YXR1czogRVhQSVJFRA0Kc3RyaWN0LXRyYW5zcG9ydC1zZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnM7IHByZWxvYWQNCngtY29udGVudC10eXBlLW9wdGlvbnM6IG5vc25pZmYNCnNlcnZlcjogY2xvdWRmbGFyZQ0KY2YtcmF5OiA4NTY1NTM4YThkNTI2ZWNhLUJPTQ0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Rm91bmQuIFJlZGlyZWN0aW5nIHRvIC9AYnBtbi1pby9mb3JtLWpzQDEuNy4wL2Rpc3QvYXNzZXRzL2ZsYXRwaWNrci9saWdodC5jc3M=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">1</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">175</HTTPProperty>
        </HTTPPropertySet>
      </HTTPResponse>
      <HTTPTask id="15" hostname="unpkg.com" path="/@bpmn-io/form-js@1.7.0/dist/assets/flatpickr/light.css" url="https://unpkg.com/@bpmn-io/form-js@1.7.0/dist/assets/flatpickr/light.css" ip="104.16.124.175" port="443" client_ip="192.168.0.112" client_port="64265" connectionId="2408" origin="Redirection" encodingType="ANSI" startDateTime="2024-02-16T16:37:20.280+05:30" startTime="3151" endTime="3226" blockedTime="-1" dnsTime="-1" connectTime="-2" sendTime="4294967295" waitTime="4294967295" receiveTime="22" sslNegotiateTime="-1" responseBodySize="5067">
        <HTTPRequest method="GET">
          <HTTPHeaders>
            <HTTPHeaderEntity name=":method" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>R0VU</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name=":scheme" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>aHR0cHM=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name=":path" index="2">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>L0BicG1uLWlvL2Zvcm0tanNAMS43LjAvZGlzdC9hc3NldHMvZmxhdHBpY2tyL2xpZ2h0LmNzcw==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name=":authority" index="3">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>dW5wa2cuY29t</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="Referer" index="4">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="Accept-Language" index="5">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="User-Agent" index="6">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="Accept-Encoding" index="7">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="Accept" index="8">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>Ki8q</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPAllHeaders>
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9AYnBtbi1pby9mb3JtLWpzQDEuNy4wL2Rpc3QvYXNzZXRzL2ZsYXRwaWNrci9saWdodC5jc3MNCjphdXRob3JpdHk6IHVucGtnLmNvbQ0KUmVmZXJlcjogaHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3DQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTIxLjAuMC4wIFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCg0K</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPAllHeaders>
          </HTTPHeaders>
          <HTTPPropertySet>
            <HTTPProperty name="StreamID">5</HTTPProperty>
            <HTTPProperty name="TotalHeadersSize">56</HTTPProperty>
          </HTTPPropertySet>
        </HTTPRequest>
        <HTTPResponse>
          <contentLenght>0</contentLenght>
          <HTTPHeaders>
            <HTTPHeaderEntity name="Status" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MjAw</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="date" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="content-type" index="2">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>dGV4dC9jc3M7IGNoYXJzZXQ9dXRmLTg=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="access-control-allow-origin" index="3">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>Kg==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="content-encoding" index="4">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>Z3ppcA==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="cache-control" index="5">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="last-modified" index="6">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>U2F0LCAyNiBPY3QgMTk4NSAwODoxNTowMCBHTVQ=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="etag" index="7">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>IjRiMzgtWmhmTnV6YVVxMi9TUnY0RGZENU1GTEI0eGhzIg==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="via" index="8">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MS4xIGZseS5pbw==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="fly-request-id" index="9">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MDFIUE5ONTY3REM2MEFDUFlGNDBNMFRUREstYm9t</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="cf-cache-status" index="10">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>SElU</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="age" index="11">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MTA1MzAw</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="vary" index="12">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="strict-transport-security" index="13">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>bWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnM7IHByZWxvYWQ=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="x-content-type-options" index="14">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>bm9zbmlmZg==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="server" index="15">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>Y2xvdWRmbGFyZQ==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="cf-ray" index="16">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>ODU2NTUzOGI5ZjFlNmVjYS1CT00=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPAllHeaders>
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQNCmNvbnRlbnQtdHlwZTogdGV4dC9jc3M7IGNoYXJzZXQ9dXRmLTgNCmFjY2Vzcy1jb250cm9sLWFsbG93LW9yaWdpbjogKg0KY29udGVudC1lbmNvZGluZzogZ3ppcA0KY2FjaGUtY29udHJvbDogcHVibGljLCBtYXgtYWdlPTMxNTM2MDAwDQpsYXN0LW1vZGlmaWVkOiBTYXQsIDI2IE9jdCAxOTg1IDA4OjE1OjAwIEdNVA0KZXRhZzogIjRiMzgtWmhmTnV6YVVxMi9TUnY0RGZENU1GTEI0eGhzIg0KdmlhOiAxLjEgZmx5LmlvDQpmbHktcmVxdWVzdC1pZDogMDFIUE5ONTY3REM2MEFDUFlGNDBNMFRUREstYm9tDQpjZi1jYWNoZS1zdGF0dXM6IEhJVA0KYWdlOiAxMDUzMDANCnZhcnk6IEFjY2VwdC1FbmNvZGluZw0Kc3RyaWN0LXRyYW5zcG9ydC1zZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnM7IHByZWxvYWQNCngtY29udGVudC10eXBlLW9wdGlvbnM6IG5vc25pZmYNCnNlcnZlcjogY2xvdWRmbGFyZQ0KY2YtcmF5OiA4NTY1NTM4YjlmMWU2ZWNhLUJPTQ0KDQo=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPAllHeaders>
          </HTTPHeaders>
          <HTTPBody>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData></ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPBody>
          <HTTPPropertySet>
            <HTTPProperty name="StreamID">5</HTTPProperty>
            <HTTPProperty name="TotalHeadersSize">113</HTTPProperty>
          </HTTPPropertySet>
        </HTTPResponse>
      </HTTPTask>
    </HTTPTask>
    <HTTPTask id="6" hostname="cdnjs.cloudflare.com" path="/ajax/libs/font-awesome/6.3.0/css/all.min.css" url="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" ip="104.17.24.14" port="443" client_ip="192.168.0.112" client_port="64266" connectionId="2396" origin="HTML" encodingType="ANSI" ordinal="5" startDateTime="2024-02-16T16:37:19.998+05:30" startTime="2869" endTime="3053" blockedTime="-1" dnsTime="9" connectTime="112" sendTime="4294967295" waitTime="4294967295" receiveTime="6" sslNegotiateTime="63" responseBodySize="21133">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name=":method" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":scheme" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":path" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNi4zLjAvY3NzL2FsbC5taW4uY3Nz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":authority" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2RuanMuY2xvdWRmbGFyZS5jb20=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzYuMy4wL2Nzcy9hbGwubWluLmNzcw0KOmF1dGhvcml0eTogY2RuanMuY2xvdWRmbGFyZS5jb20NClJlZmVyZXI6IGh0dHBzOi8vZGV2LmJsdWVhbGdvLmNvbS9zbWFydGZvcm11cC9sb2FkaW5kZXg/b3Bwb3J0dW5pdHlJZD0wMDYwbzAwMDAxZVNJSjBBQU8mY3VzdG9tZXJpZD1jdXN0MTAwNSZhY2Nlc3N0b2tlbj1SRnBTUVZVSWdkNFlfb1lOTDgxbmFFeFZMQVlnS1F0Nw0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">1</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">272</HTTPProperty>
        </HTTPPropertySet>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>21631</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Status" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3M7IGNoYXJzZXQ9dXRmLTg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjE2MzE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-allow-origin" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cache-control" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMwNjcyMDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-encoding" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="etag" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjYzZTJhZjM0LTU0N2Yi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="last-modified" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAwNyBGZWIgMjAyMyAyMDowNjoxMiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cf-cdnjs-via" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2Z3b3JrZXIva3Y=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cross-origin-resource-policy" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y3Jvc3Mtb3JpZ2lu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="timing-allow-origin" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-content-type-options" index="12">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bm9zbmlmZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="vary" index="13">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cf-cache-status" index="14">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SElU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="age" index="15">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NDE4OTgxNQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="expires" index="16">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAwNSBGZWIgMjAyNSAxMTowNzoyMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="accept-ranges" index="17">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="report-to" index="18">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>eyJlbmRwb2ludHMiOlt7InVybCI6Imh0dHBzOlwvXC9hLm5lbC5jbG91ZGZsYXJlLmNvbVwvcmVwb3J0XC92Mz9zPUNtdDgwVzA5QWtScHExVlE4SFBqV1dpWjQwaEx5aXBtZGo5SElPOU51bWV1WnNnUlFlb0w1OXNjRG1lJTJCZmlKdmpLSGNLeFlEQTJJRkZKY1ZoRSUyRldUVWVSQ1dwTlBabjlqTUdZWnNIM2trQ2RabWdPdUVibzQlMkZiTnNVZHclMkJtSTdpUFFrMHhOSCJ9XSwiZ3JvdXAiOiJjZi1uZWwiLCJtYXhfYWdlIjo2MDQ4MDB9</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="nel" index="19">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>eyJzdWNjZXNzX2ZyYWN0aW9uIjowLjAxLCJyZXBvcnRfdG8iOiJjZi1uZWwiLCJtYXhfYWdlIjo2MDQ4MDB9</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="strict-transport-security" index="20">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0xNTc4MDAwMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="server" index="21">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2xvdWRmbGFyZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cf-ray" index="22">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ODU2NTUzOGE4ZjU2MmU4Zi1CT00=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="alt-svc" index="23">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aDM9Ijo0NDMiOyBtYT04NjQwMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQNCmNvbnRlbnQtdHlwZTogdGV4dC9jc3M7IGNoYXJzZXQ9dXRmLTgNCmNvbnRlbnQtbGVuZ3RoOiAyMTYzMQ0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQpjYWNoZS1jb250cm9sOiBwdWJsaWMsIG1heC1hZ2U9MzA2NzIwMDANCmNvbnRlbnQtZW5jb2Rpbmc6IGd6aXANCmV0YWc6ICI2M2UyYWYzNC01NDdmIg0KbGFzdC1tb2RpZmllZDogVHVlLCAwNyBGZWIgMjAyMyAyMDowNjoxMiBHTVQNCmNmLWNkbmpzLXZpYTogY2Z3b3JrZXIva3YNCmNyb3NzLW9yaWdpbi1yZXNvdXJjZS1wb2xpY3k6IGNyb3NzLW9yaWdpbg0KdGltaW5nLWFsbG93LW9yaWdpbjogKg0KeC1jb250ZW50LXR5cGUtb3B0aW9uczogbm9zbmlmZg0KdmFyeTogQWNjZXB0LUVuY29kaW5nDQpjZi1jYWNoZS1zdGF0dXM6IEhJVA0KYWdlOiA0MTg5ODE1DQpleHBpcmVzOiBXZWQsIDA1IEZlYiAyMDI1IDExOjA3OjIwIEdNVA0KYWNjZXB0LXJhbmdlczogYnl0ZXMNCnJlcG9ydC10bzogeyJlbmRwb2ludHMiOlt7InVybCI6Imh0dHBzOlwvXC9hLm5lbC5jbG91ZGZsYXJlLmNvbVwvcmVwb3J0XC92Mz9zPUNtdDgwVzA5QWtScHExVlE4SFBqV1dpWjQwaEx5aXBtZGo5SElPOU51bWV1WnNnUlFlb0w1OXNjRG1lJTJCZmlKdmpLSGNLeFlEQTJJRkZKY1ZoRSUyRldUVWVSQ1dwTlBabjlqTUdZWnNIM2trQ2RabWdPdUVibzQlMkZiTnNVZHclMkJtSTdpUFFrMHhOSCJ9XSwiZ3JvdXAiOiJjZi1uZWwiLCJtYXhfYWdlIjo2MDQ4MDB9DQpuZWw6IHsic3VjY2Vzc19mcmFjdGlvbiI6MC4wMSwicmVwb3J0X3RvIjoiY2YtbmVsIiwibWF4X2FnZSI6NjA0ODAwfQ0Kc3RyaWN0LXRyYW5zcG9ydC1zZWN1cml0eTogbWF4LWFnZT0xNTc4MDAwMA0Kc2VydmVyOiBjbG91ZGZsYXJlDQpjZi1yYXk6IDg1NjU1MzhhOGY1NjJlOGYtQk9NDQphbHQtc3ZjOiBoMz0iOjQ0MyI7IG1hPTg2NDAwDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">1</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">625</HTTPProperty>
        </HTTPPropertySet>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="7" hostname="dev.bluealgo.com" path="/smartformup/ui/error.svg" url="https://dev.bluealgo.com/smartformup/ui/error.svg" ip="144.126.253.3" port="443" client_ip="192.168.0.112" client_port="64262" connectionId="2220" origin="HTML" encodingType="ANSI" ordinal="6" startDateTime="2024-02-16T16:37:19.903+05:30" startTime="2774" endTime="2975" blockedTime="-1" dnsTime="-1" connectTime="-2" sendTime="4294967295" waitTime="4294967295" receiveTime="2" sslNegotiateTime="-1" responseBodySize="184">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name=":method" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":scheme" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":path" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L3NtYXJ0Zm9ybXVwL3VpL2Vycm9yLnN2Zw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":authority" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZGV2LmJsdWVhbGdvLmNvbQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cookie" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD1COEI5REUyNDA1ODE3RDYwMjlFQzM0QzA3NDlEQjJFRg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9zbWFydGZvcm11cC91aS9lcnJvci5zdmcNCjphdXRob3JpdHk6IGRldi5ibHVlYWxnby5jb20NClJlZmVyZXI6IGh0dHBzOi8vZGV2LmJsdWVhbGdvLmNvbS9zbWFydGZvcm11cC9sb2FkaW5kZXg/b3Bwb3J0dW5pdHlJZD0wMDYwbzAwMDAxZVNJSjBBQU8mY3VzdG9tZXJpZD1jdXN0MTAwNSZhY2Nlc3N0b2tlbj1SRnBTUVZVSWdkNFlfb1lOTDgxbmFFeFZMQVlnS1F0Nw0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpjb29raWU6IEpTRVNTSU9OSUQ9QjhCOURFMjQwNTgxN0Q2MDI5RUMzNEMwNzQ5REIyRUYNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>QjhCOURFMjQwNTgxN0Q2MDI5RUMzNEMwNzQ5REIyRUY=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">5</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">34</HTTPProperty>
        </HTTPPropertySet>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>606</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Status" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2Uvc3ZnK3htbA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NjA2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-allow-origin" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="accept-ranges" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="etag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Vy8iNjA2LTE3MDM1ODkwNTIwMDAi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="last-modified" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAyNiBEZWMgMjAyMyAxMToxMDo1MiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="strict-transport-security" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0xNTcyNDgwMDsgaW5jbHVkZVN1YkRvbWFpbnM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQNCmNvbnRlbnQtdHlwZTogaW1hZ2Uvc3ZnK3htbA0KY29udGVudC1sZW5ndGg6IDYwNg0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQphY2NlcHQtcmFuZ2VzOiBieXRlcw0KZXRhZzogVy8iNjA2LTE3MDM1ODkwNTIwMDAiDQpsYXN0LW1vZGlmaWVkOiBUdWUsIDI2IERlYyAyMDIzIDExOjEwOjUyIEdNVA0Kc3RyaWN0LXRyYW5zcG9ydC1zZWN1cml0eTogbWF4LWFnZT0xNTcyNDgwMDsgaW5jbHVkZVN1YkRvbWFpbnMNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIFVwbG9hZGVkIHRvOiBTVkcgUmVwbywgd3d3LnN2Z3JlcG8uY29tLCBHZW5lcmF0b3I6IFNWRyBSZXBvIE1peGVyIFRvb2xzIC0tPgo8c3ZnIHZlcnNpb249IjEuMSIgaWQ9IkNhcGFfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgCgkgdmlld0JveD0iMCAwIDUwIDUwIiB4bWw6c3BhY2U9InByZXNlcnZlIj4KPGNpcmNsZSBzdHlsZT0iZmlsbDojRDc1QTRBOyIgY3g9IjI1IiBjeT0iMjUiIHI9IjI1Ii8+Cjxwb2x5bGluZSBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojRkZGRkZGO3N0cm9rZS13aWR0aDoyO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwOyIgcG9pbnRzPSIxNiwzNCAyNSwyNSAzNCwxNiAKCSIvPgo8cG9seWxpbmUgc3R5bGU9ImZpbGw6bm9uZTtzdHJva2U6I0ZGRkZGRjtzdHJva2Utd2lkdGg6MjtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMDsiIHBvaW50cz0iMTYsMTYgMjUsMjUgMzQsMzQgCgkiLz4KPC9zdmc+</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">5</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">184</HTTPProperty>
        </HTTPPropertySet>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="11" hostname="unpkg.com" path="/@bpmn-io/form-js@0.10.0/dist/form-viewer.umd.js" url="https://unpkg.com/@bpmn-io/form-js@0.10.0/dist/form-viewer.umd.js" ip="104.16.124.175" port="443" client_ip="192.168.0.112" client_port="64265" connectionId="2408" origin="HTML" encodingType="ANSI" ordinal="7" startDateTime="2024-02-16T16:37:20.031+05:30" startTime="2903" endTime="3262" blockedTime="-1" dnsTime="1" connectTime="119" sendTime="4294967295" waitTime="4294967295" receiveTime="135" sslNegotiateTime="92" responseBodySize="278139">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name=":method" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":scheme" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":path" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L0BicG1uLWlvL2Zvcm0tanNAMC4xMC4wL2Rpc3QvZm9ybS12aWV3ZXIudW1kLmpz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":authority" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dW5wa2cuY29t</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9AYnBtbi1pby9mb3JtLWpzQDAuMTAuMC9kaXN0L2Zvcm0tdmlld2VyLnVtZC5qcw0KOmF1dGhvcml0eTogdW5wa2cuY29tDQpSZWZlcmVyOiBodHRwczovL2Rldi5ibHVlYWxnby5jb20vc21hcnRmb3JtdXAvbG9hZGluZGV4P29wcG9ydHVuaXR5SWQ9MDA2MG8wMDAwMWVTSUowQUFPJmN1c3RvbWVyaWQ9Y3VzdDEwMDUmYWNjZXNzdG9rZW49UkZwU1FWVUlnZDRZX29ZTkw4MW5hRXhWTEFZZ0tRdDcNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMjEuMC4wLjAgU2FmYXJpLzUzNy4zNg0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">3</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">52</HTTPProperty>
        </HTTPPropertySet>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>0</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Status" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDsgY2hhcnNldD11dGYtOA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-allow-origin" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cache-control" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="last-modified" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U2F0LCAyNiBPY3QgMTk4NSAwODoxNTowMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="etag" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ImMzMzBjLWFxZFUyTmFtYk9vbnJ2UGxnUExOQ2U2N1lzOCI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="via" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MS4xIGZseS5pbw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="fly-request-id" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MDFIUE5LVFBSOVhYWDI5U0FaNVZFUkNYUzItYm9t</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cf-cache-status" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SElU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="age" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTA2Njkz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="vary" index="12">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="strict-transport-security" index="13">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnM7IHByZWxvYWQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-content-type-options" index="14">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bm9zbmlmZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="server" index="15">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2xvdWRmbGFyZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cf-ray" index="16">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ODU2NTUzOGFmZGVlNmVjYS1CT00=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQNCmNvbnRlbnQtdHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdDsgY2hhcnNldD11dGYtOA0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQpjb250ZW50LWVuY29kaW5nOiBnemlwDQpjYWNoZS1jb250cm9sOiBwdWJsaWMsIG1heC1hZ2U9MzE1MzYwMDANCmxhc3QtbW9kaWZpZWQ6IFNhdCwgMjYgT2N0IDE5ODUgMDg6MTU6MDAgR01UDQpldGFnOiAiYzMzMGMtYXFkVTJOYW1iT29ucnZQbGdQTE5DZTY3WXM4Ig0KdmlhOiAxLjEgZmx5LmlvDQpmbHktcmVxdWVzdC1pZDogMDFIUE5LVFBSOVhYWDI5U0FaNVZFUkNYUzItYm9tDQpjZi1jYWNoZS1zdGF0dXM6IEhJVA0KYWdlOiAxMDY2OTMNCnZhcnk6IEFjY2VwdC1FbmNvZGluZw0Kc3RyaWN0LXRyYW5zcG9ydC1zZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnM7IHByZWxvYWQNCngtY29udGVudC10eXBlLW9wdGlvbnM6IG5vc25pZmYNCnNlcnZlcjogY2xvdWRmbGFyZQ0KY2YtcmF5OiA4NTY1NTM4YWZkZWU2ZWNhLUJPTQ0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHsKICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDoKICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDoKICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5Gb3JtVmlld2VyID0ge30pKTsKfSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnOwoKICBmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7CiAgCXJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0czsKICB9CgogIHZhciBoYXRfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHsKICB2YXIgaGF0ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0cywgYmFzZSkgewogICAgICBpZiAoIWJhc2UpIGJhc2UgPSAxNjsKICAgICAgaWYgKGJpdHMgPT09IHVuZGVmaW5lZCkgYml0cyA9IDEyODsKICAgICAgaWYgKGJpdHMgPD0gMCkgcmV0dXJuICcwJzsKICAgICAgCiAgICAgIHZhciBkaWdpdHMgPSBNYXRoLmxvZyhNYXRoLnBvdygyLCBiaXRzKSkgLyBNYXRoLmxvZyhiYXNlKTsKICAgICAgZm9yICh2YXIgaSA9IDI7IGRpZ2l0cyA9PT0gSW5maW5pdHk7IGkgKj0gMikgewogICAgICAgICAgZGlnaXRzID0gTWF0aC5sb2coTWF0aC5wb3coMiwgYml0cyAvIGkpKSAvIE1hdGgubG9nKGJhc2UpICogaTsKICAgICAgfQogICAgICAKICAgICAgdmFyIHJlbSA9IGRpZ2l0cyAtIE1hdGguZmxvb3IoZGlnaXRzKTsKICAgICAgCiAgICAgIHZhciByZXMgPSAnJzsKICAgICAgCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTWF0aC5mbG9vcihkaWdpdHMpOyBpKyspIHsKICAgICAgICAgIHZhciB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYmFzZSkudG9TdHJpbmcoYmFzZSk7CiAgICAgICAgICByZXMgPSB4ICsgcmVzOwogICAgICB9CiAgICAgIAogICAgICBpZiAocmVtKSB7CiAgICAgICAgICB2YXIgYiA9IE1hdGgucG93KGJhc2UsIHJlbSk7CiAgICAgICAgICB2YXIgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGIpLnRvU3RyaW5nKGJhc2UpOwogICAgICAgICAgcmVzID0geCArIHJlczsKICAgICAgfQogICAgICAKICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHJlcywgYmFzZSk7CiAgICAgIGlmIChwYXJzZWQgIT09IEluZmluaXR5ICYmIHBhcnNlZCA+PSBNYXRoLnBvdygyLCBiaXRzKSkgewogICAgICAgICAgcmV0dXJuIGhhdChiaXRzLCBiYXNlKQogICAgICB9CiAgICAgIGVsc2UgcmV0dXJuIHJlczsKICB9OwoKICBoYXQucmFjayA9IGZ1bmN0aW9uIChiaXRzLCBiYXNlLCBleHBhbmRCeSkgewogICAgICB2YXIgZm4gPSBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgdmFyIGl0ZXJzID0gMDsKICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICBpZiAoaXRlcnMgKysgPiAxMCkgewogICAgICAgICAgICAgICAgICBpZiAoZXhwYW5kQnkpIGJpdHMgKz0gZXhwYW5kQnk7CiAgICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCd0b28gbWFueSBJRCBjb2xsaXNpb25zLCB1c2UgbW9yZSBiaXRzJykKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgdmFyIGlkID0gaGF0KGJpdHMsIGJhc2UpOwogICAgICAgICAgfSB3aGlsZSAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoaGF0cywgaWQpKTsKICAgICAgICAgIAogICAgICAgICAgaGF0c1tpZF0gPSBkYXRhOwogICAgICAgICAgcmV0dXJuIGlkOwogICAgICB9OwogICAgICB2YXIgaGF0cyA9IGZuLmhhdHMgPSB7fTsKICAgICAgCiAgICAgIGZuLmdldCA9IGZ1bmN0aW9uIChpZCkgewogICAgICAgICAgcmV0dXJuIGZuLmhhdHNbaWRdOwogICAgICB9OwogICAgICAKICAgICAgZm4uc2V0ID0gZnVuY3Rpb24gKGlkLCB2YWx1ZSkgewogICAgICAgICAgZm4uaGF0c1tpZF0gPSB2YWx1ZTsKICAgICAgICAgIHJldHVybiBmbjsKICAgICAgfTsKICAgICAgCiAgICAgIGZuLmJpdHMgPSBiaXRzIHx8IDEyODsKICAgICAgZm4uYmFzZSA9IGJhc2UgfHwgMTY7CiAgICAgIHJldHVybiBmbjsKICB9OwogIH0pOwoKICAvKioKICAgKiBDcmVhdGUgYSBuZXcgaWQgZ2VuZXJhdG9yIC8gY2FjaGUgaW5zdGFuY2UuCiAgICoKICAgKiBZb3UgbWF5IG9wdGlvbmFsbHkgcHJvdmlkZSBhIHNlZWQgdGhhdCBpcyB1c2VkIGludGVybmFsbHkuCiAgICoKICAgKiBAcGFyYW0ge1NlZWR9IHNlZWQKICAgKi8KCiAgZnVuY3Rpb24gSWRzKHNlZWQpIHsKICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBJZHMpKSB7CiAgICAgIHJldHVybiBuZXcgSWRzKHNlZWQpOwogICAgfQoKICAgIHNlZWQgPSBzZWVkIHx8IFsxMjgsIDM2LCAxXTsKICAgIHRoaXMuX3NlZWQgPSBzZWVkLmxlbmd0aCA/IGhhdF8xLnJhY2soc2VlZFswXSwgc2VlZFsxXSwgc2VlZFsyXSkgOiBzZWVkOwogIH0KICAvKioKICAgKiBHZW5lcmF0ZSBhIG5leHQgaWQuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gW2VsZW1lbnRdIGVsZW1lbnQgdG8gYmluZCB0aGUgaWQgdG8KICAgKgogICAqIEByZXR1cm4ge1N0cmluZ30gaWQKICAgKi8KCiAgSWRzLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgIHJldHVybiB0aGlzLl9zZWVkKGVsZW1lbnQgfHwgdHJ1ZSk7CiAgfTsKICAvKioKICAgKiBHZW5lcmF0ZSBhIG5leHQgaWQgd2l0aCBhIGdpdmVuIHByZWZpeC4KICAgKgogICAqIEBwYXJhbSB7T2JqZWN0fSBbZWxlbWVudF0gZWxlbWVudCB0byBiaW5kIHRoZSBpZCB0bwogICAqCiAgICogQHJldHVybiB7U3RyaW5nfSBpZAogICAqLwoKCiAgSWRzLnByb3RvdHlwZS5uZXh0UHJlZml4ZWQgPSBmdW5jdGlvbiAocHJlZml4LCBlbGVtZW50KSB7CiAgICB2YXIgaWQ7CgogICAgZG8gewogICAgICBpZCA9IHByZWZpeCArIHRoaXMubmV4dCh0cnVlKTsKICAgIH0gd2hpbGUgKHRoaXMuYXNzaWduZWQoaWQpKTsgLy8gY2xhaW0ge3ByZWZpeH17cmFuZG9tfQoKCiAgICB0aGlzLmNsYWltKGlkLCBlbGVtZW50KTsgLy8gcmV0dXJuCgogICAgcmV0dXJuIGlkOwogIH07CiAgLyoqCiAgICogTWFudWFsbHkgY2xhaW0gYW4gZXhpc3RpbmcgaWQuCiAgICoKICAgKiBAcGFyYW0ge1N0cmluZ30gaWQKICAgKiBAcGFyYW0ge1N0cmluZ30gW2VsZW1lbnRdIGVsZW1lbnQgdGhlIGlkIGlzIGNsYWltZWQgYnkKICAgKi8KCgogIElkcy5wcm90b3R5cGUuY2xhaW0gPSBmdW5jdGlvbiAoaWQsIGVsZW1lbnQpIHsKICAgIHRoaXMuX3NlZWQuc2V0KGlkLCBlbGVtZW50IHx8IHRydWUpOwogIH07CiAgLyoqCiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBpZCBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLgogICAqCiAgICogQHBhcmFtICB7U3RyaW5nfSBpZAogICAqIEByZXR1cm4ge0Jvb2xlYW59CiAgICovCgoKICBJZHMucHJvdG90eXBlLmFzc2lnbmVkID0gZnVuY3Rpb24gKGlkKSB7CiAgICByZXR1cm4gdGhpcy5fc2VlZC5nZXQoaWQpIHx8IGZhbHNlOwogIH07CiAgLyoqCiAgICogVW5jbGFpbSBhbiBpZC4KICAgKgogICAqIEBwYXJhbSAge1N0cmluZ30gaWQgdGhlIGlkIHRvIHVuY2xhaW0KICAgKi8KCgogIElkcy5wcm90b3R5cGUudW5jbGFpbSA9IGZ1bmN0aW9uIChpZCkgewogICAgZGVsZXRlIHRoaXMuX3NlZWQuaGF0c1tpZF07CiAgfTsKICAvKioKICAgKiBDbGVhciBhbGwgY2xhaW1lZCBpZHMuCiAgICovCgoKICBJZHMucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGhhdHMgPSB0aGlzLl9zZWVkLmhhdHMsCiAgICAgICAgaWQ7CgogICAgZm9yIChpZCBpbiBoYXRzKSB7CiAgICAgIHRoaXMudW5jbGFpbShpZCk7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogRmxhdHRlbiBhcnJheSwgb25lIGxldmVsIGRlZXAuCiAgICoKICAgKiBAcGFyYW0ge0FycmF5PD8+fSBhcnIKICAgKgogICAqIEByZXR1cm4ge0FycmF5PD8+fQogICAqLwoKICBjb25zdCBuYXRpdmVUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7CiAgY29uc3QgbmF0aXZlSGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5OwoKICBmdW5jdGlvbiBpc1VuZGVmaW5lZCQxKG9iaikgewogICAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkOwogIH0KCiAgZnVuY3Rpb24gaXNEZWZpbmVkKG9iaikgewogICAgcmV0dXJuIG9iaiAhPT0gdW5kZWZpbmVkOwogIH0KCiAgZnVuY3Rpb24gaXNOaWwob2JqKSB7CiAgICByZXR1cm4gb2JqID09IG51bGw7CiAgfQoKICBmdW5jdGlvbiBpc0FycmF5JDIob2JqKSB7CiAgICByZXR1cm4gbmF0aXZlVG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nOwogIH0KCiAgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7CiAgICByZXR1cm4gbmF0aXZlVG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJzsKICB9CgogIGZ1bmN0aW9uIGlzTnVtYmVyJDIob2JqKSB7CiAgICByZXR1cm4gbmF0aXZlVG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBOdW1iZXJdJzsKICB9CgogIGZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqKSB7CiAgICBjb25zdCB0YWcgPSBuYXRpdmVUb1N0cmluZy5jYWxsKG9iaik7CgogICAgcmV0dXJuICgKICAgICAgdGFnID09PSAnW29iamVjdCBGdW5jdGlvbl0nIHx8CiAgICAgIHRhZyA9PT0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nIHx8CiAgICAgIHRhZyA9PT0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyB8fAogICAgICB0YWcgPT09ICdbb2JqZWN0IEFzeW5jR2VuZXJhdG9yRnVuY3Rpb25dJyB8fAogICAgICB0YWcgPT09ICdbb2JqZWN0IFByb3h5XScKICAgICk7CiAgfQoKICBmdW5jdGlvbiBpc1N0cmluZyQyKG9iaikgewogICAgcmV0dXJuIG5hdGl2ZVRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7CiAgfQoKICAvKioKICAgKiBSZXR1cm4gdHJ1ZSwgaWYgdGFyZ2V0IG93bnMgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXkuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0CiAgICogQHBhcmFtIHtTdHJpbmd9IGtleQogICAqCiAgICogQHJldHVybiB7Qm9vbGVhbn0KICAgKi8KICBmdW5jdGlvbiBoYXModGFyZ2V0LCBrZXkpIHsKICAgIHJldHVybiBuYXRpdmVIYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KTsKICB9CgoKICAvKioKICAgKiBJdGVyYXRlIG92ZXIgY29sbGVjdGlvbjsgcmV0dXJuaW5nIHNvbWV0aGluZwogICAqIChub24tdW5kZWZpbmVkKSB3aWxsIHN0b3AgaXRlcmF0aW9uLgogICAqCiAgICogQHBhcmFtICB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uCiAgICogQHBhcmFtICB7RnVuY3Rpb259IGl0ZXJhdG9yCiAgICoKICAgKiBAcmV0dXJuIHtPYmplY3R9IHJldHVybiByZXN1bHQgdGhhdCBzdG9wcGVkIHRoZSBpdGVyYXRpb24KICAgKi8KICBmdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdG9yKSB7CgogICAgbGV0IHZhbCwKICAgICAgICByZXN1bHQ7CgogICAgaWYgKGlzVW5kZWZpbmVkJDEoY29sbGVjdGlvbikpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGNvbnN0IGNvbnZlcnRLZXkgPSBpc0FycmF5JDIoY29sbGVjdGlvbikgPyB0b051bSA6IGlkZW50aXR5OwoKICAgIGZvciAobGV0IGtleSBpbiBjb2xsZWN0aW9uKSB7CgogICAgICBpZiAoaGFzKGNvbGxlY3Rpb24sIGtleSkpIHsKICAgICAgICB2YWwgPSBjb2xsZWN0aW9uW2tleV07CgogICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yKHZhbCwgY29udmVydEtleShrZXkpKTsKCiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHsKICAgICAgICAgIHJldHVybiB2YWw7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKCiAgZnVuY3Rpb24gaWRlbnRpdHkoYXJnKSB7CiAgICByZXR1cm4gYXJnOwogIH0KCiAgZnVuY3Rpb24gdG9OdW0oYXJnKSB7CiAgICByZXR1cm4gTnVtYmVyKGFyZyk7CiAgfQoKICAvKioKICAgKiBCaW5kIGZ1bmN0aW9uIGFnYWluc3QgdGFyZ2V0IDx0aGlzPi4KICAgKgogICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbgogICAqIEBwYXJhbSAge09iamVjdH0gICB0YXJnZXQKICAgKgogICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBib3VuZCBmdW5jdGlvbgogICAqLwogIGZ1bmN0aW9uIGJpbmQoZm4sIHRhcmdldCkgewogICAgcmV0dXJuIGZuLmJpbmQodGFyZ2V0KTsKICB9CgogIC8qKgogICAqIENvbnZlbmllbmNlIHdyYXBwZXIgZm9yIGBPYmplY3QuYXNzaWduYC4KICAgKgogICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQKICAgKiBAcGFyYW0gey4uLk9iamVjdH0gb3RoZXJzCiAgICoKICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoZSB0YXJnZXQKICAgKi8KICBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCAuLi5vdGhlcnMpIHsKICAgIHJldHVybiBPYmplY3QuYXNzaWduKHRhcmdldCwgLi4ub3RoZXJzKTsKICB9CgogIC8qKgogICAqIFNldHMgYSBuZXN0ZWQgcHJvcGVydHkgb2YgYSBnaXZlbiBvYmplY3QgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZS4KICAgKgogICAqIFRoaXMgbXV0YXRlcyB0aGUgb2JqZWN0IGFuZCByZXR1cm5zIGl0LgogICAqCiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBUaGUgdGFyZ2V0IG9mIHRoZSBzZXQgb3BlcmF0aW9uLgogICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpW119IHBhdGggVGhlIHBhdGggdG8gdGhlIG5lc3RlZCB2YWx1ZS4KICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4KICAgKi8KICBmdW5jdGlvbiBzZXQodGFyZ2V0LCBwYXRoLCB2YWx1ZSkgewoKICAgIGxldCBjdXJyZW50VGFyZ2V0ID0gdGFyZ2V0OwoKICAgIGZvckVhY2gocGF0aCwgZnVuY3Rpb24oa2V5LCBpZHgpIHsKCiAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnbnVtYmVyJyAmJiB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykgewogICAgICAgIHRocm93IG5ldyBFcnJvcignaWxsZWdhbCBrZXkgdHlwZTogJyArIHR5cGVvZiBrZXkgKyAnLiBLZXkgc2hvdWxkIGJlIG9mIHR5cGUgbnVtYmVyIG9yIHN0cmluZy4nKTsKICAgICAgfQoKICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJykgewogICAgICAgIHRocm93IG5ldyBFcnJvcignaWxsZWdhbCBrZXk6IGNvbnN0cnVjdG9yJyk7CiAgICAgIH0KCiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbGxlZ2FsIGtleTogX19wcm90b19fJyk7CiAgICAgIH0KCiAgICAgIGxldCBuZXh0S2V5ID0gcGF0aFtpZHggKyAxXTsKICAgICAgbGV0IG5leHRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0W2tleV07CgogICAgICBpZiAoaXNEZWZpbmVkKG5leHRLZXkpICYmIGlzTmlsKG5leHRUYXJnZXQpKSB7CiAgICAgICAgbmV4dFRhcmdldCA9IGN1cnJlbnRUYXJnZXRba2V5XSA9IGlzTmFOKCtuZXh0S2V5KSA/IHt9IDogW107CiAgICAgIH0KCiAgICAgIGlmIChpc1VuZGVmaW5lZCQxKG5leHRLZXkpKSB7CiAgICAgICAgaWYgKGlzVW5kZWZpbmVkJDEodmFsdWUpKSB7CiAgICAgICAgICBkZWxldGUgY3VycmVudFRhcmdldFtrZXldOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjdXJyZW50VGFyZ2V0W2tleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY3VycmVudFRhcmdldCA9IG5leHRUYXJnZXQ7CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiB0YXJnZXQ7CiAgfQoKCiAgLyoqCiAgICogR2V0cyBhIG5lc3RlZCBwcm9wZXJ0eSBvZiBhIGdpdmVuIG9iamVjdC4KICAgKgogICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGhlIHRhcmdldCBvZiB0aGUgZ2V0IG9wZXJhdGlvbi4KICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKVtdfSBwYXRoIFRoZSBwYXRoIHRvIHRoZSBuZXN0ZWQgdmFsdWUuCiAgICogQHBhcmFtIHthbnl9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgbm8gdmFsdWUgZXhpc3RzLgogICAqLwogIGZ1bmN0aW9uIGdldCh0YXJnZXQsIHBhdGgsIGRlZmF1bHRWYWx1ZSkgewoKICAgIGxldCBjdXJyZW50VGFyZ2V0ID0gdGFyZ2V0OwoKICAgIGZvckVhY2gocGF0aCwgZnVuY3Rpb24oa2V5KSB7CgogICAgICAvLyBhY2Nlc3NpbmcgbmlsIHByb3BlcnR5IHlpZWxkcyA8dW5kZWZpbmVkPgogICAgICBpZiAoaXNOaWwoY3VycmVudFRhcmdldCkpIHsKICAgICAgICBjdXJyZW50VGFyZ2V0ID0gdW5kZWZpbmVkOwoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIGN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0W2tleV07CiAgICB9KTsKCiAgICByZXR1cm4gaXNVbmRlZmluZWQkMShjdXJyZW50VGFyZ2V0KSA/IGRlZmF1bHRWYWx1ZSA6IGN1cnJlbnRUYXJnZXQ7CiAgfQoKICAvLyB0aGVzZSBhcmVuJ3QgcmVhbGx5IHByaXZhdGUsIGJ1dCBub3IgYXJlIHRoZXkgcmVhbGx5IHVzZWZ1bCB0byBkb2N1bWVudAoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqLwogIGNsYXNzIEx1eG9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7fQoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqLwogIGNsYXNzIEludmFsaWREYXRlVGltZUVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7CiAgICBjb25zdHJ1Y3RvcihyZWFzb24pIHsKICAgICAgc3VwZXIoYEludmFsaWQgRGF0ZVRpbWU6ICR7cmVhc29uLnRvTWVzc2FnZSgpfWApOwogICAgfQogIH0KCiAgLyoqCiAgICogQHByaXZhdGUKICAgKi8KICBjbGFzcyBJbnZhbGlkSW50ZXJ2YWxFcnJvciBleHRlbmRzIEx1eG9uRXJyb3IgewogICAgY29uc3RydWN0b3IocmVhc29uKSB7CiAgICAgIHN1cGVyKGBJbnZhbGlkIEludGVydmFsOiAke3JlYXNvbi50b01lc3NhZ2UoKX1gKTsKICAgIH0KICB9CgogIC8qKgogICAqIEBwcml2YXRlCiAgICovCiAgY2xhc3MgSW52YWxpZER1cmF0aW9uRXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHsKICAgIGNvbnN0cnVjdG9yKHJlYXNvbikgewogICAgICBzdXBlcihgSW52YWxpZCBEdXJhdGlvbjogJHtyZWFzb24udG9NZXNzYWdlKCl9YCk7CiAgICB9CiAgfQoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqLwogIGNsYXNzIENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7fQoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqLwogIGNsYXNzIEludmFsaWRVbml0RXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHsKICAgIGNvbnN0cnVjdG9yKHVuaXQpIHsKICAgICAgc3VwZXIoYEludmFsaWQgdW5pdCAke3VuaXR9YCk7CiAgICB9CiAgfQoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqLwogIGNsYXNzIEludmFsaWRBcmd1bWVudEVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7fQoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqLwogIGNsYXNzIFpvbmVJc0Fic3RyYWN0RXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHsKICAgIGNvbnN0cnVjdG9yKCkgewogICAgICBzdXBlcigiWm9uZSBpcyBhbiBhYnN0cmFjdCBjbGFzcyIpOwogICAgfQogIH0KCiAgLyoqCiAgICogQHByaXZhdGUKICAgKi8KCiAgY29uc3QgbiQzID0gIm51bWVyaWMiLAogICAgcyQyID0gInNob3J0IiwKICAgIGwkMyA9ICJsb25nIjsKCiAgY29uc3QgREFURV9TSE9SVCA9IHsKICAgIHllYXI6IG4kMywKICAgIG1vbnRoOiBuJDMsCiAgICBkYXk6IG4kMywKICB9OwoKICBjb25zdCBEQVRFX01FRCA9IHsKICAgIHllYXI6IG4kMywKICAgIG1vbnRoOiBzJDIsCiAgICBkYXk6IG4kMywKICB9OwoKICBjb25zdCBEQVRFX01FRF9XSVRIX1dFRUtEQVkgPSB7CiAgICB5ZWFyOiBuJDMsCiAgICBtb250aDogcyQyLAogICAgZGF5OiBuJDMsCiAgICB3ZWVrZGF5OiBzJDIsCiAgfTsKCiAgY29uc3QgREFURV9GVUxMID0gewogICAgeWVhcjogbiQzLAogICAgbW9udGg6IGwkMywKICAgIGRheTogbiQzLAogIH07CgogIGNvbnN0IERBVEVfSFVHRSA9IHsKICAgIHllYXI6IG4kMywKICAgIG1vbnRoOiBsJDMsCiAgICBkYXk6IG4kMywKICAgIHdlZWtkYXk6IGwkMywKICB9OwoKICBjb25zdCBUSU1FX1NJTVBMRSA9IHsKICAgIGhvdXI6IG4kMywKICAgIG1pbnV0ZTogbiQzLAogIH07CgogIGNvbnN0IFRJTUVfV0lUSF9TRUNPTkRTID0gewogICAgaG91cjogbiQzLAogICAgbWludXRlOiBuJDMsCiAgICBzZWNvbmQ6IG4kMywKICB9OwoKICBjb25zdCBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VUID0gewogICAgaG91cjogbiQzLAogICAgbWludXRlOiBuJDMsCiAgICBzZWNvbmQ6IG4kMywKICAgIHRpbWVab25lTmFtZTogcyQyLAogIH07CgogIGNvbnN0IFRJTUVfV0lUSF9MT05HX09GRlNFVCA9IHsKICAgIGhvdXI6IG4kMywKICAgIG1pbnV0ZTogbiQzLAogICAgc2Vjb25kOiBuJDMsCiAgICB0aW1lWm9uZU5hbWU6IGwkMywKICB9OwoKICBjb25zdCBUSU1FXzI0X1NJTVBMRSA9IHsKICAgIGhvdXI6IG4kMywKICAgIG1pbnV0ZTogbiQzLAogICAgaG91ckN5Y2xlOiAiaDIzIiwKICB9OwoKICBjb25zdCBUSU1FXzI0X1dJVEhfU0VDT05EUyA9IHsKICAgIGhvdXI6IG4kMywKICAgIG1pbnV0ZTogbiQzLAogICAgc2Vjb25kOiBuJDMsCiAgICBob3VyQ3ljbGU6ICJoMjMiLAogIH07CgogIGNvbnN0IFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQgPSB7CiAgICBob3VyOiBuJDMsCiAgICBtaW51dGU6IG4kMywKICAgIHNlY29uZDogbiQzLAogICAgaG91ckN5Y2xlOiAiaDIzIiwKICAgIHRpbWVab25lTmFtZTogcyQyLAogIH07CgogIGNvbnN0IFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCA9IHsKICAgIGhvdXI6IG4kMywKICAgIG1pbnV0ZTogbiQzLAogICAgc2Vjb25kOiBuJDMsCiAgICBob3VyQ3ljbGU6ICJoMjMiLAogICAgdGltZVpvbmVOYW1lOiBsJDMsCiAgfTsKCiAgY29uc3QgREFURVRJTUVfU0hPUlQgPSB7CiAgICB5ZWFyOiBuJDMsCiAgICBtb250aDogbiQzLAogICAgZGF5OiBuJDMsCiAgICBob3VyOiBuJDMsCiAgICBtaW51dGU6IG4kMywKICB9OwoKICBjb25zdCBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMgPSB7CiAgICB5ZWFyOiBuJDMsCiAgICBtb250aDogbiQzLAogICAgZGF5OiBuJDMsCiAgICBob3VyOiBuJDMsCiAgICBtaW51dGU6IG4kMywKICAgIHNlY29uZDogbiQzLAogIH07CgogIGNvbnN0IERBVEVUSU1FX01FRCA9IHsKICAgIHllYXI6IG4kMywKICAgIG1vbnRoOiBzJDIsCiAgICBkYXk6IG4kMywKICAgIGhvdXI6IG4kMywKICAgIG1pbnV0ZTogbiQzLAogIH07CgogIGNvbnN0IERBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMgPSB7CiAgICB5ZWFyOiBuJDMsCiAgICBtb250aDogcyQyLAogICAgZGF5OiBuJDMsCiAgICBob3VyOiBuJDMsCiAgICBtaW51dGU6IG4kMywKICAgIHNlY29uZDogbiQzLAogIH07CgogIGNvbnN0IERBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkgPSB7CiAgICB5ZWFyOiBuJDMsCiAgICBtb250aDogcyQyLAogICAgZGF5OiBuJDMsCiAgICB3ZWVrZGF5OiBzJDIsCiAgICBob3VyOiBuJDMsCiAgICBtaW51dGU6IG4kMywKICB9OwoKICBjb25zdCBEQVRFVElNRV9GVUxMID0gewogICAgeWVhcjogbiQzLAogICAgbW9udGg6IGwkMywKICAgIGRheTogbiQzLAogICAgaG91cjogbiQzLAogICAgbWludXRlOiBuJDMsCiAgICB0aW1lWm9uZU5hbWU6IHMkMiwKICB9OwoKICBjb25zdCBEQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EUyA9IHsKICAgIHllYXI6IG4kMywKICAgIG1vbnRoOiBsJDMsCiAgICBkYXk6IG4kMywKICAgIGhvdXI6IG4kMywKICAgIG1pbnV0ZTogbiQzLAogICAgc2Vjb25kOiBuJDMsCiAgICB0aW1lWm9uZU5hbWU6IHMkMiwKICB9OwoKICBjb25zdCBEQVRFVElNRV9IVUdFID0gewogICAgeWVhcjogbiQzLAogICAgbW9udGg6IGwkMywKICAgIGRheTogbiQzLAogICAgd2Vla2RheTogbCQzLAogICAgaG91cjogbiQzLAogICAgbWludXRlOiBuJDMsCiAgICB0aW1lWm9uZU5hbWU6IGwkMywKICB9OwoKICBjb25zdCBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUyA9IHsKICAgIHllYXI6IG4kMywKICAgIG1vbnRoOiBsJDMsCiAgICBkYXk6IG4kMywKICAgIHdlZWtkYXk6IGwkMywKICAgIGhvdXI6IG4kMywKICAgIG1pbnV0ZTogbiQzLAogICAgc2Vjb25kOiBuJDMsCiAgICB0aW1lWm9uZU5hbWU6IGwkMywKICB9OwoKICAvKgogICAgVGhpcyBpcyBqdXN0IGEganVuayBkcmF3ZXIsIGNvbnRhaW5pbmcgYW55dGhpbmcgdXNlZCBhY3Jvc3MgbXVsdGlwbGUgY2xhc3Nlcy4KICAgIEJlY2F1c2UgTHV4b24gaXMgc21hbGwoaXNoKSwgdGhpcyBzaG91bGQgc3RheSBzbWFsbCBhbmQgd2Ugd29uJ3Qgd29ycnkgYWJvdXQgc3BsaXR0aW5nCiAgICBpdCB1cCBpbnRvLCBzYXksIHBhcnNpbmdVdGlsLmpzIGFuZCBiYXNpY1V0aWwuanMgYW5kIHNvIG9uLiBCdXQgdGhleSBhcmUgZGl2aWRlZCB1cCBieSBmZWF0dXJlIGFyZWEuCiAgKi8KCiAgLyoqCiAgICogQHByaXZhdGUKICAgKi8KCiAgLy8gVFlQRVMKCiAgZnVuY3Rpb24gaXNVbmRlZmluZWQobykgewogICAgcmV0dXJuIHR5cGVvZiBvID09PSAidW5kZWZpbmVkIjsKICB9CgogIGZ1bmN0aW9uIGlzTnVtYmVyJDEobykgewogICAgcmV0dXJuIHR5cGVvZiBvID09PSAibnVtYmVyIjsKICB9CgogIGZ1bmN0aW9uIGlzSW50ZWdlcihvKSB7CiAgICByZXR1cm4gdHlwZW9mIG8gPT09ICJudW1iZXIiICYmIG8gJSAxID09PSAwOwogIH0KCiAgZnVuY3Rpb24gaXNTdHJpbmckMShvKSB7CiAgICByZXR1cm4gdHlwZW9mIG8gPT09ICJzdHJpbmciOwogIH0KCiAgZnVuY3Rpb24gaXNEYXRlKG8pIHsKICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09ICJbb2JqZWN0IERhdGVdIjsKICB9CgogIC8vIENBUEFCSUxJVElFUwoKICBmdW5jdGlvbiBoYXNSZWxhdGl2ZSgpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiB0eXBlb2YgSW50bCAhPT0gInVuZGVmaW5lZCIgJiYgISFJbnRsLlJlbGF0aXZlVGltZUZvcm1hdDsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgLy8gT0JKRUNUUyBBTkQgQVJSQVlTCgogIGZ1bmN0aW9uIG1heWJlQXJyYXkodGhpbmcpIHsKICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRoaW5nKSA/IHRoaW5nIDogW3RoaW5nXTsKICB9CgogIGZ1bmN0aW9uIGJlc3RCeShhcnIsIGJ5LCBjb21wYXJlKSB7CiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogICAgcmV0dXJuIGFyci5yZWR1Y2UoKGJlc3QsIG5leHQpID0+IHsKICAgICAgY29uc3QgcGFpciA9IFtieShuZXh0KSwgbmV4dF07CiAgICAgIGlmICghYmVzdCkgewogICAgICAgIHJldHVybiBwYWlyOwogICAgICB9IGVsc2UgaWYgKGNvbXBhcmUoYmVzdFswXSwgcGFpclswXSkgPT09IGJlc3RbMF0pIHsKICAgICAgICByZXR1cm4gYmVzdDsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gcGFpcjsKICAgICAgfQogICAgfSwgbnVsbClbMV07CiAgfQoKICBmdW5jdGlvbiBwaWNrKG9iaiwga2V5cykgewogICAgcmV0dXJuIGtleXMucmVkdWNlKChhLCBrKSA9PiB7CiAgICAgIGFba10gPSBvYmpba107CiAgICAgIHJldHVybiBhOwogICAgfSwge30pOwogIH0KCiAgZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7CiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7CiAgfQoKICAvLyBOVU1CRVJTIEFORCBTVFJJTkdTCgogIGZ1bmN0aW9uIGludGVnZXJCZXR3ZWVuKHRoaW5nLCBib3R0b20sIHRvcCkgewogICAgcmV0dXJuIGlzSW50ZWdlcih0aGluZykgJiYgdGhpbmcgPj0gYm90dG9tICYmIHRoaW5nIDw9IHRvcDsKICB9CgogIC8vIHggJSBuIGJ1dCB0YWtlcyB0aGUgc2lnbiBvZiBuIGluc3RlYWQgb2YgeAogIGZ1bmN0aW9uIGZsb29yTW9kKHgsIG4pIHsKICAgIHJldHVybiB4IC0gbiAqIE1hdGguZmxvb3IoeCAvIG4pOwogIH0KCiAgZnVuY3Rpb24gcGFkU3RhcnQoaW5wdXQsIG4gPSAyKSB7CiAgICBjb25zdCBpc05lZyA9IGlucHV0IDwgMDsKICAgIGxldCBwYWRkZWQ7CiAgICBpZiAoaXNOZWcpIHsKICAgICAgcGFkZGVkID0gIi0iICsgKCIiICsgLWlucHV0KS5wYWRTdGFydChuLCAiMCIpOwogICAgfSBlbHNlIHsKICAgICAgcGFkZGVkID0gKCIiICsgaW5wdXQpLnBhZFN0YXJ0KG4sICIwIik7CiAgICB9CiAgICByZXR1cm4gcGFkZGVkOwogIH0KCiAgZnVuY3Rpb24gcGFyc2VJbnRlZ2VyKHN0cmluZykgewogICAgaWYgKGlzVW5kZWZpbmVkKHN0cmluZykgfHwgc3RyaW5nID09PSBudWxsIHx8IHN0cmluZyA9PT0gIiIpIHsKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBwYXJzZUludChzdHJpbmcsIDEwKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHBhcnNlRmxvYXRpbmcoc3RyaW5nKSB7CiAgICBpZiAoaXNVbmRlZmluZWQoc3RyaW5nKSB8fCBzdHJpbmcgPT09IG51bGwgfHwgc3RyaW5nID09PSAiIikgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc3RyaW5nKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHBhcnNlTWlsbGlzKGZyYWN0aW9uKSB7CiAgICAvLyBSZXR1cm4gdW5kZWZpbmVkIChpbnN0ZWFkIG9mIDApIGluIHRoZXNlIGNhc2VzLCB3aGVyZSBmcmFjdGlvbiBpcyBub3Qgc2V0CiAgICBpZiAoaXNVbmRlZmluZWQoZnJhY3Rpb24pIHx8IGZyYWN0aW9uID09PSBudWxsIHx8IGZyYWN0aW9uID09PSAiIikgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfSBlbHNlIHsKICAgICAgY29uc3QgZiA9IHBhcnNlRmxvYXQoIjAuIiArIGZyYWN0aW9uKSAqIDEwMDA7CiAgICAgIHJldHVybiBNYXRoLmZsb29yKGYpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gcm91bmRUbyhudW1iZXIsIGRpZ2l0cywgdG93YXJkWmVybyA9IGZhbHNlKSB7CiAgICBjb25zdCBmYWN0b3IgPSAxMCAqKiBkaWdpdHMsCiAgICAgIHJvdW5kZXIgPSB0b3dhcmRaZXJvID8gTWF0aC50cnVuYyA6IE1hdGgucm91bmQ7CiAgICByZXR1cm4gcm91bmRlcihudW1iZXIgKiBmYWN0b3IpIC8gZmFjdG9yOwogIH0KCiAgLy8gREFURSBCQVNJQ1MKCiAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7CiAgICByZXR1cm4geWVhciAlIDQgPT09IDAgJiYgKHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCk7CiAgfQoKICBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHsKICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1OwogIH0KCiAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHsKICAgIGNvbnN0IG1vZE1vbnRoID0gZmxvb3JNb2QobW9udGggLSAxLCAxMikgKyAxLAogICAgICBtb2RZZWFyID0geWVhciArIChtb250aCAtIG1vZE1vbnRoKSAvIDEyOwoKICAgIGlmIChtb2RNb250aCA9PT0gMikgewogICAgICByZXR1cm4gaXNMZWFwWWVhcihtb2RZZWFyKSA/IDI5IDogMjg7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gWzMxLCBudWxsLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV1bbW9kTW9udGggLSAxXTsKICAgIH0KICB9CgogIC8vIGNvdmVydCBhIGNhbGVuZGFyIG9iamVjdCB0byBhIGxvY2FsIHRpbWVzdGFtcCAoZXBvY2gsIGJ1dCB3aXRoIHRoZSBvZmZzZXQgYmFrZWQgaW4pCiAgZnVuY3Rpb24gb2JqVG9Mb2NhbFRTKG9iaikgewogICAgbGV0IGQgPSBEYXRlLlVUQygKICAgICAgb2JqLnllYXIsCiAgICAgIG9iai5tb250aCAtIDEsCiAgICAgIG9iai5kYXksCiAgICAgIG9iai5ob3VyLAogICAgICBvYmoubWludXRlLAogICAgICBvYmouc2Vjb25kLAogICAgICBvYmoubWlsbGlzZWNvbmQKICAgICk7CgogICAgLy8gZm9yIGxlZ2FjeSByZWFzb25zLCB5ZWFycyBiZXR3ZWVuIDAgYW5kIDk5IGFyZSBpbnRlcnByZXRlZCBhcyAxOVhYOyByZXZlcnQgdGhhdAogICAgaWYgKG9iai55ZWFyIDwgMTAwICYmIG9iai55ZWFyID49IDApIHsKICAgICAgZCA9IG5ldyBEYXRlKGQpOwogICAgICBkLnNldFVUQ0Z1bGxZZWFyKGQuZ2V0VVRDRnVsbFllYXIoKSAtIDE5MDApOwogICAgfQogICAgcmV0dXJuICtkOwogIH0KCiAgZnVuY3Rpb24gd2Vla3NJbldlZWtZZWFyKHdlZWtZZWFyKSB7CiAgICBjb25zdCBwMSA9CiAgICAgICAgKHdlZWtZZWFyICsKICAgICAgICAgIE1hdGguZmxvb3Iod2Vla1llYXIgLyA0KSAtCiAgICAgICAgICBNYXRoLmZsb29yKHdlZWtZZWFyIC8gMTAwKSArCiAgICAgICAgICBNYXRoLmZsb29yKHdlZWtZZWFyIC8gNDAwKSkgJQogICAgICAgIDcsCiAgICAgIGxhc3QgPSB3ZWVrWWVhciAtIDEsCiAgICAgIHAyID0gKGxhc3QgKyBNYXRoLmZsb29yKGxhc3QgLyA0KSAtIE1hdGguZmxvb3IobGFzdCAvIDEwMCkgKyBNYXRoLmZsb29yKGxhc3QgLyA0MDApKSAlIDc7CiAgICByZXR1cm4gcDEgPT09IDQgfHwgcDIgPT09IDMgPyA1MyA6IDUyOwogIH0KCiAgZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhcikgewogICAgaWYgKHllYXIgPiA5OSkgewogICAgICByZXR1cm4geWVhcjsKICAgIH0gZWxzZSByZXR1cm4geWVhciA+IDYwID8gMTkwMCArIHllYXIgOiAyMDAwICsgeWVhcjsKICB9CgogIC8vIFBBUlNJTkcKCiAgZnVuY3Rpb24gcGFyc2Vab25lSW5mbyh0cywgb2Zmc2V0Rm9ybWF0LCBsb2NhbGUsIHRpbWVab25lID0gbnVsbCkgewogICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzKSwKICAgICAgaW50bE9wdHMgPSB7CiAgICAgICAgaG91ckN5Y2xlOiAiaDIzIiwKICAgICAgICB5ZWFyOiAibnVtZXJpYyIsCiAgICAgICAgbW9udGg6ICIyLWRpZ2l0IiwKICAgICAgICBkYXk6ICIyLWRpZ2l0IiwKICAgICAgICBob3VyOiAiMi1kaWdpdCIsCiAgICAgICAgbWludXRlOiAiMi1kaWdpdCIsCiAgICAgIH07CgogICAgaWYgKHRpbWVab25lKSB7CiAgICAgIGludGxPcHRzLnRpbWVab25lID0gdGltZVpvbmU7CiAgICB9CgogICAgY29uc3QgbW9kaWZpZWQgPSB7IHRpbWVab25lTmFtZTogb2Zmc2V0Rm9ybWF0LCAuLi5pbnRsT3B0cyB9OwoKICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgbW9kaWZpZWQpCiAgICAgIC5mb3JtYXRUb1BhcnRzKGRhdGUpCiAgICAgIC5maW5kKChtKSA9PiBtLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gInRpbWV6b25lbmFtZSIpOwogICAgcmV0dXJuIHBhcnNlZCA/IHBhcnNlZC52YWx1ZSA6IG51bGw7CiAgfQoKICAvLyBzaWduZWRPZmZzZXQoJy01JywgJzMwJykgLT4gLTMzMAogIGZ1bmN0aW9uIHNpZ25lZE9mZnNldChvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHIpIHsKICAgIGxldCBvZmZIb3VyID0gcGFyc2VJbnQob2ZmSG91clN0ciwgMTApOwoKICAgIC8vIGRvbid0IHx8IHRoaXMgYmVjYXVzZSB3ZSB3YW50IHRvIHByZXNlcnZlIC0wCiAgICBpZiAoTnVtYmVyLmlzTmFOKG9mZkhvdXIpKSB7CiAgICAgIG9mZkhvdXIgPSAwOwogICAgfQoKICAgIGNvbnN0IG9mZk1pbiA9IHBhcnNlSW50KG9mZk1pbnV0ZVN0ciwgMTApIHx8IDAsCiAgICAgIG9mZk1pblNpZ25lZCA9IG9mZkhvdXIgPCAwIHx8IE9iamVjdC5pcyhvZmZIb3VyLCAtMCkgPyAtb2ZmTWluIDogb2ZmTWluOwogICAgcmV0dXJuIG9mZkhvdXIgKiA2MCArIG9mZk1pblNpZ25lZDsKICB9CgogIC8vIENPRVJDSU9OCgogIGZ1bmN0aW9uIGFzTnVtYmVyKHZhbHVlKSB7CiAgICBjb25zdCBudW1lcmljVmFsdWUgPSBOdW1iZXIodmFsdWUpOwogICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gImJvb2xlYW4iIHx8IHZhbHVlID09PSAiIiB8fCBOdW1iZXIuaXNOYU4obnVtZXJpY1ZhbHVlKSkKICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHVuaXQgdmFsdWUgJHt2YWx1ZX1gKTsKICAgIHJldHVybiBudW1lcmljVmFsdWU7CiAgfQoKICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVyKSB7CiAgICBjb25zdCBub3JtYWxpemVkID0ge307CiAgICBmb3IgKGNvbnN0IHUgaW4gb2JqKSB7CiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShvYmosIHUpKSB7CiAgICAgICAgY29uc3QgdiA9IG9ialt1XTsKICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGwpIGNvbnRpbnVlOwogICAgICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplcih1KV0gPSBhc051bWJlcih2KTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG5vcm1hbGl6ZWQ7CiAgfQoKICBmdW5jdGlvbiBmb3JtYXRPZmZzZXQob2Zmc2V0LCBmb3JtYXQpIHsKICAgIGNvbnN0IGhvdXJzID0gTWF0aC50cnVuYyhNYXRoLmFicyhvZmZzZXQgLyA2MCkpLAogICAgICBtaW51dGVzID0gTWF0aC50cnVuYyhNYXRoLmFicyhvZmZzZXQgJSA2MCkpLAogICAgICBzaWduID0gb2Zmc2V0ID49IDAgPyAiKyIgOiAiLSI7CgogICAgc3dpdGNoIChmb3JtYXQpIHsKICAgICAgY2FzZSAic2hvcnQiOgogICAgICAgIHJldHVybiBgJHtzaWdufSR7cGFkU3RhcnQoaG91cnMsIDIpfToke3BhZFN0YXJ0KG1pbnV0ZXMsIDIpfWA7CiAgICAgIGNhc2UgIm5hcnJvdyI6CiAgICAgICAgcmV0dXJuIGAke3NpZ259JHtob3Vyc30ke21pbnV0ZXMgPiAwID8gYDoke21pbnV0ZXN9YCA6ICIifWA7CiAgICAgIGNhc2UgInRlY2hpZSI6CiAgICAgICAgcmV0dXJuIGAke3NpZ259JHtwYWRTdGFydChob3VycywgMil9JHtwYWRTdGFydChtaW51dGVzLCAyKX1gOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBWYWx1ZSBmb3JtYXQgJHtmb3JtYXR9IGlzIG91dCBvZiByYW5nZSBmb3IgcHJvcGVydHkgZm9ybWF0YCk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiB0aW1lT2JqZWN0KG9iaikgewogICAgcmV0dXJuIHBpY2sob2JqLCBbImhvdXIiLCAibWludXRlIiwgInNlY29uZCIsICJtaWxsaXNlY29uZCJdKTsKICB9CgogIGNvbnN0IGlhbmFSZWdleCA9CiAgICAvW0EtWmEtel8rLV17MSwyNTZ9KD86Oj9cL1tBLVphLXowLTlfKy1dezEsMjU2fSg/OlwvW0EtWmEtejAtOV8rLV17MSwyNTZ9KT8pPy87CgogIC8qKgogICAqIEBwcml2YXRlCiAgICovCgogIGNvbnN0IG1vbnRoc0xvbmcgPSBbCiAgICAiSmFudWFyeSIsCiAgICAiRmVicnVhcnkiLAogICAgIk1hcmNoIiwKICAgICJBcHJpbCIsCiAgICAiTWF5IiwKICAgICJKdW5lIiwKICAgICJKdWx5IiwKICAgICJBdWd1c3QiLAogICAgIlNlcHRlbWJlciIsCiAgICAiT2N0b2JlciIsCiAgICAiTm92ZW1iZXIiLAogICAgIkRlY2VtYmVyIiwKICBdOwoKICBjb25zdCBtb250aHNTaG9ydCA9IFsKICAgICJKYW4iLAogICAgIkZlYiIsCiAgICAiTWFyIiwKICAgICJBcHIiLAogICAgIk1heSIsCiAgICAiSnVuIiwKICAgICJKdWwiLAogICAgIkF1ZyIsCiAgICAiU2VwIiwKICAgICJPY3QiLAogICAgIk5vdiIsCiAgICAiRGVjIiwKICBdOwoKICBjb25zdCBtb250aHNOYXJyb3cgPSBbIkoiLCAiRiIsICJNIiwgIkEiLCAiTSIsICJKIiwgIkoiLCAiQSIsICJTIiwgIk8iLCAiTiIsICJEIl07CgogIGZ1bmN0aW9uIG1vbnRocyhsZW5ndGgpIHsKICAgIHN3aXRjaCAobGVuZ3RoKSB7CiAgICAgIGNhc2UgIm5hcnJvdyI6CiAgICAgICAgcmV0dXJuIFsuLi5tb250aHNOYXJyb3ddOwogICAgICBjYXNlICJzaG9ydCI6CiAgICAgICAgcmV0dXJuIFsuLi5tb250aHNTaG9ydF07CiAgICAgIGNhc2UgImxvbmciOgogICAgICAgIHJldHVybiBbLi4ubW9udGhzTG9uZ107CiAgICAgIGNhc2UgIm51bWVyaWMiOgogICAgICAgIHJldHVybiBbIjEiLCAiMiIsICIzIiwgIjQiLCAiNSIsICI2IiwgIjciLCAiOCIsICI5IiwgIjEwIiwgIjExIiwgIjEyIl07CiAgICAgIGNhc2UgIjItZGlnaXQiOgogICAgICAgIHJldHVybiBbIjAxIiwgIjAyIiwgIjAzIiwgIjA0IiwgIjA1IiwgIjA2IiwgIjA3IiwgIjA4IiwgIjA5IiwgIjEwIiwgIjExIiwgIjEyIl07CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfQoKICBjb25zdCB3ZWVrZGF5c0xvbmcgPSBbCiAgICAiTW9uZGF5IiwKICAgICJUdWVzZGF5IiwKICAgICJXZWRuZXNkYXkiLAogICAgIlRodXJzZGF5IiwKICAgICJGcmlkYXkiLAogICAgIlNhdHVyZGF5IiwKICAgICJTdW5kYXkiLAogIF07CgogIGNvbnN0IHdlZWtkYXlzU2hvcnQgPSBbIk1vbiIsICJUdWUiLCAiV2VkIiwgIlRodSIsICJGcmkiLCAiU2F0IiwgIlN1biJdOwoKICBjb25zdCB3ZWVrZGF5c05hcnJvdyA9IFsiTSIsICJUIiwgIlciLCAiVCIsICJGIiwgIlMiLCAiUyJdOwoKICBmdW5jdGlvbiB3ZWVrZGF5cyhsZW5ndGgpIHsKICAgIHN3aXRjaCAobGVuZ3RoKSB7CiAgICAgIGNhc2UgIm5hcnJvdyI6CiAgICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c05hcnJvd107CiAgICAgIGNhc2UgInNob3J0IjoKICAgICAgICByZXR1cm4gWy4uLndlZWtkYXlzU2hvcnRdOwogICAgICBjYXNlICJsb25nIjoKICAgICAgICByZXR1cm4gWy4uLndlZWtkYXlzTG9uZ107CiAgICAgIGNhc2UgIm51bWVyaWMiOgogICAgICAgIHJldHVybiBbIjEiLCAiMiIsICIzIiwgIjQiLCAiNSIsICI2IiwgIjciXTsKICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9CgogIGNvbnN0IG1lcmlkaWVtcyA9IFsiQU0iLCAiUE0iXTsKCiAgY29uc3QgZXJhc0xvbmcgPSBbIkJlZm9yZSBDaHJpc3QiLCAiQW5ubyBEb21pbmkiXTsKCiAgY29uc3QgZXJhc1Nob3J0ID0gWyJCQyIsICJBRCJdOwoKICBjb25zdCBlcmFzTmFycm93ID0gWyJCIiwgIkEiXTsKCiAgZnVuY3Rpb24gZXJhcyhsZW5ndGgpIHsKICAgIHN3aXRjaCAobGVuZ3RoKSB7CiAgICAgIGNhc2UgIm5hcnJvdyI6CiAgICAgICAgcmV0dXJuIFsuLi5lcmFzTmFycm93XTsKICAgICAgY2FzZSAic2hvcnQiOgogICAgICAgIHJldHVybiBbLi4uZXJhc1Nob3J0XTsKICAgICAgY2FzZSAibG9uZyI6CiAgICAgICAgcmV0dXJuIFsuLi5lcmFzTG9uZ107CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBtZXJpZGllbUZvckRhdGVUaW1lKGR0KSB7CiAgICByZXR1cm4gbWVyaWRpZW1zW2R0LmhvdXIgPCAxMiA/IDAgOiAxXTsKICB9CgogIGZ1bmN0aW9uIHdlZWtkYXlGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSB7CiAgICByZXR1cm4gd2Vla2RheXMobGVuZ3RoKVtkdC53ZWVrZGF5IC0gMV07CiAgfQoKICBmdW5jdGlvbiBtb250aEZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIHsKICAgIHJldHVybiBtb250aHMobGVuZ3RoKVtkdC5tb250aCAtIDFdOwogIH0KCiAgZnVuY3Rpb24gZXJhRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgewogICAgcmV0dXJuIGVyYXMobGVuZ3RoKVtkdC55ZWFyIDwgMCA/IDAgOiAxXTsKICB9CgogIGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlVGltZSh1bml0LCBjb3VudCwgbnVtZXJpYyA9ICJhbHdheXMiLCBuYXJyb3cgPSBmYWxzZSkgewogICAgY29uc3QgdW5pdHMgPSB7CiAgICAgIHllYXJzOiBbInllYXIiLCAieXIuIl0sCiAgICAgIHF1YXJ0ZXJzOiBbInF1YXJ0ZXIiLCAicXRyLiJdLAogICAgICBtb250aHM6IFsibW9udGgiLCAibW8uIl0sCiAgICAgIHdlZWtzOiBbIndlZWsiLCAid2suIl0sCiAgICAgIGRheXM6IFsiZGF5IiwgImRheSIsICJkYXlzIl0sCiAgICAgIGhvdXJzOiBbImhvdXIiLCAiaHIuIl0sCiAgICAgIG1pbnV0ZXM6IFsibWludXRlIiwgIm1pbi4iXSwKICAgICAgc2Vjb25kczogWyJzZWNvbmQiLCAic2VjLiJdLAogICAgfTsKCiAgICBjb25zdCBsYXN0YWJsZSA9IFsiaG91cnMiLCAibWludXRlcyIsICJzZWNvbmRzIl0uaW5kZXhPZih1bml0KSA9PT0gLTE7CgogICAgaWYgKG51bWVyaWMgPT09ICJhdXRvIiAmJiBsYXN0YWJsZSkgewogICAgICBjb25zdCBpc0RheSA9IHVuaXQgPT09ICJkYXlzIjsKICAgICAgc3dpdGNoIChjb3VudCkgewogICAgICAgIGNhc2UgMToKICAgICAgICAgIHJldHVybiBpc0RheSA/ICJ0b21vcnJvdyIgOiBgbmV4dCAke3VuaXRzW3VuaXRdWzBdfWA7CiAgICAgICAgY2FzZSAtMToKICAgICAgICAgIHJldHVybiBpc0RheSA/ICJ5ZXN0ZXJkYXkiIDogYGxhc3QgJHt1bml0c1t1bml0XVswXX1gOwogICAgICAgIGNhc2UgMDoKICAgICAgICAgIHJldHVybiBpc0RheSA/ICJ0b2RheSIgOiBgdGhpcyAke3VuaXRzW3VuaXRdWzBdfWA7CiAgICAgIH0KICAgIH0KCiAgICBjb25zdCBpc0luUGFzdCA9IE9iamVjdC5pcyhjb3VudCwgLTApIHx8IGNvdW50IDwgMCwKICAgICAgZm10VmFsdWUgPSBNYXRoLmFicyhjb3VudCksCiAgICAgIHNpbmd1bGFyID0gZm10VmFsdWUgPT09IDEsCiAgICAgIGxpbFVuaXRzID0gdW5pdHNbdW5pdF0sCiAgICAgIGZtdFVuaXQgPSBuYXJyb3cKICAgICAgICA/IHNpbmd1bGFyCiAgICAgICAgICA/IGxpbFVuaXRzWzFdCiAgICAgICAgICA6IGxpbFVuaXRzWzJdIHx8IGxpbFVuaXRzWzFdCiAgICAgICAgOiBzaW5ndWxhcgogICAgICAgID8gdW5pdHNbdW5pdF1bMF0KICAgICAgICA6IHVuaXQ7CiAgICByZXR1cm4gaXNJblBhc3QgPyBgJHtmbXRWYWx1ZX0gJHtmbXRVbml0fSBhZ29gIDogYGluICR7Zm10VmFsdWV9ICR7Zm10VW5pdH1gOwogIH0KCiAgZnVuY3Rpb24gc3RyaW5naWZ5VG9rZW5zKHNwbGl0cywgdG9rZW5Ub1N0cmluZykgewogICAgbGV0IHMgPSAiIjsKICAgIGZvciAoY29uc3QgdG9rZW4gb2Ygc3BsaXRzKSB7CiAgICAgIGlmICh0b2tlbi5saXRlcmFsKSB7CiAgICAgICAgcyArPSB0b2tlbi52YWw7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcyArPSB0b2tlblRvU3RyaW5nKHRva2VuLnZhbCk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzOwogIH0KCiAgY29uc3QgbWFjcm9Ub2tlblRvRm9ybWF0T3B0cyA9IHsKICAgIEQ6IERBVEVfU0hPUlQsCiAgICBERDogREFURV9NRUQsCiAgICBEREQ6IERBVEVfRlVMTCwKICAgIEREREQ6IERBVEVfSFVHRSwKICAgIHQ6IFRJTUVfU0lNUExFLAogICAgdHQ6IFRJTUVfV0lUSF9TRUNPTkRTLAogICAgdHR0OiBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VULAogICAgdHR0dDogVElNRV9XSVRIX0xPTkdfT0ZGU0VULAogICAgVDogVElNRV8yNF9TSU1QTEUsCiAgICBUVDogVElNRV8yNF9XSVRIX1NFQ09ORFMsCiAgICBUVFQ6IFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQsCiAgICBUVFRUOiBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQsCiAgICBmOiBEQVRFVElNRV9TSE9SVCwKICAgIGZmOiBEQVRFVElNRV9NRUQsCiAgICBmZmY6IERBVEVUSU1FX0ZVTEwsCiAgICBmZmZmOiBEQVRFVElNRV9IVUdFLAogICAgRjogREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTLAogICAgRkY6IERBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMsCiAgICBGRkY6IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTLAogICAgRkZGRjogREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFMsCiAgfTsKCiAgLyoqCiAgICogQHByaXZhdGUKICAgKi8KCiAgY2xhc3MgRm9ybWF0dGVyIHsKICAgIHN0YXRpYyBjcmVhdGUobG9jYWxlLCBvcHRzID0ge30pIHsKICAgICAgcmV0dXJuIG5ldyBGb3JtYXR0ZXIobG9jYWxlLCBvcHRzKTsKICAgIH0KCiAgICBzdGF0aWMgcGFyc2VGb3JtYXQoZm10KSB7CiAgICAgIGxldCBjdXJyZW50ID0gbnVsbCwKICAgICAgICBjdXJyZW50RnVsbCA9ICIiLAogICAgICAgIGJyYWNrZXRlZCA9IGZhbHNlOwogICAgICBjb25zdCBzcGxpdHMgPSBbXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbXQubGVuZ3RoOyBpKyspIHsKICAgICAgICBjb25zdCBjID0gZm10LmNoYXJBdChpKTsKICAgICAgICBpZiAoYyA9PT0gIiciKSB7CiAgICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkgewogICAgICAgICAgICBzcGxpdHMucHVzaCh7IGxpdGVyYWw6IGJyYWNrZXRlZCwgdmFsOiBjdXJyZW50RnVsbCB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGN1cnJlbnQgPSBudWxsOwogICAgICAgICAgY3VycmVudEZ1bGwgPSAiIjsKICAgICAgICAgIGJyYWNrZXRlZCA9ICFicmFja2V0ZWQ7CiAgICAgICAgfSBlbHNlIGlmIChicmFja2V0ZWQpIHsKICAgICAgICAgIGN1cnJlbnRGdWxsICs9IGM7CiAgICAgICAgfSBlbHNlIGlmIChjID09PSBjdXJyZW50KSB7CiAgICAgICAgICBjdXJyZW50RnVsbCArPSBjOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkgewogICAgICAgICAgICBzcGxpdHMucHVzaCh7IGxpdGVyYWw6IGZhbHNlLCB2YWw6IGN1cnJlbnRGdWxsIH0pOwogICAgICAgICAgfQogICAgICAgICAgY3VycmVudEZ1bGwgPSBjOwogICAgICAgICAgY3VycmVudCA9IGM7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkgewogICAgICAgIHNwbGl0cy5wdXNoKHsgbGl0ZXJhbDogYnJhY2tldGVkLCB2YWw6IGN1cnJlbnRGdWxsIH0pOwogICAgICB9CgogICAgICByZXR1cm4gc3BsaXRzOwogICAgfQoKICAgIHN0YXRpYyBtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuKSB7CiAgICAgIHJldHVybiBtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzW3Rva2VuXTsKICAgIH0KCiAgICBjb25zdHJ1Y3Rvcihsb2NhbGUsIGZvcm1hdE9wdHMpIHsKICAgICAgdGhpcy5vcHRzID0gZm9ybWF0T3B0czsKICAgICAgdGhpcy5sb2MgPSBsb2NhbGU7CiAgICAgIHRoaXMuc3lzdGVtTG9jID0gbnVsbDsKICAgIH0KCiAgICBmb3JtYXRXaXRoU3lzdGVtRGVmYXVsdChkdCwgb3B0cykgewogICAgICBpZiAodGhpcy5zeXN0ZW1Mb2MgPT09IG51bGwpIHsKICAgICAgICB0aGlzLnN5c3RlbUxvYyA9IHRoaXMubG9jLnJlZGVmYXVsdFRvU3lzdGVtKCk7CiAgICAgIH0KICAgICAgY29uc3QgZGYgPSB0aGlzLnN5c3RlbUxvYy5kdEZvcm1hdHRlcihkdCwgeyAuLi50aGlzLm9wdHMsIC4uLm9wdHMgfSk7CiAgICAgIHJldHVybiBkZi5mb3JtYXQoKTsKICAgIH0KCiAgICBmb3JtYXREYXRlVGltZShkdCwgb3B0cyA9IHt9KSB7CiAgICAgIGNvbnN0IGRmID0gdGhpcy5sb2MuZHRGb3JtYXR0ZXIoZHQsIHsgLi4udGhpcy5vcHRzLCAuLi5vcHRzIH0pOwogICAgICByZXR1cm4gZGYuZm9ybWF0KCk7CiAgICB9CgogICAgZm9ybWF0RGF0ZVRpbWVQYXJ0cyhkdCwgb3B0cyA9IHt9KSB7CiAgICAgIGNvbnN0IGRmID0gdGhpcy5sb2MuZHRGb3JtYXR0ZXIoZHQsIHsgLi4udGhpcy5vcHRzLCAuLi5vcHRzIH0pOwogICAgICByZXR1cm4gZGYuZm9ybWF0VG9QYXJ0cygpOwogICAgfQoKICAgIHJlc29sdmVkT3B0aW9ucyhkdCwgb3B0cyA9IHt9KSB7CiAgICAgIGNvbnN0IGRmID0gdGhpcy5sb2MuZHRGb3JtYXR0ZXIoZHQsIHsgLi4udGhpcy5vcHRzLCAuLi5vcHRzIH0pOwogICAgICByZXR1cm4gZGYucmVzb2x2ZWRPcHRpb25zKCk7CiAgICB9CgogICAgbnVtKG4sIHAgPSAwKSB7CiAgICAgIC8vIHdlIGdldCBzb21lIHBlcmYgb3V0IG9mIGRvaW5nIHRoaXMgaGVyZSwgYW5ub3lpbmdseQogICAgICBpZiAodGhpcy5vcHRzLmZvcmNlU2ltcGxlKSB7CiAgICAgICAgcmV0dXJuIHBhZFN0YXJ0KG4sIHApOwogICAgICB9CgogICAgICBjb25zdCBvcHRzID0geyAuLi50aGlzLm9wdHMgfTsKCiAgICAgIGlmIChwID4gMCkgewogICAgICAgIG9wdHMucGFkVG8gPSBwOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5sb2MubnVtYmVyRm9ybWF0dGVyKG9wdHMpLmZvcm1hdChuKTsKICAgIH0KCiAgICBmb3JtYXREYXRlVGltZUZyb21TdHJpbmcoZHQsIGZtdCkgewogICAgICBjb25zdCBrbm93bkVuZ2xpc2ggPSB0aGlzLmxvYy5saXN0aW5nTW9kZSgpID09PSAiZW4iLAogICAgICAgIHVzZURhdGVUaW1lRm9ybWF0dGVyID0gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgJiYgdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgIT09ICJncmVnb3J5IiwKICAgICAgICBzdHJpbmcgPSAob3B0cywgZXh0cmFjdCkgPT4gdGhpcy5sb2MuZXh0cmFjdChkdCwgb3B0cywgZXh0cmFjdCksCiAgICAgICAgZm9ybWF0T2Zmc2V0ID0gKG9wdHMpID0+IHsKICAgICAgICAgIGlmIChkdC5pc09mZnNldEZpeGVkICYmIGR0Lm9mZnNldCA9PT0gMCAmJiBvcHRzLmFsbG93WikgewogICAgICAgICAgICByZXR1cm4gIloiOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBkdC5pc1ZhbGlkID8gZHQuem9uZS5mb3JtYXRPZmZzZXQoZHQudHMsIG9wdHMuZm9ybWF0KSA6ICIiOwogICAgICAgIH0sCiAgICAgICAgbWVyaWRpZW0gPSAoKSA9PgogICAgICAgICAga25vd25FbmdsaXNoCiAgICAgICAgICAgID8gbWVyaWRpZW1Gb3JEYXRlVGltZShkdCkKICAgICAgICAgICAgOiBzdHJpbmcoeyBob3VyOiAibnVtZXJpYyIsIGhvdXJDeWNsZTogImgxMiIgfSwgImRheXBlcmlvZCIpLAogICAgICAgIG1vbnRoID0gKGxlbmd0aCwgc3RhbmRhbG9uZSkgPT4KICAgICAgICAgIGtub3duRW5nbGlzaAogICAgICAgICAgICA/IG1vbnRoRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkKICAgICAgICAgICAgOiBzdHJpbmcoc3RhbmRhbG9uZSA/IHsgbW9udGg6IGxlbmd0aCB9IDogeyBtb250aDogbGVuZ3RoLCBkYXk6ICJudW1lcmljIiB9LCAibW9udGgiKSwKICAgICAgICB3ZWVrZGF5ID0gKGxlbmd0aCwgc3RhbmRhbG9uZSkgPT4KICAgICAgICAgIGtub3duRW5nbGlzaAogICAgICAgICAgICA/IHdlZWtkYXlGb3JEYXRlVGltZShkdCwgbGVuZ3RoKQogICAgICAgICAgICA6IHN0cmluZygKICAgICAgICAgICAgICAgIHN0YW5kYWxvbmUgPyB7IHdlZWtkYXk6IGxlbmd0aCB9IDogeyB3ZWVrZGF5OiBsZW5ndGgsIG1vbnRoOiAibG9uZyIsIGRheTogIm51bWVyaWMiIH0sCiAgICAgICAgICAgICAgICAid2Vla2RheSIKICAgICAgICAgICAgICApLAogICAgICAgIG1heWJlTWFjcm8gPSAodG9rZW4pID0+IHsKICAgICAgICAgIGNvbnN0IGZvcm1hdE9wdHMgPSBGb3JtYXR0ZXIubWFjcm9Ub2tlblRvRm9ybWF0T3B0cyh0b2tlbik7CiAgICAgICAgICBpZiAoZm9ybWF0T3B0cykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRXaXRoU3lzdGVtRGVmYXVsdChkdCwgZm9ybWF0T3B0cyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gdG9rZW47CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBlcmEgPSAobGVuZ3RoKSA9PgogICAgICAgICAga25vd25FbmdsaXNoID8gZXJhRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoeyBlcmE6IGxlbmd0aCB9LCAiZXJhIiksCiAgICAgICAgdG9rZW5Ub1N0cmluZyA9ICh0b2tlbikgPT4gewogICAgICAgICAgLy8gV2hlcmUgcG9zc2libGU6IGh0dHA6Ly9jbGRyLnVuaWNvZGUub3JnL3RyYW5zbGF0aW9uL2RhdGUtdGltZS0xL2RhdGUtdGltZSNUT0MtU3RhbmRhbG9uZS12cy4tRm9ybWF0LVN0eWxlcwogICAgICAgICAgc3dpdGNoICh0b2tlbikgewogICAgICAgICAgICAvLyBtcwogICAgICAgICAgICBjYXNlICJTIjoKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWlsbGlzZWNvbmQpOwogICAgICAgICAgICBjYXNlICJ1IjoKICAgICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaAogICAgICAgICAgICBjYXNlICJTU1MiOgogICAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taWxsaXNlY29uZCwgMyk7CiAgICAgICAgICAgIC8vIHNlY29uZHMKICAgICAgICAgICAgY2FzZSAicyI6CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LnNlY29uZCk7CiAgICAgICAgICAgIGNhc2UgInNzIjoKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuc2Vjb25kLCAyKTsKICAgICAgICAgICAgLy8gZnJhY3Rpb25hbCBzZWNvbmRzCiAgICAgICAgICAgIGNhc2UgInV1IjoKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oTWF0aC5mbG9vcihkdC5taWxsaXNlY29uZCAvIDEwKSwgMik7CiAgICAgICAgICAgIGNhc2UgInV1dSI6CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKE1hdGguZmxvb3IoZHQubWlsbGlzZWNvbmQgLyAxMDApKTsKICAgICAgICAgICAgLy8gbWludXRlcwogICAgICAgICAgICBjYXNlICJtIjoKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWludXRlKTsKICAgICAgICAgICAgY2FzZSAibW0iOgogICAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taW51dGUsIDIpOwogICAgICAgICAgICAvLyBob3VycwogICAgICAgICAgICBjYXNlICJoIjoKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuaG91ciAlIDEyID09PSAwID8gMTIgOiBkdC5ob3VyICUgMTIpOwogICAgICAgICAgICBjYXNlICJoaCI6CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIgJSAxMiA9PT0gMCA/IDEyIDogZHQuaG91ciAlIDEyLCAyKTsKICAgICAgICAgICAgY2FzZSAiSCI6CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIpOwogICAgICAgICAgICBjYXNlICJISCI6CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIsIDIpOwogICAgICAgICAgICAvLyBvZmZzZXQKICAgICAgICAgICAgY2FzZSAiWiI6CiAgICAgICAgICAgICAgLy8gbGlrZSArNgogICAgICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQoeyBmb3JtYXQ6ICJuYXJyb3ciLCBhbGxvd1o6IHRoaXMub3B0cy5hbGxvd1ogfSk7CiAgICAgICAgICAgIGNhc2UgIlpaIjoKICAgICAgICAgICAgICAvLyBsaWtlICswNjowMAogICAgICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQoeyBmb3JtYXQ6ICJzaG9ydCIsIGFsbG93WjogdGhpcy5vcHRzLmFsbG93WiB9KTsKICAgICAgICAgICAgY2FzZSAiWlpaIjoKICAgICAgICAgICAgICAvLyBsaWtlICswNjAwCiAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE9mZnNldCh7IGZvcm1hdDogInRlY2hpZSIsIGFsbG93WjogdGhpcy5vcHRzLmFsbG93WiB9KTsKICAgICAgICAgICAgY2FzZSAiWlpaWiI6CiAgICAgICAgICAgICAgLy8gbGlrZSBFU1QKICAgICAgICAgICAgICByZXR1cm4gZHQuem9uZS5vZmZzZXROYW1lKGR0LnRzLCB7IGZvcm1hdDogInNob3J0IiwgbG9jYWxlOiB0aGlzLmxvYy5sb2NhbGUgfSk7CiAgICAgICAgICAgIGNhc2UgIlpaWlpaIjoKICAgICAgICAgICAgICAvLyBsaWtlIEVhc3Rlcm4gU3RhbmRhcmQgVGltZQogICAgICAgICAgICAgIHJldHVybiBkdC56b25lLm9mZnNldE5hbWUoZHQudHMsIHsgZm9ybWF0OiAibG9uZyIsIGxvY2FsZTogdGhpcy5sb2MubG9jYWxlIH0pOwogICAgICAgICAgICAvLyB6b25lCiAgICAgICAgICAgIGNhc2UgInoiOgogICAgICAgICAgICAgIC8vIGxpa2UgQW1lcmljYS9OZXdfWW9yawogICAgICAgICAgICAgIHJldHVybiBkdC56b25lTmFtZTsKICAgICAgICAgICAgLy8gbWVyaWRpZW1zCiAgICAgICAgICAgIGNhc2UgImEiOgogICAgICAgICAgICAgIHJldHVybiBtZXJpZGllbSgpOwogICAgICAgICAgICAvLyBkYXRlcwogICAgICAgICAgICBjYXNlICJkIjoKICAgICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoeyBkYXk6ICJudW1lcmljIiB9LCAiZGF5IikgOiB0aGlzLm51bShkdC5kYXkpOwogICAgICAgICAgICBjYXNlICJkZCI6CiAgICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHsgZGF5OiAiMi1kaWdpdCIgfSwgImRheSIpIDogdGhpcy5udW0oZHQuZGF5LCAyKTsKICAgICAgICAgICAgLy8gd2Vla2RheXMgLSBzdGFuZGFsb25lCiAgICAgICAgICAgIGNhc2UgImMiOgogICAgICAgICAgICAgIC8vIGxpa2UgMQogICAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrZGF5KTsKICAgICAgICAgICAgY2FzZSAiY2NjIjoKICAgICAgICAgICAgICAvLyBsaWtlICdUdWVzJwogICAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5KCJzaG9ydCIsIHRydWUpOwogICAgICAgICAgICBjYXNlICJjY2NjIjoKICAgICAgICAgICAgICAvLyBsaWtlICdUdWVzZGF5JwogICAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5KCJsb25nIiwgdHJ1ZSk7CiAgICAgICAgICAgIGNhc2UgImNjY2NjIjoKICAgICAgICAgICAgICAvLyBsaWtlICdUJwogICAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5KCJuYXJyb3ciLCB0cnVlKTsKICAgICAgICAgICAgLy8gd2Vla2RheXMgLSBmb3JtYXQKICAgICAgICAgICAgY2FzZSAiRSI6CiAgICAgICAgICAgICAgLy8gbGlrZSAxCiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtkYXkpOwogICAgICAgICAgICBjYXNlICJFRUUiOgogICAgICAgICAgICAgIC8vIGxpa2UgJ1R1ZXMnCiAgICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXkoInNob3J0IiwgZmFsc2UpOwogICAgICAgICAgICBjYXNlICJFRUVFIjoKICAgICAgICAgICAgICAvLyBsaWtlICdUdWVzZGF5JwogICAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5KCJsb25nIiwgZmFsc2UpOwogICAgICAgICAgICBjYXNlICJFRUVFRSI6CiAgICAgICAgICAgICAgLy8gbGlrZSAnVCcKICAgICAgICAgICAgICByZXR1cm4gd2Vla2RheSgibmFycm93IiwgZmFsc2UpOwogICAgICAgICAgICAvLyBtb250aHMgLSBzdGFuZGFsb25lCiAgICAgICAgICAgIGNhc2UgIkwiOgogICAgICAgICAgICAgIC8vIGxpa2UgMQogICAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlcgogICAgICAgICAgICAgICAgPyBzdHJpbmcoeyBtb250aDogIm51bWVyaWMiLCBkYXk6ICJudW1lcmljIiB9LCAibW9udGgiKQogICAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC5tb250aCk7CiAgICAgICAgICAgIGNhc2UgIkxMIjoKICAgICAgICAgICAgICAvLyBsaWtlIDAxLCBkb2Vzbid0IHNlZW0gdG8gd29yawogICAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlcgogICAgICAgICAgICAgICAgPyBzdHJpbmcoeyBtb250aDogIjItZGlnaXQiLCBkYXk6ICJudW1lcmljIiB9LCAibW9udGgiKQogICAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC5tb250aCwgMik7CiAgICAgICAgICAgIGNhc2UgIkxMTCI6CiAgICAgICAgICAgICAgLy8gbGlrZSBKYW4KICAgICAgICAgICAgICByZXR1cm4gbW9udGgoInNob3J0IiwgdHJ1ZSk7CiAgICAgICAgICAgIGNhc2UgIkxMTEwiOgogICAgICAgICAgICAgIC8vIGxpa2UgSmFudWFyeQogICAgICAgICAgICAgIHJldHVybiBtb250aCgibG9uZyIsIHRydWUpOwogICAgICAgICAgICBjYXNlICJMTExMTCI6CiAgICAgICAgICAgICAgLy8gbGlrZSBKCiAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoKCJuYXJyb3ciLCB0cnVlKTsKICAgICAgICAgICAgLy8gbW9udGhzIC0gZm9ybWF0CiAgICAgICAgICAgIGNhc2UgIk0iOgogICAgICAgICAgICAgIC8vIGxpa2UgMQogICAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlcgogICAgICAgICAgICAgICAgPyBzdHJpbmcoeyBtb250aDogIm51bWVyaWMiIH0sICJtb250aCIpCiAgICAgICAgICAgICAgICA6IHRoaXMubnVtKGR0Lm1vbnRoKTsKICAgICAgICAgICAgY2FzZSAiTU0iOgogICAgICAgICAgICAgIC8vIGxpa2UgMDEKICAgICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIKICAgICAgICAgICAgICAgID8gc3RyaW5nKHsgbW9udGg6ICIyLWRpZ2l0IiB9LCAibW9udGgiKQogICAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC5tb250aCwgMik7CiAgICAgICAgICAgIGNhc2UgIk1NTSI6CiAgICAgICAgICAgICAgLy8gbGlrZSBKYW4KICAgICAgICAgICAgICByZXR1cm4gbW9udGgoInNob3J0IiwgZmFsc2UpOwogICAgICAgICAgICBjYXNlICJNTU1NIjoKICAgICAgICAgICAgICAvLyBsaWtlIEphbnVhcnkKICAgICAgICAgICAgICByZXR1cm4gbW9udGgoImxvbmciLCBmYWxzZSk7CiAgICAgICAgICAgIGNhc2UgIk1NTU1NIjoKICAgICAgICAgICAgICAvLyBsaWtlIEoKICAgICAgICAgICAgICByZXR1cm4gbW9udGgoIm5hcnJvdyIsIGZhbHNlKTsKICAgICAgICAgICAgLy8geWVhcnMKICAgICAgICAgICAgY2FzZSAieSI6CiAgICAgICAgICAgICAgLy8gbGlrZSAyMDE0CiAgICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHsgeWVhcjogIm51bWVyaWMiIH0sICJ5ZWFyIikgOiB0aGlzLm51bShkdC55ZWFyKTsKICAgICAgICAgICAgY2FzZSAieXkiOgogICAgICAgICAgICAgIC8vIGxpa2UgMTQKICAgICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIKICAgICAgICAgICAgICAgID8gc3RyaW5nKHsgeWVhcjogIjItZGlnaXQiIH0sICJ5ZWFyIikKICAgICAgICAgICAgICAgIDogdGhpcy5udW0oZHQueWVhci50b1N0cmluZygpLnNsaWNlKC0yKSwgMik7CiAgICAgICAgICAgIGNhc2UgInl5eXkiOgogICAgICAgICAgICAgIC8vIGxpa2UgMDAxMgogICAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlcgogICAgICAgICAgICAgICAgPyBzdHJpbmcoeyB5ZWFyOiAibnVtZXJpYyIgfSwgInllYXIiKQogICAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC55ZWFyLCA0KTsKICAgICAgICAgICAgY2FzZSAieXl5eXl5IjoKICAgICAgICAgICAgICAvLyBsaWtlIDAwMDAxMgogICAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlcgogICAgICAgICAgICAgICAgPyBzdHJpbmcoeyB5ZWFyOiAibnVtZXJpYyIgfSwgInllYXIiKQogICAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC55ZWFyLCA2KTsKICAgICAgICAgICAgLy8gZXJhcwogICAgICAgICAgICBjYXNlICJHIjoKICAgICAgICAgICAgICAvLyBsaWtlIEFECiAgICAgICAgICAgICAgcmV0dXJuIGVyYSgic2hvcnQiKTsKICAgICAgICAgICAgY2FzZSAiR0ciOgogICAgICAgICAgICAgIC8vIGxpa2UgQW5ubyBEb21pbmkKICAgICAgICAgICAgICByZXR1cm4gZXJhKCJsb25nIik7CiAgICAgICAgICAgIGNhc2UgIkdHR0dHIjoKICAgICAgICAgICAgICByZXR1cm4gZXJhKCJuYXJyb3ciKTsKICAgICAgICAgICAgY2FzZSAia2siOgogICAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrWWVhci50b1N0cmluZygpLnNsaWNlKC0yKSwgMik7CiAgICAgICAgICAgIGNhc2UgImtra2siOgogICAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrWWVhciwgNCk7CiAgICAgICAgICAgIGNhc2UgIlciOgogICAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrTnVtYmVyKTsKICAgICAgICAgICAgY2FzZSAiV1ciOgogICAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrTnVtYmVyLCAyKTsKICAgICAgICAgICAgY2FzZSAibyI6CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm9yZGluYWwpOwogICAgICAgICAgICBjYXNlICJvb28iOgogICAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5vcmRpbmFsLCAzKTsKICAgICAgICAgICAgY2FzZSAicSI6CiAgICAgICAgICAgICAgLy8gbGlrZSAxCiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LnF1YXJ0ZXIpOwogICAgICAgICAgICBjYXNlICJxcSI6CiAgICAgICAgICAgICAgLy8gbGlrZSAwMQogICAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5xdWFydGVyLCAyKTsKICAgICAgICAgICAgY2FzZSAiWCI6CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKE1hdGguZmxvb3IoZHQudHMgLyAxMDAwKSk7CiAgICAgICAgICAgIGNhc2UgIngiOgogICAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC50cyk7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgcmV0dXJuIG1heWJlTWFjcm8odG9rZW4pOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLCB0b2tlblRvU3RyaW5nKTsKICAgIH0KCiAgICBmb3JtYXREdXJhdGlvbkZyb21TdHJpbmcoZHVyLCBmbXQpIHsKICAgICAgY29uc3QgdG9rZW5Ub0ZpZWxkID0gKHRva2VuKSA9PiB7CiAgICAgICAgICBzd2l0Y2ggKHRva2VuWzBdKSB7CiAgICAgICAgICAgIGNhc2UgIlMiOgogICAgICAgICAgICAgIHJldHVybiAibWlsbGlzZWNvbmQiOwogICAgICAgICAgICBjYXNlICJzIjoKICAgICAgICAgICAgICByZXR1cm4gInNlY29uZCI7CiAgICAgICAgICAgIGNhc2UgIm0iOgogICAgICAgICAgICAgIHJldHVybiAibWludXRlIjsKICAgICAgICAgICAgY2FzZSAiaCI6CiAgICAgICAgICAgICAgcmV0dXJuICJob3VyIjsKICAgICAgICAgICAgY2FzZSAiZCI6CiAgICAgICAgICAgICAgcmV0dXJuICJkYXkiOwogICAgICAgICAgICBjYXNlICJ3IjoKICAgICAgICAgICAgICByZXR1cm4gIndlZWsiOwogICAgICAgICAgICBjYXNlICJNIjoKICAgICAgICAgICAgICByZXR1cm4gIm1vbnRoIjsKICAgICAgICAgICAgY2FzZSAieSI6CiAgICAgICAgICAgICAgcmV0dXJuICJ5ZWFyIjsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHRva2VuVG9TdHJpbmcgPSAobGlsZHVyKSA9PiAodG9rZW4pID0+IHsKICAgICAgICAgIGNvbnN0IG1hcHBlZCA9IHRva2VuVG9GaWVsZCh0b2tlbik7CiAgICAgICAgICBpZiAobWFwcGVkKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShsaWxkdXIuZ2V0KG1hcHBlZCksIHRva2VuLmxlbmd0aCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gdG9rZW47CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB0b2tlbnMgPSBGb3JtYXR0ZXIucGFyc2VGb3JtYXQoZm10KSwKICAgICAgICByZWFsVG9rZW5zID0gdG9rZW5zLnJlZHVjZSgKICAgICAgICAgIChmb3VuZCwgeyBsaXRlcmFsLCB2YWwgfSkgPT4gKGxpdGVyYWwgPyBmb3VuZCA6IGZvdW5kLmNvbmNhdCh2YWwpKSwKICAgICAgICAgIFtdCiAgICAgICAgKSwKICAgICAgICBjb2xsYXBzZWQgPSBkdXIuc2hpZnRUbyguLi5yZWFsVG9rZW5zLm1hcCh0b2tlblRvRmllbGQpLmZpbHRlcigodCkgPT4gdCkpOwogICAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKHRva2VucywgdG9rZW5Ub1N0cmluZyhjb2xsYXBzZWQpKTsKICAgIH0KICB9CgogIGNsYXNzIEludmFsaWQgewogICAgY29uc3RydWN0b3IocmVhc29uLCBleHBsYW5hdGlvbikgewogICAgICB0aGlzLnJlYXNvbiA9IHJlYXNvbjsKICAgICAgdGhpcy5leHBsYW5hdGlvbiA9IGV4cGxhbmF0aW9uOwogICAgfQoKICAgIHRvTWVzc2FnZSgpIHsKICAgICAgaWYgKHRoaXMuZXhwbGFuYXRpb24pIHsKICAgICAgICByZXR1cm4gYCR7dGhpcy5yZWFzb259OiAke3RoaXMuZXhwbGFuYXRpb259YDsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5yZWFzb247CiAgICAgIH0KICAgIH0KICB9CgogIC8qKgogICAqIEBpbnRlcmZhY2UKICAgKi8KICBjbGFzcyBab25lIHsKICAgIC8qKgogICAgICogVGhlIHR5cGUgb2Ygem9uZQogICAgICogQGFic3RyYWN0CiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICovCiAgICBnZXQgdHlwZSgpIHsKICAgICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRoZSBuYW1lIG9mIHRoaXMgem9uZS4KICAgICAqIEBhYnN0cmFjdAogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgZ2V0IG5hbWUoKSB7CiAgICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7CiAgICB9CgogICAgZ2V0IGlhbmFOYW1lKCkgewogICAgICByZXR1cm4gdGhpcy5uYW1lOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBvZmZzZXQgaXMga25vd24gdG8gYmUgZml4ZWQgZm9yIHRoZSB3aG9sZSB5ZWFyLgogICAgICogQGFic3RyYWN0CiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqLwogICAgZ2V0IGlzVW5pdmVyc2FsKCkgewogICAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgY29tbW9uIG5hbWUgKHN1Y2ggYXMgRVNUKSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcAogICAgICogQGFic3RyYWN0CiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHMgLSBFcG9jaCBtaWxsaXNlY29uZHMgZm9yIHdoaWNoIHRvIGdldCB0aGUgbmFtZQogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBPcHRpb25zIHRvIGFmZmVjdCB0aGUgZm9ybWF0CiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5mb3JtYXQgLSBXaGF0IHN0eWxlIG9mIG9mZnNldCB0byByZXR1cm4uIEFjY2VwdHMgJ2xvbmcnIG9yICdzaG9ydCcuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5sb2NhbGUgLSBXaGF0IGxvY2FsZSB0byByZXR1cm4gdGhlIG9mZnNldCBuYW1lIGluLgogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICBvZmZzZXROYW1lKHRzLCBvcHRzKSB7CiAgICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBvZmZzZXQncyB2YWx1ZSBhcyBhIHN0cmluZwogICAgICogQGFic3RyYWN0CiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHMgLSBFcG9jaCBtaWxsaXNlY29uZHMgZm9yIHdoaWNoIHRvIGdldCB0aGUgb2Zmc2V0CiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gV2hhdCBzdHlsZSBvZiBvZmZzZXQgdG8gcmV0dXJuLgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIEFjY2VwdHMgJ25hcnJvdycsICdzaG9ydCcsIG9yICd0ZWNoaWUnLiBSZXR1cm5pbmcgJys2JywgJyswNjowMCcsIG9yICcrMDYwMCcgcmVzcGVjdGl2ZWx5CiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9CiAgICAgKi8KICAgIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7CiAgICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIG9mZnNldCBpbiBtaW51dGVzIGZvciB0aGlzIHpvbmUgYXQgdGhlIHNwZWNpZmllZCB0aW1lc3RhbXAuCiAgICAgKiBAYWJzdHJhY3QKICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gY29tcHV0ZSB0aGUgb2Zmc2V0CiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9CiAgICAgKi8KICAgIG9mZnNldCh0cykgewogICAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBab25lIGlzIGVxdWFsIHRvIGFub3RoZXIgem9uZQogICAgICogQGFic3RyYWN0CiAgICAgKiBAcGFyYW0ge1pvbmV9IG90aGVyWm9uZSAtIHRoZSB6b25lIHRvIGNvbXBhcmUKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KICAgIGVxdWFscyhvdGhlclpvbmUpIHsKICAgICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiB3aGV0aGVyIHRoaXMgWm9uZSBpcyB2YWxpZC4KICAgICAqIEBhYnN0cmFjdAogICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgKi8KICAgIGdldCBpc1ZhbGlkKCkgewogICAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpOwogICAgfQogIH0KCiAgbGV0IHNpbmdsZXRvbiQxID0gbnVsbDsKCiAgLyoqCiAgICogUmVwcmVzZW50cyB0aGUgbG9jYWwgem9uZSBmb3IgdGhpcyBKYXZhU2NyaXB0IGVudmlyb25tZW50LgogICAqIEBpbXBsZW1lbnRzIHtab25lfQogICAqLwogIGNsYXNzIFN5c3RlbVpvbmUgZXh0ZW5kcyBab25lIHsKICAgIC8qKgogICAgICogR2V0IGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBsb2NhbCB6b25lCiAgICAgKiBAcmV0dXJuIHtTeXN0ZW1ab25lfQogICAgICovCiAgICBzdGF0aWMgZ2V0IGluc3RhbmNlKCkgewogICAgICBpZiAoc2luZ2xldG9uJDEgPT09IG51bGwpIHsKICAgICAgICBzaW5nbGV0b24kMSA9IG5ldyBTeXN0ZW1ab25lKCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHNpbmdsZXRvbiQxOwogICAgfQoKICAgIC8qKiBAb3ZlcnJpZGUgKiovCiAgICBnZXQgdHlwZSgpIHsKICAgICAgcmV0dXJuICJzeXN0ZW0iOwogICAgfQoKICAgIC8qKiBAb3ZlcnJpZGUgKiovCiAgICBnZXQgbmFtZSgpIHsKICAgICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmU7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIGdldCBpc1VuaXZlcnNhbCgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8qKiBAb3ZlcnJpZGUgKiovCiAgICBvZmZzZXROYW1lKHRzLCB7IGZvcm1hdCwgbG9jYWxlIH0pIHsKICAgICAgcmV0dXJuIHBhcnNlWm9uZUluZm8odHMsIGZvcm1hdCwgbG9jYWxlKTsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHsKICAgICAgcmV0dXJuIGZvcm1hdE9mZnNldCh0aGlzLm9mZnNldCh0cyksIGZvcm1hdCk7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIG9mZnNldCh0cykgewogICAgICByZXR1cm4gLW5ldyBEYXRlKHRzKS5nZXRUaW1lem9uZU9mZnNldCgpOwogICAgfQoKICAgIC8qKiBAb3ZlcnJpZGUgKiovCiAgICBlcXVhbHMob3RoZXJab25lKSB7CiAgICAgIHJldHVybiBvdGhlclpvbmUudHlwZSA9PT0gInN5c3RlbSI7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIGdldCBpc1ZhbGlkKCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CgogIGxldCBkdGZDYWNoZSA9IHt9OwogIGZ1bmN0aW9uIG1ha2VEVEYoem9uZSkgewogICAgaWYgKCFkdGZDYWNoZVt6b25lXSkgewogICAgICBkdGZDYWNoZVt6b25lXSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCJlbi1VUyIsIHsKICAgICAgICBob3VyMTI6IGZhbHNlLAogICAgICAgIHRpbWVab25lOiB6b25lLAogICAgICAgIHllYXI6ICJudW1lcmljIiwKICAgICAgICBtb250aDogIjItZGlnaXQiLAogICAgICAgIGRheTogIjItZGlnaXQiLAogICAgICAgIGhvdXI6ICIyLWRpZ2l0IiwKICAgICAgICBtaW51dGU6ICIyLWRpZ2l0IiwKICAgICAgICBzZWNvbmQ6ICIyLWRpZ2l0IiwKICAgICAgICBlcmE6ICJzaG9ydCIsCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIGR0ZkNhY2hlW3pvbmVdOwogIH0KCiAgY29uc3QgdHlwZVRvUG9zID0gewogICAgeWVhcjogMCwKICAgIG1vbnRoOiAxLAogICAgZGF5OiAyLAogICAgZXJhOiAzLAogICAgaG91cjogNCwKICAgIG1pbnV0ZTogNSwKICAgIHNlY29uZDogNiwKICB9OwoKICBmdW5jdGlvbiBoYWNreU9mZnNldChkdGYsIGRhdGUpIHsKICAgIGNvbnN0IGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXQoZGF0ZSkucmVwbGFjZSgvXHUyMDBFL2csICIiKSwKICAgICAgcGFyc2VkID0gLyhcZCspXC8oXGQrKVwvKFxkKykgKEFEfEJDKSw/IChcZCspOihcZCspOihcZCspLy5leGVjKGZvcm1hdHRlZCksCiAgICAgIFssIGZNb250aCwgZkRheSwgZlllYXIsIGZhZE9yQmMsIGZIb3VyLCBmTWludXRlLCBmU2Vjb25kXSA9IHBhcnNlZDsKICAgIHJldHVybiBbZlllYXIsIGZNb250aCwgZkRheSwgZmFkT3JCYywgZkhvdXIsIGZNaW51dGUsIGZTZWNvbmRdOwogIH0KCiAgZnVuY3Rpb24gcGFydHNPZmZzZXQoZHRmLCBkYXRlKSB7CiAgICBjb25zdCBmb3JtYXR0ZWQgPSBkdGYuZm9ybWF0VG9QYXJ0cyhkYXRlKTsKICAgIGNvbnN0IGZpbGxlZCA9IFtdOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb3JtYXR0ZWQubGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gZm9ybWF0dGVkW2ldOwogICAgICBjb25zdCBwb3MgPSB0eXBlVG9Qb3NbdHlwZV07CgogICAgICBpZiAodHlwZSA9PT0gImVyYSIpIHsKICAgICAgICBmaWxsZWRbcG9zXSA9IHZhbHVlOwogICAgICB9IGVsc2UgaWYgKCFpc1VuZGVmaW5lZChwb3MpKSB7CiAgICAgICAgZmlsbGVkW3Bvc10gPSBwYXJzZUludCh2YWx1ZSwgMTApOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZmlsbGVkOwogIH0KCiAgbGV0IGlhbmFab25lQ2FjaGUgPSB7fTsKICAvKioKICAgKiBBIHpvbmUgaWRlbnRpZmllZCBieSBhbiBJQU5BIGlkZW50aWZpZXIsIGxpa2UgQW1lcmljYS9OZXdfWW9yawogICAqIEBpbXBsZW1lbnRzIHtab25lfQogICAqLwogIGNsYXNzIElBTkFab25lIGV4dGVuZHMgWm9uZSB7CiAgICAvKioKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gWm9uZSBuYW1lCiAgICAgKiBAcmV0dXJuIHtJQU5BWm9uZX0KICAgICAqLwogICAgc3RhdGljIGNyZWF0ZShuYW1lKSB7CiAgICAgIGlmICghaWFuYVpvbmVDYWNoZVtuYW1lXSkgewogICAgICAgIGlhbmFab25lQ2FjaGVbbmFtZV0gPSBuZXcgSUFOQVpvbmUobmFtZSk7CiAgICAgIH0KICAgICAgcmV0dXJuIGlhbmFab25lQ2FjaGVbbmFtZV07CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXNldCBsb2NhbCBjYWNoZXMuIFNob3VsZCBvbmx5IGJlIG5lY2Vzc2FyeSBpbiB0ZXN0aW5nIHNjZW5hcmlvcy4KICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KICAgIHN0YXRpYyByZXNldENhY2hlKCkgewogICAgICBpYW5hWm9uZUNhY2hlID0ge307CiAgICAgIGR0ZkNhY2hlID0ge307CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHN0cmluZyBpcyBhIHZhbGlkIHNwZWNpZmllci4gVGhpcyBvbmx5IGNoZWNrcyB0aGUgc3RyaW5nJ3MgZm9ybWF0LCBub3QgdGhhdCB0aGUgc3BlY2lmaWVyIGlkZW50aWZpZXMgYSBrbm93biB6b25lOyBzZWUgaXNWYWxpZFpvbmUgZm9yIHRoYXQuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcyAtIFRoZSBzdHJpbmcgdG8gY2hlY2sgdmFsaWRpdHkgb24KICAgICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRTcGVjaWZpZXIoIkFtZXJpY2EvTmV3X1lvcmsiKSAvLz0+IHRydWUKICAgICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRTcGVjaWZpZXIoIlNwb3J0fn5ibG9ycCIpIC8vPT4gZmFsc2UKICAgICAqIEBkZXByZWNhdGVkIFRoaXMgbWV0aG9kIHJldHVybnMgZmFsc2UgZm9yIHNvbWUgdmFsaWQgSUFOQSBuYW1lcy4gVXNlIGlzVmFsaWRab25lIGluc3RlYWQuCiAgICAgKiBAcmV0dXJuIHtib29sZWFufQogICAgICovCiAgICBzdGF0aWMgaXNWYWxpZFNwZWNpZmllcihzKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWRab25lKHMpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBzdHJpbmcgaWRlbnRpZmllcyBhIHJlYWwgem9uZQogICAgICogQHBhcmFtIHtzdHJpbmd9IHpvbmUgLSBUaGUgc3RyaW5nIHRvIGNoZWNrCiAgICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkWm9uZSgiQW1lcmljYS9OZXdfWW9yayIpIC8vPT4gdHJ1ZQogICAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFpvbmUoIkZhbnRhc2lhL0Nhc3RsZSIpIC8vPT4gZmFsc2UKICAgICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRab25lKCJTcG9ydH5+YmxvcnAiKSAvLz0+IGZhbHNlCiAgICAgKiBAcmV0dXJuIHtib29sZWFufQogICAgICovCiAgICBzdGF0aWMgaXNWYWxpZFpvbmUoem9uZSkgewogICAgICBpZiAoIXpvbmUpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgdHJ5IHsKICAgICAgICBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgiZW4tVVMiLCB7IHRpbWVab25lOiB6b25lIH0pLmZvcm1hdCgpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgY29uc3RydWN0b3IobmFtZSkgewogICAgICBzdXBlcigpOwogICAgICAvKiogQHByaXZhdGUgKiovCiAgICAgIHRoaXMuem9uZU5hbWUgPSBuYW1lOwogICAgICAvKiogQHByaXZhdGUgKiovCiAgICAgIHRoaXMudmFsaWQgPSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShuYW1lKTsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgZ2V0IHR5cGUoKSB7CiAgICAgIHJldHVybiAiaWFuYSI7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIGdldCBuYW1lKCkgewogICAgICByZXR1cm4gdGhpcy56b25lTmFtZTsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgZ2V0IGlzVW5pdmVyc2FsKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIG9mZnNldE5hbWUodHMsIHsgZm9ybWF0LCBsb2NhbGUgfSkgewogICAgICByZXR1cm4gcGFyc2Vab25lSW5mbyh0cywgZm9ybWF0LCBsb2NhbGUsIHRoaXMubmFtZSk7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7CiAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQodGhpcy5vZmZzZXQodHMpLCBmb3JtYXQpOwogICAgfQoKICAgIC8qKiBAb3ZlcnJpZGUgKiovCiAgICBvZmZzZXQodHMpIHsKICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzKTsKCiAgICAgIGlmIChpc05hTihkYXRlKSkgcmV0dXJuIE5hTjsKCiAgICAgIGNvbnN0IGR0ZiA9IG1ha2VEVEYodGhpcy5uYW1lKTsKICAgICAgbGV0IFt5ZWFyLCBtb250aCwgZGF5LCBhZE9yQmMsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kXSA9IGR0Zi5mb3JtYXRUb1BhcnRzCiAgICAgICAgPyBwYXJ0c09mZnNldChkdGYsIGRhdGUpCiAgICAgICAgOiBoYWNreU9mZnNldChkdGYsIGRhdGUpOwoKICAgICAgaWYgKGFkT3JCYyA9PT0gIkJDIikgewogICAgICAgIHllYXIgPSAtTWF0aC5hYnMoeWVhcikgKyAxOwogICAgICB9CgogICAgICAvLyBiZWNhdXNlIHdlJ3JlIHVzaW5nIGhvdXIxMiBhbmQgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTAyNTU2NCZjYW49MiZxPSUyMjI0JTNBMDAlMjIlMjBkYXRldGltZWZvcm1hdAogICAgICBjb25zdCBhZGp1c3RlZEhvdXIgPSBob3VyID09PSAyNCA/IDAgOiBob3VyOwoKICAgICAgY29uc3QgYXNVVEMgPSBvYmpUb0xvY2FsVFMoewogICAgICAgIHllYXIsCiAgICAgICAgbW9udGgsCiAgICAgICAgZGF5LAogICAgICAgIGhvdXI6IGFkanVzdGVkSG91ciwKICAgICAgICBtaW51dGUsCiAgICAgICAgc2Vjb25kLAogICAgICAgIG1pbGxpc2Vjb25kOiAwLAogICAgICB9KTsKCiAgICAgIGxldCBhc1RTID0gK2RhdGU7CiAgICAgIGNvbnN0IG92ZXIgPSBhc1RTICUgMTAwMDsKICAgICAgYXNUUyAtPSBvdmVyID49IDAgPyBvdmVyIDogMTAwMCArIG92ZXI7CiAgICAgIHJldHVybiAoYXNVVEMgLSBhc1RTKSAvICg2MCAqIDEwMDApOwogICAgfQoKICAgIC8qKiBAb3ZlcnJpZGUgKiovCiAgICBlcXVhbHMob3RoZXJab25lKSB7CiAgICAgIHJldHVybiBvdGhlclpvbmUudHlwZSA9PT0gImlhbmEiICYmIG90aGVyWm9uZS5uYW1lID09PSB0aGlzLm5hbWU7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIGdldCBpc1ZhbGlkKCkgewogICAgICByZXR1cm4gdGhpcy52YWxpZDsKICAgIH0KICB9CgogIGxldCBzaW5nbGV0b24gPSBudWxsOwoKICAvKioKICAgKiBBIHpvbmUgd2l0aCBhIGZpeGVkIG9mZnNldCAobWVhbmluZyBubyBEU1QpCiAgICogQGltcGxlbWVudHMge1pvbmV9CiAgICovCiAgY2xhc3MgRml4ZWRPZmZzZXRab25lIGV4dGVuZHMgWm9uZSB7CiAgICAvKioKICAgICAqIEdldCBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBVVEMKICAgICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX0KICAgICAqLwogICAgc3RhdGljIGdldCB1dGNJbnN0YW5jZSgpIHsKICAgICAgaWYgKHNpbmdsZXRvbiA9PT0gbnVsbCkgewogICAgICAgIHNpbmdsZXRvbiA9IG5ldyBGaXhlZE9mZnNldFpvbmUoMCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHNpbmdsZXRvbjsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBhbiBpbnN0YW5jZSB3aXRoIGEgc3BlY2lmaWVkIG9mZnNldAogICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgaW4gbWludXRlcwogICAgICogQHJldHVybiB7Rml4ZWRPZmZzZXRab25lfQogICAgICovCiAgICBzdGF0aWMgaW5zdGFuY2Uob2Zmc2V0KSB7CiAgICAgIHJldHVybiBvZmZzZXQgPT09IDAgPyBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2UgOiBuZXcgRml4ZWRPZmZzZXRab25lKG9mZnNldCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgYW4gaW5zdGFuY2Ugb2YgRml4ZWRPZmZzZXRab25lIGZyb20gYSBVVEMgb2Zmc2V0IHN0cmluZywgbGlrZSAiVVRDKzYiCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcyAtIFRoZSBvZmZzZXQgc3RyaW5nIHRvIHBhcnNlCiAgICAgKiBAZXhhbXBsZSBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIoIlVUQys2IikKICAgICAqIEBleGFtcGxlIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllcigiVVRDKzA2IikKICAgICAqIEBleGFtcGxlIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllcigiVVRDLTY6MDAiKQogICAgICogQHJldHVybiB7Rml4ZWRPZmZzZXRab25lfQogICAgICovCiAgICBzdGF0aWMgcGFyc2VTcGVjaWZpZXIocykgewogICAgICBpZiAocykgewogICAgICAgIGNvbnN0IHIgPSBzLm1hdGNoKC9edXRjKD86KFsrLV1cZHsxLDJ9KSg/OjooXGR7Mn0pKT8pPyQvaSk7CiAgICAgICAgaWYgKHIpIHsKICAgICAgICAgIHJldHVybiBuZXcgRml4ZWRPZmZzZXRab25lKHNpZ25lZE9mZnNldChyWzFdLCByWzJdKSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIGNvbnN0cnVjdG9yKG9mZnNldCkgewogICAgICBzdXBlcigpOwogICAgICAvKiogQHByaXZhdGUgKiovCiAgICAgIHRoaXMuZml4ZWQgPSBvZmZzZXQ7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIGdldCB0eXBlKCkgewogICAgICByZXR1cm4gImZpeGVkIjsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgZ2V0IG5hbWUoKSB7CiAgICAgIHJldHVybiB0aGlzLmZpeGVkID09PSAwID8gIlVUQyIgOiBgVVRDJHtmb3JtYXRPZmZzZXQodGhpcy5maXhlZCwgIm5hcnJvdyIpfWA7CiAgICB9CgogICAgZ2V0IGlhbmFOYW1lKCkgewogICAgICBpZiAodGhpcy5maXhlZCA9PT0gMCkgewogICAgICAgIHJldHVybiAiRXRjL1VUQyI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGBFdGMvR01UJHtmb3JtYXRPZmZzZXQoLXRoaXMuZml4ZWQsICJuYXJyb3ciKX1gOwogICAgICB9CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIG9mZnNldE5hbWUoKSB7CiAgICAgIHJldHVybiB0aGlzLm5hbWU7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7CiAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQodGhpcy5maXhlZCwgZm9ybWF0KTsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgZ2V0IGlzVW5pdmVyc2FsKCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgb2Zmc2V0KCkgewogICAgICByZXR1cm4gdGhpcy5maXhlZDsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgZXF1YWxzKG90aGVyWm9uZSkgewogICAgICByZXR1cm4gb3RoZXJab25lLnR5cGUgPT09ICJmaXhlZCIgJiYgb3RoZXJab25lLmZpeGVkID09PSB0aGlzLmZpeGVkOwogICAgfQoKICAgIC8qKiBAb3ZlcnJpZGUgKiovCiAgICBnZXQgaXNWYWxpZCgpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfQoKICAvKioKICAgKiBBIHpvbmUgdGhhdCBmYWlsZWQgdG8gcGFyc2UuIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLgogICAqIEBpbXBsZW1lbnRzIHtab25lfQogICAqLwogIGNsYXNzIEludmFsaWRab25lIGV4dGVuZHMgWm9uZSB7CiAgICBjb25zdHJ1Y3Rvcih6b25lTmFtZSkgewogICAgICBzdXBlcigpOwogICAgICAvKiogIEBwcml2YXRlICovCiAgICAgIHRoaXMuem9uZU5hbWUgPSB6b25lTmFtZTsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgZ2V0IHR5cGUoKSB7CiAgICAgIHJldHVybiAiaW52YWxpZCI7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIGdldCBuYW1lKCkgewogICAgICByZXR1cm4gdGhpcy56b25lTmFtZTsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgZ2V0IGlzVW5pdmVyc2FsKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyoqIEBvdmVycmlkZSAqKi8KICAgIG9mZnNldE5hbWUoKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIC8qKiBAb3ZlcnJpZGUgKiovCiAgICBmb3JtYXRPZmZzZXQoKSB7CiAgICAgIHJldHVybiAiIjsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgb2Zmc2V0KCkgewogICAgICByZXR1cm4gTmFOOwogICAgfQoKICAgIC8qKiBAb3ZlcnJpZGUgKiovCiAgICBlcXVhbHMoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKiogQG92ZXJyaWRlICoqLwogICAgZ2V0IGlzVmFsaWQoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIC8qKgogICAqIEBwcml2YXRlCiAgICovCgogIGZ1bmN0aW9uIG5vcm1hbGl6ZVpvbmUoaW5wdXQsIGRlZmF1bHRab25lKSB7CiAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpIHx8IGlucHV0ID09PSBudWxsKSB7CiAgICAgIHJldHVybiBkZWZhdWx0Wm9uZTsKICAgIH0gZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBab25lKSB7CiAgICAgIHJldHVybiBpbnB1dDsKICAgIH0gZWxzZSBpZiAoaXNTdHJpbmckMShpbnB1dCkpIHsKICAgICAgY29uc3QgbG93ZXJlZCA9IGlucHV0LnRvTG93ZXJDYXNlKCk7CiAgICAgIGlmIChsb3dlcmVkID09PSAiZGVmYXVsdCIpIHJldHVybiBkZWZhdWx0Wm9uZTsKICAgICAgZWxzZSBpZiAobG93ZXJlZCA9PT0gImxvY2FsIiB8fCBsb3dlcmVkID09PSAic3lzdGVtIikgcmV0dXJuIFN5c3RlbVpvbmUuaW5zdGFuY2U7CiAgICAgIGVsc2UgaWYgKGxvd2VyZWQgPT09ICJ1dGMiIHx8IGxvd2VyZWQgPT09ICJnbXQiKSByZXR1cm4gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlOwogICAgICBlbHNlIHJldHVybiBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIobG93ZXJlZCkgfHwgSUFOQVpvbmUuY3JlYXRlKGlucHV0KTsKICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIkMShpbnB1dCkpIHsKICAgICAgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShpbnB1dCk7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gIm9iamVjdCIgJiYgaW5wdXQub2Zmc2V0ICYmIHR5cGVvZiBpbnB1dC5vZmZzZXQgPT09ICJudW1iZXIiKSB7CiAgICAgIC8vIFRoaXMgaXMgZHVtYiwgYnV0IHRoZSBpbnN0YW5jZW9mIGNoZWNrIGFib3ZlIGRvZXNuJ3Qgc2VlbSB0byByZWFsbHkgd29yawogICAgICAvLyBzbyB3ZSdyZSBkdWNrIGNoZWNraW5nIGl0CiAgICAgIHJldHVybiBpbnB1dDsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBuZXcgSW52YWxpZFpvbmUoaW5wdXQpOwogICAgfQogIH0KCiAgbGV0IG5vdyA9ICgpID0+IERhdGUubm93KCksCiAgICBkZWZhdWx0Wm9uZSA9ICJzeXN0ZW0iLAogICAgZGVmYXVsdExvY2FsZSA9IG51bGwsCiAgICBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtID0gbnVsbCwKICAgIGRlZmF1bHRPdXRwdXRDYWxlbmRhciA9IG51bGwsCiAgICB0aHJvd09uSW52YWxpZDsKCiAgLyoqCiAgICogU2V0dGluZ3MgY29udGFpbnMgc3RhdGljIGdldHRlcnMgYW5kIHNldHRlcnMgdGhhdCBjb250cm9sIEx1eG9uJ3Mgb3ZlcmFsbCBiZWhhdmlvci4gTHV4b24gaXMgYSBzaW1wbGUgbGlicmFyeSB3aXRoIGZldyBvcHRpb25zLCBidXQgdGhlIG9uZXMgaXQgZG9lcyBoYXZlIGxpdmUgaGVyZS4KICAgKi8KICBjbGFzcyBTZXR0aW5ncyB7CiAgICAvKioKICAgICAqIEdldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuCiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259CiAgICAgKi8KICAgIHN0YXRpYyBnZXQgbm93KCkgewogICAgICByZXR1cm4gbm93OwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBjYWxsYmFjayBmb3IgcmV0dXJuaW5nIHRoZSBjdXJyZW50IHRpbWVzdGFtcC4KICAgICAqIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgbnVtYmVyLCB3aGljaCB3aWxsIGJlIGludGVycHJldGVkIGFzIGFuIEVwb2NoIG1pbGxpc2Vjb25kIGNvdW50CiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259CiAgICAgKiBAZXhhbXBsZSBTZXR0aW5ncy5ub3cgPSAoKSA9PiBEYXRlLm5vdygpICsgMzAwMCAvLyBwcmV0ZW5kIGl0IGlzIDMgc2Vjb25kcyBpbiB0aGUgZnV0dXJlCiAgICAgKiBAZXhhbXBsZSBTZXR0aW5ncy5ub3cgPSAoKSA9PiAwIC8vIGFsd2F5cyBwcmV0ZW5kIGl0J3MgSmFuIDEsIDE5NzAgYXQgbWlkbmlnaHQgaW4gVVRDIHRpbWUKICAgICAqLwogICAgc3RhdGljIHNldCBub3cobikgewogICAgICBub3cgPSBuOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSB0byBjcmVhdGUgRGF0ZVRpbWVzIGluLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLgogICAgICogVXNlIHRoZSB2YWx1ZSAic3lzdGVtIiB0byByZXNldCB0aGlzIHZhbHVlIHRvIHRoZSBzeXN0ZW0ncyB0aW1lIHpvbmUuCiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICovCiAgICBzdGF0aWMgc2V0IGRlZmF1bHRab25lKHpvbmUpIHsKICAgICAgZGVmYXVsdFpvbmUgPSB6b25lOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSBvYmplY3QgY3VycmVudGx5IHVzZWQgdG8gY3JlYXRlIERhdGVUaW1lcy4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy4KICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRoZSBzeXN0ZW0ncyB0aW1lIHpvbmUgKHRoZSBvbmUgc2V0IG9uIHRoZSBtYWNoaW5lIHRoYXQgcnVucyB0aGlzIGNvZGUpLgogICAgICogQHR5cGUge1pvbmV9CiAgICAgKi8KICAgIHN0YXRpYyBnZXQgZGVmYXVsdFpvbmUoKSB7CiAgICAgIHJldHVybiBub3JtYWxpemVab25lKGRlZmF1bHRab25lLCBTeXN0ZW1ab25lLmluc3RhbmNlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgZGVmYXVsdCBsb2NhbGUgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgc3RhdGljIGdldCBkZWZhdWx0TG9jYWxlKCkgewogICAgICByZXR1cm4gZGVmYXVsdExvY2FsZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCB0aGUgZGVmYXVsdCBsb2NhbGUgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgc3RhdGljIHNldCBkZWZhdWx0TG9jYWxlKGxvY2FsZSkgewogICAgICBkZWZhdWx0TG9jYWxlID0gbG9jYWxlOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBkZWZhdWx0IG51bWJlcmluZyBzeXN0ZW0gdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgc3RhdGljIGdldCBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtKCkgewogICAgICByZXR1cm4gZGVmYXVsdE51bWJlcmluZ1N5c3RlbTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCB0aGUgZGVmYXVsdCBudW1iZXJpbmcgc3lzdGVtIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy4KICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKi8KICAgIHN0YXRpYyBzZXQgZGVmYXVsdE51bWJlcmluZ1N5c3RlbShudW1iZXJpbmdTeXN0ZW0pIHsKICAgICAgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSA9IG51bWJlcmluZ1N5c3RlbTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgZGVmYXVsdCBvdXRwdXQgY2FsZW5kYXIgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgc3RhdGljIGdldCBkZWZhdWx0T3V0cHV0Q2FsZW5kYXIoKSB7CiAgICAgIHJldHVybiBkZWZhdWx0T3V0cHV0Q2FsZW5kYXI7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgdGhlIGRlZmF1bHQgb3V0cHV0IGNhbGVuZGFyIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy4KICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKi8KICAgIHN0YXRpYyBzZXQgZGVmYXVsdE91dHB1dENhbGVuZGFyKG91dHB1dENhbGVuZGFyKSB7CiAgICAgIGRlZmF1bHRPdXRwdXRDYWxlbmRhciA9IG91dHB1dENhbGVuZGFyOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHdoZXRoZXIgTHV4b24gd2lsbCB0aHJvdyB3aGVuIGl0IGVuY291bnRlcnMgaW52YWxpZCBEYXRlVGltZXMsIER1cmF0aW9ucywgb3IgSW50ZXJ2YWxzCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqLwogICAgc3RhdGljIGdldCB0aHJvd09uSW52YWxpZCgpIHsKICAgICAgcmV0dXJuIHRocm93T25JbnZhbGlkOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHdoZXRoZXIgTHV4b24gd2lsbCB0aHJvdyB3aGVuIGl0IGVuY291bnRlcnMgaW52YWxpZCBEYXRlVGltZXMsIER1cmF0aW9ucywgb3IgSW50ZXJ2YWxzCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqLwogICAgc3RhdGljIHNldCB0aHJvd09uSW52YWxpZCh0KSB7CiAgICAgIHRocm93T25JbnZhbGlkID0gdDsKICAgIH0KCiAgICAvKioKICAgICAqIFJlc2V0IEx1eG9uJ3MgZ2xvYmFsIGNhY2hlcy4gU2hvdWxkIG9ubHkgYmUgbmVjZXNzYXJ5IGluIHRlc3Rpbmcgc2NlbmFyaW9zLgogICAgICogQHJldHVybiB7dm9pZH0KICAgICAqLwogICAgc3RhdGljIHJlc2V0Q2FjaGVzKCkgewogICAgICBMb2NhbGUucmVzZXRDYWNoZSgpOwogICAgICBJQU5BWm9uZS5yZXNldENhY2hlKCk7CiAgICB9CiAgfQoKICAvLyB0b2RvIC0gcmVtYXAgY2FjaGluZwoKICBsZXQgaW50bExGQ2FjaGUgPSB7fTsKICBmdW5jdGlvbiBnZXRDYWNoZWRMRihsb2NTdHJpbmcsIG9wdHMgPSB7fSkgewogICAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgb3B0c10pOwogICAgbGV0IGR0ZiA9IGludGxMRkNhY2hlW2tleV07CiAgICBpZiAoIWR0ZikgewogICAgICBkdGYgPSBuZXcgSW50bC5MaXN0Rm9ybWF0KGxvY1N0cmluZywgb3B0cyk7CiAgICAgIGludGxMRkNhY2hlW2tleV0gPSBkdGY7CiAgICB9CiAgICByZXR1cm4gZHRmOwogIH0KCiAgbGV0IGludGxEVENhY2hlID0ge307CiAgZnVuY3Rpb24gZ2V0Q2FjaGVkRFRGKGxvY1N0cmluZywgb3B0cyA9IHt9KSB7CiAgICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbbG9jU3RyaW5nLCBvcHRzXSk7CiAgICBsZXQgZHRmID0gaW50bERUQ2FjaGVba2V5XTsKICAgIGlmICghZHRmKSB7CiAgICAgIGR0ZiA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7CiAgICAgIGludGxEVENhY2hlW2tleV0gPSBkdGY7CiAgICB9CiAgICByZXR1cm4gZHRmOwogIH0KCiAgbGV0IGludGxOdW1DYWNoZSA9IHt9OwogIGZ1bmN0aW9uIGdldENhY2hlZElORihsb2NTdHJpbmcsIG9wdHMgPSB7fSkgewogICAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgb3B0c10pOwogICAgbGV0IGluZiA9IGludGxOdW1DYWNoZVtrZXldOwogICAgaWYgKCFpbmYpIHsKICAgICAgaW5mID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7CiAgICAgIGludGxOdW1DYWNoZVtrZXldID0gaW5mOwogICAgfQogICAgcmV0dXJuIGluZjsKICB9CgogIGxldCBpbnRsUmVsQ2FjaGUgPSB7fTsKICBmdW5jdGlvbiBnZXRDYWNoZWRSVEYobG9jU3RyaW5nLCBvcHRzID0ge30pIHsKICAgIGNvbnN0IHsgYmFzZSwgLi4uY2FjaGVLZXlPcHRzIH0gPSBvcHRzOyAvLyBleGNsdWRlIGBiYXNlYCBmcm9tIHRoZSBvcHRpb25zCiAgICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbbG9jU3RyaW5nLCBjYWNoZUtleU9wdHNdKTsKICAgIGxldCBpbmYgPSBpbnRsUmVsQ2FjaGVba2V5XTsKICAgIGlmICghaW5mKSB7CiAgICAgIGluZiA9IG5ldyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdChsb2NTdHJpbmcsIG9wdHMpOwogICAgICBpbnRsUmVsQ2FjaGVba2V5XSA9IGluZjsKICAgIH0KICAgIHJldHVybiBpbmY7CiAgfQoKICBsZXQgc3lzTG9jYWxlQ2FjaGUgPSBudWxsOwogIGZ1bmN0aW9uIHN5c3RlbUxvY2FsZSgpIHsKICAgIGlmIChzeXNMb2NhbGVDYWNoZSkgewogICAgICByZXR1cm4gc3lzTG9jYWxlQ2FjaGU7CiAgICB9IGVsc2UgewogICAgICBzeXNMb2NhbGVDYWNoZSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlOwogICAgICByZXR1cm4gc3lzTG9jYWxlQ2FjaGU7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBwYXJzZUxvY2FsZVN0cmluZyhsb2NhbGVTdHIpIHsKICAgIC8vIEkgcmVhbGx5IHdhbnQgdG8gYXZvaWQgd3JpdGluZyBhIEJDUCA0NyBwYXJzZXIKICAgIC8vIHNlZSwgZS5nLiBodHRwczovL2dpdGh1Yi5jb20vd29vb3JtL2JjcC00NwogICAgLy8gSW5zdGVhZCwgd2UnbGwgZG8gdGhpczoKCiAgICAvLyBhKSBpZiB0aGUgc3RyaW5nIGhhcyBubyAtdSBleHRlbnNpb25zLCBqdXN0IGxlYXZlIGl0IGFsb25lCiAgICAvLyBiKSBpZiBpdCBkb2VzLCB1c2UgSW50bCB0byByZXNvbHZlIGV2ZXJ5dGhpbmcKICAgIC8vIGMpIGlmIEludGwgZmFpbHMsIHRyeSBhZ2FpbiB3aXRob3V0IHRoZSAtdQoKICAgIGNvbnN0IHVJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKCItdS0iKTsKICAgIGlmICh1SW5kZXggPT09IC0xKSB7CiAgICAgIHJldHVybiBbbG9jYWxlU3RyXTsKICAgIH0gZWxzZSB7CiAgICAgIGxldCBvcHRpb25zOwogICAgICBjb25zdCBzbWFsbGVyID0gbG9jYWxlU3RyLnN1YnN0cmluZygwLCB1SW5kZXgpOwogICAgICB0cnkgewogICAgICAgIG9wdGlvbnMgPSBnZXRDYWNoZWREVEYobG9jYWxlU3RyKS5yZXNvbHZlZE9wdGlvbnMoKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIG9wdGlvbnMgPSBnZXRDYWNoZWREVEYoc21hbGxlcikucmVzb2x2ZWRPcHRpb25zKCk7CiAgICAgIH0KCiAgICAgIGNvbnN0IHsgbnVtYmVyaW5nU3lzdGVtLCBjYWxlbmRhciB9ID0gb3B0aW9uczsKICAgICAgLy8gcmV0dXJuIHRoZSBzbWFsbGVyIG9uZSBzbyB0aGF0IHdlIGNhbiBhcHBlbmQgdGhlIGNhbGVuZGFyIGFuZCBudW1iZXJpbmcgb3ZlcnJpZGVzIHRvIGl0CiAgICAgIHJldHVybiBbc21hbGxlciwgbnVtYmVyaW5nU3lzdGVtLCBjYWxlbmRhcl07CiAgICB9CiAgfQoKICBmdW5jdGlvbiBpbnRsQ29uZmlnU3RyaW5nKGxvY2FsZVN0ciwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikgewogICAgaWYgKG91dHB1dENhbGVuZGFyIHx8IG51bWJlcmluZ1N5c3RlbSkgewogICAgICBsb2NhbGVTdHIgKz0gIi11IjsKCiAgICAgIGlmIChvdXRwdXRDYWxlbmRhcikgewogICAgICAgIGxvY2FsZVN0ciArPSBgLWNhLSR7b3V0cHV0Q2FsZW5kYXJ9YDsKICAgICAgfQoKICAgICAgaWYgKG51bWJlcmluZ1N5c3RlbSkgewogICAgICAgIGxvY2FsZVN0ciArPSBgLW51LSR7bnVtYmVyaW5nU3lzdGVtfWA7CiAgICAgIH0KICAgICAgcmV0dXJuIGxvY2FsZVN0cjsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBsb2NhbGVTdHI7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBtYXBNb250aHMoZikgewogICAgY29uc3QgbXMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDEyOyBpKyspIHsKICAgICAgY29uc3QgZHQgPSBEYXRlVGltZS51dGMoMjAxNiwgaSwgMSk7CiAgICAgIG1zLnB1c2goZihkdCkpOwogICAgfQogICAgcmV0dXJuIG1zOwogIH0KCiAgZnVuY3Rpb24gbWFwV2Vla2RheXMoZikgewogICAgY29uc3QgbXMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDc7IGkrKykgewogICAgICBjb25zdCBkdCA9IERhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMgKyBpKTsKICAgICAgbXMucHVzaChmKGR0KSk7CiAgICB9CiAgICByZXR1cm4gbXM7CiAgfQoKICBmdW5jdGlvbiBsaXN0U3R1ZmYobG9jLCBsZW5ndGgsIGRlZmF1bHRPSywgZW5nbGlzaEZuLCBpbnRsRm4pIHsKICAgIGNvbnN0IG1vZGUgPSBsb2MubGlzdGluZ01vZGUoZGVmYXVsdE9LKTsKCiAgICBpZiAobW9kZSA9PT0gImVycm9yIikgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gImVuIikgewogICAgICByZXR1cm4gZW5nbGlzaEZuKGxlbmd0aCk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gaW50bEZuKGxlbmd0aCk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBzdXBwb3J0c0Zhc3ROdW1iZXJzKGxvYykgewogICAgaWYgKGxvYy5udW1iZXJpbmdTeXN0ZW0gJiYgbG9jLm51bWJlcmluZ1N5c3RlbSAhPT0gImxhdG4iKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAoCiAgICAgICAgbG9jLm51bWJlcmluZ1N5c3RlbSA9PT0gImxhdG4iIHx8CiAgICAgICAgIWxvYy5sb2NhbGUgfHwKICAgICAgICBsb2MubG9jYWxlLnN0YXJ0c1dpdGgoImVuIikgfHwKICAgICAgICBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2MuaW50bCkucmVzb2x2ZWRPcHRpb25zKCkubnVtYmVyaW5nU3lzdGVtID09PSAibGF0biIKICAgICAgKTsKICAgIH0KICB9CgogIC8qKgogICAqIEBwcml2YXRlCiAgICovCgogIGNsYXNzIFBvbHlOdW1iZXJGb3JtYXR0ZXIgewogICAgY29uc3RydWN0b3IoaW50bCwgZm9yY2VTaW1wbGUsIG9wdHMpIHsKICAgICAgdGhpcy5wYWRUbyA9IG9wdHMucGFkVG8gfHwgMDsKICAgICAgdGhpcy5mbG9vciA9IG9wdHMuZmxvb3IgfHwgZmFsc2U7CgogICAgICBjb25zdCB7IHBhZFRvLCBmbG9vciwgLi4ub3RoZXJPcHRzIH0gPSBvcHRzOwoKICAgICAgaWYgKCFmb3JjZVNpbXBsZSB8fCBPYmplY3Qua2V5cyhvdGhlck9wdHMpLmxlbmd0aCA+IDApIHsKICAgICAgICBjb25zdCBpbnRsT3B0cyA9IHsgdXNlR3JvdXBpbmc6IGZhbHNlLCAuLi5vcHRzIH07CiAgICAgICAgaWYgKG9wdHMucGFkVG8gPiAwKSBpbnRsT3B0cy5taW5pbXVtSW50ZWdlckRpZ2l0cyA9IG9wdHMucGFkVG87CiAgICAgICAgdGhpcy5pbmYgPSBnZXRDYWNoZWRJTkYoaW50bCwgaW50bE9wdHMpOwogICAgICB9CiAgICB9CgogICAgZm9ybWF0KGkpIHsKICAgICAgaWYgKHRoaXMuaW5mKSB7CiAgICAgICAgY29uc3QgZml4ZWQgPSB0aGlzLmZsb29yID8gTWF0aC5mbG9vcihpKSA6IGk7CiAgICAgICAgcmV0dXJuIHRoaXMuaW5mLmZvcm1hdChmaXhlZCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gdG8gbWF0Y2ggdGhlIGJyb3dzZXIncyBudW1iZXJmb3JtYXR0ZXIgZGVmYXVsdHMKICAgICAgICBjb25zdCBmaXhlZCA9IHRoaXMuZmxvb3IgPyBNYXRoLmZsb29yKGkpIDogcm91bmRUbyhpLCAzKTsKICAgICAgICByZXR1cm4gcGFkU3RhcnQoZml4ZWQsIHRoaXMucGFkVG8pOwogICAgICB9CiAgICB9CiAgfQoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqLwoKICBjbGFzcyBQb2x5RGF0ZUZvcm1hdHRlciB7CiAgICBjb25zdHJ1Y3RvcihkdCwgaW50bCwgb3B0cykgewogICAgICB0aGlzLm9wdHMgPSBvcHRzOwoKICAgICAgbGV0IHo7CiAgICAgIGlmIChkdC56b25lLmlzVW5pdmVyc2FsKSB7CiAgICAgICAgLy8gVVRDLTggb3IgRXRjL1VUQy04IGFyZSBub3QgcGFydCBvZiB0emRhdGEsIG9ubHkgRXRjL0dNVCs4IGFuZCB0aGUgbGlrZS4KICAgICAgICAvLyBUaGF0IGlzIHdoeSBmaXhlZC1vZmZzZXQgVFogaXMgc2V0IHRvIHRoYXQgdW5sZXNzIGl0IGlzOgogICAgICAgIC8vIDEuIFJlcHJlc2VudGluZyBvZmZzZXQgMCB3aGVuIFVUQyBpcyB1c2VkIHRvIG1haW50YWluIHByZXZpb3VzIGJlaGF2aW9yIGFuZCBkb2VzIG5vdCBiZWNvbWUgR01ULgogICAgICAgIC8vIDIuIFVuc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyOgogICAgICAgIC8vICAgIC0gc29tZSBkbyBub3Qgc3VwcG9ydCBFdGMvCiAgICAgICAgLy8gICAgLSA8IEV0Yy9HTVQtMTQsID4gRXRjL0dNVCsxMiwgYW5kIDMwLW1pbnV0ZSBvciA0NS1taW51dGUgb2Zmc2V0cyBhcmUgbm90IHBhcnQgb2YgdHpkYXRhCiAgICAgICAgY29uc3QgZ210T2Zmc2V0ID0gLTEgKiAoZHQub2Zmc2V0IC8gNjApOwogICAgICAgIGNvbnN0IG9mZnNldFogPSBnbXRPZmZzZXQgPj0gMCA/IGBFdGMvR01UKyR7Z210T2Zmc2V0fWAgOiBgRXRjL0dNVCR7Z210T2Zmc2V0fWA7CiAgICAgICAgaWYgKGR0Lm9mZnNldCAhPT0gMCAmJiBJQU5BWm9uZS5jcmVhdGUob2Zmc2V0WikudmFsaWQpIHsKICAgICAgICAgIHogPSBvZmZzZXRaOwogICAgICAgICAgdGhpcy5kdCA9IGR0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBOb3QgYWxsIGZpeGVkLW9mZnNldCB6b25lcyBsaWtlIEV0Yy8rNDozMCBhcmUgcHJlc2VudCBpbiB0emRhdGEuCiAgICAgICAgICAvLyBTbyB3ZSBoYXZlIHRvIG1ha2UgZG8uIFR3byBjYXNlczoKICAgICAgICAgIC8vIDEuIFRoZSBmb3JtYXQgb3B0aW9ucyB0ZWxsIHVzIHRvIHNob3cgdGhlIHpvbmUuIFdlIGNhbid0IGRvIHRoYXQsIHNvIHRoZSBiZXN0CiAgICAgICAgICAvLyB3ZSBjYW4gZG8gaXMgZm9ybWF0IHRoZSBkYXRlIGluIFVUQy4KICAgICAgICAgIC8vIDIuIFRoZSBmb3JtYXQgb3B0aW9ucyBkb24ndCB0ZWxsIHVzIHRvIHNob3cgdGhlIHpvbmUuIFRoZW4gd2UgY2FuIGFkanVzdCB0aGVtCiAgICAgICAgICAvLyB0aGUgdGltZSBhbmQgdGVsbCB0aGUgZm9ybWF0dGVyIHRvIHNob3cgaXQgdG8gdXMgaW4gVVRDLCBzbyB0aGF0IHRoZSB0aW1lIGlzIHJpZ2h0CiAgICAgICAgICAvLyBhbmQgdGhlIGJhZCB6b25lIGRvZXNuJ3Qgc2hvdyB1cC4KICAgICAgICAgIHogPSAiVVRDIjsKICAgICAgICAgIGlmIChvcHRzLnRpbWVab25lTmFtZSkgewogICAgICAgICAgICB0aGlzLmR0ID0gZHQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmR0ID0gZHQub2Zmc2V0ID09PSAwID8gZHQgOiBEYXRlVGltZS5mcm9tTWlsbGlzKGR0LnRzICsgZHQub2Zmc2V0ICogNjAgKiAxMDAwKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoZHQuem9uZS50eXBlID09PSAic3lzdGVtIikgewogICAgICAgIHRoaXMuZHQgPSBkdDsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmR0ID0gZHQ7CiAgICAgICAgeiA9IGR0LnpvbmUubmFtZTsKICAgICAgfQoKICAgICAgY29uc3QgaW50bE9wdHMgPSB7IC4uLnRoaXMub3B0cyB9OwogICAgICBpZiAoeikgewogICAgICAgIGludGxPcHRzLnRpbWVab25lID0gejsKICAgICAgfQogICAgICB0aGlzLmR0ZiA9IGdldENhY2hlZERURihpbnRsLCBpbnRsT3B0cyk7CiAgICB9CgogICAgZm9ybWF0KCkgewogICAgICByZXR1cm4gdGhpcy5kdGYuZm9ybWF0KHRoaXMuZHQudG9KU0RhdGUoKSk7CiAgICB9CgogICAgZm9ybWF0VG9QYXJ0cygpIHsKICAgICAgcmV0dXJuIHRoaXMuZHRmLmZvcm1hdFRvUGFydHModGhpcy5kdC50b0pTRGF0ZSgpKTsKICAgIH0KCiAgICByZXNvbHZlZE9wdGlvbnMoKSB7CiAgICAgIHJldHVybiB0aGlzLmR0Zi5yZXNvbHZlZE9wdGlvbnMoKTsKICAgIH0KICB9CgogIC8qKgogICAqIEBwcml2YXRlCiAgICovCiAgY2xhc3MgUG9seVJlbEZvcm1hdHRlciB7CiAgICBjb25zdHJ1Y3RvcihpbnRsLCBpc0VuZ2xpc2gsIG9wdHMpIHsKICAgICAgdGhpcy5vcHRzID0geyBzdHlsZTogImxvbmciLCAuLi5vcHRzIH07CiAgICAgIGlmICghaXNFbmdsaXNoICYmIGhhc1JlbGF0aXZlKCkpIHsKICAgICAgICB0aGlzLnJ0ZiA9IGdldENhY2hlZFJURihpbnRsLCBvcHRzKTsKICAgICAgfQogICAgfQoKICAgIGZvcm1hdChjb3VudCwgdW5pdCkgewogICAgICBpZiAodGhpcy5ydGYpIHsKICAgICAgICByZXR1cm4gdGhpcy5ydGYuZm9ybWF0KGNvdW50LCB1bml0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZm9ybWF0UmVsYXRpdmVUaW1lKHVuaXQsIGNvdW50LCB0aGlzLm9wdHMubnVtZXJpYywgdGhpcy5vcHRzLnN0eWxlICE9PSAibG9uZyIpOwogICAgICB9CiAgICB9CgogICAgZm9ybWF0VG9QYXJ0cyhjb3VudCwgdW5pdCkgewogICAgICBpZiAodGhpcy5ydGYpIHsKICAgICAgICByZXR1cm4gdGhpcy5ydGYuZm9ybWF0VG9QYXJ0cyhjb3VudCwgdW5pdCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9CiAgfQoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqLwoKICBjbGFzcyBMb2NhbGUgewogICAgc3RhdGljIGZyb21PcHRzKG9wdHMpIHsKICAgICAgcmV0dXJuIExvY2FsZS5jcmVhdGUob3B0cy5sb2NhbGUsIG9wdHMubnVtYmVyaW5nU3lzdGVtLCBvcHRzLm91dHB1dENhbGVuZGFyLCBvcHRzLmRlZmF1bHRUb0VOKTsKICAgIH0KCiAgICBzdGF0aWMgY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhciwgZGVmYXVsdFRvRU4gPSBmYWxzZSkgewogICAgICBjb25zdCBzcGVjaWZpZWRMb2NhbGUgPSBsb2NhbGUgfHwgU2V0dGluZ3MuZGVmYXVsdExvY2FsZTsKICAgICAgLy8gdGhlIHN5c3RlbSBsb2NhbGUgaXMgdXNlZnVsIGZvciBodW1hbiByZWFkYWJsZSBzdHJpbmdzIGJ1dCBhbm5veWluZyBmb3IgcGFyc2luZy9mb3JtYXR0aW5nIGtub3duIGZvcm1hdHMKICAgICAgY29uc3QgbG9jYWxlUiA9IHNwZWNpZmllZExvY2FsZSB8fCAoZGVmYXVsdFRvRU4gPyAiZW4tVVMiIDogc3lzdGVtTG9jYWxlKCkpOwogICAgICBjb25zdCBudW1iZXJpbmdTeXN0ZW1SID0gbnVtYmVyaW5nU3lzdGVtIHx8IFNldHRpbmdzLmRlZmF1bHROdW1iZXJpbmdTeXN0ZW07CiAgICAgIGNvbnN0IG91dHB1dENhbGVuZGFyUiA9IG91dHB1dENhbGVuZGFyIHx8IFNldHRpbmdzLmRlZmF1bHRPdXRwdXRDYWxlbmRhcjsKICAgICAgcmV0dXJuIG5ldyBMb2NhbGUobG9jYWxlUiwgbnVtYmVyaW5nU3lzdGVtUiwgb3V0cHV0Q2FsZW5kYXJSLCBzcGVjaWZpZWRMb2NhbGUpOwogICAgfQoKICAgIHN0YXRpYyByZXNldENhY2hlKCkgewogICAgICBzeXNMb2NhbGVDYWNoZSA9IG51bGw7CiAgICAgIGludGxEVENhY2hlID0ge307CiAgICAgIGludGxOdW1DYWNoZSA9IHt9OwogICAgICBpbnRsUmVsQ2FjaGUgPSB7fTsKICAgIH0KCiAgICBzdGF0aWMgZnJvbU9iamVjdCh7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhciB9ID0ge30pIHsKICAgICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKTsKICAgIH0KCiAgICBjb25zdHJ1Y3Rvcihsb2NhbGUsIG51bWJlcmluZywgb3V0cHV0Q2FsZW5kYXIsIHNwZWNpZmllZExvY2FsZSkgewogICAgICBjb25zdCBbcGFyc2VkTG9jYWxlLCBwYXJzZWROdW1iZXJpbmdTeXN0ZW0sIHBhcnNlZE91dHB1dENhbGVuZGFyXSA9IHBhcnNlTG9jYWxlU3RyaW5nKGxvY2FsZSk7CgogICAgICB0aGlzLmxvY2FsZSA9IHBhcnNlZExvY2FsZTsKICAgICAgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPSBudW1iZXJpbmcgfHwgcGFyc2VkTnVtYmVyaW5nU3lzdGVtIHx8IG51bGw7CiAgICAgIHRoaXMub3V0cHV0Q2FsZW5kYXIgPSBvdXRwdXRDYWxlbmRhciB8fCBwYXJzZWRPdXRwdXRDYWxlbmRhciB8fCBudWxsOwogICAgICB0aGlzLmludGwgPSBpbnRsQ29uZmlnU3RyaW5nKHRoaXMubG9jYWxlLCB0aGlzLm51bWJlcmluZ1N5c3RlbSwgdGhpcy5vdXRwdXRDYWxlbmRhcik7CgogICAgICB0aGlzLndlZWtkYXlzQ2FjaGUgPSB7IGZvcm1hdDoge30sIHN0YW5kYWxvbmU6IHt9IH07CiAgICAgIHRoaXMubW9udGhzQ2FjaGUgPSB7IGZvcm1hdDoge30sIHN0YW5kYWxvbmU6IHt9IH07CiAgICAgIHRoaXMubWVyaWRpZW1DYWNoZSA9IG51bGw7CiAgICAgIHRoaXMuZXJhQ2FjaGUgPSB7fTsKCiAgICAgIHRoaXMuc3BlY2lmaWVkTG9jYWxlID0gc3BlY2lmaWVkTG9jYWxlOwogICAgICB0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkID0gbnVsbDsKICAgIH0KCiAgICBnZXQgZmFzdE51bWJlcnMoKSB7CiAgICAgIGlmICh0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkID09IG51bGwpIHsKICAgICAgICB0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkID0gc3VwcG9ydHNGYXN0TnVtYmVycyh0aGlzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQ7CiAgICB9CgogICAgbGlzdGluZ01vZGUoKSB7CiAgICAgIGNvbnN0IGlzQWN0dWFsbHlFbiA9IHRoaXMuaXNFbmdsaXNoKCk7CiAgICAgIGNvbnN0IGhhc05vV2VpcmRuZXNzID0KICAgICAgICAodGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09IG51bGwgfHwgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09ICJsYXRuIikgJiYKICAgICAgICAodGhpcy5vdXRwdXRDYWxlbmRhciA9PT0gbnVsbCB8fCB0aGlzLm91dHB1dENhbGVuZGFyID09PSAiZ3JlZ29yeSIpOwogICAgICByZXR1cm4gaXNBY3R1YWxseUVuICYmIGhhc05vV2VpcmRuZXNzID8gImVuIiA6ICJpbnRsIjsKICAgIH0KCiAgICBjbG9uZShhbHRzKSB7CiAgICAgIGlmICghYWx0cyB8fCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhbHRzKS5sZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZSgKICAgICAgICAgIGFsdHMubG9jYWxlIHx8IHRoaXMuc3BlY2lmaWVkTG9jYWxlLAogICAgICAgICAgYWx0cy5udW1iZXJpbmdTeXN0ZW0gfHwgdGhpcy5udW1iZXJpbmdTeXN0ZW0sCiAgICAgICAgICBhbHRzLm91dHB1dENhbGVuZGFyIHx8IHRoaXMub3V0cHV0Q2FsZW5kYXIsCiAgICAgICAgICBhbHRzLmRlZmF1bHRUb0VOIHx8IGZhbHNlCiAgICAgICAgKTsKICAgICAgfQogICAgfQoKICAgIHJlZGVmYXVsdFRvRU4oYWx0cyA9IHt9KSB7CiAgICAgIHJldHVybiB0aGlzLmNsb25lKHsgLi4uYWx0cywgZGVmYXVsdFRvRU46IHRydWUgfSk7CiAgICB9CgogICAgcmVkZWZhdWx0VG9TeXN0ZW0oYWx0cyA9IHt9KSB7CiAgICAgIHJldHVybiB0aGlzLmNsb25lKHsgLi4uYWx0cywgZGVmYXVsdFRvRU46IGZhbHNlIH0pOwogICAgfQoKICAgIG1vbnRocyhsZW5ndGgsIGZvcm1hdCA9IGZhbHNlLCBkZWZhdWx0T0sgPSB0cnVlKSB7CiAgICAgIHJldHVybiBsaXN0U3R1ZmYodGhpcywgbGVuZ3RoLCBkZWZhdWx0T0ssIG1vbnRocywgKCkgPT4gewogICAgICAgIGNvbnN0IGludGwgPSBmb3JtYXQgPyB7IG1vbnRoOiBsZW5ndGgsIGRheTogIm51bWVyaWMiIH0gOiB7IG1vbnRoOiBsZW5ndGggfSwKICAgICAgICAgIGZvcm1hdFN0ciA9IGZvcm1hdCA/ICJmb3JtYXQiIDogInN0YW5kYWxvbmUiOwogICAgICAgIGlmICghdGhpcy5tb250aHNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF0pIHsKICAgICAgICAgIHRoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwTW9udGhzKChkdCkgPT4gdGhpcy5leHRyYWN0KGR0LCBpbnRsLCAibW9udGgiKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXTsKICAgICAgfSk7CiAgICB9CgogICAgd2Vla2RheXMobGVuZ3RoLCBmb3JtYXQgPSBmYWxzZSwgZGVmYXVsdE9LID0gdHJ1ZSkgewogICAgICByZXR1cm4gbGlzdFN0dWZmKHRoaXMsIGxlbmd0aCwgZGVmYXVsdE9LLCB3ZWVrZGF5cywgKCkgPT4gewogICAgICAgIGNvbnN0IGludGwgPSBmb3JtYXQKICAgICAgICAgICAgPyB7IHdlZWtkYXk6IGxlbmd0aCwgeWVhcjogIm51bWVyaWMiLCBtb250aDogImxvbmciLCBkYXk6ICJudW1lcmljIiB9CiAgICAgICAgICAgIDogeyB3ZWVrZGF5OiBsZW5ndGggfSwKICAgICAgICAgIGZvcm1hdFN0ciA9IGZvcm1hdCA/ICJmb3JtYXQiIDogInN0YW5kYWxvbmUiOwogICAgICAgIGlmICghdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSkgewogICAgICAgICAgdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSA9IG1hcFdlZWtkYXlzKChkdCkgPT4KICAgICAgICAgICAgdGhpcy5leHRyYWN0KGR0LCBpbnRsLCAid2Vla2RheSIpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXTsKICAgICAgfSk7CiAgICB9CgogICAgbWVyaWRpZW1zKGRlZmF1bHRPSyA9IHRydWUpIHsKICAgICAgcmV0dXJuIGxpc3RTdHVmZigKICAgICAgICB0aGlzLAogICAgICAgIHVuZGVmaW5lZCwKICAgICAgICBkZWZhdWx0T0ssCiAgICAgICAgKCkgPT4gbWVyaWRpZW1zLAogICAgICAgICgpID0+IHsKICAgICAgICAgIC8vIEluIHRoZW9yeSB0aGVyZSBjb3VsZCBiZSBhcmliaXRyYXJ5IGRheSBwZXJpb2RzLiBXZSdyZSBnb25uYSBhc3N1bWUgdGhlcmUgYXJlIGV4YWN0bHkgdHdvCiAgICAgICAgICAvLyBmb3IgQU0gYW5kIFBNLiBUaGlzIGlzIHByb2JhYmx5IHdyb25nLCBidXQgaXQncyBtYWtlcyBwYXJzaW5nIHdheSBlYXNpZXIuCiAgICAgICAgICBpZiAoIXRoaXMubWVyaWRpZW1DYWNoZSkgewogICAgICAgICAgICBjb25zdCBpbnRsID0geyBob3VyOiAibnVtZXJpYyIsIGhvdXJDeWNsZTogImgxMiIgfTsKICAgICAgICAgICAgdGhpcy5tZXJpZGllbUNhY2hlID0gW0RhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMsIDkpLCBEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzLCAxOSldLm1hcCgKICAgICAgICAgICAgICAoZHQpID0+IHRoaXMuZXh0cmFjdChkdCwgaW50bCwgImRheXBlcmlvZCIpCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHRoaXMubWVyaWRpZW1DYWNoZTsKICAgICAgICB9CiAgICAgICk7CiAgICB9CgogICAgZXJhcyhsZW5ndGgsIGRlZmF1bHRPSyA9IHRydWUpIHsKICAgICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIGRlZmF1bHRPSywgZXJhcywgKCkgPT4gewogICAgICAgIGNvbnN0IGludGwgPSB7IGVyYTogbGVuZ3RoIH07CgogICAgICAgIC8vIFRoaXMgaXMgcHJvYmxlbWF0aWMuIERpZmZlcmVudCBjYWxlbmRhcnMgYXJlIGdvaW5nIHRvIGRlZmluZSBlcmFzIHRvdGFsbHkgZGlmZmVyZW50bHkuIFdoYXQgSSBuZWVkIGlzIHRoZSBtaW5pbXVtIHNldCBvZiBkYXRlcwogICAgICAgIC8vIHRvIGRlZmluaXRlbHkgZW51bWVyYXRlIHRoZW0uCiAgICAgICAgaWYgKCF0aGlzLmVyYUNhY2hlW2xlbmd0aF0pIHsKICAgICAgICAgIHRoaXMuZXJhQ2FjaGVbbGVuZ3RoXSA9IFtEYXRlVGltZS51dGMoLTQwLCAxLCAxKSwgRGF0ZVRpbWUudXRjKDIwMTcsIDEsIDEpXS5tYXAoKGR0KSA9PgogICAgICAgICAgICB0aGlzLmV4dHJhY3QoZHQsIGludGwsICJlcmEiKQogICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLmVyYUNhY2hlW2xlbmd0aF07CiAgICAgIH0pOwogICAgfQoKICAgIGV4dHJhY3QoZHQsIGludGxPcHRzLCBmaWVsZCkgewogICAgICBjb25zdCBkZiA9IHRoaXMuZHRGb3JtYXR0ZXIoZHQsIGludGxPcHRzKSwKICAgICAgICByZXN1bHRzID0gZGYuZm9ybWF0VG9QYXJ0cygpLAogICAgICAgIG1hdGNoaW5nID0gcmVzdWx0cy5maW5kKChtKSA9PiBtLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gZmllbGQpOwogICAgICByZXR1cm4gbWF0Y2hpbmcgPyBtYXRjaGluZy52YWx1ZSA6IG51bGw7CiAgICB9CgogICAgbnVtYmVyRm9ybWF0dGVyKG9wdHMgPSB7fSkgewogICAgICAvLyB0aGlzIGZvcmNlc2ltcGxlIG9wdGlvbiBpcyBuZXZlciB1c2VkICh0aGUgb25seSBjYWxsZXIgc2hvcnQtY2lyY3VpdHMgb24gaXQsIGJ1dCBpdCBzZWVtcyBzYWZlciB0byBsZWF2ZSkKICAgICAgLy8gKGluIGNvbnRyYXN0LCB0aGUgcmVzdCBvZiB0aGUgY29uZGl0aW9uIGlzIHVzZWQgaGVhdmlseSkKICAgICAgcmV0dXJuIG5ldyBQb2x5TnVtYmVyRm9ybWF0dGVyKHRoaXMuaW50bCwgb3B0cy5mb3JjZVNpbXBsZSB8fCB0aGlzLmZhc3ROdW1iZXJzLCBvcHRzKTsKICAgIH0KCiAgICBkdEZvcm1hdHRlcihkdCwgaW50bE9wdHMgPSB7fSkgewogICAgICByZXR1cm4gbmV3IFBvbHlEYXRlRm9ybWF0dGVyKGR0LCB0aGlzLmludGwsIGludGxPcHRzKTsKICAgIH0KCiAgICByZWxGb3JtYXR0ZXIob3B0cyA9IHt9KSB7CiAgICAgIHJldHVybiBuZXcgUG9seVJlbEZvcm1hdHRlcih0aGlzLmludGwsIHRoaXMuaXNFbmdsaXNoKCksIG9wdHMpOwogICAgfQoKICAgIGxpc3RGb3JtYXR0ZXIob3B0cyA9IHt9KSB7CiAgICAgIHJldHVybiBnZXRDYWNoZWRMRih0aGlzLmludGwsIG9wdHMpOwogICAgfQoKICAgIGlzRW5nbGlzaCgpIHsKICAgICAgcmV0dXJuICgKICAgICAgICB0aGlzLmxvY2FsZSA9PT0gImVuIiB8fAogICAgICAgIHRoaXMubG9jYWxlLnRvTG93ZXJDYXNlKCkgPT09ICJlbi11cyIgfHwKICAgICAgICBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCh0aGlzLmludGwpLnJlc29sdmVkT3B0aW9ucygpLmxvY2FsZS5zdGFydHNXaXRoKCJlbi11cyIpCiAgICAgICk7CiAgICB9CgogICAgZXF1YWxzKG90aGVyKSB7CiAgICAgIHJldHVybiAoCiAgICAgICAgdGhpcy5sb2NhbGUgPT09IG90aGVyLmxvY2FsZSAmJgogICAgICAgIHRoaXMubnVtYmVyaW5nU3lzdGVtID09PSBvdGhlci5udW1iZXJpbmdTeXN0ZW0gJiYKICAgICAgICB0aGlzLm91dHB1dENhbGVuZGFyID09PSBvdGhlci5vdXRwdXRDYWxlbmRhcgogICAgICApOwogICAgfQogIH0KCiAgLyoKICAgKiBUaGlzIGZpbGUgaGFuZGxlcyBwYXJzaW5nIGZvciB3ZWxsLXNwZWNpZmllZCBmb3JtYXRzLiBIZXJlJ3MgaG93IGl0IHdvcmtzOgogICAqIFR3byB0aGluZ3MgZ28gaW50byBwYXJzaW5nOiBhIHJlZ2V4IHRvIG1hdGNoIHdpdGggYW5kIGFuIGV4dHJhY3RvciB0byB0YWtlIGFwYXJ0IHRoZSBncm91cHMgaW4gdGhlIG1hdGNoLgogICAqIEFuIGV4dHJhY3RvciBpcyBqdXN0IGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHJlZ2V4IG1hdGNoIGFycmF5IGFuZCByZXR1cm5zIGEgeyB5ZWFyOiAuLi4sIG1vbnRoOiAuLi4gfSBvYmplY3QKICAgKiBwYXJzZSgpIGRvZXMgdGhlIHdvcmsgb2YgZXhlY3V0aW5nIHRoZSByZWdleCBhbmQgYXBwbHlpbmcgdGhlIGV4dHJhY3Rvci4gSXQgdGFrZXMgbXVsdGlwbGUgcmVnZXgvZXh0cmFjdG9yIHBhaXJzIHRvIHRyeSBpbiBzZXF1ZW5jZS4KICAgKiBFeHRyYWN0b3JzIGNhbiB0YWtlIGEgImN1cnNvciIgcmVwcmVzZW50aW5nIHRoZSBvZmZzZXQgaW4gdGhlIG1hdGNoIHRvIGxvb2sgYXQuIFRoaXMgbWFrZXMgaXQgZWFzeSB0byBjb21iaW5lIGV4dHJhY3RvcnMuCiAgICogY29tYmluZUV4dHJhY3RvcnMoKSBkb2VzIHRoZSB3b3JrIG9mIGNvbWJpbmluZyB0aGVtLCBrZWVwaW5nIHRyYWNrIG9mIHRoZSBjdXJzb3IgdGhyb3VnaCBtdWx0aXBsZSBleHRyYWN0aW9ucy4KICAgKiBTb21lIGV4dHJhY3Rpb25zIGFyZSBzdXBlciBkdW1iIGFuZCBzaW1wbGVQYXJzZSBhbmQgZnJvbVN0cmluZ3MgaGVscCBEUlkgdGhlbS4KICAgKi8KCiAgZnVuY3Rpb24gY29tYmluZVJlZ2V4ZXMoLi4ucmVnZXhlcykgewogICAgY29uc3QgZnVsbCA9IHJlZ2V4ZXMucmVkdWNlKChmLCByKSA9PiBmICsgci5zb3VyY2UsICIiKTsKICAgIHJldHVybiBSZWdFeHAoYF4ke2Z1bGx9JGApOwogIH0KCiAgZnVuY3Rpb24gY29tYmluZUV4dHJhY3RvcnMoLi4uZXh0cmFjdG9ycykgewogICAgcmV0dXJuIChtKSA9PgogICAgICBleHRyYWN0b3JzCiAgICAgICAgLnJlZHVjZSgKICAgICAgICAgIChbbWVyZ2VkVmFscywgbWVyZ2VkWm9uZSwgY3Vyc29yXSwgZXgpID0+IHsKICAgICAgICAgICAgY29uc3QgW3ZhbCwgem9uZSwgbmV4dF0gPSBleChtLCBjdXJzb3IpOwogICAgICAgICAgICByZXR1cm4gW3sgLi4ubWVyZ2VkVmFscywgLi4udmFsIH0sIHpvbmUgfHwgbWVyZ2VkWm9uZSwgbmV4dF07CiAgICAgICAgICB9LAogICAgICAgICAgW3t9LCBudWxsLCAxXQogICAgICAgICkKICAgICAgICAuc2xpY2UoMCwgMik7CiAgfQoKICBmdW5jdGlvbiBwYXJzZSQxKHMsIC4uLnBhdHRlcm5zKSB7CiAgICBpZiAocyA9PSBudWxsKSB7CiAgICAgIHJldHVybiBbbnVsbCwgbnVsbF07CiAgICB9CgogICAgZm9yIChjb25zdCBbcmVnZXgsIGV4dHJhY3Rvcl0gb2YgcGF0dGVybnMpIHsKICAgICAgY29uc3QgbSA9IHJlZ2V4LmV4ZWMocyk7CiAgICAgIGlmIChtKSB7CiAgICAgICAgcmV0dXJuIGV4dHJhY3RvcihtKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIFtudWxsLCBudWxsXTsKICB9CgogIGZ1bmN0aW9uIHNpbXBsZVBhcnNlKC4uLmtleXMpIHsKICAgIHJldHVybiAobWF0Y2gsIGN1cnNvcikgPT4gewogICAgICBjb25zdCByZXQgPSB7fTsKICAgICAgbGV0IGk7CgogICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgICAgIHJldFtrZXlzW2ldXSA9IHBhcnNlSW50ZWdlcihtYXRjaFtjdXJzb3IgKyBpXSk7CiAgICAgIH0KICAgICAgcmV0dXJuIFtyZXQsIG51bGwsIGN1cnNvciArIGldOwogICAgfTsKICB9CgogIC8vIElTTyBhbmQgU1FMIHBhcnNpbmcKICBjb25zdCBvZmZzZXRSZWdleCA9IC8oPzooWil8KFsrLV1cZFxkKSg/Ojo/KFxkXGQpKT8pLzsKICBjb25zdCBpc29FeHRlbmRlZFpvbmUgPSBgKD86JHtvZmZzZXRSZWdleC5zb3VyY2V9Pyg/OlxcWygke2lhbmFSZWdleC5zb3VyY2V9KVxcXSk/KT9gOwogIGNvbnN0IGlzb1RpbWVCYXNlUmVnZXggPSAvKFxkXGQpKD86Oj8oXGRcZCkoPzo6PyhcZFxkKSg/OlsuLF0oXGR7MSwzMH0pKT8pPyk/LzsKICBjb25zdCBpc29UaW1lUmVnZXggPSBSZWdFeHAoYCR7aXNvVGltZUJhc2VSZWdleC5zb3VyY2V9JHtpc29FeHRlbmRlZFpvbmV9YCk7CiAgY29uc3QgaXNvVGltZUV4dGVuc2lvblJlZ2V4ID0gUmVnRXhwKGAoPzpUJHtpc29UaW1lUmVnZXguc291cmNlfSk/YCk7CiAgY29uc3QgaXNvWW1kUmVnZXggPSAvKFsrLV1cZHs2fXxcZHs0fSkoPzotPyhcZFxkKSg/Oi0/KFxkXGQpKT8pPy87CiAgY29uc3QgaXNvV2Vla1JlZ2V4ID0gLyhcZHs0fSktP1coXGRcZCkoPzotPyhcZCkpPy87CiAgY29uc3QgaXNvT3JkaW5hbFJlZ2V4ID0gLyhcZHs0fSktPyhcZHszfSkvOwogIGNvbnN0IGV4dHJhY3RJU09XZWVrRGF0YSA9IHNpbXBsZVBhcnNlKCJ3ZWVrWWVhciIsICJ3ZWVrTnVtYmVyIiwgIndlZWtEYXkiKTsKICBjb25zdCBleHRyYWN0SVNPT3JkaW5hbERhdGEgPSBzaW1wbGVQYXJzZSgieWVhciIsICJvcmRpbmFsIik7CiAgY29uc3Qgc3FsWW1kUmVnZXggPSAvKFxkezR9KS0oXGRcZCktKFxkXGQpLzsgLy8gZHVtYmVkLWRvd24gdmVyc2lvbiBvZiB0aGUgSVNPIG9uZQogIGNvbnN0IHNxbFRpbWVSZWdleCA9IFJlZ0V4cCgKICAgIGAke2lzb1RpbWVCYXNlUmVnZXguc291cmNlfSA/KD86JHtvZmZzZXRSZWdleC5zb3VyY2V9fCgke2lhbmFSZWdleC5zb3VyY2V9KSk/YAogICk7CiAgY29uc3Qgc3FsVGltZUV4dGVuc2lvblJlZ2V4ID0gUmVnRXhwKGAoPzogJHtzcWxUaW1lUmVnZXguc291cmNlfSk/YCk7CgogIGZ1bmN0aW9uIGludCQxKG1hdGNoLCBwb3MsIGZhbGxiYWNrKSB7CiAgICBjb25zdCBtID0gbWF0Y2hbcG9zXTsKICAgIHJldHVybiBpc1VuZGVmaW5lZChtKSA/IGZhbGxiYWNrIDogcGFyc2VJbnRlZ2VyKG0pOwogIH0KCiAgZnVuY3Rpb24gZXh0cmFjdElTT1ltZChtYXRjaCwgY3Vyc29yKSB7CiAgICBjb25zdCBpdGVtID0gewogICAgICB5ZWFyOiBpbnQkMShtYXRjaCwgY3Vyc29yKSwKICAgICAgbW9udGg6IGludCQxKG1hdGNoLCBjdXJzb3IgKyAxLCAxKSwKICAgICAgZGF5OiBpbnQkMShtYXRjaCwgY3Vyc29yICsgMiwgMSksCiAgICB9OwoKICAgIHJldHVybiBbaXRlbSwgbnVsbCwgY3Vyc29yICsgM107CiAgfQoKICBmdW5jdGlvbiBleHRyYWN0SVNPVGltZShtYXRjaCwgY3Vyc29yKSB7CiAgICBjb25zdCBpdGVtID0gewogICAgICBob3VyczogaW50JDEobWF0Y2gsIGN1cnNvciwgMCksCiAgICAgIG1pbnV0ZXM6IGludCQxKG1hdGNoLCBjdXJzb3IgKyAxLCAwKSwKICAgICAgc2Vjb25kczogaW50JDEobWF0Y2gsIGN1cnNvciArIDIsIDApLAogICAgICBtaWxsaXNlY29uZHM6IHBhcnNlTWlsbGlzKG1hdGNoW2N1cnNvciArIDNdKSwKICAgIH07CgogICAgcmV0dXJuIFtpdGVtLCBudWxsLCBjdXJzb3IgKyA0XTsKICB9CgogIGZ1bmN0aW9uIGV4dHJhY3RJU09PZmZzZXQobWF0Y2gsIGN1cnNvcikgewogICAgY29uc3QgbG9jYWwgPSAhbWF0Y2hbY3Vyc29yXSAmJiAhbWF0Y2hbY3Vyc29yICsgMV0sCiAgICAgIGZ1bGxPZmZzZXQgPSBzaWduZWRPZmZzZXQobWF0Y2hbY3Vyc29yICsgMV0sIG1hdGNoW2N1cnNvciArIDJdKSwKICAgICAgem9uZSA9IGxvY2FsID8gbnVsbCA6IEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShmdWxsT2Zmc2V0KTsKICAgIHJldHVybiBbe30sIHpvbmUsIGN1cnNvciArIDNdOwogIH0KCiAgZnVuY3Rpb24gZXh0cmFjdElBTkFab25lKG1hdGNoLCBjdXJzb3IpIHsKICAgIGNvbnN0IHpvbmUgPSBtYXRjaFtjdXJzb3JdID8gSUFOQVpvbmUuY3JlYXRlKG1hdGNoW2N1cnNvcl0pIDogbnVsbDsKICAgIHJldHVybiBbe30sIHpvbmUsIGN1cnNvciArIDFdOwogIH0KCiAgLy8gSVNPIHRpbWUgcGFyc2luZwoKICBjb25zdCBpc29UaW1lT25seSA9IFJlZ0V4cChgXlQ/JHtpc29UaW1lQmFzZVJlZ2V4LnNvdXJjZX0kYCk7CgogIC8vIElTTyBkdXJhdGlvbiBwYXJzaW5nCgogIGNvbnN0IGlzb0R1cmF0aW9uID0KICAgIC9eLT9QKD86KD86KC0/XGR7MSwyMH0oPzpcLlxkezEsMjB9KT8pWSk/KD86KC0/XGR7MSwyMH0oPzpcLlxkezEsMjB9KT8pTSk/KD86KC0/XGR7MSwyMH0oPzpcLlxkezEsMjB9KT8pVyk/KD86KC0/XGR7MSwyMH0oPzpcLlxkezEsMjB9KT8pRCk/KD86VCg/OigtP1xkezEsMjB9KD86XC5cZHsxLDIwfSk/KUgpPyg/OigtP1xkezEsMjB9KD86XC5cZHsxLDIwfSk/KU0pPyg/OigtP1xkezEsMjB9KSg/OlsuLF0oLT9cZHsxLDIwfSkpP1MpPyk/KSQvOwoKICBmdW5jdGlvbiBleHRyYWN0SVNPRHVyYXRpb24obWF0Y2gpIHsKICAgIGNvbnN0IFtzLCB5ZWFyU3RyLCBtb250aFN0ciwgd2Vla1N0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0ciwgbWlsbGlzZWNvbmRzU3RyXSA9CiAgICAgIG1hdGNoOwoKICAgIGNvbnN0IGhhc05lZ2F0aXZlUHJlZml4ID0gc1swXSA9PT0gIi0iOwogICAgY29uc3QgbmVnYXRpdmVTZWNvbmRzID0gc2Vjb25kU3RyICYmIHNlY29uZFN0clswXSA9PT0gIi0iOwoKICAgIGNvbnN0IG1heWJlTmVnYXRlID0gKG51bSwgZm9yY2UgPSBmYWxzZSkgPT4KICAgICAgbnVtICE9PSB1bmRlZmluZWQgJiYgKGZvcmNlIHx8IChudW0gJiYgaGFzTmVnYXRpdmVQcmVmaXgpKSA/IC1udW0gOiBudW07CgogICAgcmV0dXJuIFsKICAgICAgewogICAgICAgIHllYXJzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHllYXJTdHIpKSwKICAgICAgICBtb250aHM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcobW9udGhTdHIpKSwKICAgICAgICB3ZWVrczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyh3ZWVrU3RyKSksCiAgICAgICAgZGF5czogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhkYXlTdHIpKSwKICAgICAgICBob3VyczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhob3VyU3RyKSksCiAgICAgICAgbWludXRlczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhtaW51dGVTdHIpKSwKICAgICAgICBzZWNvbmRzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHNlY29uZFN0ciksIHNlY29uZFN0ciA9PT0gIi0wIiksCiAgICAgICAgbWlsbGlzZWNvbmRzOiBtYXliZU5lZ2F0ZShwYXJzZU1pbGxpcyhtaWxsaXNlY29uZHNTdHIpLCBuZWdhdGl2ZVNlY29uZHMpLAogICAgICB9LAogICAgXTsKICB9CgogIC8vIFRoZXNlIGFyZSBhIGxpdHRsZSBicmFpbmRlYWQuIEVEVCAqc2hvdWxkKiB0ZWxsIHVzIHRoYXQgd2UncmUgaW4sIHNheSwgQW1lcmljYS9OZXdfWW9yawogIC8vIGFuZCBub3QganVzdCB0aGF0IHdlJ3JlIGluIC0yNDAgKnJpZ2h0IG5vdyouIEJ1dCBzaW5jZSBJIGRvbid0IHRoaW5rIHRoZXNlIGFyZSB1c2VkIHRoYXQgb2Z0ZW4KICAvLyBJJ20ganVzdCBnb2luZyB0byBpZ25vcmUgdGhhdAogIGNvbnN0IG9ic09mZnNldHMgPSB7CiAgICBHTVQ6IDAsCiAgICBFRFQ6IC00ICogNjAsCiAgICBFU1Q6IC01ICogNjAsCiAgICBDRFQ6IC01ICogNjAsCiAgICBDU1Q6IC02ICogNjAsCiAgICBNRFQ6IC02ICogNjAsCiAgICBNU1Q6IC03ICogNjAsCiAgICBQRFQ6IC03ICogNjAsCiAgICBQU1Q6IC04ICogNjAsCiAgfTsKCiAgZnVuY3Rpb24gZnJvbVN0cmluZ3Mod2Vla2RheVN0ciwgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpIHsKICAgIGNvbnN0IHJlc3VsdCA9IHsKICAgICAgeWVhcjogeWVhclN0ci5sZW5ndGggPT09IDIgPyB1bnRydW5jYXRlWWVhcihwYXJzZUludGVnZXIoeWVhclN0cikpIDogcGFyc2VJbnRlZ2VyKHllYXJTdHIpLAogICAgICBtb250aDogbW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0cikgKyAxLAogICAgICBkYXk6IHBhcnNlSW50ZWdlcihkYXlTdHIpLAogICAgICBob3VyOiBwYXJzZUludGVnZXIoaG91clN0ciksCiAgICAgIG1pbnV0ZTogcGFyc2VJbnRlZ2VyKG1pbnV0ZVN0ciksCiAgICB9OwoKICAgIGlmIChzZWNvbmRTdHIpIHJlc3VsdC5zZWNvbmQgPSBwYXJzZUludGVnZXIoc2Vjb25kU3RyKTsKICAgIGlmICh3ZWVrZGF5U3RyKSB7CiAgICAgIHJlc3VsdC53ZWVrZGF5ID0KICAgICAgICB3ZWVrZGF5U3RyLmxlbmd0aCA+IDMKICAgICAgICAgID8gd2Vla2RheXNMb25nLmluZGV4T2Yod2Vla2RheVN0cikgKyAxCiAgICAgICAgICA6IHdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSArIDE7CiAgICB9CgogICAgcmV0dXJuIHJlc3VsdDsKICB9CgogIC8vIFJGQyAyODIyLzUzMjIKICBjb25zdCByZmMyODIyID0KICAgIC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksXHMpPyhcZHsxLDJ9KVxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxzKFxkezIsNH0pXHMoXGRcZCk6KFxkXGQpKD86OihcZFxkKSk/XHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KD86KFsrLV1cZFxkKShcZFxkKSkpJC87CgogIGZ1bmN0aW9uIGV4dHJhY3RSRkMyODIyKG1hdGNoKSB7CiAgICBjb25zdCBbCiAgICAgICAgLAogICAgICAgIHdlZWtkYXlTdHIsCiAgICAgICAgZGF5U3RyLAogICAgICAgIG1vbnRoU3RyLAogICAgICAgIHllYXJTdHIsCiAgICAgICAgaG91clN0ciwKICAgICAgICBtaW51dGVTdHIsCiAgICAgICAgc2Vjb25kU3RyLAogICAgICAgIG9ic09mZnNldCwKICAgICAgICBtaWxPZmZzZXQsCiAgICAgICAgb2ZmSG91clN0ciwKICAgICAgICBvZmZNaW51dGVTdHIsCiAgICAgIF0gPSBtYXRjaCwKICAgICAgcmVzdWx0ID0gZnJvbVN0cmluZ3Mod2Vla2RheVN0ciwgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpOwoKICAgIGxldCBvZmZzZXQ7CiAgICBpZiAob2JzT2Zmc2V0KSB7CiAgICAgIG9mZnNldCA9IG9ic09mZnNldHNbb2JzT2Zmc2V0XTsKICAgIH0gZWxzZSBpZiAobWlsT2Zmc2V0KSB7CiAgICAgIG9mZnNldCA9IDA7CiAgICB9IGVsc2UgewogICAgICBvZmZzZXQgPSBzaWduZWRPZmZzZXQob2ZmSG91clN0ciwgb2ZmTWludXRlU3RyKTsKICAgIH0KCiAgICByZXR1cm4gW3Jlc3VsdCwgbmV3IEZpeGVkT2Zmc2V0Wm9uZShvZmZzZXQpXTsKICB9CgogIGZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHsKICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlCiAgICByZXR1cm4gcwogICAgICAucmVwbGFjZSgvXChbXildKlwpfFtcblx0XS9nLCAiICIpCiAgICAgIC5yZXBsYWNlKC8oXHNccyspL2csICIgIikKICAgICAgLnRyaW0oKTsKICB9CgogIC8vIGh0dHAgZGF0ZQoKICBjb25zdCByZmMxMTIzID0KICAgICAgL14oTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSwgKFxkXGQpIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKFxkezR9KSAoXGRcZCk6KFxkXGQpOihcZFxkKSBHTVQkLywKICAgIHJmYzg1MCA9CiAgICAgIC9eKE1vbmRheXxUdWVzZGF5fFdlZG5lc2RheXxUaHVyc2RheXxGcmlkYXl8U2F0dXJkYXl8U3VuZGF5KSwgKFxkXGQpLShKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYyktKFxkXGQpIChcZFxkKTooXGRcZCk6KFxkXGQpIEdNVCQvLAogICAgYXNjaWkgPQogICAgICAvXihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKCBcZHxcZFxkKSAoXGRcZCk6KFxkXGQpOihcZFxkKSAoXGR7NH0pJC87CgogIGZ1bmN0aW9uIGV4dHJhY3RSRkMxMTIzT3I4NTAobWF0Y2gpIHsKICAgIGNvbnN0IFssIHdlZWtkYXlTdHIsIGRheVN0ciwgbW9udGhTdHIsIHllYXJTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyXSA9IG1hdGNoLAogICAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7CiAgICByZXR1cm4gW3Jlc3VsdCwgRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlXTsKICB9CgogIGZ1bmN0aW9uIGV4dHJhY3RBU0NJSShtYXRjaCkgewogICAgY29uc3QgWywgd2Vla2RheVN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIsIHllYXJTdHJdID0gbWF0Y2gsCiAgICAgIHJlc3VsdCA9IGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKTsKICAgIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdOwogIH0KCiAgY29uc3QgaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb1ltZFJlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpOwogIGNvbnN0IGlzb1dlZWtXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvV2Vla1JlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpOwogIGNvbnN0IGlzb09yZGluYWxXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvT3JkaW5hbFJlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpOwogIGNvbnN0IGlzb1RpbWVDb21iaW5lZFJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvVGltZVJlZ2V4KTsKCiAgY29uc3QgZXh0cmFjdElTT1ltZFRpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycygKICAgIGV4dHJhY3RJU09ZbWQsCiAgICBleHRyYWN0SVNPVGltZSwKICAgIGV4dHJhY3RJU09PZmZzZXQsCiAgICBleHRyYWN0SUFOQVpvbmUKICApOwogIGNvbnN0IGV4dHJhY3RJU09XZWVrVGltZUFuZE9mZnNldCA9IGNvbWJpbmVFeHRyYWN0b3JzKAogICAgZXh0cmFjdElTT1dlZWtEYXRhLAogICAgZXh0cmFjdElTT1RpbWUsCiAgICBleHRyYWN0SVNPT2Zmc2V0LAogICAgZXh0cmFjdElBTkFab25lCiAgKTsKICBjb25zdCBleHRyYWN0SVNPT3JkaW5hbERhdGVBbmRUaW1lID0gY29tYmluZUV4dHJhY3RvcnMoCiAgICBleHRyYWN0SVNPT3JkaW5hbERhdGEsCiAgICBleHRyYWN0SVNPVGltZSwKICAgIGV4dHJhY3RJU09PZmZzZXQsCiAgICBleHRyYWN0SUFOQVpvbmUKICApOwogIGNvbnN0IGV4dHJhY3RJU09UaW1lQW5kT2Zmc2V0ID0gY29tYmluZUV4dHJhY3RvcnMoCiAgICBleHRyYWN0SVNPVGltZSwKICAgIGV4dHJhY3RJU09PZmZzZXQsCiAgICBleHRyYWN0SUFOQVpvbmUKICApOwoKICAvKgogICAqIEBwcml2YXRlCiAgICovCgogIGZ1bmN0aW9uIHBhcnNlSVNPRGF0ZShzKSB7CiAgICByZXR1cm4gcGFyc2UkMSgKICAgICAgcywKICAgICAgW2lzb1ltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09ZbWRUaW1lQW5kT2Zmc2V0XSwKICAgICAgW2lzb1dlZWtXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPV2Vla1RpbWVBbmRPZmZzZXRdLAogICAgICBbaXNvT3JkaW5hbFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09PcmRpbmFsRGF0ZUFuZFRpbWVdLAogICAgICBbaXNvVGltZUNvbWJpbmVkUmVnZXgsIGV4dHJhY3RJU09UaW1lQW5kT2Zmc2V0XQogICAgKTsKICB9CgogIGZ1bmN0aW9uIHBhcnNlUkZDMjgyMkRhdGUocykgewogICAgcmV0dXJuIHBhcnNlJDEocHJlcHJvY2Vzc1JGQzI4MjIocyksIFtyZmMyODIyLCBleHRyYWN0UkZDMjgyMl0pOwogIH0KCiAgZnVuY3Rpb24gcGFyc2VIVFRQRGF0ZShzKSB7CiAgICByZXR1cm4gcGFyc2UkMSgKICAgICAgcywKICAgICAgW3JmYzExMjMsIGV4dHJhY3RSRkMxMTIzT3I4NTBdLAogICAgICBbcmZjODUwLCBleHRyYWN0UkZDMTEyM09yODUwXSwKICAgICAgW2FzY2lpLCBleHRyYWN0QVNDSUldCiAgICApOwogIH0KCiAgZnVuY3Rpb24gcGFyc2VJU09EdXJhdGlvbihzKSB7CiAgICByZXR1cm4gcGFyc2UkMShzLCBbaXNvRHVyYXRpb24sIGV4dHJhY3RJU09EdXJhdGlvbl0pOwogIH0KCiAgY29uc3QgZXh0cmFjdElTT1RpbWVPbmx5ID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1RpbWUpOwoKICBmdW5jdGlvbiBwYXJzZUlTT1RpbWVPbmx5KHMpIHsKICAgIHJldHVybiBwYXJzZSQxKHMsIFtpc29UaW1lT25seSwgZXh0cmFjdElTT1RpbWVPbmx5XSk7CiAgfQoKICBjb25zdCBzcWxZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoc3FsWW1kUmVnZXgsIHNxbFRpbWVFeHRlbnNpb25SZWdleCk7CiAgY29uc3Qgc3FsVGltZUNvbWJpbmVkUmVnZXggPSBjb21iaW5lUmVnZXhlcyhzcWxUaW1lUmVnZXgpOwoKICBjb25zdCBleHRyYWN0SVNPVGltZU9mZnNldEFuZElBTkFab25lID0gY29tYmluZUV4dHJhY3RvcnMoCiAgICBleHRyYWN0SVNPVGltZSwKICAgIGV4dHJhY3RJU09PZmZzZXQsCiAgICBleHRyYWN0SUFOQVpvbmUKICApOwoKICBmdW5jdGlvbiBwYXJzZVNRTChzKSB7CiAgICByZXR1cm4gcGFyc2UkMSgKICAgICAgcywKICAgICAgW3NxbFltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09ZbWRUaW1lQW5kT2Zmc2V0XSwKICAgICAgW3NxbFRpbWVDb21iaW5lZFJlZ2V4LCBleHRyYWN0SVNPVGltZU9mZnNldEFuZElBTkFab25lXQogICAgKTsKICB9CgogIGNvbnN0IElOVkFMSUQkMyA9ICJJbnZhbGlkIER1cmF0aW9uIjsKCiAgLy8gdW5pdCBjb252ZXJzaW9uIGNvbnN0YW50cwogIGNvbnN0IGxvd09yZGVyTWF0cml4ID0gewogICAgICB3ZWVrczogewogICAgICAgIGRheXM6IDcsCiAgICAgICAgaG91cnM6IDcgKiAyNCwKICAgICAgICBtaW51dGVzOiA3ICogMjQgKiA2MCwKICAgICAgICBzZWNvbmRzOiA3ICogMjQgKiA2MCAqIDYwLAogICAgICAgIG1pbGxpc2Vjb25kczogNyAqIDI0ICogNjAgKiA2MCAqIDEwMDAsCiAgICAgIH0sCiAgICAgIGRheXM6IHsKICAgICAgICBob3VyczogMjQsCiAgICAgICAgbWludXRlczogMjQgKiA2MCwKICAgICAgICBzZWNvbmRzOiAyNCAqIDYwICogNjAsCiAgICAgICAgbWlsbGlzZWNvbmRzOiAyNCAqIDYwICogNjAgKiAxMDAwLAogICAgICB9LAogICAgICBob3VyczogeyBtaW51dGVzOiA2MCwgc2Vjb25kczogNjAgKiA2MCwgbWlsbGlzZWNvbmRzOiA2MCAqIDYwICogMTAwMCB9LAogICAgICBtaW51dGVzOiB7IHNlY29uZHM6IDYwLCBtaWxsaXNlY29uZHM6IDYwICogMTAwMCB9LAogICAgICBzZWNvbmRzOiB7IG1pbGxpc2Vjb25kczogMTAwMCB9LAogICAgfSwKICAgIGNhc3VhbE1hdHJpeCA9IHsKICAgICAgeWVhcnM6IHsKICAgICAgICBxdWFydGVyczogNCwKICAgICAgICBtb250aHM6IDEyLAogICAgICAgIHdlZWtzOiA1MiwKICAgICAgICBkYXlzOiAzNjUsCiAgICAgICAgaG91cnM6IDM2NSAqIDI0LAogICAgICAgIG1pbnV0ZXM6IDM2NSAqIDI0ICogNjAsCiAgICAgICAgc2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwLAogICAgICAgIG1pbGxpc2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMCwKICAgICAgfSwKICAgICAgcXVhcnRlcnM6IHsKICAgICAgICBtb250aHM6IDMsCiAgICAgICAgd2Vla3M6IDEzLAogICAgICAgIGRheXM6IDkxLAogICAgICAgIGhvdXJzOiA5MSAqIDI0LAogICAgICAgIG1pbnV0ZXM6IDkxICogMjQgKiA2MCwKICAgICAgICBzZWNvbmRzOiA5MSAqIDI0ICogNjAgKiA2MCwKICAgICAgICBtaWxsaXNlY29uZHM6IDkxICogMjQgKiA2MCAqIDYwICogMTAwMCwKICAgICAgfSwKICAgICAgbW9udGhzOiB7CiAgICAgICAgd2Vla3M6IDQsCiAgICAgICAgZGF5czogMzAsCiAgICAgICAgaG91cnM6IDMwICogMjQsCiAgICAgICAgbWludXRlczogMzAgKiAyNCAqIDYwLAogICAgICAgIHNlY29uZHM6IDMwICogMjQgKiA2MCAqIDYwLAogICAgICAgIG1pbGxpc2Vjb25kczogMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwLAogICAgICB9LAoKICAgICAgLi4ubG93T3JkZXJNYXRyaXgsCiAgICB9LAogICAgZGF5c0luWWVhckFjY3VyYXRlID0gMTQ2MDk3LjAgLyA0MDAsCiAgICBkYXlzSW5Nb250aEFjY3VyYXRlID0gMTQ2MDk3LjAgLyA0ODAwLAogICAgYWNjdXJhdGVNYXRyaXggPSB7CiAgICAgIHllYXJzOiB7CiAgICAgICAgcXVhcnRlcnM6IDQsCiAgICAgICAgbW9udGhzOiAxMiwKICAgICAgICB3ZWVrczogZGF5c0luWWVhckFjY3VyYXRlIC8gNywKICAgICAgICBkYXlzOiBkYXlzSW5ZZWFyQWNjdXJhdGUsCiAgICAgICAgaG91cnM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0LAogICAgICAgIG1pbnV0ZXM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAsCiAgICAgICAgc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwLAogICAgICAgIG1pbGxpc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwICogMTAwMCwKICAgICAgfSwKICAgICAgcXVhcnRlcnM6IHsKICAgICAgICBtb250aHM6IDMsCiAgICAgICAgd2Vla3M6IGRheXNJblllYXJBY2N1cmF0ZSAvIDI4LAogICAgICAgIGRheXM6IGRheXNJblllYXJBY2N1cmF0ZSAvIDQsCiAgICAgICAgaG91cnM6IChkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCkgLyA0LAogICAgICAgIG1pbnV0ZXM6IChkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwKSAvIDQsCiAgICAgICAgc2Vjb25kczogKGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCkgLyA0LAogICAgICAgIG1pbGxpc2Vjb25kczogKGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDApIC8gNCwKICAgICAgfSwKICAgICAgbW9udGhzOiB7CiAgICAgICAgd2Vla3M6IGRheXNJbk1vbnRoQWNjdXJhdGUgLyA3LAogICAgICAgIGRheXM6IGRheXNJbk1vbnRoQWNjdXJhdGUsCiAgICAgICAgaG91cnM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCwKICAgICAgICBtaW51dGVzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCwKICAgICAgICBzZWNvbmRzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCAqIDYwLAogICAgICAgIG1pbGxpc2Vjb25kczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDAsCiAgICAgIH0sCiAgICAgIC4uLmxvd09yZGVyTWF0cml4LAogICAgfTsKCiAgLy8gdW5pdHMgb3JkZXJlZCBieSBzaXplCiAgY29uc3Qgb3JkZXJlZFVuaXRzJDEgPSBbCiAgICAieWVhcnMiLAogICAgInF1YXJ0ZXJzIiwKICAgICJtb250aHMiLAogICAgIndlZWtzIiwKICAgICJkYXlzIiwKICAgICJob3VycyIsCiAgICAibWludXRlcyIsCiAgICAic2Vjb25kcyIsCiAgICAibWlsbGlzZWNvbmRzIiwKICBdOwoKICBjb25zdCByZXZlcnNlVW5pdHMgPSBvcmRlcmVkVW5pdHMkMS5zbGljZSgwKS5yZXZlcnNlKCk7CgogIC8vIGNsb25lIHJlYWxseSBtZWFucyAiY3JlYXRlIGFub3RoZXIgaW5zdGFuY2UganVzdCBsaWtlIHRoaXMgb25lLCBidXQgd2l0aCB0aGVzZSBjaGFuZ2VzIgogIGZ1bmN0aW9uIGNsb25lJDIoZHVyLCBhbHRzLCBjbGVhciA9IGZhbHNlKSB7CiAgICAvLyBkZWVwIG1lcmdlIGZvciB2YWxzCiAgICBjb25zdCBjb25mID0gewogICAgICB2YWx1ZXM6IGNsZWFyID8gYWx0cy52YWx1ZXMgOiB7IC4uLmR1ci52YWx1ZXMsIC4uLihhbHRzLnZhbHVlcyB8fCB7fSkgfSwKICAgICAgbG9jOiBkdXIubG9jLmNsb25lKGFsdHMubG9jKSwKICAgICAgY29udmVyc2lvbkFjY3VyYWN5OiBhbHRzLmNvbnZlcnNpb25BY2N1cmFjeSB8fCBkdXIuY29udmVyc2lvbkFjY3VyYWN5LAogICAgICBtYXRyaXg6IGFsdHMubWF0cml4IHx8IGR1ci5tYXRyaXgsCiAgICB9OwogICAgcmV0dXJuIG5ldyBEdXJhdGlvbihjb25mKTsKICB9CgogIGZ1bmN0aW9uIGFudGlUcnVuYyhuKSB7CiAgICByZXR1cm4gbiA8IDAgPyBNYXRoLmZsb29yKG4pIDogTWF0aC5jZWlsKG4pOwogIH0KCiAgLy8gTkI6IG11dGF0ZXMgcGFyYW1ldGVycwogIGZ1bmN0aW9uIGNvbnZlcnQobWF0cml4LCBmcm9tTWFwLCBmcm9tVW5pdCwgdG9NYXAsIHRvVW5pdCkgewogICAgY29uc3QgY29udiA9IG1hdHJpeFt0b1VuaXRdW2Zyb21Vbml0XSwKICAgICAgcmF3ID0gZnJvbU1hcFtmcm9tVW5pdF0gLyBjb252LAogICAgICBzYW1lU2lnbiA9IE1hdGguc2lnbihyYXcpID09PSBNYXRoLnNpZ24odG9NYXBbdG9Vbml0XSksCiAgICAgIC8vIG9rLCBzbyB0aGlzIGlzIHdpbGQsIGJ1dCBzZWUgdGhlIG1hdHJpeCBpbiB0aGUgdGVzdHMKICAgICAgYWRkZWQgPQogICAgICAgICFzYW1lU2lnbiAmJiB0b01hcFt0b1VuaXRdICE9PSAwICYmIE1hdGguYWJzKHJhdykgPD0gMSA/IGFudGlUcnVuYyhyYXcpIDogTWF0aC50cnVuYyhyYXcpOwogICAgdG9NYXBbdG9Vbml0XSArPSBhZGRlZDsKICAgIGZyb21NYXBbZnJvbVVuaXRdIC09IGFkZGVkICogY29udjsKICB9CgogIC8vIE5COiBtdXRhdGVzIHBhcmFtZXRlcnMKICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZXMobWF0cml4LCB2YWxzKSB7CiAgICByZXZlcnNlVW5pdHMucmVkdWNlKChwcmV2aW91cywgY3VycmVudCkgPT4gewogICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbHNbY3VycmVudF0pKSB7CiAgICAgICAgaWYgKHByZXZpb3VzKSB7CiAgICAgICAgICBjb252ZXJ0KG1hdHJpeCwgdmFscywgcHJldmlvdXMsIHZhbHMsIGN1cnJlbnQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY3VycmVudDsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gcHJldmlvdXM7CiAgICAgIH0KICAgIH0sIG51bGwpOwogIH0KCiAgLyoqCiAgICogQSBEdXJhdGlvbiBvYmplY3QgcmVwcmVzZW50cyBhIHBlcmlvZCBvZiB0aW1lLCBsaWtlICIyIG1vbnRocyIgb3IgIjEgZGF5LCAxIGhvdXIiLiBDb25jZXB0dWFsbHksIGl0J3MganVzdCBhIG1hcCBvZiB1bml0cyB0byB0aGVpciBxdWFudGl0aWVzLCBhY2NvbXBhbmllZCBieSBzb21lIGFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBhbmQgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS4gVGhleSBjYW4gYmUgdXNlZCBvbiB0aGVpciBvd24gb3IgaW4gY29uanVuY3Rpb24gd2l0aCBvdGhlciBMdXhvbiB0eXBlczsgZm9yIGV4YW1wbGUsIHlvdSBjYW4gdXNlIHtAbGluayBEYXRlVGltZSNwbHVzfSB0byBhZGQgYSBEdXJhdGlvbiBvYmplY3QgdG8gYSBEYXRlVGltZSwgcHJvZHVjaW5nIGFub3RoZXIgRGF0ZVRpbWUuCiAgICoKICAgKiBIZXJlIGlzIGEgYnJpZWYgb3ZlcnZpZXcgb2YgY29tbW9ubHkgdXNlZCBtZXRob2RzIGFuZCBnZXR0ZXJzIGluIER1cmF0aW9uOgogICAqCiAgICogKiAqKkNyZWF0aW9uKiogVG8gY3JlYXRlIGEgRHVyYXRpb24sIHVzZSB7QGxpbmsgRHVyYXRpb24uZnJvbU1pbGxpc30sIHtAbGluayBEdXJhdGlvbi5mcm9tT2JqZWN0fSwgb3Ige0BsaW5rIER1cmF0aW9uLmZyb21JU099LgogICAqICogKipVbml0IHZhbHVlcyoqIFNlZSB0aGUge0BsaW5rIER1cmF0aW9uI3llYXJzfSwge0BsaW5rIER1cmF0aW9uI21vbnRoc30sIHtAbGluayBEdXJhdGlvbiN3ZWVrc30sIHtAbGluayBEdXJhdGlvbiNkYXlzfSwge0BsaW5rIER1cmF0aW9uI2hvdXJzfSwge0BsaW5rIER1cmF0aW9uI21pbnV0ZXN9LCB7QGxpbmsgRHVyYXRpb24jc2Vjb25kc30sIHtAbGluayBEdXJhdGlvbiNtaWxsaXNlY29uZHN9IGFjY2Vzc29ycy4KICAgKiAqICoqQ29uZmlndXJhdGlvbioqIFNlZSAge0BsaW5rIER1cmF0aW9uI2xvY2FsZX0gYW5kIHtAbGluayBEdXJhdGlvbiNudW1iZXJpbmdTeXN0ZW19IGFjY2Vzc29ycy4KICAgKiAqICoqVHJhbnNmb3JtYXRpb24qKiBUbyBjcmVhdGUgbmV3IER1cmF0aW9ucyBvdXQgb2Ygb2xkIG9uZXMgdXNlIHtAbGluayBEdXJhdGlvbiNwbHVzfSwge0BsaW5rIER1cmF0aW9uI21pbnVzfSwge0BsaW5rIER1cmF0aW9uI25vcm1hbGl6ZX0sIHtAbGluayBEdXJhdGlvbiNzZXR9LCB7QGxpbmsgRHVyYXRpb24jcmVjb25maWd1cmV9LCB7QGxpbmsgRHVyYXRpb24jc2hpZnRUb30sIGFuZCB7QGxpbmsgRHVyYXRpb24jbmVnYXRlfS4KICAgKiAqICoqT3V0cHV0KiogVG8gY29udmVydCB0aGUgRHVyYXRpb24gaW50byBvdGhlciByZXByZXNlbnRhdGlvbnMsIHNlZSB7QGxpbmsgRHVyYXRpb24jYXN9LCB7QGxpbmsgRHVyYXRpb24jdG9JU099LCB7QGxpbmsgRHVyYXRpb24jdG9Gb3JtYXR9LCBhbmQge0BsaW5rIER1cmF0aW9uI3RvSlNPTn0KICAgKgogICAqIFRoZXJlJ3MgYXJlIG1vcmUgbWV0aG9kcyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiBhbmQgdmFsaWRpdHksIHNlZSB0aGUgZXh0ZXJuYWwgZG9jdW1lbnRhdGlvbi4KICAgKi8KICBjbGFzcyBEdXJhdGlvbiB7CiAgICAvKioKICAgICAqIEBwcml2YXRlCiAgICAgKi8KICAgIGNvbnN0cnVjdG9yKGNvbmZpZykgewogICAgICBjb25zdCBhY2N1cmF0ZSA9IGNvbmZpZy5jb252ZXJzaW9uQWNjdXJhY3kgPT09ICJsb25ndGVybSIgfHwgZmFsc2U7CiAgICAgIGxldCBtYXRyaXggPSBhY2N1cmF0ZSA/IGFjY3VyYXRlTWF0cml4IDogY2FzdWFsTWF0cml4OwoKICAgICAgaWYgKGNvbmZpZy5tYXRyaXgpIHsKICAgICAgICBtYXRyaXggPSBjb25maWcubWF0cml4OwogICAgICB9CgogICAgICAvKioKICAgICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgICAqLwogICAgICB0aGlzLnZhbHVlcyA9IGNvbmZpZy52YWx1ZXM7CiAgICAgIC8qKgogICAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAgICovCiAgICAgIHRoaXMubG9jID0gY29uZmlnLmxvYyB8fCBMb2NhbGUuY3JlYXRlKCk7CiAgICAgIC8qKgogICAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAgICovCiAgICAgIHRoaXMuY29udmVyc2lvbkFjY3VyYWN5ID0gYWNjdXJhdGUgPyAibG9uZ3Rlcm0iIDogImNhc3VhbCI7CiAgICAgIC8qKgogICAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAgICovCiAgICAgIHRoaXMuaW52YWxpZCA9IGNvbmZpZy5pbnZhbGlkIHx8IG51bGw7CiAgICAgIC8qKgogICAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAgICovCiAgICAgIHRoaXMubWF0cml4ID0gbWF0cml4OwogICAgICAvKioKICAgICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgICAqLwogICAgICB0aGlzLmlzTHV4b25EdXJhdGlvbiA9IHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGUgRHVyYXRpb24gZnJvbSBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gY291bnQgb2YgbWlsbGlzZWNvbmRzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIHBhcnNpbmcKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSB0aGUgbG9jYWxlIHRvIHVzZQogICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2UKICAgICAqIEByZXR1cm4ge0R1cmF0aW9ufQogICAgICovCiAgICBzdGF0aWMgZnJvbU1pbGxpcyhjb3VudCwgb3B0cykgewogICAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbGxpc2Vjb25kczogY291bnQgfSwgb3B0cyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIGEgSmF2YVNjcmlwdCBvYmplY3Qgd2l0aCBrZXlzIGxpa2UgJ3llYXJzJyBhbmQgJ2hvdXJzJy4KICAgICAqIElmIHRoaXMgb2JqZWN0IGlzIGVtcHR5IHRoZW4gYSB6ZXJvIG1pbGxpc2Vjb25kcyBkdXJhdGlvbiBpcyByZXR1cm5lZC4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IHRvIGNyZWF0ZSB0aGUgRGF0ZVRpbWUgZnJvbQogICAgICogQHBhcmFtIHtudW1iZXJ9IG9iai55ZWFycwogICAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5xdWFydGVycwogICAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5tb250aHMKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla3MKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouZGF5cwogICAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5ob3VycwogICAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taW51dGVzCiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnNlY29uZHMKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWlsbGlzZWNvbmRzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9W11dIC0gb3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhpcyBEdXJhdGlvbgogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2UKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIHByZXNldCBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2UKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5tYXRyaXg9T2JqZWN0XSAtIHRoZSBjdXN0b20gY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlCiAgICAgKiBAcmV0dXJuIHtEdXJhdGlvbn0KICAgICAqLwogICAgc3RhdGljIGZyb21PYmplY3Qob2JqLCBvcHRzID0ge30pIHsKICAgICAgaWYgKG9iaiA9PSBudWxsIHx8IHR5cGVvZiBvYmogIT09ICJvYmplY3QiKSB7CiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKAogICAgICAgICAgYER1cmF0aW9uLmZyb21PYmplY3Q6IGFyZ3VtZW50IGV4cGVjdGVkIHRvIGJlIGFuIG9iamVjdCwgZ290ICR7CiAgICAgICAgICBvYmogPT09IG51bGwgPyAibnVsbCIgOiB0eXBlb2Ygb2JqCiAgICAgICAgfWAKICAgICAgICApOwogICAgICB9CgogICAgICByZXR1cm4gbmV3IER1cmF0aW9uKHsKICAgICAgICB2YWx1ZXM6IG5vcm1hbGl6ZU9iamVjdChvYmosIER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQpLAogICAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0cyksCiAgICAgICAgY29udmVyc2lvbkFjY3VyYWN5OiBvcHRzLmNvbnZlcnNpb25BY2N1cmFjeSwKICAgICAgICBtYXRyaXg6IG9wdHMubWF0cml4LAogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhIER1cmF0aW9uIGZyb20gRHVyYXRpb25MaWtlLgogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0IHwgbnVtYmVyIHwgRHVyYXRpb259IGR1cmF0aW9uTGlrZQogICAgICogT25lIG9mOgogICAgICogLSBvYmplY3Qgd2l0aCBrZXlzIGxpa2UgJ3llYXJzJyBhbmQgJ2hvdXJzJy4KICAgICAqIC0gbnVtYmVyIHJlcHJlc2VudGluZyBtaWxsaXNlY29uZHMKICAgICAqIC0gRHVyYXRpb24gaW5zdGFuY2UKICAgICAqIEByZXR1cm4ge0R1cmF0aW9ufQogICAgICovCiAgICBzdGF0aWMgZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbkxpa2UpIHsKICAgICAgaWYgKGlzTnVtYmVyJDEoZHVyYXRpb25MaWtlKSkgewogICAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tTWlsbGlzKGR1cmF0aW9uTGlrZSk7CiAgICAgIH0gZWxzZSBpZiAoRHVyYXRpb24uaXNEdXJhdGlvbihkdXJhdGlvbkxpa2UpKSB7CiAgICAgICAgcmV0dXJuIGR1cmF0aW9uTGlrZTsKICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb25MaWtlID09PSAib2JqZWN0IikgewogICAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KGR1cmF0aW9uTGlrZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKAogICAgICAgICAgYFVua25vd24gZHVyYXRpb24gYXJndW1lbnQgJHtkdXJhdGlvbkxpa2V9IG9mIHR5cGUgJHt0eXBlb2YgZHVyYXRpb25MaWtlfWAKICAgICAgICApOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIGFuIElTTyA4NjAxIGR1cmF0aW9uIHN0cmluZy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGV4dCB0byBwYXJzZQogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIGZvciBwYXJzaW5nCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2UKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgcHJlc2V0IGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm1hdHJpeD1PYmplY3RdIC0gdGhlIHByZXNldCBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2UKICAgICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjRHVyYXRpb25zCiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQM1k2TTFXNERUMTJIMzBNNVMnKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMywgbW9udGhzOiA2LCB3ZWVrczogMSwgZGF5czogNCwgaG91cnM6IDEyLCBtaW51dGVzOiAzMCwgc2Vjb25kczogNSB9CiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQVDIzSCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAyMyB9CiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQNVkzTScpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiA1LCBtb250aHM6IDMgfQogICAgICogQHJldHVybiB7RHVyYXRpb259CiAgICAgKi8KICAgIHN0YXRpYyBmcm9tSVNPKHRleHQsIG9wdHMpIHsKICAgICAgY29uc3QgW3BhcnNlZF0gPSBwYXJzZUlTT0R1cmF0aW9uKHRleHQpOwogICAgICBpZiAocGFyc2VkKSB7CiAgICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21PYmplY3QocGFyc2VkLCBvcHRzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZCgidW5wYXJzYWJsZSIsIGB0aGUgaW5wdXQgIiR7dGV4dH0iIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIGFuIElTTyA4NjAxIHRpbWUgc3RyaW5nLgogICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0ZXh0IHRvIHBhcnNlCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIHBhcnNpbmcKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSB0aGUgbG9jYWxlIHRvIHVzZQogICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBwcmVzZXQgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubWF0cml4PU9iamVjdF0gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlCiAgICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVzCiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnMTE6MjI6MzMuNDQ0JykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAyMiwgc2Vjb25kczogMzMsIG1pbGxpc2Vjb25kczogNDQ0IH0KICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCcxMTowMCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMCwgc2Vjb25kczogMCB9CiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnVDExOjAwJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwIH0KICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCcxMTAwJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwIH0KICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCdUMTEwMCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMCwgc2Vjb25kczogMCB9CiAgICAgKiBAcmV0dXJuIHtEdXJhdGlvbn0KICAgICAqLwogICAgc3RhdGljIGZyb21JU09UaW1lKHRleHQsIG9wdHMpIHsKICAgICAgY29uc3QgW3BhcnNlZF0gPSBwYXJzZUlTT1RpbWVPbmx5KHRleHQpOwogICAgICBpZiAocGFyc2VkKSB7CiAgICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21PYmplY3QocGFyc2VkLCBvcHRzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZCgidW5wYXJzYWJsZSIsIGB0aGUgaW5wdXQgIiR7dGV4dH0iIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYW4gaW52YWxpZCBEdXJhdGlvbi4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBzaW1wbGUgc3RyaW5nIG9mIHdoeSB0aGlzIGRhdGV0aW1lIGlzIGludmFsaWQuIFNob3VsZCBub3QgY29udGFpbiBwYXJhbWV0ZXJzIG9yIGFueXRoaW5nIGVsc2UgZGF0YS1kZXBlbmRlbnQKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbZXhwbGFuYXRpb249bnVsbF0gLSBsb25nZXIgZXhwbGFuYXRpb24sIG1heSBpbmNsdWRlIHBhcmFtZXRlcnMgYW5kIG90aGVyIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mb3JtYXRpb24KICAgICAqIEByZXR1cm4ge0R1cmF0aW9ufQogICAgICovCiAgICBzdGF0aWMgaW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uID0gbnVsbCkgewogICAgICBpZiAoIXJlYXNvbikgewogICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigibmVlZCB0byBzcGVjaWZ5IGEgcmVhc29uIHRoZSBEdXJhdGlvbiBpcyBpbnZhbGlkIik7CiAgICAgIH0KCiAgICAgIGNvbnN0IGludmFsaWQgPSByZWFzb24gaW5zdGFuY2VvZiBJbnZhbGlkID8gcmVhc29uIDogbmV3IEludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbik7CgogICAgICBpZiAoU2V0dGluZ3MudGhyb3dPbkludmFsaWQpIHsKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZER1cmF0aW9uRXJyb3IoaW52YWxpZCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG5ldyBEdXJhdGlvbih7IGludmFsaWQgfSk7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBwcml2YXRlCiAgICAgKi8KICAgIHN0YXRpYyBub3JtYWxpemVVbml0KHVuaXQpIHsKICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IHsKICAgICAgICB5ZWFyOiAieWVhcnMiLAogICAgICAgIHllYXJzOiAieWVhcnMiLAogICAgICAgIHF1YXJ0ZXI6ICJxdWFydGVycyIsCiAgICAgICAgcXVhcnRlcnM6ICJxdWFydGVycyIsCiAgICAgICAgbW9udGg6ICJtb250aHMiLAogICAgICAgIG1vbnRoczogIm1vbnRocyIsCiAgICAgICAgd2VlazogIndlZWtzIiwKICAgICAgICB3ZWVrczogIndlZWtzIiwKICAgICAgICBkYXk6ICJkYXlzIiwKICAgICAgICBkYXlzOiAiZGF5cyIsCiAgICAgICAgaG91cjogImhvdXJzIiwKICAgICAgICBob3VyczogImhvdXJzIiwKICAgICAgICBtaW51dGU6ICJtaW51dGVzIiwKICAgICAgICBtaW51dGVzOiAibWludXRlcyIsCiAgICAgICAgc2Vjb25kOiAic2Vjb25kcyIsCiAgICAgICAgc2Vjb25kczogInNlY29uZHMiLAogICAgICAgIG1pbGxpc2Vjb25kOiAibWlsbGlzZWNvbmRzIiwKICAgICAgICBtaWxsaXNlY29uZHM6ICJtaWxsaXNlY29uZHMiLAogICAgICB9W3VuaXQgPyB1bml0LnRvTG93ZXJDYXNlKCkgOiB1bml0XTsKCiAgICAgIGlmICghbm9ybWFsaXplZCkgdGhyb3cgbmV3IEludmFsaWRVbml0RXJyb3IodW5pdCk7CgogICAgICByZXR1cm4gbm9ybWFsaXplZDsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrIGlmIGFuIG9iamVjdCBpcyBhIER1cmF0aW9uLiBXb3JrcyBhY3Jvc3MgY29udGV4dCBib3VuZGFyaWVzCiAgICAgKiBAcGFyYW0ge29iamVjdH0gbwogICAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgICAqLwogICAgc3RhdGljIGlzRHVyYXRpb24obykgewogICAgICByZXR1cm4gKG8gJiYgby5pc0x1eG9uRHVyYXRpb24pIHx8IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogR2V0ICB0aGUgbG9jYWxlIG9mIGEgRHVyYXRpb24sIHN1Y2ggJ2VuLUdCJwogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgZ2V0IGxvY2FsZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLmxvY2FsZSA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEdXJhdGlvbiwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEdXJhdGlvbgogICAgICoKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKi8KICAgIGdldCBudW1iZXJpbmdTeXN0ZW0oKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW0gOiBudWxsOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQgc3RyaW5nLiBZb3UgbWF5IHVzZSB0aGVzZSB0b2tlbnM6CiAgICAgKiAqIGBTYCBmb3IgbWlsbGlzZWNvbmRzCiAgICAgKiAqIGBzYCBmb3Igc2Vjb25kcwogICAgICogKiBgbWAgZm9yIG1pbnV0ZXMKICAgICAqICogYGhgIGZvciBob3VycwogICAgICogKiBgZGAgZm9yIGRheXMKICAgICAqICogYHdgIGZvciB3ZWVrcwogICAgICogKiBgTWAgZm9yIG1vbnRocwogICAgICogKiBgeWAgZm9yIHllYXJzCiAgICAgKiBOb3RlczoKICAgICAqICogQWRkIHBhZGRpbmcgYnkgcmVwZWF0aW5nIHRoZSB0b2tlbiwgZS5nLiAieXkiIHBhZHMgdGhlIHllYXJzIHRvIHR3byBkaWdpdHMsICJoaGhoIiBwYWRzIHRoZSBob3VycyBvdXQgdG8gZm91ciBkaWdpdHMKICAgICAqICogVG9rZW5zIGNhbiBiZSBlc2NhcGVkIGJ5IHdyYXBwaW5nIHdpdGggc2luZ2xlIHF1b3Rlcy4KICAgICAqICogVGhlIGR1cmF0aW9uIHdpbGwgYmUgY29udmVydGVkIHRvIHRoZSBzZXQgb2YgdW5pdHMgaW4gdGhlIGZvcm1hdCBzdHJpbmcgdXNpbmcge0BsaW5rIER1cmF0aW9uI3NoaWZ0VG99IGFuZCB0aGUgRHVyYXRpb25zJ3MgY29udmVyc2lvbiBhY2N1cmFjeSBzZXR0aW5nLgogICAgICogQHBhcmFtIHtzdHJpbmd9IGZtdCAtIHRoZSBmb3JtYXQgc3RyaW5nCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMKICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZmxvb3I9dHJ1ZV0gLSBmbG9vciBudW1lcmljYWwgdmFsdWVzCiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9Gb3JtYXQoInkgZCBzIikgLy89PiAiMSA2IDIiCiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9Gb3JtYXQoInl5IGRkIHNzcyIpIC8vPT4gIjAxIDA2IDAwMiIKICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b0Zvcm1hdCgiTSBTIikgLy89PiAiMTIgNTE4NDAyMDAwIgogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b0Zvcm1hdChmbXQsIG9wdHMgPSB7fSkgewogICAgICAvLyByZXZlcnNlLWNvbXBhdCBzaW5jZSAxLjI7IHdlIGFsd2F5cyByb3VuZCBkb3duIG5vdywgbmV2ZXIgdXAsIGFuZCB3ZSBkbyBpdCBieSBkZWZhdWx0CiAgICAgIGNvbnN0IGZtdE9wdHMgPSB7CiAgICAgICAgLi4ub3B0cywKICAgICAgICBmbG9vcjogb3B0cy5yb3VuZCAhPT0gZmFsc2UgJiYgb3B0cy5mbG9vciAhPT0gZmFsc2UsCiAgICAgIH07CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQKICAgICAgICA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MsIGZtdE9wdHMpLmZvcm1hdER1cmF0aW9uRnJvbVN0cmluZyh0aGlzLCBmbXQpCiAgICAgICAgOiBJTlZBTElEJDM7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgRHVyYXRpb24gd2l0aCBhbGwgdW5pdHMgaW5jbHVkZWQuCiAgICAgKiBUbyBtb2RpZnkgaXRzIGJlaGF2aW9yIHVzZSB0aGUgYGxpc3RTdHlsZWAgYW5kIGFueSBJbnRsLk51bWJlckZvcm1hdCBvcHRpb24sIHRob3VnaCBgdW5pdERpc3BsYXlgIGlzIGVzcGVjaWFsbHkgcmVsZXZhbnQuCiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0ludGwvTnVtYmVyRm9ybWF0CiAgICAgKiBAcGFyYW0gb3B0cyAtIE9uIG9wdGlvbiBvYmplY3QgdG8gb3ZlcnJpZGUgdGhlIGZvcm1hdHRpbmcuIEFjY2VwdHMgdGhlIHNhbWUga2V5cyBhcyB0aGUgb3B0aW9ucyBwYXJhbWV0ZXIgb2YgdGhlIG5hdGl2ZSBgSW50Lk51bWJlckZvcm1hdGAgY29uc3RydWN0b3IsIGFzIHdlbGwgYXMgYGxpc3RTdHlsZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICogYGBganMKICAgICAqIHZhciBkdXIgPSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgZGF5czogMSwgaG91cnM6IDUsIG1pbnV0ZXM6IDYgfSkKICAgICAqIGR1ci50b0h1bWFuKCkgLy89PiAnMSBkYXksIDUgaG91cnMsIDYgbWludXRlcycKICAgICAqIGR1ci50b0h1bWFuKHsgbGlzdFN0eWxlOiAibG9uZyIgfSkgLy89PiAnMSBkYXksIDUgaG91cnMsIGFuZCA2IG1pbnV0ZXMnCiAgICAgKiBkdXIudG9IdW1hbih7IHVuaXREaXNwbGF5OiAic2hvcnQiIH0pIC8vPT4gJzEgZGF5LCA1IGhyLCA2IG1pbicKICAgICAqIGBgYAogICAgICovCiAgICB0b0h1bWFuKG9wdHMgPSB7fSkgewogICAgICBjb25zdCBsID0gb3JkZXJlZFVuaXRzJDEKICAgICAgICAubWFwKCh1bml0KSA9PiB7CiAgICAgICAgICBjb25zdCB2YWwgPSB0aGlzLnZhbHVlc1t1bml0XTsKICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWwpKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXMubG9jCiAgICAgICAgICAgIC5udW1iZXJGb3JtYXR0ZXIoeyBzdHlsZTogInVuaXQiLCB1bml0RGlzcGxheTogImxvbmciLCAuLi5vcHRzLCB1bml0OiB1bml0LnNsaWNlKDAsIC0xKSB9KQogICAgICAgICAgICAuZm9ybWF0KHZhbCk7CiAgICAgICAgfSkKICAgICAgICAuZmlsdGVyKChuKSA9PiBuKTsKCiAgICAgIHJldHVybiB0aGlzLmxvYwogICAgICAgIC5saXN0Rm9ybWF0dGVyKHsgdHlwZTogImNvbmp1bmN0aW9uIiwgc3R5bGU6IG9wdHMubGlzdFN0eWxlIHx8ICJuYXJyb3ciLCAuLi5vcHRzIH0pCiAgICAgICAgLmZvcm1hdChsKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIHRoaXMgRHVyYXRpb24ncyB2YWx1ZXMuCiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9PYmplY3QoKSAvLz0+IHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfQogICAgICogQHJldHVybiB7T2JqZWN0fQogICAgICovCiAgICB0b09iamVjdCgpIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB7fTsKICAgICAgcmV0dXJuIHsgLi4udGhpcy52YWx1ZXMgfTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uLgogICAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNEdXJhdGlvbnMKICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMywgc2Vjb25kczogNDUgfSkudG9JU08oKSAvLz0+ICdQM1lUNDVTJwogICAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1vbnRoczogNCwgc2Vjb25kczogNDUgfSkudG9JU08oKSAvLz0+ICdQNE1UNDVTJwogICAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1vbnRoczogNSB9KS50b0lTTygpIC8vPT4gJ1A1TScKICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtaW51dGVzOiA1IH0pLnRvSVNPKCkgLy89PiAnUFQ1TScKICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtaWxsaXNlY29uZHM6IDYgfSkudG9JU08oKSAvLz0+ICdQVDAuMDA2UycKICAgICAqIEByZXR1cm4ge3N0cmluZ30KICAgICAqLwogICAgdG9JU08oKSB7CiAgICAgIC8vIHdlIGNvdWxkIHVzZSB0aGUgZm9ybWF0dGVyLCBidXQgdGhpcyBpcyBhbiBlYXNpZXIgd2F5IHRvIGdldCB0aGUgbWluaW11bSBzdHJpbmcKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsOwoKICAgICAgbGV0IHMgPSAiUCI7CiAgICAgIGlmICh0aGlzLnllYXJzICE9PSAwKSBzICs9IHRoaXMueWVhcnMgKyAiWSI7CiAgICAgIGlmICh0aGlzLm1vbnRocyAhPT0gMCB8fCB0aGlzLnF1YXJ0ZXJzICE9PSAwKSBzICs9IHRoaXMubW9udGhzICsgdGhpcy5xdWFydGVycyAqIDMgKyAiTSI7CiAgICAgIGlmICh0aGlzLndlZWtzICE9PSAwKSBzICs9IHRoaXMud2Vla3MgKyAiVyI7CiAgICAgIGlmICh0aGlzLmRheXMgIT09IDApIHMgKz0gdGhpcy5kYXlzICsgIkQiOwogICAgICBpZiAodGhpcy5ob3VycyAhPT0gMCB8fCB0aGlzLm1pbnV0ZXMgIT09IDAgfHwgdGhpcy5zZWNvbmRzICE9PSAwIHx8IHRoaXMubWlsbGlzZWNvbmRzICE9PSAwKQogICAgICAgIHMgKz0gIlQiOwogICAgICBpZiAodGhpcy5ob3VycyAhPT0gMCkgcyArPSB0aGlzLmhvdXJzICsgIkgiOwogICAgICBpZiAodGhpcy5taW51dGVzICE9PSAwKSBzICs9IHRoaXMubWludXRlcyArICJNIjsKICAgICAgaWYgKHRoaXMuc2Vjb25kcyAhPT0gMCB8fCB0aGlzLm1pbGxpc2Vjb25kcyAhPT0gMCkKICAgICAgICAvLyB0aGlzIHdpbGwgaGFuZGxlICJmbG9hdGluZyBwb2ludCBtYWRuZXNzIiBieSByZW1vdmluZyBleHRyYSBkZWNpbWFsIHBsYWNlcwogICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU4ODAwNC9pcy1mbG9hdGluZy1wb2ludC1tYXRoLWJyb2tlbgogICAgICAgIHMgKz0gcm91bmRUbyh0aGlzLnNlY29uZHMgKyB0aGlzLm1pbGxpc2Vjb25kcyAvIDEwMDAsIDMpICsgIlMiOwogICAgICBpZiAocyA9PT0gIlAiKSBzICs9ICJUMFMiOwogICAgICByZXR1cm4gczsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uLCBmb3JtYXR0ZWQgYXMgYSB0aW1lIG9mIGRheS4KICAgICAqIE5vdGUgdGhhdCB0aGlzIHdpbGwgcmV0dXJuIG51bGwgaWYgdGhlIGR1cmF0aW9uIGlzIGludmFsaWQsIG5lZ2F0aXZlLCBvciBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gMjQgaG91cnMuCiAgICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMKICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMAogICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc1NlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDAKICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZVByZWZpeD1mYWxzZV0gLSBpbmNsdWRlIHRoZSBgVGAgcHJlZml4CiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXQKICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKCkgLy89PiAnMTE6MDA6MDAuMDAwJwogICAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoeyBzdXBwcmVzc01pbGxpc2Vjb25kczogdHJ1ZSB9KSAvLz0+ICcxMTowMDowMCcKICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKHsgc3VwcHJlc3NTZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzExOjAwJwogICAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoeyBpbmNsdWRlUHJlZml4OiB0cnVlIH0pIC8vPT4gJ1QxMTowMDowMC4wMDAnCiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcxMTAwMDAuMDAwJwogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b0lTT1RpbWUob3B0cyA9IHt9KSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gbnVsbDsKCiAgICAgIGNvbnN0IG1pbGxpcyA9IHRoaXMudG9NaWxsaXMoKTsKICAgICAgaWYgKG1pbGxpcyA8IDAgfHwgbWlsbGlzID49IDg2NDAwMDAwKSByZXR1cm4gbnVsbDsKCiAgICAgIG9wdHMgPSB7CiAgICAgICAgc3VwcHJlc3NNaWxsaXNlY29uZHM6IGZhbHNlLAogICAgICAgIHN1cHByZXNzU2Vjb25kczogZmFsc2UsCiAgICAgICAgaW5jbHVkZVByZWZpeDogZmFsc2UsCiAgICAgICAgZm9ybWF0OiAiZXh0ZW5kZWQiLAogICAgICAgIC4uLm9wdHMsCiAgICAgIH07CgogICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc2hpZnRUbygiaG91cnMiLCAibWludXRlcyIsICJzZWNvbmRzIiwgIm1pbGxpc2Vjb25kcyIpOwoKICAgICAgbGV0IGZtdCA9IG9wdHMuZm9ybWF0ID09PSAiYmFzaWMiID8gImhobW0iIDogImhoOm1tIjsKCiAgICAgIGlmICghb3B0cy5zdXBwcmVzc1NlY29uZHMgfHwgdmFsdWUuc2Vjb25kcyAhPT0gMCB8fCB2YWx1ZS5taWxsaXNlY29uZHMgIT09IDApIHsKICAgICAgICBmbXQgKz0gb3B0cy5mb3JtYXQgPT09ICJiYXNpYyIgPyAic3MiIDogIjpzcyI7CiAgICAgICAgaWYgKCFvcHRzLnN1cHByZXNzTWlsbGlzZWNvbmRzIHx8IHZhbHVlLm1pbGxpc2Vjb25kcyAhPT0gMCkgewogICAgICAgICAgZm10ICs9ICIuU1NTIjsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGxldCBzdHIgPSB2YWx1ZS50b0Zvcm1hdChmbXQpOwoKICAgICAgaWYgKG9wdHMuaW5jbHVkZVByZWZpeCkgewogICAgICAgIHN0ciA9ICJUIiArIHN0cjsKICAgICAgfQoKICAgICAgcmV0dXJuIHN0cjsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gSVNPIDg2MDEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbiBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIEpTT04uCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9CiAgICAgKi8KICAgIHRvSlNPTigpIHsKICAgICAgcmV0dXJuIHRoaXMudG9JU08oKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gSVNPIDg2MDEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbiBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIGRlYnVnZ2luZy4KICAgICAqIEByZXR1cm4ge3N0cmluZ30KICAgICAqLwogICAgdG9TdHJpbmcoKSB7CiAgICAgIHJldHVybiB0aGlzLnRvSVNPKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFuIG1pbGxpc2Vjb25kcyB2YWx1ZSBvZiB0aGlzIER1cmF0aW9uLgogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCiAgICB0b01pbGxpcygpIHsKICAgICAgcmV0dXJuIHRoaXMuYXMoIm1pbGxpc2Vjb25kcyIpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBhbiBtaWxsaXNlY29uZHMgdmFsdWUgb2YgdGhpcyBEdXJhdGlvbi4gQWxpYXMgb2Yge0BsaW5rIHRvTWlsbGlzfQogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCiAgICB2YWx1ZU9mKCkgewogICAgICByZXR1cm4gdGhpcy50b01pbGxpcygpOwogICAgfQoKICAgIC8qKgogICAgICogTWFrZSB0aGlzIER1cmF0aW9uIGxvbmdlciBieSB0aGUgc3BlY2lmaWVkIGFtb3VudC4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uCiAgICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBhZGQuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpCiAgICAgKiBAcmV0dXJuIHtEdXJhdGlvbn0KICAgICAqLwogICAgcGx1cyhkdXJhdGlvbikgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7CgogICAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKSwKICAgICAgICByZXN1bHQgPSB7fTsKCiAgICAgIGZvciAoY29uc3QgayBvZiBvcmRlcmVkVW5pdHMkMSkgewogICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShkdXIudmFsdWVzLCBrKSB8fCBoYXNPd25Qcm9wZXJ0eSh0aGlzLnZhbHVlcywgaykpIHsKICAgICAgICAgIHJlc3VsdFtrXSA9IGR1ci5nZXQoaykgKyB0aGlzLmdldChrKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBjbG9uZSQyKHRoaXMsIHsgdmFsdWVzOiByZXN1bHQgfSwgdHJ1ZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBNYWtlIHRoaXMgRHVyYXRpb24gc2hvcnRlciBieSB0aGUgc3BlY2lmaWVkIGFtb3VudC4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uCiAgICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBzdWJ0cmFjdC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KCkKICAgICAqIEByZXR1cm4ge0R1cmF0aW9ufQogICAgICovCiAgICBtaW51cyhkdXJhdGlvbikgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7CgogICAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKTsKICAgICAgcmV0dXJuIHRoaXMucGx1cyhkdXIubmVnYXRlKCkpOwogICAgfQoKICAgIC8qKgogICAgICogU2NhbGUgdGhpcyBEdXJhdGlvbiBieSB0aGUgc3BlY2lmaWVkIGFtb3VudC4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uCiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIHVuaXQuIEFyaXR5IGlzIDEgb3IgMjogdGhlIHZhbHVlIG9mIHRoZSB1bml0IGFuZCwgb3B0aW9uYWxseSwgdGhlIHVuaXQgbmFtZS4gTXVzdCByZXR1cm4gYSBudW1iZXIuCiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEsIG1pbnV0ZXM6IDMwIH0pLm1hcFVuaXRzKHggPT4geCAqIDIpIC8vPT4geyBob3VyczogMiwgbWludXRlczogNjAgfQogICAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBtaW51dGVzOiAzMCB9KS5tYXBVbml0cygoeCwgdSkgPT4gdSA9PT0gImhvdXJzIiA/IHggKiAyIDogeCkgLy89PiB7IGhvdXJzOiAyLCBtaW51dGVzOiAzMCB9CiAgICAgKiBAcmV0dXJuIHtEdXJhdGlvbn0KICAgICAqLwogICAgbWFwVW5pdHMoZm4pIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzOwogICAgICBjb25zdCByZXN1bHQgPSB7fTsKICAgICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKHRoaXMudmFsdWVzKSkgewogICAgICAgIHJlc3VsdFtrXSA9IGFzTnVtYmVyKGZuKHRoaXMudmFsdWVzW2tdLCBrKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIGNsb25lJDIodGhpcywgeyB2YWx1ZXM6IHJlc3VsdCB9LCB0cnVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgdmFsdWUgb2YgdW5pdC4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gYSB1bml0IHN1Y2ggYXMgJ21pbnV0ZScgb3IgJ2RheScKICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAyLCBkYXlzOiAzfSkuZ2V0KCd5ZWFycycpIC8vPT4gMgogICAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDIsIGRheXM6IDN9KS5nZXQoJ21vbnRocycpIC8vPT4gMAogICAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDIsIGRheXM6IDN9KS5nZXQoJ2RheXMnKSAvLz0+IDMKICAgICAqIEByZXR1cm4ge251bWJlcn0KICAgICAqLwogICAgZ2V0KHVuaXQpIHsKICAgICAgcmV0dXJuIHRoaXNbRHVyYXRpb24ubm9ybWFsaXplVW5pdCh1bml0KV07CiAgICB9CgogICAgLyoqCiAgICAgKiAiU2V0IiB0aGUgdmFsdWVzIG9mIHNwZWNpZmllZCB1bml0cy4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uCiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gYSBtYXBwaW5nIG9mIHVuaXRzIHRvIG51bWJlcnMKICAgICAqIEBleGFtcGxlIGR1ci5zZXQoeyB5ZWFyczogMjAxNyB9KQogICAgICogQGV4YW1wbGUgZHVyLnNldCh7IGhvdXJzOiA4LCBtaW51dGVzOiAzMCB9KQogICAgICogQHJldHVybiB7RHVyYXRpb259CiAgICAgKi8KICAgIHNldCh2YWx1ZXMpIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzOwoKICAgICAgY29uc3QgbWl4ZWQgPSB7IC4uLnRoaXMudmFsdWVzLCAuLi5ub3JtYWxpemVPYmplY3QodmFsdWVzLCBEdXJhdGlvbi5ub3JtYWxpemVVbml0KSB9OwogICAgICByZXR1cm4gY2xvbmUkMih0aGlzLCB7IHZhbHVlczogbWl4ZWQgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiAiU2V0IiB0aGUgbG9jYWxlIGFuZC9vciBudW1iZXJpbmdTeXN0ZW0uICBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uCiAgICAgKiBAZXhhbXBsZSBkdXIucmVjb25maWd1cmUoeyBsb2NhbGU6ICdlbi1HQicgfSkKICAgICAqIEByZXR1cm4ge0R1cmF0aW9ufQogICAgICovCiAgICByZWNvbmZpZ3VyZSh7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBjb252ZXJzaW9uQWNjdXJhY3ksIG1hdHJpeCB9ID0ge30pIHsKICAgICAgY29uc3QgbG9jID0gdGhpcy5sb2MuY2xvbmUoeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSB9KTsKICAgICAgY29uc3Qgb3B0cyA9IHsgbG9jLCBtYXRyaXgsIGNvbnZlcnNpb25BY2N1cmFjeSB9OwogICAgICByZXR1cm4gY2xvbmUkMih0aGlzLCBvcHRzKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBkdXJhdGlvbiBpbiB0aGUgc3BlY2lmaWVkIHVuaXQuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGVzJyBvciAnZGF5cycKICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAxfSkuYXMoJ2RheXMnKSAvLz0+IDM2NQogICAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDF9KS5hcygnbW9udGhzJykgLy89PiAxMgogICAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7aG91cnM6IDYwfSkuYXMoJ2RheXMnKSAvLz0+IDIuNQogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCiAgICBhcyh1bml0KSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnNoaWZ0VG8odW5pdCkuZ2V0KHVuaXQpIDogTmFOOwogICAgfQoKICAgIC8qKgogICAgICogUmVkdWNlIHRoaXMgRHVyYXRpb24gdG8gaXRzIGNhbm9uaWNhbCByZXByZXNlbnRhdGlvbiBpbiBpdHMgY3VycmVudCB1bml0cy4KICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMiwgZGF5czogNTAwMCB9KS5ub3JtYWxpemUoKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMTUsIGRheXM6IDI1NSB9CiAgICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEyLCBtaW51dGVzOiAtNDUgfSkubm9ybWFsaXplKCkudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDExLCBtaW51dGVzOiAxNSB9CiAgICAgKiBAcmV0dXJuIHtEdXJhdGlvbn0KICAgICAqLwogICAgbm9ybWFsaXplKCkgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7CiAgICAgIGNvbnN0IHZhbHMgPSB0aGlzLnRvT2JqZWN0KCk7CiAgICAgIG5vcm1hbGl6ZVZhbHVlcyh0aGlzLm1hdHJpeCwgdmFscyk7CiAgICAgIHJldHVybiBjbG9uZSQyKHRoaXMsIHsgdmFsdWVzOiB2YWxzIH0sIHRydWUpOwogICAgfQoKICAgIC8qKgogICAgICogQ29udmVydCB0aGlzIER1cmF0aW9uIGludG8gaXRzIHJlcHJlc2VudGF0aW9uIGluIGEgZGlmZmVyZW50IHNldCBvZiB1bml0cy4KICAgICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMSwgc2Vjb25kczogMzAgfSkuc2hpZnRUbygnbWludXRlcycsICdtaWxsaXNlY29uZHMnKS50b09iamVjdCgpIC8vPT4geyBtaW51dGVzOiA2MCwgbWlsbGlzZWNvbmRzOiAzMDAwMCB9CiAgICAgKiBAcmV0dXJuIHtEdXJhdGlvbn0KICAgICAqLwogICAgc2hpZnRUbyguLi51bml0cykgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7CgogICAgICBpZiAodW5pdHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0KCiAgICAgIHVuaXRzID0gdW5pdHMubWFwKCh1KSA9PiBEdXJhdGlvbi5ub3JtYWxpemVVbml0KHUpKTsKCiAgICAgIGNvbnN0IGJ1aWx0ID0ge30sCiAgICAgICAgYWNjdW11bGF0ZWQgPSB7fSwKICAgICAgICB2YWxzID0gdGhpcy50b09iamVjdCgpOwogICAgICBsZXQgbGFzdFVuaXQ7CgogICAgICBmb3IgKGNvbnN0IGsgb2Ygb3JkZXJlZFVuaXRzJDEpIHsKICAgICAgICBpZiAodW5pdHMuaW5kZXhPZihrKSA+PSAwKSB7CiAgICAgICAgICBsYXN0VW5pdCA9IGs7CgogICAgICAgICAgbGV0IG93biA9IDA7CgogICAgICAgICAgLy8gYW55dGhpbmcgd2UgaGF2ZW4ndCBib2lsZWQgZG93biB5ZXQgc2hvdWxkIGdldCBib2lsZWQgdG8gdGhpcyB1bml0CiAgICAgICAgICBmb3IgKGNvbnN0IGFrIGluIGFjY3VtdWxhdGVkKSB7CiAgICAgICAgICAgIG93biArPSB0aGlzLm1hdHJpeFtha11ba10gKiBhY2N1bXVsYXRlZFtha107CiAgICAgICAgICAgIGFjY3VtdWxhdGVkW2FrXSA9IDA7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gcGx1cyBhbnl0aGluZyB0aGF0J3MgYWxyZWFkeSBpbiB0aGlzIHVuaXQKICAgICAgICAgIGlmIChpc051bWJlciQxKHZhbHNba10pKSB7CiAgICAgICAgICAgIG93biArPSB2YWxzW2tdOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbnN0IGkgPSBNYXRoLnRydW5jKG93bik7CiAgICAgICAgICBidWlsdFtrXSA9IGk7CiAgICAgICAgICBhY2N1bXVsYXRlZFtrXSA9IChvd24gKiAxMDAwIC0gaSAqIDEwMDApIC8gMTAwMDsKCiAgICAgICAgICAvLyBwbHVzIGFueXRoaW5nIGZ1cnRoZXIgZG93biB0aGUgY2hhaW4gdGhhdCBzaG91bGQgYmUgcm9sbGVkIHVwIGluIHRvIHRoaXMKICAgICAgICAgIGZvciAoY29uc3QgZG93biBpbiB2YWxzKSB7CiAgICAgICAgICAgIGlmIChvcmRlcmVkVW5pdHMkMS5pbmRleE9mKGRvd24pID4gb3JkZXJlZFVuaXRzJDEuaW5kZXhPZihrKSkgewogICAgICAgICAgICAgIGNvbnZlcnQodGhpcy5tYXRyaXgsIHZhbHMsIGRvd24sIGJ1aWx0LCBrKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy8gb3RoZXJ3aXNlLCBrZWVwIGl0IGluIHRoZSB3aW5ncyB0byBib2lsIGl0IGxhdGVyCiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlciQxKHZhbHNba10pKSB7CiAgICAgICAgICBhY2N1bXVsYXRlZFtrXSA9IHZhbHNba107CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBhbnl0aGluZyBsZWZ0b3ZlciBiZWNvbWVzIHRoZSBkZWNpbWFsIGZvciB0aGUgbGFzdCB1bml0CiAgICAgIC8vIGxhc3RVbml0IG11c3QgYmUgZGVmaW5lZCBzaW5jZSB1bml0cyBpcyBub3QgZW1wdHkKICAgICAgZm9yIChjb25zdCBrZXkgaW4gYWNjdW11bGF0ZWQpIHsKICAgICAgICBpZiAoYWNjdW11bGF0ZWRba2V5XSAhPT0gMCkgewogICAgICAgICAgYnVpbHRbbGFzdFVuaXRdICs9CiAgICAgICAgICAgIGtleSA9PT0gbGFzdFVuaXQgPyBhY2N1bXVsYXRlZFtrZXldIDogYWNjdW11bGF0ZWRba2V5XSAvIHRoaXMubWF0cml4W2xhc3RVbml0XVtrZXldOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGNsb25lJDIodGhpcywgeyB2YWx1ZXM6IGJ1aWx0IH0sIHRydWUpLm5vcm1hbGl6ZSgpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIHRoZSBuZWdhdGl2ZSBvZiB0aGlzIER1cmF0aW9uLgogICAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBzZWNvbmRzOiAzMCB9KS5uZWdhdGUoKS50b09iamVjdCgpIC8vPT4geyBob3VyczogLTEsIHNlY29uZHM6IC0zMCB9CiAgICAgKiBAcmV0dXJuIHtEdXJhdGlvbn0KICAgICAqLwogICAgbmVnYXRlKCkgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7CiAgICAgIGNvbnN0IG5lZ2F0ZWQgPSB7fTsKICAgICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKHRoaXMudmFsdWVzKSkgewogICAgICAgIG5lZ2F0ZWRba10gPSB0aGlzLnZhbHVlc1trXSA9PT0gMCA/IDAgOiAtdGhpcy52YWx1ZXNba107CiAgICAgIH0KICAgICAgcmV0dXJuIGNsb25lJDIodGhpcywgeyB2YWx1ZXM6IG5lZ2F0ZWQgfSwgdHJ1ZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIHllYXJzLgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqLwogICAgZ2V0IHllYXJzKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMueWVhcnMgfHwgMCA6IE5hTjsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgcXVhcnRlcnMuCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICovCiAgICBnZXQgcXVhcnRlcnMoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5xdWFydGVycyB8fCAwIDogTmFOOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBtb250aHMuCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICovCiAgICBnZXQgbW9udGhzKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubW9udGhzIHx8IDAgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIHdlZWtzCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICovCiAgICBnZXQgd2Vla3MoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy53ZWVrcyB8fCAwIDogTmFOOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBkYXlzLgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqLwogICAgZ2V0IGRheXMoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5kYXlzIHx8IDAgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIGhvdXJzLgogICAgICogQHR5cGUge251bWJlcn0KICAgICAqLwogICAgZ2V0IGhvdXJzKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuaG91cnMgfHwgMCA6IE5hTjsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgbWludXRlcy4KICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKi8KICAgIGdldCBtaW51dGVzKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubWludXRlcyB8fCAwIDogTmFOOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBzZWNvbmRzLgogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCiAgICBnZXQgc2Vjb25kcygpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnNlY29uZHMgfHwgMCA6IE5hTjsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgbWlsbGlzZWNvbmRzLgogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCiAgICBnZXQgbWlsbGlzZWNvbmRzKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubWlsbGlzZWNvbmRzIHx8IDAgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIER1cmF0aW9uIGlzIGludmFsaWQuIEludmFsaWQgZHVyYXRpb25zIGFyZSByZXR1cm5lZCBieSBkaWZmIG9wZXJhdGlvbnMKICAgICAqIG9uIGludmFsaWQgRGF0ZVRpbWVzIG9yIEludGVydmFscy4KICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KICAgIGdldCBpc1ZhbGlkKCkgewogICAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBhbiBlcnJvciBjb2RlIGlmIHRoaXMgRHVyYXRpb24gYmVjYW1lIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIER1cmF0aW9uIGlzIHZhbGlkCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9CiAgICAgKi8KICAgIGdldCBpbnZhbGlkUmVhc29uKCkgewogICAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIER1cmF0aW9uIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBEdXJhdGlvbiBpcyB2YWxpZAogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgZ2V0IGludmFsaWRFeHBsYW5hdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBFcXVhbGl0eSBjaGVjawogICAgICogVHdvIER1cmF0aW9ucyBhcmUgZXF1YWwgaWZmIHRoZXkgaGF2ZSB0aGUgc2FtZSB1bml0cyBhbmQgdGhlIHNhbWUgdmFsdWVzIGZvciBlYWNoIHVuaXQuCiAgICAgKiBAcGFyYW0ge0R1cmF0aW9ufSBvdGhlcgogICAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgICAqLwogICAgZXF1YWxzKG90aGVyKSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkIHx8ICFvdGhlci5pc1ZhbGlkKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICBpZiAoIXRoaXMubG9jLmVxdWFscyhvdGhlci5sb2MpKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICBmdW5jdGlvbiBlcSh2MSwgdjIpIHsKICAgICAgICAvLyBDb25zaWRlciAwIGFuZCB1bmRlZmluZWQgYXMgZXF1YWwKICAgICAgICBpZiAodjEgPT09IHVuZGVmaW5lZCB8fCB2MSA9PT0gMCkgcmV0dXJuIHYyID09PSB1bmRlZmluZWQgfHwgdjIgPT09IDA7CiAgICAgICAgcmV0dXJuIHYxID09PSB2MjsKICAgICAgfQoKICAgICAgZm9yIChjb25zdCB1IG9mIG9yZGVyZWRVbml0cyQxKSB7CiAgICAgICAgaWYgKCFlcSh0aGlzLnZhbHVlc1t1XSwgb3RoZXIudmFsdWVzW3VdKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CgogIGNvbnN0IElOVkFMSUQkMiA9ICJJbnZhbGlkIEludGVydmFsIjsKCiAgLy8gY2hlY2tzIGlmIHRoZSBzdGFydCBpcyBlcXVhbCB0byBvciBiZWZvcmUgdGhlIGVuZAogIGZ1bmN0aW9uIHZhbGlkYXRlU3RhcnRFbmQoc3RhcnQsIGVuZCkgewogICAgaWYgKCFzdGFydCB8fCAhc3RhcnQuaXNWYWxpZCkgewogICAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZCgibWlzc2luZyBvciBpbnZhbGlkIHN0YXJ0Iik7CiAgICB9IGVsc2UgaWYgKCFlbmQgfHwgIWVuZC5pc1ZhbGlkKSB7CiAgICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKCJtaXNzaW5nIG9yIGludmFsaWQgZW5kIik7CiAgICB9IGVsc2UgaWYgKGVuZCA8IHN0YXJ0KSB7CiAgICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKAogICAgICAgICJlbmQgYmVmb3JlIHN0YXJ0IiwKICAgICAgICBgVGhlIGVuZCBvZiBhbiBpbnRlcnZhbCBtdXN0IGJlIGFmdGVyIGl0cyBzdGFydCwgYnV0IHlvdSBoYWQgc3RhcnQ9JHtzdGFydC50b0lTTygpfSBhbmQgZW5kPSR7ZW5kLnRvSVNPKCl9YAogICAgICApOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfQoKICAvKioKICAgKiBBbiBJbnRlcnZhbCBvYmplY3QgcmVwcmVzZW50cyBhIGhhbGYtb3BlbiBpbnRlcnZhbCBvZiB0aW1lLCB3aGVyZSBlYWNoIGVuZHBvaW50IGlzIGEge0BsaW5rIERhdGVUaW1lfS4gQ29uY2VwdHVhbGx5LCBpdCdzIGEgY29udGFpbmVyIGZvciB0aG9zZSB0d28gZW5kcG9pbnRzLCBhY2NvbXBhbmllZCBieSBtZXRob2RzIGZvciBjcmVhdGluZywgcGFyc2luZywgaW50ZXJyb2dhdGluZywgY29tcGFyaW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uCiAgICoKICAgKiBIZXJlIGlzIGEgYnJpZWYgb3ZlcnZpZXcgb2YgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCBtZXRob2RzIGFuZCBnZXR0ZXJzIGluIEludGVydmFsOgogICAqCiAgICogKiAqKkNyZWF0aW9uKiogVG8gY3JlYXRlIGFuIEludGVydmFsLCB1c2Uge0BsaW5rIEludGVydmFsLmZyb21EYXRlVGltZXN9LCB7QGxpbmsgSW50ZXJ2YWwuYWZ0ZXJ9LCB7QGxpbmsgSW50ZXJ2YWwuYmVmb3JlfSwgb3Ige0BsaW5rIEludGVydmFsLmZyb21JU099LgogICAqICogKipBY2Nlc3NvcnMqKiBVc2Uge0BsaW5rIEludGVydmFsI3N0YXJ0fSBhbmQge0BsaW5rIEludGVydmFsI2VuZH0gdG8gZ2V0IHRoZSBzdGFydCBhbmQgZW5kLgogICAqICogKipJbnRlcnJvZ2F0aW9uKiogVG8gYW5hbHl6ZSB0aGUgSW50ZXJ2YWwsIHVzZSB7QGxpbmsgSW50ZXJ2YWwjY291bnR9LCB7QGxpbmsgSW50ZXJ2YWwjbGVuZ3RofSwge0BsaW5rIEludGVydmFsI2hhc1NhbWV9LCB7QGxpbmsgSW50ZXJ2YWwjY29udGFpbnN9LCB7QGxpbmsgSW50ZXJ2YWwjaXNBZnRlcn0sIG9yIHtAbGluayBJbnRlcnZhbCNpc0JlZm9yZX0uCiAgICogKiAqKlRyYW5zZm9ybWF0aW9uKiogVG8gY3JlYXRlIG90aGVyIEludGVydmFscyBvdXQgb2YgdGhpcyBvbmUsIHVzZSB7QGxpbmsgSW50ZXJ2YWwjc2V0fSwge0BsaW5rIEludGVydmFsI3NwbGl0QXR9LCB7QGxpbmsgSW50ZXJ2YWwjc3BsaXRCeX0sIHtAbGluayBJbnRlcnZhbCNkaXZpZGVFcXVhbGx5fSwge0BsaW5rIEludGVydmFsLm1lcmdlfSwge0BsaW5rIEludGVydmFsLnhvcn0sIHtAbGluayBJbnRlcnZhbCN1bmlvbn0sIHtAbGluayBJbnRlcnZhbCNpbnRlcnNlY3Rpb259LCBvciB7QGxpbmsgSW50ZXJ2YWwjZGlmZmVyZW5jZX0uCiAgICogKiAqKkNvbXBhcmlzb24qKiBUbyBjb21wYXJlIHRoaXMgSW50ZXJ2YWwgdG8gYW5vdGhlciBvbmUsIHVzZSB7QGxpbmsgSW50ZXJ2YWwjZXF1YWxzfSwge0BsaW5rIEludGVydmFsI292ZXJsYXBzfSwge0BsaW5rIEludGVydmFsI2FidXRzU3RhcnR9LCB7QGxpbmsgSW50ZXJ2YWwjYWJ1dHNFbmR9LCB7QGxpbmsgSW50ZXJ2YWwjZW5ndWxmc30KICAgKiAqICoqT3V0cHV0KiogVG8gY29udmVydCB0aGUgSW50ZXJ2YWwgaW50byBvdGhlciByZXByZXNlbnRhdGlvbnMsIHNlZSB7QGxpbmsgSW50ZXJ2YWwjdG9TdHJpbmd9LCB7QGxpbmsgSW50ZXJ2YWwjdG9JU099LCB7QGxpbmsgSW50ZXJ2YWwjdG9JU09EYXRlfSwge0BsaW5rIEludGVydmFsI3RvSVNPVGltZX0sIHtAbGluayBJbnRlcnZhbCN0b0Zvcm1hdH0sIGFuZCB7QGxpbmsgSW50ZXJ2YWwjdG9EdXJhdGlvbn0uCiAgICovCiAgY2xhc3MgSW50ZXJ2YWwgewogICAgLyoqCiAgICAgKiBAcHJpdmF0ZQogICAgICovCiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHsKICAgICAgLyoqCiAgICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICAgKi8KICAgICAgdGhpcy5zID0gY29uZmlnLnN0YXJ0OwogICAgICAvKioKICAgICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgICAqLwogICAgICB0aGlzLmUgPSBjb25maWcuZW5kOwogICAgICAvKioKICAgICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgICAqLwogICAgICB0aGlzLmludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCBudWxsOwogICAgICAvKioKICAgICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgICAqLwogICAgICB0aGlzLmlzTHV4b25JbnRlcnZhbCA9IHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYW4gaW52YWxpZCBJbnRlcnZhbC4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBzaW1wbGUgc3RyaW5nIG9mIHdoeSB0aGlzIEludGVydmFsIGlzIGludmFsaWQuIFNob3VsZCBub3QgY29udGFpbiBwYXJhbWV0ZXJzIG9yIGFueXRoaW5nIGVsc2UgZGF0YS1kZXBlbmRlbnQKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbZXhwbGFuYXRpb249bnVsbF0gLSBsb25nZXIgZXhwbGFuYXRpb24sIG1heSBpbmNsdWRlIHBhcmFtZXRlcnMgYW5kIG90aGVyIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mb3JtYXRpb24KICAgICAqIEByZXR1cm4ge0ludGVydmFsfQogICAgICovCiAgICBzdGF0aWMgaW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uID0gbnVsbCkgewogICAgICBpZiAoIXJlYXNvbikgewogICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigibmVlZCB0byBzcGVjaWZ5IGEgcmVhc29uIHRoZSBJbnRlcnZhbCBpcyBpbnZhbGlkIik7CiAgICAgIH0KCiAgICAgIGNvbnN0IGludmFsaWQgPSByZWFzb24gaW5zdGFuY2VvZiBJbnZhbGlkID8gcmVhc29uIDogbmV3IEludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbik7CgogICAgICBpZiAoU2V0dGluZ3MudGhyb3dPbkludmFsaWQpIHsKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEludGVydmFsRXJyb3IoaW52YWxpZCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbCh7IGludmFsaWQgfSk7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGEgc3RhcnQgRGF0ZVRpbWUgYW5kIGFuIGVuZCBEYXRlVGltZS4gSW5jbHVzaXZlIG9mIHRoZSBzdGFydCBidXQgbm90IHRoZSBlbmQuCiAgICAgKiBAcGFyYW0ge0RhdGVUaW1lfERhdGV8T2JqZWN0fSBzdGFydAogICAgICogQHBhcmFtIHtEYXRlVGltZXxEYXRlfE9iamVjdH0gZW5kCiAgICAgKiBAcmV0dXJuIHtJbnRlcnZhbH0KICAgICAqLwogICAgc3RhdGljIGZyb21EYXRlVGltZXMoc3RhcnQsIGVuZCkgewogICAgICBjb25zdCBidWlsdFN0YXJ0ID0gZnJpZW5kbHlEYXRlVGltZShzdGFydCksCiAgICAgICAgYnVpbHRFbmQgPSBmcmllbmRseURhdGVUaW1lKGVuZCk7CgogICAgICBjb25zdCB2YWxpZGF0ZUVycm9yID0gdmFsaWRhdGVTdGFydEVuZChidWlsdFN0YXJ0LCBidWlsdEVuZCk7CgogICAgICBpZiAodmFsaWRhdGVFcnJvciA9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbCh7CiAgICAgICAgICBzdGFydDogYnVpbHRTdGFydCwKICAgICAgICAgIGVuZDogYnVpbHRFbmQsCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHZhbGlkYXRlRXJyb3I7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGEgc3RhcnQgRGF0ZVRpbWUgYW5kIGEgRHVyYXRpb24gdG8gZXh0ZW5kIHRvLgogICAgICogQHBhcmFtIHtEYXRlVGltZXxEYXRlfE9iamVjdH0gc3RhcnQKICAgICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSB0aGUgbGVuZ3RoIG9mIHRoZSBJbnRlcnZhbC4KICAgICAqIEByZXR1cm4ge0ludGVydmFsfQogICAgICovCiAgICBzdGF0aWMgYWZ0ZXIoc3RhcnQsIGR1cmF0aW9uKSB7CiAgICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLAogICAgICAgIGR0ID0gZnJpZW5kbHlEYXRlVGltZShzdGFydCk7CiAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0LCBkdC5wbHVzKGR1cikpOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYW4gZW5kIERhdGVUaW1lIGFuZCBhIER1cmF0aW9uIHRvIGV4dGVuZCBiYWNrd2FyZHMgdG8uCiAgICAgKiBAcGFyYW0ge0RhdGVUaW1lfERhdGV8T2JqZWN0fSBlbmQKICAgICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSB0aGUgbGVuZ3RoIG9mIHRoZSBJbnRlcnZhbC4KICAgICAqIEByZXR1cm4ge0ludGVydmFsfQogICAgICovCiAgICBzdGF0aWMgYmVmb3JlKGVuZCwgZHVyYXRpb24pIHsKICAgICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbiksCiAgICAgICAgZHQgPSBmcmllbmRseURhdGVUaW1lKGVuZCk7CiAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0Lm1pbnVzKGR1ciksIGR0KTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIElTTyA4NjAxIHN0cmluZy4KICAgICAqIEFjY2VwdHMgYDxzdGFydD4vPGVuZD5gLCBgPHN0YXJ0Pi88ZHVyYXRpb24+YCwgYW5kIGA8ZHVyYXRpb24+LzxlbmQ+YCBmb3JtYXRzLgogICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgSVNPIHN0cmluZyB0byBwYXJzZQogICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIG9wdGlvbnMgdG8gcGFzcyB7QGxpbmsgRGF0ZVRpbWUjZnJvbUlTT30gYW5kIG9wdGlvbmFsbHkge0BsaW5rIER1cmF0aW9uI2Zyb21JU099CiAgICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI1RpbWVfaW50ZXJ2YWxzCiAgICAgKiBAcmV0dXJuIHtJbnRlcnZhbH0KICAgICAqLwogICAgc3RhdGljIGZyb21JU08odGV4dCwgb3B0cykgewogICAgICBjb25zdCBbcywgZV0gPSAodGV4dCB8fCAiIikuc3BsaXQoIi8iLCAyKTsKICAgICAgaWYgKHMgJiYgZSkgewogICAgICAgIGxldCBzdGFydCwgc3RhcnRJc1ZhbGlkOwogICAgICAgIHRyeSB7CiAgICAgICAgICBzdGFydCA9IERhdGVUaW1lLmZyb21JU08ocywgb3B0cyk7CiAgICAgICAgICBzdGFydElzVmFsaWQgPSBzdGFydC5pc1ZhbGlkOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHN0YXJ0SXNWYWxpZCA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgbGV0IGVuZCwgZW5kSXNWYWxpZDsKICAgICAgICB0cnkgewogICAgICAgICAgZW5kID0gRGF0ZVRpbWUuZnJvbUlTTyhlLCBvcHRzKTsKICAgICAgICAgIGVuZElzVmFsaWQgPSBlbmQuaXNWYWxpZDsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBlbmRJc1ZhbGlkID0gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3RhcnRJc1ZhbGlkICYmIGVuZElzVmFsaWQpIHsKICAgICAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0LCBlbmQpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHN0YXJ0SXNWYWxpZCkgewogICAgICAgICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUlTTyhlLCBvcHRzKTsKICAgICAgICAgIGlmIChkdXIuaXNWYWxpZCkgewogICAgICAgICAgICByZXR1cm4gSW50ZXJ2YWwuYWZ0ZXIoc3RhcnQsIGR1cik7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChlbmRJc1ZhbGlkKSB7CiAgICAgICAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tSVNPKHMsIG9wdHMpOwogICAgICAgICAgaWYgKGR1ci5pc1ZhbGlkKSB7CiAgICAgICAgICAgIHJldHVybiBJbnRlcnZhbC5iZWZvcmUoZW5kLCBkdXIpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZCgidW5wYXJzYWJsZSIsIGB0aGUgaW5wdXQgIiR7dGV4dH0iIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGFuIEludGVydmFsLiBXb3JrcyBhY3Jvc3MgY29udGV4dCBib3VuZGFyaWVzCiAgICAgKiBAcGFyYW0ge29iamVjdH0gbwogICAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgICAqLwogICAgc3RhdGljIGlzSW50ZXJ2YWwobykgewogICAgICByZXR1cm4gKG8gJiYgby5pc0x1eG9uSW50ZXJ2YWwpIHx8IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgc3RhcnQgb2YgdGhlIEludGVydmFsCiAgICAgKiBAdHlwZSB7RGF0ZVRpbWV9CiAgICAgKi8KICAgIGdldCBzdGFydCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMucyA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBlbmQgb2YgdGhlIEludGVydmFsCiAgICAgKiBAdHlwZSB7RGF0ZVRpbWV9CiAgICAgKi8KICAgIGdldCBlbmQoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmUgOiBudWxsOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBlbmQgaXMgYXQgbGVhc3QgaXRzIHN0YXJ0LCBtZWFuaW5nIHRoYXQgdGhlIEludGVydmFsIGlzbid0ICdiYWNrd2FyZHMnLgogICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgKi8KICAgIGdldCBpc1ZhbGlkKCkgewogICAgICByZXR1cm4gdGhpcy5pbnZhbGlkUmVhc29uID09PSBudWxsOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBhbiBlcnJvciBjb2RlIGlmIHRoaXMgSW50ZXJ2YWwgaXMgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgSW50ZXJ2YWwgaXMgdmFsaWQKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKi8KICAgIGdldCBpbnZhbGlkUmVhc29uKCkgewogICAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIEludGVydmFsIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBJbnRlcnZhbCBpcyB2YWxpZAogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgZ2V0IGludmFsaWRFeHBsYW5hdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIEludGVydmFsIGluIHRoZSBzcGVjaWZpZWQgdW5pdC4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIHJldHVybiB0aGUgbGVuZ3RoIGluLgogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCiAgICBsZW5ndGgodW5pdCA9ICJtaWxsaXNlY29uZHMiKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRvRHVyYXRpb24oLi4uW3VuaXRdKS5nZXQodW5pdCkgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBjb3VudCBvZiBtaW51dGVzLCBob3VycywgZGF5cywgbW9udGhzLCBvciB5ZWFycyBpbmNsdWRlZCBpbiB0aGUgSW50ZXJ2YWwsIGV2ZW4gaW4gcGFydC4KICAgICAqIFVubGlrZSB7QGxpbmsgSW50ZXJ2YWwjbGVuZ3RofSB0aGlzIGNvdW50cyBzZWN0aW9ucyBvZiB0aGUgY2FsZW5kYXIsIG5vdCBwZXJpb2RzIG9mIHRpbWUsIGUuZy4gc3BlY2lmeWluZyAnZGF5JwogICAgICogYXNrcyAnd2hhdCBkYXRlcyBhcmUgaW5jbHVkZWQgaW4gdGhpcyBpbnRlcnZhbD8nLCBub3QgJ2hvdyBtYW55IGRheXMgbG9uZyBpcyB0aGlzIGludGVydmFsPycKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdD0nbWlsbGlzZWNvbmRzJ10gLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNvdW50LgogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCiAgICBjb3VudCh1bml0ID0gIm1pbGxpc2Vjb25kcyIpIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBOYU47CiAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGFydC5zdGFydE9mKHVuaXQpLAogICAgICAgIGVuZCA9IHRoaXMuZW5kLnN0YXJ0T2YodW5pdCk7CiAgICAgIHJldHVybiBNYXRoLmZsb29yKGVuZC5kaWZmKHN0YXJ0LCB1bml0KS5nZXQodW5pdCkpICsgMTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgd2hldGhlciB0aGlzIEludGVydmFsJ3Mgc3RhcnQgYW5kIGVuZCBhcmUgYm90aCBpbiB0aGUgc2FtZSB1bml0IG9mIHRpbWUKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgb2YgdGltZSB0byBjaGVjayBzYW1lbmVzcyBvbgogICAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgICAqLwogICAgaGFzU2FtZSh1bml0KSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmlzRW1wdHkoKSB8fCB0aGlzLmUubWludXMoMSkuaGFzU2FtZSh0aGlzLnMsIHVuaXQpIDogZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGhhcyB0aGUgc2FtZSBzdGFydCBhbmQgZW5kIERhdGVUaW1lcy4KICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KICAgIGlzRW1wdHkoKSB7CiAgICAgIHJldHVybiB0aGlzLnMudmFsdWVPZigpID09PSB0aGlzLmUudmFsdWVPZigpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIHN0YXJ0IGlzIGFmdGVyIHRoZSBzcGVjaWZpZWQgRGF0ZVRpbWUuCiAgICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZQogICAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgICAqLwogICAgaXNBZnRlcihkYXRlVGltZSkgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlOwogICAgICByZXR1cm4gdGhpcy5zID4gZGF0ZVRpbWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3MgZW5kIGlzIGJlZm9yZSB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLgogICAgICogQHBhcmFtIHtEYXRlVGltZX0gZGF0ZVRpbWUKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KICAgIGlzQmVmb3JlKGRhdGVUaW1lKSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7CiAgICAgIHJldHVybiB0aGlzLmUgPD0gZGF0ZVRpbWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGNvbnRhaW5zIHRoZSBzcGVjaWZpZWQgRGF0ZVRpbWUuCiAgICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZQogICAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgICAqLwogICAgY29udGFpbnMoZGF0ZVRpbWUpIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTsKICAgICAgcmV0dXJuIHRoaXMucyA8PSBkYXRlVGltZSAmJiB0aGlzLmUgPiBkYXRlVGltZTsKICAgIH0KCiAgICAvKioKICAgICAqICJTZXRzIiB0aGUgc3RhcnQgYW5kL29yIGVuZCBkYXRlcy4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIEludGVydmFsLgogICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlcyAtIHRoZSB2YWx1ZXMgdG8gc2V0CiAgICAgKiBAcGFyYW0ge0RhdGVUaW1lfSB2YWx1ZXMuc3RhcnQgLSB0aGUgc3RhcnRpbmcgRGF0ZVRpbWUKICAgICAqIEBwYXJhbSB7RGF0ZVRpbWV9IHZhbHVlcy5lbmQgLSB0aGUgZW5kaW5nIERhdGVUaW1lCiAgICAgKiBAcmV0dXJuIHtJbnRlcnZhbH0KICAgICAqLwogICAgc2V0KHsgc3RhcnQsIGVuZCB9ID0ge30pIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzOwogICAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzdGFydCB8fCB0aGlzLnMsIGVuZCB8fCB0aGlzLmUpOwogICAgfQoKICAgIC8qKgogICAgICogU3BsaXQgdGhpcyBJbnRlcnZhbCBhdCBlYWNoIG9mIHRoZSBzcGVjaWZpZWQgRGF0ZVRpbWVzCiAgICAgKiBAcGFyYW0gey4uLkRhdGVUaW1lfSBkYXRlVGltZXMgLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNvdW50LgogICAgICogQHJldHVybiB7QXJyYXl9CiAgICAgKi8KICAgIHNwbGl0QXQoLi4uZGF0ZVRpbWVzKSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gW107CiAgICAgIGNvbnN0IHNvcnRlZCA9IGRhdGVUaW1lcwogICAgICAgICAgLm1hcChmcmllbmRseURhdGVUaW1lKQogICAgICAgICAgLmZpbHRlcigoZCkgPT4gdGhpcy5jb250YWlucyhkKSkKICAgICAgICAgIC5zb3J0KCksCiAgICAgICAgcmVzdWx0cyA9IFtdOwogICAgICBsZXQgeyBzIH0gPSB0aGlzLAogICAgICAgIGkgPSAwOwoKICAgICAgd2hpbGUgKHMgPCB0aGlzLmUpIHsKICAgICAgICBjb25zdCBhZGRlZCA9IHNvcnRlZFtpXSB8fCB0aGlzLmUsCiAgICAgICAgICBuZXh0ID0gK2FkZGVkID4gK3RoaXMuZSA/IHRoaXMuZSA6IGFkZGVkOwogICAgICAgIHJlc3VsdHMucHVzaChJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIG5leHQpKTsKICAgICAgICBzID0gbmV4dDsKICAgICAgICBpICs9IDE7CiAgICAgIH0KCiAgICAgIHJldHVybiByZXN1bHRzOwogICAgfQoKICAgIC8qKgogICAgICogU3BsaXQgdGhpcyBJbnRlcnZhbCBpbnRvIHNtYWxsZXIgSW50ZXJ2YWxzLCBlYWNoIG9mIHRoZSBzcGVjaWZpZWQgbGVuZ3RoLgogICAgICogTGVmdCBvdmVyIHRpbWUgaXMgZ3JvdXBlZCBpbnRvIGEgc21hbGxlciBpbnRlcnZhbAogICAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBsZW5ndGggb2YgZWFjaCByZXN1bHRpbmcgaW50ZXJ2YWwuCiAgICAgKiBAcmV0dXJuIHtBcnJheX0KICAgICAqLwogICAgc3BsaXRCeShkdXJhdGlvbikgewogICAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKTsKCiAgICAgIGlmICghdGhpcy5pc1ZhbGlkIHx8ICFkdXIuaXNWYWxpZCB8fCBkdXIuYXMoIm1pbGxpc2Vjb25kcyIpID09PSAwKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CgogICAgICBsZXQgeyBzIH0gPSB0aGlzLAogICAgICAgIGlkeCA9IDEsCiAgICAgICAgbmV4dDsKCiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXTsKICAgICAgd2hpbGUgKHMgPCB0aGlzLmUpIHsKICAgICAgICBjb25zdCBhZGRlZCA9IHRoaXMuc3RhcnQucGx1cyhkdXIubWFwVW5pdHMoKHgpID0+IHggKiBpZHgpKTsKICAgICAgICBuZXh0ID0gK2FkZGVkID4gK3RoaXMuZSA/IHRoaXMuZSA6IGFkZGVkOwogICAgICAgIHJlc3VsdHMucHVzaChJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIG5leHQpKTsKICAgICAgICBzID0gbmV4dDsKICAgICAgICBpZHggKz0gMTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICB9CgogICAgLyoqCiAgICAgKiBTcGxpdCB0aGlzIEludGVydmFsIGludG8gdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygc21hbGxlciBpbnRlcnZhbHMuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyT2ZQYXJ0cyAtIFRoZSBudW1iZXIgb2YgSW50ZXJ2YWxzIHRvIGRpdmlkZSB0aGUgSW50ZXJ2YWwgaW50by4KICAgICAqIEByZXR1cm4ge0FycmF5fQogICAgICovCiAgICBkaXZpZGVFcXVhbGx5KG51bWJlck9mUGFydHMpIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBbXTsKICAgICAgcmV0dXJuIHRoaXMuc3BsaXRCeSh0aGlzLmxlbmd0aCgpIC8gbnVtYmVyT2ZQYXJ0cykuc2xpY2UoMCwgbnVtYmVyT2ZQYXJ0cyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIG92ZXJsYXBzIHdpdGggdGhlIHNwZWNpZmllZCBJbnRlcnZhbAogICAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXIKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KICAgIG92ZXJsYXBzKG90aGVyKSB7CiAgICAgIHJldHVybiB0aGlzLmUgPiBvdGhlci5zICYmIHRoaXMucyA8IG90aGVyLmU7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3MgZW5kIGlzIGFkamFjZW50IHRvIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwncyBzdGFydC4KICAgICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyCiAgICAgKiBAcmV0dXJuIHtib29sZWFufQogICAgICovCiAgICBhYnV0c1N0YXJ0KG90aGVyKSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7CiAgICAgIHJldHVybiArdGhpcy5lID09PSArb3RoZXIuczsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBzdGFydCBpcyBhZGphY2VudCB0byB0aGUgc3BlY2lmaWVkIEludGVydmFsJ3MgZW5kLgogICAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXIKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KICAgIGFidXRzRW5kKG90aGVyKSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7CiAgICAgIHJldHVybiArb3RoZXIuZSA9PT0gK3RoaXMuczsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgZW5ndWxmcyB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgc3BlY2lmaWVkIEludGVydmFsLgogICAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXIKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KICAgIGVuZ3VsZnMob3RoZXIpIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTsKICAgICAgcmV0dXJuIHRoaXMucyA8PSBvdGhlci5zICYmIHRoaXMuZSA+PSBvdGhlci5lOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCBoYXMgdGhlIHNhbWUgc3RhcnQgYW5kIGVuZCBhcyB0aGUgc3BlY2lmaWVkIEludGVydmFsLgogICAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXIKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KICAgIGVxdWFscyhvdGhlcikgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXIuaXNWYWxpZCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucy5lcXVhbHMob3RoZXIucykgJiYgdGhpcy5lLmVxdWFscyhvdGhlci5lKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiBhbiBJbnRlcnZhbCByZXByZXNlbnRpbmcgdGhlIGludGVyc2VjdGlvbiBvZiB0aGlzIEludGVydmFsIGFuZCB0aGUgc3BlY2lmaWVkIEludGVydmFsLgogICAgICogU3BlY2lmaWNhbGx5LCB0aGUgcmVzdWx0aW5nIEludGVydmFsIGhhcyB0aGUgbWF4aW11bSBzdGFydCB0aW1lIGFuZCB0aGUgbWluaW11bSBlbmQgdGltZSBvZiB0aGUgdHdvIEludGVydmFscy4KICAgICAqIFJldHVybnMgbnVsbCBpZiB0aGUgaW50ZXJzZWN0aW9uIGlzIGVtcHR5LCBtZWFuaW5nLCB0aGUgaW50ZXJ2YWxzIGRvbid0IGludGVyc2VjdC4KICAgICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyCiAgICAgKiBAcmV0dXJuIHtJbnRlcnZhbH0KICAgICAqLwogICAgaW50ZXJzZWN0aW9uKG90aGVyKSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpczsKICAgICAgY29uc3QgcyA9IHRoaXMucyA+IG90aGVyLnMgPyB0aGlzLnMgOiBvdGhlci5zLAogICAgICAgIGUgPSB0aGlzLmUgPCBvdGhlci5lID8gdGhpcy5lIDogb3RoZXIuZTsKCiAgICAgIGlmIChzID49IGUpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBlKTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgdW5pb24gb2YgdGhpcyBJbnRlcnZhbCBhbmQgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC4KICAgICAqIFNwZWNpZmljYWxseSwgdGhlIHJlc3VsdGluZyBJbnRlcnZhbCBoYXMgdGhlIG1pbmltdW0gc3RhcnQgdGltZSBhbmQgdGhlIG1heGltdW0gZW5kIHRpbWUgb2YgdGhlIHR3byBJbnRlcnZhbHMuCiAgICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlcgogICAgICogQHJldHVybiB7SW50ZXJ2YWx9CiAgICAgKi8KICAgIHVuaW9uKG90aGVyKSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpczsKICAgICAgY29uc3QgcyA9IHRoaXMucyA8IG90aGVyLnMgPyB0aGlzLnMgOiBvdGhlci5zLAogICAgICAgIGUgPSB0aGlzLmUgPiBvdGhlci5lID8gdGhpcy5lIDogb3RoZXIuZTsKICAgICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMocywgZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBNZXJnZSBhbiBhcnJheSBvZiBJbnRlcnZhbHMgaW50byBhIGVxdWl2YWxlbnQgbWluaW1hbCBzZXQgb2YgSW50ZXJ2YWxzLgogICAgICogQ29tYmluZXMgb3ZlcmxhcHBpbmcgYW5kIGFkamFjZW50IEludGVydmFscy4KICAgICAqIEBwYXJhbSB7QXJyYXl9IGludGVydmFscwogICAgICogQHJldHVybiB7QXJyYXl9CiAgICAgKi8KICAgIHN0YXRpYyBtZXJnZShpbnRlcnZhbHMpIHsKICAgICAgY29uc3QgW2ZvdW5kLCBmaW5hbF0gPSBpbnRlcnZhbHMKICAgICAgICAuc29ydCgoYSwgYikgPT4gYS5zIC0gYi5zKQogICAgICAgIC5yZWR1Y2UoCiAgICAgICAgICAoW3NvZmFyLCBjdXJyZW50XSwgaXRlbSkgPT4gewogICAgICAgICAgICBpZiAoIWN1cnJlbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gW3NvZmFyLCBpdGVtXTsKICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50Lm92ZXJsYXBzKGl0ZW0pIHx8IGN1cnJlbnQuYWJ1dHNTdGFydChpdGVtKSkgewogICAgICAgICAgICAgIHJldHVybiBbc29mYXIsIGN1cnJlbnQudW5pb24oaXRlbSldOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBbc29mYXIuY29uY2F0KFtjdXJyZW50XSksIGl0ZW1dOwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW1tdLCBudWxsXQogICAgICAgICk7CiAgICAgIGlmIChmaW5hbCkgewogICAgICAgIGZvdW5kLnB1c2goZmluYWwpOwogICAgICB9CiAgICAgIHJldHVybiBmb3VuZDsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiBhbiBhcnJheSBvZiBJbnRlcnZhbHMgcmVwcmVzZW50aW5nIHRoZSBzcGFucyBvZiB0aW1lIHRoYXQgb25seSBhcHBlYXIgaW4gb25lIG9mIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWxzLgogICAgICogQHBhcmFtIHtBcnJheX0gaW50ZXJ2YWxzCiAgICAgKiBAcmV0dXJuIHtBcnJheX0KICAgICAqLwogICAgc3RhdGljIHhvcihpbnRlcnZhbHMpIHsKICAgICAgbGV0IHN0YXJ0ID0gbnVsbCwKICAgICAgICBjdXJyZW50Q291bnQgPSAwOwogICAgICBjb25zdCByZXN1bHRzID0gW10sCiAgICAgICAgZW5kcyA9IGludGVydmFscy5tYXAoKGkpID0+IFsKICAgICAgICAgIHsgdGltZTogaS5zLCB0eXBlOiAicyIgfSwKICAgICAgICAgIHsgdGltZTogaS5lLCB0eXBlOiAiZSIgfSwKICAgICAgICBdKSwKICAgICAgICBmbGF0dGVuZWQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0KC4uLmVuZHMpLAogICAgICAgIGFyciA9IGZsYXR0ZW5lZC5zb3J0KChhLCBiKSA9PiBhLnRpbWUgLSBiLnRpbWUpOwoKICAgICAgZm9yIChjb25zdCBpIG9mIGFycikgewogICAgICAgIGN1cnJlbnRDb3VudCArPSBpLnR5cGUgPT09ICJzIiA/IDEgOiAtMTsKCiAgICAgICAgaWYgKGN1cnJlbnRDb3VudCA9PT0gMSkgewogICAgICAgICAgc3RhcnQgPSBpLnRpbWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChzdGFydCAmJiArc3RhcnQgIT09ICtpLnRpbWUpIHsKICAgICAgICAgICAgcmVzdWx0cy5wdXNoKEludGVydmFsLmZyb21EYXRlVGltZXMoc3RhcnQsIGkudGltZSkpOwogICAgICAgICAgfQoKICAgICAgICAgIHN0YXJ0ID0gbnVsbDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBJbnRlcnZhbC5tZXJnZShyZXN1bHRzKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiBhbiBJbnRlcnZhbCByZXByZXNlbnRpbmcgdGhlIHNwYW4gb2YgdGltZSBpbiB0aGlzIEludGVydmFsIHRoYXQgZG9lc24ndCBvdmVybGFwIHdpdGggYW55IG9mIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWxzLgogICAgICogQHBhcmFtIHsuLi5JbnRlcnZhbH0gaW50ZXJ2YWxzCiAgICAgKiBAcmV0dXJuIHtBcnJheX0KICAgICAqLwogICAgZGlmZmVyZW5jZSguLi5pbnRlcnZhbHMpIHsKICAgICAgcmV0dXJuIEludGVydmFsLnhvcihbdGhpc10uY29uY2F0KGludGVydmFscykpCiAgICAgICAgLm1hcCgoaSkgPT4gdGhpcy5pbnRlcnNlY3Rpb24oaSkpCiAgICAgICAgLmZpbHRlcigoaSkgPT4gaSAmJiAhaS5pc0VtcHR5KCkpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEludGVydmFsIGFwcHJvcHJpYXRlIGZvciBkZWJ1Z2dpbmcuCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9CiAgICAgKi8KICAgIHRvU3RyaW5nKCkgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQkMjsKICAgICAgcmV0dXJuIGBbJHt0aGlzLnMudG9JU08oKX0g4oCTICR7dGhpcy5lLnRvSVNPKCl9KWA7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbC4KICAgICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gVGhlIHNhbWUgb3B0aW9ucyBhcyB7QGxpbmsgRGF0ZVRpbWUjdG9JU099CiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9CiAgICAgKi8KICAgIHRvSVNPKG9wdHMpIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDI7CiAgICAgIHJldHVybiBgJHt0aGlzLnMudG9JU08ob3B0cyl9LyR7dGhpcy5lLnRvSVNPKG9wdHMpfWA7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgZGF0ZSBvZiB0aGlzIEludGVydmFsLgogICAgICogVGhlIHRpbWUgY29tcG9uZW50cyBhcmUgaWdub3JlZC4KICAgICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHMKICAgICAqIEByZXR1cm4ge3N0cmluZ30KICAgICAqLwogICAgdG9JU09EYXRlKCkgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQkMjsKICAgICAgcmV0dXJuIGAke3RoaXMucy50b0lTT0RhdGUoKX0vJHt0aGlzLmUudG9JU09EYXRlKCl9YDsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aW1lIG9mIHRoaXMgSW50ZXJ2YWwuCiAgICAgKiBUaGUgZGF0ZSBjb21wb25lbnRzIGFyZSBpZ25vcmVkLgogICAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFscwogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgc2FtZSBvcHRpb25zIGFzIHtAbGluayBEYXRlVGltZSN0b0lTT30KICAgICAqIEByZXR1cm4ge3N0cmluZ30KICAgICAqLwogICAgdG9JU09UaW1lKG9wdHMpIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEJDI7CiAgICAgIHJldHVybiBgJHt0aGlzLnMudG9JU09UaW1lKG9wdHMpfS8ke3RoaXMuZS50b0lTT1RpbWUob3B0cyl9YDsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbCBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgZm9ybWF0IHN0cmluZy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRlRm9ybWF0IC0gdGhlIGZvcm1hdCBzdHJpbmcuIFRoaXMgc3RyaW5nIGZvcm1hdHMgdGhlIHN0YXJ0IGFuZCBlbmQgdGltZS4gU2VlIHtAbGluayBEYXRlVGltZSN0b0Zvcm1hdH0gZm9yIGRldGFpbHMuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zZXBhcmF0b3IgPSAgJyDigJMgJ10gLSBhIHNlcGFyYXRvciB0byBwbGFjZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHJlcHJlc2VudGF0aW9ucwogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b0Zvcm1hdChkYXRlRm9ybWF0LCB7IHNlcGFyYXRvciA9ICIg4oCTICIgfSA9IHt9KSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRCQyOwogICAgICByZXR1cm4gYCR7dGhpcy5zLnRvRm9ybWF0KGRhdGVGb3JtYXQpfSR7c2VwYXJhdG9yfSR7dGhpcy5lLnRvRm9ybWF0KGRhdGVGb3JtYXQpfWA7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gYSBEdXJhdGlvbiByZXByZXNlbnRpbmcgdGhlIHRpbWUgc3Bhbm5lZCBieSB0aGlzIGludGVydmFsLgogICAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFt1bml0PVsnbWlsbGlzZWNvbmRzJ11dIC0gdGhlIHVuaXQgb3IgdW5pdHMgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIGluY2x1ZGUgaW4gdGhlIGR1cmF0aW9uLgogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBjcmVhdGlvbiBvZiB0aGUgRHVyYXRpb24KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZQogICAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbigpLnRvT2JqZWN0KCkgLy89PiB7IG1pbGxpc2Vjb25kczogODg0ODkyNTcgfQogICAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbignZGF5cycpLnRvT2JqZWN0KCkgLy89PiB7IGRheXM6IDEuMDI0MTgxMjE1Mjc3Nzc3OCB9CiAgICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKFsnaG91cnMnLCAnbWludXRlcyddKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMjQsIG1pbnV0ZXM6IDM0LjgyMDk1IH0KICAgICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oWydob3VycycsICdtaW51dGVzJywgJ3NlY29uZHMnXSkudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDI0LCBtaW51dGVzOiAzNCwgc2Vjb25kczogNDkuMjU3IH0KICAgICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oJ3NlY29uZHMnKS50b09iamVjdCgpIC8vPT4geyBzZWNvbmRzOiA4ODQ4OS4yNTcgfQogICAgICogQHJldHVybiB7RHVyYXRpb259CiAgICAgKi8KICAgIHRvRHVyYXRpb24odW5pdCwgb3B0cykgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgewogICAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKHRoaXMuaW52YWxpZFJlYXNvbik7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuZS5kaWZmKHRoaXMucywgdW5pdCwgb3B0cyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSdW4gbWFwRm4gb24gdGhlIGludGVydmFsIHN0YXJ0IGFuZCBlbmQsIHJldHVybmluZyBhIG5ldyBJbnRlcnZhbCBmcm9tIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVzCiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtYXBGbgogICAgICogQHJldHVybiB7SW50ZXJ2YWx9CiAgICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS5tYXBFbmRwb2ludHMoZW5kcG9pbnQgPT4gZW5kcG9pbnQudG9VVEMoKSkKICAgICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLm1hcEVuZHBvaW50cyhlbmRwb2ludCA9PiBlbmRwb2ludC5wbHVzKHsgaG91cnM6IDIgfSkpCiAgICAgKi8KICAgIG1hcEVuZHBvaW50cyhtYXBGbikgewogICAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhtYXBGbih0aGlzLnMpLCBtYXBGbih0aGlzLmUpKTsKICAgIH0KICB9CgogIC8qKgogICAqIFRoZSBJbmZvIGNsYXNzIGNvbnRhaW5zIHN0YXRpYyBtZXRob2RzIGZvciByZXRyaWV2aW5nIGdlbmVyYWwgdGltZSBhbmQgZGF0ZSByZWxhdGVkIGRhdGEuIEZvciBleGFtcGxlLCBpdCBoYXMgbWV0aG9kcyBmb3IgZmluZGluZyBvdXQgaWYgYSB0aW1lIHpvbmUgaGFzIGEgRFNULCBmb3IgbGlzdGluZyB0aGUgbW9udGhzIGluIGFueSBzdXBwb3J0ZWQgbG9jYWxlLCBhbmQgZm9yIGRpc2NvdmVyaW5nIHdoaWNoIG9mIEx1eG9uIGZlYXR1cmVzIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuCiAgICovCiAgY2xhc3MgSW5mbyB7CiAgICAvKioKICAgICAqIFJldHVybiB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgem9uZSBjb250YWlucyBhIERTVC4KICAgICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFt6b25lPSdsb2NhbCddIC0gWm9uZSB0byBjaGVjay4gRGVmYXVsdHMgdG8gdGhlIGVudmlyb25tZW50J3MgbG9jYWwgem9uZS4KICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KICAgIHN0YXRpYyBoYXNEU1Qoem9uZSA9IFNldHRpbmdzLmRlZmF1bHRab25lKSB7CiAgICAgIGNvbnN0IHByb3RvID0gRGF0ZVRpbWUubm93KCkuc2V0Wm9uZSh6b25lKS5zZXQoeyBtb250aDogMTIgfSk7CgogICAgICByZXR1cm4gIXpvbmUuaXNVbml2ZXJzYWwgJiYgcHJvdG8ub2Zmc2V0ICE9PSBwcm90by5zZXQoeyBtb250aDogNiB9KS5vZmZzZXQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHpvbmUgaXMgYSB2YWxpZCBJQU5BIHNwZWNpZmllci4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSB6b25lIC0gWm9uZSB0byBjaGVjawogICAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgICAqLwogICAgc3RhdGljIGlzVmFsaWRJQU5BWm9uZSh6b25lKSB7CiAgICAgIHJldHVybiBJQU5BWm9uZS5pc1ZhbGlkWm9uZSh6b25lKTsKICAgIH0KCiAgICAvKioKICAgICAqIENvbnZlcnRzIHRoZSBpbnB1dCBpbnRvIGEge0BsaW5rIFpvbmV9IGluc3RhbmNlLgogICAgICoKICAgICAqICogSWYgYGlucHV0YCBpcyBhbHJlYWR5IGEgWm9uZSBpbnN0YW5jZSwgaXQgaXMgcmV0dXJuZWQgdW5jaGFuZ2VkLgogICAgICogKiBJZiBgaW5wdXRgIGlzIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSB2YWxpZCB0aW1lIHpvbmUgbmFtZSwgYSBab25lIGluc3RhbmNlCiAgICAgKiAgIHdpdGggdGhhdCBuYW1lIGlzIHJldHVybmVkLgogICAgICogKiBJZiBgaW5wdXRgIGlzIGEgc3RyaW5nIHRoYXQgZG9lc24ndCByZWZlciB0byBhIGtub3duIHRpbWUgem9uZSwgYSBab25lCiAgICAgKiAgIGluc3RhbmNlIHdpdGgge0BsaW5rIFpvbmUjaXNWYWxpZH0gPT0gZmFsc2UgaXMgcmV0dXJuZWQuCiAgICAgKiAqIElmIGBpbnB1dCBpcyBhIG51bWJlciwgYSBab25lIGluc3RhbmNlIHdpdGggdGhlIHNwZWNpZmllZCBmaXhlZCBvZmZzZXQKICAgICAqICAgaW4gbWludXRlcyBpcyByZXR1cm5lZC4KICAgICAqICogSWYgYGlucHV0YCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAsIHRoZSBkZWZhdWx0IHpvbmUgaXMgcmV0dXJuZWQuCiAgICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfG51bWJlcn0gW2lucHV0XSAtIHRoZSB2YWx1ZSB0byBiZSBjb252ZXJ0ZWQKICAgICAqIEByZXR1cm4ge1pvbmV9CiAgICAgKi8KICAgIHN0YXRpYyBub3JtYWxpemVab25lKGlucHV0KSB7CiAgICAgIHJldHVybiBub3JtYWxpemVab25lKGlucHV0LCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2Ygc3RhbmRhbG9uZSBtb250aCBuYW1lcy4KICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXQKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyAibnVtZXJpYyIsICIyLWRpZ2l0IiwgIm5hcnJvdyIsICJzaG9ydCIsICJsb25nIgogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2UKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5vdXRwdXRDYWxlbmRhcj0nZ3JlZ29yeSddIC0gdGhlIGNhbGVuZGFyCiAgICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygpWzBdIC8vPT4gJ0phbnVhcnknCiAgICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnc2hvcnQnKVswXSAvLz0+ICdKYW4nCiAgICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbnVtZXJpYycpWzBdIC8vPT4gJzEnCiAgICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnc2hvcnQnLCB7IGxvY2FsZTogJ2ZyLUNBJyB9IClbMF0gLy89PiAnamFudi4nCiAgICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbnVtZXJpYycsIHsgbG9jYWxlOiAnYXInIH0pWzBdIC8vPT4gJ9mhJwogICAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ2xvbmcnLCB7IG91dHB1dENhbGVuZGFyOiAnaXNsYW1pYycgfSlbMF0gLy89PiAnUmFiacq7IEknCiAgICAgKiBAcmV0dXJuIHtBcnJheX0KICAgICAqLwogICAgc3RhdGljIG1vbnRocygKICAgICAgbGVuZ3RoID0gImxvbmciLAogICAgICB7IGxvY2FsZSA9IG51bGwsIG51bWJlcmluZ1N5c3RlbSA9IG51bGwsIGxvY09iaiA9IG51bGwsIG91dHB1dENhbGVuZGFyID0gImdyZWdvcnkiIH0gPSB7fQogICAgKSB7CiAgICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKSkubW9udGhzKGxlbmd0aCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgZm9ybWF0IG1vbnRoIG5hbWVzLgogICAgICogRm9ybWF0IG1vbnRocyBkaWZmZXIgZnJvbSBzdGFuZGFsb25lIG1vbnRocyBpbiB0aGF0IHRoZXkncmUgbWVhbnQgdG8gYXBwZWFyIG5leHQgdG8gdGhlIGRheSBvZiB0aGUgbW9udGguIEluIHNvbWUgbGFuZ3VhZ2VzLCB0aGF0CiAgICAgKiBjaGFuZ2VzIHRoZSBzdHJpbmcuCiAgICAgKiBTZWUge0BsaW5rIEluZm8jbW9udGhzfQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzICJudW1lcmljIiwgIjItZGlnaXQiLCAibmFycm93IiwgInNob3J0IiwgImxvbmciCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nU3lzdGVtPW51bGxdIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NPYmo9bnVsbF0gLSBhbiBleGlzdGluZyBsb2NhbGUgb2JqZWN0IHRvIHVzZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyPSdncmVnb3J5J10gLSB0aGUgY2FsZW5kYXIKICAgICAqIEByZXR1cm4ge0FycmF5fQogICAgICovCiAgICBzdGF0aWMgbW9udGhzRm9ybWF0KAogICAgICBsZW5ndGggPSAibG9uZyIsCiAgICAgIHsgbG9jYWxlID0gbnVsbCwgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCwgbG9jT2JqID0gbnVsbCwgb3V0cHV0Q2FsZW5kYXIgPSAiZ3JlZ29yeSIgfSA9IHt9CiAgICApIHsKICAgICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIpKS5tb250aHMobGVuZ3RoLCB0cnVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiBhbiBhcnJheSBvZiBzdGFuZGFsb25lIHdlZWsgbmFtZXMuCiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0CiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xlbmd0aD0nbG9uZyddIC0gdGhlIGxlbmd0aCBvZiB0aGUgd2Vla2RheSByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyAibmFycm93IiwgInNob3J0IiwgImxvbmciLgogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2UKICAgICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoKVswXSAvLz0+ICdNb25kYXknCiAgICAgKiBAZXhhbXBsZSBJbmZvLndlZWtkYXlzKCdzaG9ydCcpWzBdIC8vPT4gJ01vbicKICAgICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JywgeyBsb2NhbGU6ICdmci1DQScgfSlbMF0gLy89PiAnbHVuLicKICAgICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JywgeyBsb2NhbGU6ICdhcicgfSlbMF0gLy89PiAn2KfZhNin2KvZhtmK2YYnCiAgICAgKiBAcmV0dXJuIHtBcnJheX0KICAgICAqLwogICAgc3RhdGljIHdlZWtkYXlzKGxlbmd0aCA9ICJsb25nIiwgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLCBsb2NPYmogPSBudWxsIH0gPSB7fSkgewogICAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBudWxsKSkud2Vla2RheXMobGVuZ3RoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiBhbiBhcnJheSBvZiBmb3JtYXQgd2VlayBuYW1lcy4KICAgICAqIEZvcm1hdCB3ZWVrZGF5cyBkaWZmZXIgZnJvbSBzdGFuZGFsb25lIHdlZWtkYXlzIGluIHRoYXQgdGhleSdyZSBtZWFudCB0byBhcHBlYXIgbmV4dCB0byBtb3JlIGRhdGUgaW5mb3JtYXRpb24uIEluIHNvbWUgbGFuZ3VhZ2VzLCB0aGF0CiAgICAgKiBjaGFuZ2VzIHRoZSBzdHJpbmcuCiAgICAgKiBTZWUge0BsaW5rIEluZm8jd2Vla2RheXN9CiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xlbmd0aD0nbG9uZyddIC0gdGhlIGxlbmd0aCBvZiB0aGUgbW9udGggcmVwcmVzZW50YXRpb24sIHN1Y2ggYXMgIm5hcnJvdyIsICJzaG9ydCIsICJsb25nIi4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucwogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT1udWxsXSAtIHRoZSBsb2NhbGUgY29kZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2UKICAgICAqIEByZXR1cm4ge0FycmF5fQogICAgICovCiAgICBzdGF0aWMgd2Vla2RheXNGb3JtYXQoCiAgICAgIGxlbmd0aCA9ICJsb25nIiwKICAgICAgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLCBsb2NPYmogPSBudWxsIH0gPSB7fQogICAgKSB7CiAgICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG51bGwpKS53ZWVrZGF5cyhsZW5ndGgsIHRydWUpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIGFuIGFycmF5IG9mIG1lcmlkaWVtcy4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucwogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGUKICAgICAqIEBleGFtcGxlIEluZm8ubWVyaWRpZW1zKCkgLy89PiBbICdBTScsICdQTScgXQogICAgICogQGV4YW1wbGUgSW5mby5tZXJpZGllbXMoeyBsb2NhbGU6ICdteScgfSkgLy89PiBbICfhgJThgLbhgJThgIDhgLonLCAn4YCK4YCU4YCxJyBdCiAgICAgKiBAcmV0dXJuIHtBcnJheX0KICAgICAqLwogICAgc3RhdGljIG1lcmlkaWVtcyh7IGxvY2FsZSA9IG51bGwgfSA9IHt9KSB7CiAgICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSkubWVyaWRpZW1zKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgZXJhcywgc3VjaCBhcyBbJ0JDJywgJ0FEJ10uIFRoZSBsb2NhbGUgY2FuIGJlIHNwZWNpZmllZCwgYnV0IHRoZSBjYWxlbmRhciBzeXN0ZW0gaXMgYWx3YXlzIEdyZWdvcmlhbi4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdzaG9ydCddIC0gdGhlIGxlbmd0aCBvZiB0aGUgZXJhIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzICJzaG9ydCIgb3IgImxvbmciLgogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZQogICAgICogQGV4YW1wbGUgSW5mby5lcmFzKCkgLy89PiBbICdCQycsICdBRCcgXQogICAgICogQGV4YW1wbGUgSW5mby5lcmFzKCdsb25nJykgLy89PiBbICdCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJyBdCiAgICAgKiBAZXhhbXBsZSBJbmZvLmVyYXMoJ2xvbmcnLCB7IGxvY2FsZTogJ2ZyJyB9KSAvLz0+IFsgJ2F2YW50IErDqXN1cy1DaHJpc3QnLCAnYXByw6hzIErDqXN1cy1DaHJpc3QnIF0KICAgICAqIEByZXR1cm4ge0FycmF5fQogICAgICovCiAgICBzdGF0aWMgZXJhcyhsZW5ndGggPSAic2hvcnQiLCB7IGxvY2FsZSA9IG51bGwgfSA9IHt9KSB7CiAgICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVsbCwgImdyZWdvcnkiKS5lcmFzKGxlbmd0aCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIHNldCBvZiBhdmFpbGFibGUgZmVhdHVyZXMgaW4gdGhpcyBlbnZpcm9ubWVudC4KICAgICAqIFNvbWUgZmVhdHVyZXMgb2YgTHV4b24gYXJlIG5vdCBhdmFpbGFibGUgaW4gYWxsIGVudmlyb25tZW50cy4gRm9yIGV4YW1wbGUsIG9uIG9sZGVyIGJyb3dzZXJzLCByZWxhdGl2ZSB0aW1lIGZvcm1hdHRpbmcgc3VwcG9ydCBpcyBub3QgYXZhaWxhYmxlLiBVc2UgdGhpcyBmdW5jdGlvbiB0byBmaWd1cmUgb3V0IGlmIHRoYXQncyB0aGUgY2FzZS4KICAgICAqIEtleXM6CiAgICAgKiAqIGByZWxhdGl2ZWA6IHdoZXRoZXIgdGhpcyBlbnZpcm9ubWVudCBzdXBwb3J0cyByZWxhdGl2ZSB0aW1lIGZvcm1hdHRpbmcKICAgICAqIEBleGFtcGxlIEluZm8uZmVhdHVyZXMoKSAvLz0+IHsgcmVsYXRpdmU6IGZhbHNlIH0KICAgICAqIEByZXR1cm4ge09iamVjdH0KICAgICAqLwogICAgc3RhdGljIGZlYXR1cmVzKCkgewogICAgICByZXR1cm4geyByZWxhdGl2ZTogaGFzUmVsYXRpdmUoKSB9OwogICAgfQogIH0KCiAgZnVuY3Rpb24gZGF5RGlmZihlYXJsaWVyLCBsYXRlcikgewogICAgY29uc3QgdXRjRGF5U3RhcnQgPSAoZHQpID0+IGR0LnRvVVRDKDAsIHsga2VlcExvY2FsVGltZTogdHJ1ZSB9KS5zdGFydE9mKCJkYXkiKS52YWx1ZU9mKCksCiAgICAgIG1zID0gdXRjRGF5U3RhcnQobGF0ZXIpIC0gdXRjRGF5U3RhcnQoZWFybGllcik7CiAgICByZXR1cm4gTWF0aC5mbG9vcihEdXJhdGlvbi5mcm9tTWlsbGlzKG1zKS5hcygiZGF5cyIpKTsKICB9CgogIGZ1bmN0aW9uIGhpZ2hPcmRlckRpZmZzKGN1cnNvciwgbGF0ZXIsIHVuaXRzKSB7CiAgICBjb25zdCBkaWZmZXJzID0gWwogICAgICBbInllYXJzIiwgKGEsIGIpID0+IGIueWVhciAtIGEueWVhcl0sCiAgICAgIFsicXVhcnRlcnMiLCAoYSwgYikgPT4gYi5xdWFydGVyIC0gYS5xdWFydGVyICsgKGIueWVhciAtIGEueWVhcikgKiA0XSwKICAgICAgWyJtb250aHMiLCAoYSwgYikgPT4gYi5tb250aCAtIGEubW9udGggKyAoYi55ZWFyIC0gYS55ZWFyKSAqIDEyXSwKICAgICAgWwogICAgICAgICJ3ZWVrcyIsCiAgICAgICAgKGEsIGIpID0+IHsKICAgICAgICAgIGNvbnN0IGRheXMgPSBkYXlEaWZmKGEsIGIpOwogICAgICAgICAgcmV0dXJuIChkYXlzIC0gKGRheXMgJSA3KSkgLyA3OwogICAgICAgIH0sCiAgICAgIF0sCiAgICAgIFsiZGF5cyIsIGRheURpZmZdLAogICAgXTsKCiAgICBjb25zdCByZXN1bHRzID0ge307CiAgICBsZXQgbG93ZXN0T3JkZXIsIGhpZ2hXYXRlcjsKCiAgICBmb3IgKGNvbnN0IFt1bml0LCBkaWZmZXJdIG9mIGRpZmZlcnMpIHsKICAgICAgaWYgKHVuaXRzLmluZGV4T2YodW5pdCkgPj0gMCkgewogICAgICAgIGxvd2VzdE9yZGVyID0gdW5pdDsKCiAgICAgICAgbGV0IGRlbHRhID0gZGlmZmVyKGN1cnNvciwgbGF0ZXIpOwogICAgICAgIGhpZ2hXYXRlciA9IGN1cnNvci5wbHVzKHsgW3VuaXRdOiBkZWx0YSB9KTsKCiAgICAgICAgaWYgKGhpZ2hXYXRlciA+IGxhdGVyKSB7CiAgICAgICAgICBjdXJzb3IgPSBjdXJzb3IucGx1cyh7IFt1bml0XTogZGVsdGEgLSAxIH0pOwogICAgICAgICAgZGVsdGEgLT0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3Vyc29yID0gaGlnaFdhdGVyOwogICAgICAgIH0KCiAgICAgICAgcmVzdWx0c1t1bml0XSA9IGRlbHRhOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIFtjdXJzb3IsIHJlc3VsdHMsIGhpZ2hXYXRlciwgbG93ZXN0T3JkZXJdOwogIH0KCiAgZnVuY3Rpb24gZGlmZiAoZWFybGllciwgbGF0ZXIsIHVuaXRzLCBvcHRzKSB7CiAgICBsZXQgW2N1cnNvciwgcmVzdWx0cywgaGlnaFdhdGVyLCBsb3dlc3RPcmRlcl0gPSBoaWdoT3JkZXJEaWZmcyhlYXJsaWVyLCBsYXRlciwgdW5pdHMpOwoKICAgIGNvbnN0IHJlbWFpbmluZ01pbGxpcyA9IGxhdGVyIC0gY3Vyc29yOwoKICAgIGNvbnN0IGxvd2VyT3JkZXJVbml0cyA9IHVuaXRzLmZpbHRlcigKICAgICAgKHUpID0+IFsiaG91cnMiLCAibWludXRlcyIsICJzZWNvbmRzIiwgIm1pbGxpc2Vjb25kcyJdLmluZGV4T2YodSkgPj0gMAogICAgKTsKCiAgICBpZiAobG93ZXJPcmRlclVuaXRzLmxlbmd0aCA9PT0gMCkgewogICAgICBpZiAoaGlnaFdhdGVyIDwgbGF0ZXIpIHsKICAgICAgICBoaWdoV2F0ZXIgPSBjdXJzb3IucGx1cyh7IFtsb3dlc3RPcmRlcl06IDEgfSk7CiAgICAgIH0KCiAgICAgIGlmIChoaWdoV2F0ZXIgIT09IGN1cnNvcikgewogICAgICAgIHJlc3VsdHNbbG93ZXN0T3JkZXJdID0gKHJlc3VsdHNbbG93ZXN0T3JkZXJdIHx8IDApICsgcmVtYWluaW5nTWlsbGlzIC8gKGhpZ2hXYXRlciAtIGN1cnNvcik7CiAgICAgIH0KICAgIH0KCiAgICBjb25zdCBkdXJhdGlvbiA9IER1cmF0aW9uLmZyb21PYmplY3QocmVzdWx0cywgb3B0cyk7CgogICAgaWYgKGxvd2VyT3JkZXJVbml0cy5sZW5ndGggPiAwKSB7CiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tTWlsbGlzKHJlbWFpbmluZ01pbGxpcywgb3B0cykKICAgICAgICAuc2hpZnRUbyguLi5sb3dlck9yZGVyVW5pdHMpCiAgICAgICAgLnBsdXMoZHVyYXRpb24pOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGR1cmF0aW9uOwogICAgfQogIH0KCiAgY29uc3QgbnVtYmVyaW5nU3lzdGVtcyA9IHsKICAgIGFyYWI6ICJbXHUwNjYwLVx1MDY2OV0iLAogICAgYXJhYmV4dDogIltcdTA2RjAtXHUwNkY5XSIsCiAgICBiYWxpOiAiW1x1MUI1MC1cdTFCNTldIiwKICAgIGJlbmc6ICJbXHUwOUU2LVx1MDlFRl0iLAogICAgZGV2YTogIltcdTA5NjYtXHUwOTZGXSIsCiAgICBmdWxsd2lkZTogIltcdUZGMTAtXHVGRjE5XSIsCiAgICBndWpyOiAiW1x1MEFFNi1cdTBBRUZdIiwKICAgIGhhbmlkZWM6ICJb44CHfOS4gHzkuox85LiJfOWbm3zkupR85YWtfOS4g3zlhat85LmdXSIsCiAgICBraG1yOiAiW1x1MTdFMC1cdTE3RTldIiwKICAgIGtuZGE6ICJbXHUwQ0U2LVx1MENFRl0iLAogICAgbGFvbzogIltcdTBFRDAtXHUwRUQ5XSIsCiAgICBsaW1iOiAiW1x1MTk0Ni1cdTE5NEZdIiwKICAgIG1seW06ICJbXHUwRDY2LVx1MEQ2Rl0iLAogICAgbW9uZzogIltcdTE4MTAtXHUxODE5XSIsCiAgICBteW1yOiAiW1x1MTA0MC1cdTEwNDldIiwKICAgIG9yeWE6ICJbXHUwQjY2LVx1MEI2Rl0iLAogICAgdGFtbGRlYzogIltcdTBCRTYtXHUwQkVGXSIsCiAgICB0ZWx1OiAiW1x1MEM2Ni1cdTBDNkZdIiwKICAgIHRoYWk6ICJbXHUwRTUwLVx1MEU1OV0iLAogICAgdGlidDogIltcdTBGMjAtXHUwRjI5XSIsCiAgICBsYXRuOiAiXFxkIiwKICB9OwoKICBjb25zdCBudW1iZXJpbmdTeXN0ZW1zVVRGMTYgPSB7CiAgICBhcmFiOiBbMTYzMiwgMTY0MV0sCiAgICBhcmFiZXh0OiBbMTc3NiwgMTc4NV0sCiAgICBiYWxpOiBbNjk5MiwgNzAwMV0sCiAgICBiZW5nOiBbMjUzNCwgMjU0M10sCiAgICBkZXZhOiBbMjQwNiwgMjQxNV0sCiAgICBmdWxsd2lkZTogWzY1Mjk2LCA2NTMwM10sCiAgICBndWpyOiBbMjc5MCwgMjc5OV0sCiAgICBraG1yOiBbNjExMiwgNjEyMV0sCiAgICBrbmRhOiBbMzMwMiwgMzMxMV0sCiAgICBsYW9vOiBbMzc5MiwgMzgwMV0sCiAgICBsaW1iOiBbNjQ3MCwgNjQ3OV0sCiAgICBtbHltOiBbMzQzMCwgMzQzOV0sCiAgICBtb25nOiBbNjE2MCwgNjE2OV0sCiAgICBteW1yOiBbNDE2MCwgNDE2OV0sCiAgICBvcnlhOiBbMjkxOCwgMjkyN10sCiAgICB0YW1sZGVjOiBbMzA0NiwgMzA1NV0sCiAgICB0ZWx1OiBbMzE3NCwgMzE4M10sCiAgICB0aGFpOiBbMzY2NCwgMzY3M10sCiAgICB0aWJ0OiBbMzg3MiwgMzg4MV0sCiAgfTsKCiAgY29uc3QgaGFuaWRlY0NoYXJzID0gbnVtYmVyaW5nU3lzdGVtcy5oYW5pZGVjLnJlcGxhY2UoL1tcW3xcXV0vZywgIiIpLnNwbGl0KCIiKTsKCiAgZnVuY3Rpb24gcGFyc2VEaWdpdHMoc3RyKSB7CiAgICBsZXQgdmFsdWUgPSBwYXJzZUludChzdHIsIDEwKTsKICAgIGlmIChpc05hTih2YWx1ZSkpIHsKICAgICAgdmFsdWUgPSAiIjsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHsKICAgICAgICBjb25zdCBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7CgogICAgICAgIGlmIChzdHJbaV0uc2VhcmNoKG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYykgIT09IC0xKSB7CiAgICAgICAgICB2YWx1ZSArPSBoYW5pZGVjQ2hhcnMuaW5kZXhPZihzdHJbaV0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBudW1iZXJpbmdTeXN0ZW1zVVRGMTYpIHsKICAgICAgICAgICAgY29uc3QgW21pbiwgbWF4XSA9IG51bWJlcmluZ1N5c3RlbXNVVEYxNltrZXldOwogICAgICAgICAgICBpZiAoY29kZSA+PSBtaW4gJiYgY29kZSA8PSBtYXgpIHsKICAgICAgICAgICAgICB2YWx1ZSArPSBjb2RlIC0gbWluOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gZGlnaXRSZWdleCh7IG51bWJlcmluZ1N5c3RlbSB9LCBhcHBlbmQgPSAiIikgewogICAgcmV0dXJuIG5ldyBSZWdFeHAoYCR7bnVtYmVyaW5nU3lzdGVtc1tudW1iZXJpbmdTeXN0ZW0gfHwgImxhdG4iXX0ke2FwcGVuZH1gKTsKICB9CgogIGNvbnN0IE1JU1NJTkdfRlRQID0gIm1pc3NpbmcgSW50bC5EYXRlVGltZUZvcm1hdC5mb3JtYXRUb1BhcnRzIHN1cHBvcnQiOwoKICBmdW5jdGlvbiBpbnRVbml0KHJlZ2V4LCBwb3N0ID0gKGkpID0+IGkpIHsKICAgIHJldHVybiB7IHJlZ2V4LCBkZXNlcjogKFtzXSkgPT4gcG9zdChwYXJzZURpZ2l0cyhzKSkgfTsKICB9CgogIGNvbnN0IE5CU1AgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDE2MCk7CiAgY29uc3Qgc3BhY2VPck5CU1AgPSBgWyAke05CU1B9XWA7CiAgY29uc3Qgc3BhY2VPck5CU1BSZWdFeHAgPSBuZXcgUmVnRXhwKHNwYWNlT3JOQlNQLCAiZyIpOwoKICBmdW5jdGlvbiBmaXhMaXN0UmVnZXgocykgewogICAgLy8gbWFrZSBkb3RzIG9wdGlvbmFsIGFuZCBhbHNvIG1ha2UgdGhlbSBsaXRlcmFsCiAgICAvLyBtYWtlIHNwYWNlIGFuZCBub24gYnJlYWthYmxlIHNwYWNlIGNoYXJhY3RlcnMgaW50ZXJjaGFuZ2VhYmxlCiAgICByZXR1cm4gcy5yZXBsYWNlKC9cLi9nLCAiXFwuPyIpLnJlcGxhY2Uoc3BhY2VPck5CU1BSZWdFeHAsIHNwYWNlT3JOQlNQKTsKICB9CgogIGZ1bmN0aW9uIHN0cmlwSW5zZW5zaXRpdml0aWVzKHMpIHsKICAgIHJldHVybiBzCiAgICAgIC5yZXBsYWNlKC9cLi9nLCAiIikgLy8gaWdub3JlIGRvdHMgdGhhdCB3ZXJlIG1hZGUgb3B0aW9uYWwKICAgICAgLnJlcGxhY2Uoc3BhY2VPck5CU1BSZWdFeHAsICIgIikgLy8gaW50ZXJjaGFuZ2Ugc3BhY2UgYW5kIG5ic3AKICAgICAgLnRvTG93ZXJDYXNlKCk7CiAgfQoKICBmdW5jdGlvbiBvbmVPZihzdHJpbmdzLCBzdGFydEluZGV4KSB7CiAgICBpZiAoc3RyaW5ncyA9PT0gbnVsbCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgcmVnZXg6IFJlZ0V4cChzdHJpbmdzLm1hcChmaXhMaXN0UmVnZXgpLmpvaW4oInwiKSksCiAgICAgICAgZGVzZXI6IChbc10pID0+CiAgICAgICAgICBzdHJpbmdzLmZpbmRJbmRleCgoaSkgPT4gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykgPT09IHN0cmlwSW5zZW5zaXRpdml0aWVzKGkpKSArIHN0YXJ0SW5kZXgsCiAgICAgIH07CiAgICB9CiAgfQoKICBmdW5jdGlvbiBvZmZzZXQocmVnZXgsIGdyb3VwcykgewogICAgcmV0dXJuIHsgcmVnZXgsIGRlc2VyOiAoWywgaCwgbV0pID0+IHNpZ25lZE9mZnNldChoLCBtKSwgZ3JvdXBzIH07CiAgfQoKICBmdW5jdGlvbiBzaW1wbGUocmVnZXgpIHsKICAgIHJldHVybiB7IHJlZ2V4LCBkZXNlcjogKFtzXSkgPT4gcyB9OwogIH0KCiAgZnVuY3Rpb24gZXNjYXBlVG9rZW4odmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bXC1cW1xde30oKSorPy4sXFxcXiR8I1xzXS9nLCAiXFwkJiIpOwogIH0KCiAgZnVuY3Rpb24gdW5pdEZvclRva2VuKHRva2VuLCBsb2MpIHsKICAgIGNvbnN0IG9uZSA9IGRpZ2l0UmVnZXgobG9jKSwKICAgICAgdHdvID0gZGlnaXRSZWdleChsb2MsICJ7Mn0iKSwKICAgICAgdGhyZWUgPSBkaWdpdFJlZ2V4KGxvYywgInszfSIpLAogICAgICBmb3VyID0gZGlnaXRSZWdleChsb2MsICJ7NH0iKSwKICAgICAgc2l4ID0gZGlnaXRSZWdleChsb2MsICJ7Nn0iKSwKICAgICAgb25lT3JUd28gPSBkaWdpdFJlZ2V4KGxvYywgInsxLDJ9IiksCiAgICAgIG9uZVRvVGhyZWUgPSBkaWdpdFJlZ2V4KGxvYywgInsxLDN9IiksCiAgICAgIG9uZVRvU2l4ID0gZGlnaXRSZWdleChsb2MsICJ7MSw2fSIpLAogICAgICBvbmVUb05pbmUgPSBkaWdpdFJlZ2V4KGxvYywgInsxLDl9IiksCiAgICAgIHR3b1RvRm91ciA9IGRpZ2l0UmVnZXgobG9jLCAiezIsNH0iKSwKICAgICAgZm91clRvU2l4ID0gZGlnaXRSZWdleChsb2MsICJ7NCw2fSIpLAogICAgICBsaXRlcmFsID0gKHQpID0+ICh7IHJlZ2V4OiBSZWdFeHAoZXNjYXBlVG9rZW4odC52YWwpKSwgZGVzZXI6IChbc10pID0+IHMsIGxpdGVyYWw6IHRydWUgfSksCiAgICAgIHVuaXRhdGUgPSAodCkgPT4gewogICAgICAgIGlmICh0b2tlbi5saXRlcmFsKSB7CiAgICAgICAgICByZXR1cm4gbGl0ZXJhbCh0KTsKICAgICAgICB9CiAgICAgICAgc3dpdGNoICh0LnZhbCkgewogICAgICAgICAgLy8gZXJhCiAgICAgICAgICBjYXNlICJHIjoKICAgICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5lcmFzKCJzaG9ydCIsIGZhbHNlKSwgMCk7CiAgICAgICAgICBjYXNlICJHRyI6CiAgICAgICAgICAgIHJldHVybiBvbmVPZihsb2MuZXJhcygibG9uZyIsIGZhbHNlKSwgMCk7CiAgICAgICAgICAvLyB5ZWFycwogICAgICAgICAgY2FzZSAieSI6CiAgICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZVRvU2l4KTsKICAgICAgICAgIGNhc2UgInl5IjoKICAgICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvVG9Gb3VyLCB1bnRydW5jYXRlWWVhcik7CiAgICAgICAgICBjYXNlICJ5eXl5IjoKICAgICAgICAgICAgcmV0dXJuIGludFVuaXQoZm91cik7CiAgICAgICAgICBjYXNlICJ5eXl5eSI6CiAgICAgICAgICAgIHJldHVybiBpbnRVbml0KGZvdXJUb1NpeCk7CiAgICAgICAgICBjYXNlICJ5eXl5eXkiOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdChzaXgpOwogICAgICAgICAgLy8gbW9udGhzCiAgICAgICAgICBjYXNlICJNIjoKICAgICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pOwogICAgICAgICAgY2FzZSAiTU0iOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pOwogICAgICAgICAgY2FzZSAiTU1NIjoKICAgICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoInNob3J0IiwgdHJ1ZSwgZmFsc2UpLCAxKTsKICAgICAgICAgIGNhc2UgIk1NTU0iOgogICAgICAgICAgICByZXR1cm4gb25lT2YobG9jLm1vbnRocygibG9uZyIsIHRydWUsIGZhbHNlKSwgMSk7CiAgICAgICAgICBjYXNlICJMIjoKICAgICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pOwogICAgICAgICAgY2FzZSAiTEwiOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pOwogICAgICAgICAgY2FzZSAiTExMIjoKICAgICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoInNob3J0IiwgZmFsc2UsIGZhbHNlKSwgMSk7CiAgICAgICAgICBjYXNlICJMTExMIjoKICAgICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoImxvbmciLCBmYWxzZSwgZmFsc2UpLCAxKTsKICAgICAgICAgIC8vIGRhdGVzCiAgICAgICAgICBjYXNlICJkIjoKICAgICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pOwogICAgICAgICAgY2FzZSAiZGQiOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pOwogICAgICAgICAgLy8gb3JkaW5hbHMKICAgICAgICAgIGNhc2UgIm8iOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVUb1RocmVlKTsKICAgICAgICAgIGNhc2UgIm9vbyI6CiAgICAgICAgICAgIHJldHVybiBpbnRVbml0KHRocmVlKTsKICAgICAgICAgIC8vIHRpbWUKICAgICAgICAgIGNhc2UgIkhIIjoKICAgICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTsKICAgICAgICAgIGNhc2UgIkgiOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7CiAgICAgICAgICBjYXNlICJoaCI6CiAgICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7CiAgICAgICAgICBjYXNlICJoIjoKICAgICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pOwogICAgICAgICAgY2FzZSAibW0iOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pOwogICAgICAgICAgY2FzZSAibSI6CiAgICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTsKICAgICAgICAgIGNhc2UgInEiOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7CiAgICAgICAgICBjYXNlICJxcSI6CiAgICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7CiAgICAgICAgICBjYXNlICJzIjoKICAgICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pOwogICAgICAgICAgY2FzZSAic3MiOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pOwogICAgICAgICAgY2FzZSAiUyI6CiAgICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZVRvVGhyZWUpOwogICAgICAgICAgY2FzZSAiU1NTIjoKICAgICAgICAgICAgcmV0dXJuIGludFVuaXQodGhyZWUpOwogICAgICAgICAgY2FzZSAidSI6CiAgICAgICAgICAgIHJldHVybiBzaW1wbGUob25lVG9OaW5lKTsKICAgICAgICAgIGNhc2UgInV1IjoKICAgICAgICAgICAgcmV0dXJuIHNpbXBsZShvbmVPclR3byk7CiAgICAgICAgICBjYXNlICJ1dXUiOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmUpOwogICAgICAgICAgLy8gbWVyaWRpZW0KICAgICAgICAgIGNhc2UgImEiOgogICAgICAgICAgICByZXR1cm4gb25lT2YobG9jLm1lcmlkaWVtcygpLCAwKTsKICAgICAgICAgIC8vIHdlZWtZZWFyIChrKQogICAgICAgICAgY2FzZSAia2trayI6CiAgICAgICAgICAgIHJldHVybiBpbnRVbml0KGZvdXIpOwogICAgICAgICAgY2FzZSAia2siOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIHVudHJ1bmNhdGVZZWFyKTsKICAgICAgICAgIC8vIHdlZWtOdW1iZXIgKFcpCiAgICAgICAgICBjYXNlICJXIjoKICAgICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pOwogICAgICAgICAgY2FzZSAiV1ciOgogICAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pOwogICAgICAgICAgLy8gd2Vla2RheXMKICAgICAgICAgIGNhc2UgIkUiOgogICAgICAgICAgY2FzZSAiYyI6CiAgICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZSk7CiAgICAgICAgICBjYXNlICJFRUUiOgogICAgICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKCJzaG9ydCIsIGZhbHNlLCBmYWxzZSksIDEpOwogICAgICAgICAgY2FzZSAiRUVFRSI6CiAgICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoImxvbmciLCBmYWxzZSwgZmFsc2UpLCAxKTsKICAgICAgICAgIGNhc2UgImNjYyI6CiAgICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoInNob3J0IiwgdHJ1ZSwgZmFsc2UpLCAxKTsKICAgICAgICAgIGNhc2UgImNjY2MiOgogICAgICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKCJsb25nIiwgdHJ1ZSwgZmFsc2UpLCAxKTsKICAgICAgICAgIC8vIG9mZnNldC96b25lCiAgICAgICAgICBjYXNlICJaIjoKICAgICAgICAgIGNhc2UgIlpaIjoKICAgICAgICAgICAgcmV0dXJuIG9mZnNldChuZXcgUmVnRXhwKGAoWystXSR7b25lT3JUd28uc291cmNlfSkoPzo6KCR7dHdvLnNvdXJjZX0pKT9gKSwgMik7CiAgICAgICAgICBjYXNlICJaWloiOgogICAgICAgICAgICByZXR1cm4gb2Zmc2V0KG5ldyBSZWdFeHAoYChbKy1dJHtvbmVPclR3by5zb3VyY2V9KSgke3R3by5zb3VyY2V9KT9gKSwgMik7CiAgICAgICAgICAvLyB3ZSBkb24ndCBzdXBwb3J0IFpaWlogKFBTVCkgb3IgWlpaWlogKFBhY2lmaWMgU3RhbmRhcmQgVGltZSkgaW4gcGFyc2luZwogICAgICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGFueSB3YXkgdG8gZmlndXJlIG91dCB3aGF0IHRoZXkgYXJlCiAgICAgICAgICBjYXNlICJ6IjoKICAgICAgICAgICAgcmV0dXJuIHNpbXBsZSgvW2Etel8rLS9dezEsMjU2fT8vaSk7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICByZXR1cm4gbGl0ZXJhbCh0KTsKICAgICAgICB9CiAgICAgIH07CgogICAgY29uc3QgdW5pdCA9IHVuaXRhdGUodG9rZW4pIHx8IHsKICAgICAgaW52YWxpZFJlYXNvbjogTUlTU0lOR19GVFAsCiAgICB9OwoKICAgIHVuaXQudG9rZW4gPSB0b2tlbjsKCiAgICByZXR1cm4gdW5pdDsKICB9CgogIGNvbnN0IHBhcnRUeXBlU3R5bGVUb1Rva2VuVmFsID0gewogICAgeWVhcjogewogICAgICAiMi1kaWdpdCI6ICJ5eSIsCiAgICAgIG51bWVyaWM6ICJ5eXl5eSIsCiAgICB9LAogICAgbW9udGg6IHsKICAgICAgbnVtZXJpYzogIk0iLAogICAgICAiMi1kaWdpdCI6ICJNTSIsCiAgICAgIHNob3J0OiAiTU1NIiwKICAgICAgbG9uZzogIk1NTU0iLAogICAgfSwKICAgIGRheTogewogICAgICBudW1lcmljOiAiZCIsCiAgICAgICIyLWRpZ2l0IjogImRkIiwKICAgIH0sCiAgICB3ZWVrZGF5OiB7CiAgICAgIHNob3J0OiAiRUVFIiwKICAgICAgbG9uZzogIkVFRUUiLAogICAgfSwKICAgIGRheXBlcmlvZDogImEiLAogICAgZGF5UGVyaW9kOiAiYSIsCiAgICBob3VyOiB7CiAgICAgIG51bWVyaWM6ICJoIiwKICAgICAgIjItZGlnaXQiOiAiaGgiLAogICAgfSwKICAgIG1pbnV0ZTogewogICAgICBudW1lcmljOiAibSIsCiAgICAgICIyLWRpZ2l0IjogIm1tIiwKICAgIH0sCiAgICBzZWNvbmQ6IHsKICAgICAgbnVtZXJpYzogInMiLAogICAgICAiMi1kaWdpdCI6ICJzcyIsCiAgICB9LAogICAgdGltZVpvbmVOYW1lOiB7CiAgICAgIGxvbmc6ICJaWlpaWiIsCiAgICAgIHNob3J0OiAiWlpaIiwKICAgIH0sCiAgfTsKCiAgZnVuY3Rpb24gdG9rZW5Gb3JQYXJ0KHBhcnQsIGxvY2FsZSwgZm9ybWF0T3B0cykgewogICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gcGFydDsKCiAgICBpZiAodHlwZSA9PT0gImxpdGVyYWwiKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgbGl0ZXJhbDogdHJ1ZSwKICAgICAgICB2YWw6IHZhbHVlLAogICAgICB9OwogICAgfQoKICAgIGNvbnN0IHN0eWxlID0gZm9ybWF0T3B0c1t0eXBlXTsKCiAgICBsZXQgdmFsID0gcGFydFR5cGVTdHlsZVRvVG9rZW5WYWxbdHlwZV07CiAgICBpZiAodHlwZW9mIHZhbCA9PT0gIm9iamVjdCIpIHsKICAgICAgdmFsID0gdmFsW3N0eWxlXTsKICAgIH0KCiAgICBpZiAodmFsKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgbGl0ZXJhbDogZmFsc2UsCiAgICAgICAgdmFsLAogICAgICB9OwogICAgfQoKICAgIHJldHVybiB1bmRlZmluZWQ7CiAgfQoKICBmdW5jdGlvbiBidWlsZFJlZ2V4KHVuaXRzKSB7CiAgICBjb25zdCByZSA9IHVuaXRzLm1hcCgodSkgPT4gdS5yZWdleCkucmVkdWNlKChmLCByKSA9PiBgJHtmfSgke3Iuc291cmNlfSlgLCAiIik7CiAgICByZXR1cm4gW2BeJHtyZX0kYCwgdW5pdHNdOwogIH0KCiAgZnVuY3Rpb24gbWF0Y2goaW5wdXQsIHJlZ2V4LCBoYW5kbGVycykgewogICAgY29uc3QgbWF0Y2hlcyA9IGlucHV0Lm1hdGNoKHJlZ2V4KTsKCiAgICBpZiAobWF0Y2hlcykgewogICAgICBjb25zdCBhbGwgPSB7fTsKICAgICAgbGV0IG1hdGNoSW5kZXggPSAxOwogICAgICBmb3IgKGNvbnN0IGkgaW4gaGFuZGxlcnMpIHsKICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkoaGFuZGxlcnMsIGkpKSB7CiAgICAgICAgICBjb25zdCBoID0gaGFuZGxlcnNbaV0sCiAgICAgICAgICAgIGdyb3VwcyA9IGguZ3JvdXBzID8gaC5ncm91cHMgKyAxIDogMTsKICAgICAgICAgIGlmICghaC5saXRlcmFsICYmIGgudG9rZW4pIHsKICAgICAgICAgICAgYWxsW2gudG9rZW4udmFsWzBdXSA9IGguZGVzZXIobWF0Y2hlcy5zbGljZShtYXRjaEluZGV4LCBtYXRjaEluZGV4ICsgZ3JvdXBzKSk7CiAgICAgICAgICB9CiAgICAgICAgICBtYXRjaEluZGV4ICs9IGdyb3VwczsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIFttYXRjaGVzLCBhbGxdOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIFttYXRjaGVzLCB7fV07CiAgICB9CiAgfQoKICBmdW5jdGlvbiBkYXRlVGltZUZyb21NYXRjaGVzKG1hdGNoZXMpIHsKICAgIGNvbnN0IHRvRmllbGQgPSAodG9rZW4pID0+IHsKICAgICAgc3dpdGNoICh0b2tlbikgewogICAgICAgIGNhc2UgIlMiOgogICAgICAgICAgcmV0dXJuICJtaWxsaXNlY29uZCI7CiAgICAgICAgY2FzZSAicyI6CiAgICAgICAgICByZXR1cm4gInNlY29uZCI7CiAgICAgICAgY2FzZSAibSI6CiAgICAgICAgICByZXR1cm4gIm1pbnV0ZSI7CiAgICAgICAgY2FzZSAiaCI6CiAgICAgICAgY2FzZSAiSCI6CiAgICAgICAgICByZXR1cm4gImhvdXIiOwogICAgICAgIGNhc2UgImQiOgogICAgICAgICAgcmV0dXJuICJkYXkiOwogICAgICAgIGNhc2UgIm8iOgogICAgICAgICAgcmV0dXJuICJvcmRpbmFsIjsKICAgICAgICBjYXNlICJMIjoKICAgICAgICBjYXNlICJNIjoKICAgICAgICAgIHJldHVybiAibW9udGgiOwogICAgICAgIGNhc2UgInkiOgogICAgICAgICAgcmV0dXJuICJ5ZWFyIjsKICAgICAgICBjYXNlICJFIjoKICAgICAgICBjYXNlICJjIjoKICAgICAgICAgIHJldHVybiAid2Vla2RheSI7CiAgICAgICAgY2FzZSAiVyI6CiAgICAgICAgICByZXR1cm4gIndlZWtOdW1iZXIiOwogICAgICAgIGNhc2UgImsiOgogICAgICAgICAgcmV0dXJuICJ3ZWVrWWVhciI7CiAgICAgICAgY2FzZSAicSI6CiAgICAgICAgICByZXR1cm4gInF1YXJ0ZXIiOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfTsKCiAgICBsZXQgem9uZSA9IG51bGw7CiAgICBsZXQgc3BlY2lmaWNPZmZzZXQ7CiAgICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMueikpIHsKICAgICAgem9uZSA9IElBTkFab25lLmNyZWF0ZShtYXRjaGVzLnopOwogICAgfQoKICAgIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy5aKSkgewogICAgICBpZiAoIXpvbmUpIHsKICAgICAgICB6b25lID0gbmV3IEZpeGVkT2Zmc2V0Wm9uZShtYXRjaGVzLlopOwogICAgICB9CiAgICAgIHNwZWNpZmljT2Zmc2V0ID0gbWF0Y2hlcy5aOwogICAgfQoKICAgIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy5xKSkgewogICAgICBtYXRjaGVzLk0gPSAobWF0Y2hlcy5xIC0gMSkgKiAzICsgMTsKICAgIH0KCiAgICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMuaCkpIHsKICAgICAgaWYgKG1hdGNoZXMuaCA8IDEyICYmIG1hdGNoZXMuYSA9PT0gMSkgewogICAgICAgIG1hdGNoZXMuaCArPSAxMjsKICAgICAgfSBlbHNlIGlmIChtYXRjaGVzLmggPT09IDEyICYmIG1hdGNoZXMuYSA9PT0gMCkgewogICAgICAgIG1hdGNoZXMuaCA9IDA7CiAgICAgIH0KICAgIH0KCiAgICBpZiAobWF0Y2hlcy5HID09PSAwICYmIG1hdGNoZXMueSkgewogICAgICBtYXRjaGVzLnkgPSAtbWF0Y2hlcy55OwogICAgfQoKICAgIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy51KSkgewogICAgICBtYXRjaGVzLlMgPSBwYXJzZU1pbGxpcyhtYXRjaGVzLnUpOwogICAgfQoKICAgIGNvbnN0IHZhbHMgPSBPYmplY3Qua2V5cyhtYXRjaGVzKS5yZWR1Y2UoKHIsIGspID0+IHsKICAgICAgY29uc3QgZiA9IHRvRmllbGQoayk7CiAgICAgIGlmIChmKSB7CiAgICAgICAgcltmXSA9IG1hdGNoZXNba107CiAgICAgIH0KCiAgICAgIHJldHVybiByOwogICAgfSwge30pOwoKICAgIHJldHVybiBbdmFscywgem9uZSwgc3BlY2lmaWNPZmZzZXRdOwogIH0KCiAgbGV0IGR1bW15RGF0ZVRpbWVDYWNoZSA9IG51bGw7CgogIGZ1bmN0aW9uIGdldER1bW15RGF0ZVRpbWUoKSB7CiAgICBpZiAoIWR1bW15RGF0ZVRpbWVDYWNoZSkgewogICAgICBkdW1teURhdGVUaW1lQ2FjaGUgPSBEYXRlVGltZS5mcm9tTWlsbGlzKDE1NTU1NTU1NTU1NTUpOwogICAgfQoKICAgIHJldHVybiBkdW1teURhdGVUaW1lQ2FjaGU7CiAgfQoKICBmdW5jdGlvbiBtYXliZUV4cGFuZE1hY3JvVG9rZW4odG9rZW4sIGxvY2FsZSkgewogICAgaWYgKHRva2VuLmxpdGVyYWwpIHsKICAgICAgcmV0dXJuIHRva2VuOwogICAgfQoKICAgIGNvbnN0IGZvcm1hdE9wdHMgPSBGb3JtYXR0ZXIubWFjcm9Ub2tlblRvRm9ybWF0T3B0cyh0b2tlbi52YWwpOwogICAgY29uc3QgdG9rZW5zID0gZm9ybWF0T3B0c1RvVG9rZW5zKGZvcm1hdE9wdHMsIGxvY2FsZSk7CgogICAgaWYgKHRva2VucyA9PSBudWxsIHx8IHRva2Vucy5pbmNsdWRlcyh1bmRlZmluZWQpKSB7CiAgICAgIHJldHVybiB0b2tlbjsKICAgIH0KCiAgICByZXR1cm4gdG9rZW5zOwogIH0KCiAgZnVuY3Rpb24gZXhwYW5kTWFjcm9Ub2tlbnModG9rZW5zLCBsb2NhbGUpIHsKICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0KC4uLnRva2Vucy5tYXAoKHQpID0+IG1heWJlRXhwYW5kTWFjcm9Ub2tlbih0LCBsb2NhbGUpKSk7CiAgfQoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqLwoKICBmdW5jdGlvbiBleHBsYWluRnJvbVRva2Vucyhsb2NhbGUsIGlucHV0LCBmb3JtYXQpIHsKICAgIGNvbnN0IHRva2VucyA9IGV4cGFuZE1hY3JvVG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmb3JtYXQpLCBsb2NhbGUpLAogICAgICB1bml0cyA9IHRva2Vucy5tYXAoKHQpID0+IHVuaXRGb3JUb2tlbih0LCBsb2NhbGUpKSwKICAgICAgZGlzcXVhbGlmeWluZ1VuaXQgPSB1bml0cy5maW5kKCh0KSA9PiB0LmludmFsaWRSZWFzb24pOwoKICAgIGlmIChkaXNxdWFsaWZ5aW5nVW5pdCkgewogICAgICByZXR1cm4geyBpbnB1dCwgdG9rZW5zLCBpbnZhbGlkUmVhc29uOiBkaXNxdWFsaWZ5aW5nVW5pdC5pbnZhbGlkUmVhc29uIH07CiAgICB9IGVsc2UgewogICAgICBjb25zdCBbcmVnZXhTdHJpbmcsIGhhbmRsZXJzXSA9IGJ1aWxkUmVnZXgodW5pdHMpLAogICAgICAgIHJlZ2V4ID0gUmVnRXhwKHJlZ2V4U3RyaW5nLCAiaSIpLAogICAgICAgIFtyYXdNYXRjaGVzLCBtYXRjaGVzXSA9IG1hdGNoKGlucHV0LCByZWdleCwgaGFuZGxlcnMpLAogICAgICAgIFtyZXN1bHQsIHpvbmUsIHNwZWNpZmljT2Zmc2V0XSA9IG1hdGNoZXMKICAgICAgICAgID8gZGF0ZVRpbWVGcm9tTWF0Y2hlcyhtYXRjaGVzKQogICAgICAgICAgOiBbbnVsbCwgbnVsbCwgdW5kZWZpbmVkXTsKICAgICAgaWYgKGhhc093blByb3BlcnR5KG1hdGNoZXMsICJhIikgJiYgaGFzT3duUHJvcGVydHkobWF0Y2hlcywgIkgiKSkgewogICAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcigKICAgICAgICAgICJDYW4ndCBpbmNsdWRlIG1lcmlkaWVtIHdoZW4gc3BlY2lmeWluZyAyNC1ob3VyIGZvcm1hdCIKICAgICAgICApOwogICAgICB9CiAgICAgIHJldHVybiB7IGlucHV0LCB0b2tlbnMsIHJlZ2V4LCByYXdNYXRjaGVzLCBtYXRjaGVzLCByZXN1bHQsIHpvbmUsIHNwZWNpZmljT2Zmc2V0IH07CiAgICB9CiAgfQoKICBmdW5jdGlvbiBwYXJzZUZyb21Ub2tlbnMobG9jYWxlLCBpbnB1dCwgZm9ybWF0KSB7CiAgICBjb25zdCB7IHJlc3VsdCwgem9uZSwgc3BlY2lmaWNPZmZzZXQsIGludmFsaWRSZWFzb24gfSA9IGV4cGxhaW5Gcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCk7CiAgICByZXR1cm4gW3Jlc3VsdCwgem9uZSwgc3BlY2lmaWNPZmZzZXQsIGludmFsaWRSZWFzb25dOwogIH0KCiAgZnVuY3Rpb24gZm9ybWF0T3B0c1RvVG9rZW5zKGZvcm1hdE9wdHMsIGxvY2FsZSkgewogICAgaWYgKCFmb3JtYXRPcHRzKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIGNvbnN0IGZvcm1hdHRlciA9IEZvcm1hdHRlci5jcmVhdGUobG9jYWxlLCBmb3JtYXRPcHRzKTsKICAgIGNvbnN0IHBhcnRzID0gZm9ybWF0dGVyLmZvcm1hdERhdGVUaW1lUGFydHMoZ2V0RHVtbXlEYXRlVGltZSgpKTsKICAgIHJldHVybiBwYXJ0cy5tYXAoKHApID0+IHRva2VuRm9yUGFydChwLCBsb2NhbGUsIGZvcm1hdE9wdHMpKTsKICB9CgogIGNvbnN0IG5vbkxlYXBMYWRkZXIgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdLAogICAgbGVhcExhZGRlciA9IFswLCAzMSwgNjAsIDkxLCAxMjEsIDE1MiwgMTgyLCAyMTMsIDI0NCwgMjc0LCAzMDUsIDMzNV07CgogIGZ1bmN0aW9uIHVuaXRPdXRPZlJhbmdlKHVuaXQsIHZhbHVlKSB7CiAgICByZXR1cm4gbmV3IEludmFsaWQoCiAgICAgICJ1bml0IG91dCBvZiByYW5nZSIsCiAgICAgIGB5b3Ugc3BlY2lmaWVkICR7dmFsdWV9IChvZiB0eXBlICR7dHlwZW9mIHZhbHVlfSkgYXMgYSAke3VuaXR9LCB3aGljaCBpcyBpbnZhbGlkYAogICAgKTsKICB9CgogIGZ1bmN0aW9uIGRheU9mV2Vlayh5ZWFyLCBtb250aCwgZGF5KSB7CiAgICBjb25zdCBkID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGggLSAxLCBkYXkpKTsKCiAgICBpZiAoeWVhciA8IDEwMCAmJiB5ZWFyID49IDApIHsKICAgICAgZC5zZXRVVENGdWxsWWVhcihkLmdldFVUQ0Z1bGxZZWFyKCkgLSAxOTAwKTsKICAgIH0KCiAgICBjb25zdCBqcyA9IGQuZ2V0VVRDRGF5KCk7CgogICAgcmV0dXJuIGpzID09PSAwID8gNyA6IGpzOwogIH0KCiAgZnVuY3Rpb24gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSkgewogICAgcmV0dXJuIGRheSArIChpc0xlYXBZZWFyKHllYXIpID8gbGVhcExhZGRlciA6IG5vbkxlYXBMYWRkZXIpW21vbnRoIC0gMV07CiAgfQoKICBmdW5jdGlvbiB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpIHsKICAgIGNvbnN0IHRhYmxlID0gaXNMZWFwWWVhcih5ZWFyKSA/IGxlYXBMYWRkZXIgOiBub25MZWFwTGFkZGVyLAogICAgICBtb250aDAgPSB0YWJsZS5maW5kSW5kZXgoKGkpID0+IGkgPCBvcmRpbmFsKSwKICAgICAgZGF5ID0gb3JkaW5hbCAtIHRhYmxlW21vbnRoMF07CiAgICByZXR1cm4geyBtb250aDogbW9udGgwICsgMSwgZGF5IH07CiAgfQoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqLwoKICBmdW5jdGlvbiBncmVnb3JpYW5Ub1dlZWsoZ3JlZ09iaikgewogICAgY29uc3QgeyB5ZWFyLCBtb250aCwgZGF5IH0gPSBncmVnT2JqLAogICAgICBvcmRpbmFsID0gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSksCiAgICAgIHdlZWtkYXkgPSBkYXlPZldlZWsoeWVhciwgbW9udGgsIGRheSk7CgogICAgbGV0IHdlZWtOdW1iZXIgPSBNYXRoLmZsb29yKChvcmRpbmFsIC0gd2Vla2RheSArIDEwKSAvIDcpLAogICAgICB3ZWVrWWVhcjsKCiAgICBpZiAod2Vla051bWJlciA8IDEpIHsKICAgICAgd2Vla1llYXIgPSB5ZWFyIC0gMTsKICAgICAgd2Vla051bWJlciA9IHdlZWtzSW5XZWVrWWVhcih3ZWVrWWVhcik7CiAgICB9IGVsc2UgaWYgKHdlZWtOdW1iZXIgPiB3ZWVrc0luV2Vla1llYXIoeWVhcikpIHsKICAgICAgd2Vla1llYXIgPSB5ZWFyICsgMTsKICAgICAgd2Vla051bWJlciA9IDE7CiAgICB9IGVsc2UgewogICAgICB3ZWVrWWVhciA9IHllYXI7CiAgICB9CgogICAgcmV0dXJuIHsgd2Vla1llYXIsIHdlZWtOdW1iZXIsIHdlZWtkYXksIC4uLnRpbWVPYmplY3QoZ3JlZ09iaikgfTsKICB9CgogIGZ1bmN0aW9uIHdlZWtUb0dyZWdvcmlhbih3ZWVrRGF0YSkgewogICAgY29uc3QgeyB3ZWVrWWVhciwgd2Vla051bWJlciwgd2Vla2RheSB9ID0gd2Vla0RhdGEsCiAgICAgIHdlZWtkYXlPZkphbjQgPSBkYXlPZldlZWsod2Vla1llYXIsIDEsIDQpLAogICAgICB5ZWFySW5EYXlzID0gZGF5c0luWWVhcih3ZWVrWWVhcik7CgogICAgbGV0IG9yZGluYWwgPSB3ZWVrTnVtYmVyICogNyArIHdlZWtkYXkgLSB3ZWVrZGF5T2ZKYW40IC0gMywKICAgICAgeWVhcjsKCiAgICBpZiAob3JkaW5hbCA8IDEpIHsKICAgICAgeWVhciA9IHdlZWtZZWFyIC0gMTsKICAgICAgb3JkaW5hbCArPSBkYXlzSW5ZZWFyKHllYXIpOwogICAgfSBlbHNlIGlmIChvcmRpbmFsID4geWVhckluRGF5cykgewogICAgICB5ZWFyID0gd2Vla1llYXIgKyAxOwogICAgICBvcmRpbmFsIC09IGRheXNJblllYXIod2Vla1llYXIpOwogICAgfSBlbHNlIHsKICAgICAgeWVhciA9IHdlZWtZZWFyOwogICAgfQoKICAgIGNvbnN0IHsgbW9udGgsIGRheSB9ID0gdW5jb21wdXRlT3JkaW5hbCh5ZWFyLCBvcmRpbmFsKTsKICAgIHJldHVybiB7IHllYXIsIG1vbnRoLCBkYXksIC4uLnRpbWVPYmplY3Qod2Vla0RhdGEpIH07CiAgfQoKICBmdW5jdGlvbiBncmVnb3JpYW5Ub09yZGluYWwoZ3JlZ0RhdGEpIHsKICAgIGNvbnN0IHsgeWVhciwgbW9udGgsIGRheSB9ID0gZ3JlZ0RhdGE7CiAgICBjb25zdCBvcmRpbmFsID0gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSk7CiAgICByZXR1cm4geyB5ZWFyLCBvcmRpbmFsLCAuLi50aW1lT2JqZWN0KGdyZWdEYXRhKSB9OwogIH0KCiAgZnVuY3Rpb24gb3JkaW5hbFRvR3JlZ29yaWFuKG9yZGluYWxEYXRhKSB7CiAgICBjb25zdCB7IHllYXIsIG9yZGluYWwgfSA9IG9yZGluYWxEYXRhOwogICAgY29uc3QgeyBtb250aCwgZGF5IH0gPSB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpOwogICAgcmV0dXJuIHsgeWVhciwgbW9udGgsIGRheSwgLi4udGltZU9iamVjdChvcmRpbmFsRGF0YSkgfTsKICB9CgogIGZ1bmN0aW9uIGhhc0ludmFsaWRXZWVrRGF0YShvYmopIHsKICAgIGNvbnN0IHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoud2Vla1llYXIpLAogICAgICB2YWxpZFdlZWsgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla051bWJlciwgMSwgd2Vla3NJbldlZWtZZWFyKG9iai53ZWVrWWVhcikpLAogICAgICB2YWxpZFdlZWtkYXkgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla2RheSwgMSwgNyk7CgogICAgaWYgKCF2YWxpZFllYXIpIHsKICAgICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKCJ3ZWVrWWVhciIsIG9iai53ZWVrWWVhcik7CiAgICB9IGVsc2UgaWYgKCF2YWxpZFdlZWspIHsKICAgICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKCJ3ZWVrIiwgb2JqLndlZWspOwogICAgfSBlbHNlIGlmICghdmFsaWRXZWVrZGF5KSB7CiAgICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZSgid2Vla2RheSIsIG9iai53ZWVrZGF5KTsKICAgIH0gZWxzZSByZXR1cm4gZmFsc2U7CiAgfQoKICBmdW5jdGlvbiBoYXNJbnZhbGlkT3JkaW5hbERhdGEob2JqKSB7CiAgICBjb25zdCB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLnllYXIpLAogICAgICB2YWxpZE9yZGluYWwgPSBpbnRlZ2VyQmV0d2VlbihvYmoub3JkaW5hbCwgMSwgZGF5c0luWWVhcihvYmoueWVhcikpOwoKICAgIGlmICghdmFsaWRZZWFyKSB7CiAgICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZSgieWVhciIsIG9iai55ZWFyKTsKICAgIH0gZWxzZSBpZiAoIXZhbGlkT3JkaW5hbCkgewogICAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoIm9yZGluYWwiLCBvYmoub3JkaW5hbCk7CiAgICB9IGVsc2UgcmV0dXJuIGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEob2JqKSB7CiAgICBjb25zdCB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLnllYXIpLAogICAgICB2YWxpZE1vbnRoID0gaW50ZWdlckJldHdlZW4ob2JqLm1vbnRoLCAxLCAxMiksCiAgICAgIHZhbGlkRGF5ID0gaW50ZWdlckJldHdlZW4ob2JqLmRheSwgMSwgZGF5c0luTW9udGgob2JqLnllYXIsIG9iai5tb250aCkpOwoKICAgIGlmICghdmFsaWRZZWFyKSB7CiAgICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZSgieWVhciIsIG9iai55ZWFyKTsKICAgIH0gZWxzZSBpZiAoIXZhbGlkTW9udGgpIHsKICAgICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKCJtb250aCIsIG9iai5tb250aCk7CiAgICB9IGVsc2UgaWYgKCF2YWxpZERheSkgewogICAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoImRheSIsIG9iai5kYXkpOwogICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIGhhc0ludmFsaWRUaW1lRGF0YShvYmopIHsKICAgIGNvbnN0IHsgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kIH0gPSBvYmo7CiAgICBjb25zdCB2YWxpZEhvdXIgPQogICAgICAgIGludGVnZXJCZXR3ZWVuKGhvdXIsIDAsIDIzKSB8fAogICAgICAgIChob3VyID09PSAyNCAmJiBtaW51dGUgPT09IDAgJiYgc2Vjb25kID09PSAwICYmIG1pbGxpc2Vjb25kID09PSAwKSwKICAgICAgdmFsaWRNaW51dGUgPSBpbnRlZ2VyQmV0d2VlbihtaW51dGUsIDAsIDU5KSwKICAgICAgdmFsaWRTZWNvbmQgPSBpbnRlZ2VyQmV0d2VlbihzZWNvbmQsIDAsIDU5KSwKICAgICAgdmFsaWRNaWxsaXNlY29uZCA9IGludGVnZXJCZXR3ZWVuKG1pbGxpc2Vjb25kLCAwLCA5OTkpOwoKICAgIGlmICghdmFsaWRIb3VyKSB7CiAgICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZSgiaG91ciIsIGhvdXIpOwogICAgfSBlbHNlIGlmICghdmFsaWRNaW51dGUpIHsKICAgICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKCJtaW51dGUiLCBtaW51dGUpOwogICAgfSBlbHNlIGlmICghdmFsaWRTZWNvbmQpIHsKICAgICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKCJzZWNvbmQiLCBzZWNvbmQpOwogICAgfSBlbHNlIGlmICghdmFsaWRNaWxsaXNlY29uZCkgewogICAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoIm1pbGxpc2Vjb25kIiwgbWlsbGlzZWNvbmQpOwogICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICB9CgogIGNvbnN0IElOVkFMSUQkMSA9ICJJbnZhbGlkIERhdGVUaW1lIjsKICBjb25zdCBNQVhfREFURSA9IDguNjRlMTU7CgogIGZ1bmN0aW9uIHVuc3VwcG9ydGVkWm9uZSh6b25lKSB7CiAgICByZXR1cm4gbmV3IEludmFsaWQoInVuc3VwcG9ydGVkIHpvbmUiLCBgdGhlIHpvbmUgIiR7em9uZS5uYW1lfSIgaXMgbm90IHN1cHBvcnRlZGApOwogIH0KCiAgLy8gd2UgY2FjaGUgd2VlayBkYXRhIG9uIHRoZSBEVCBvYmplY3QgYW5kIHRoaXMgaW50ZXJtZWRpYXRlcyB0aGUgY2FjaGUKICBmdW5jdGlvbiBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKGR0KSB7CiAgICBpZiAoZHQud2Vla0RhdGEgPT09IG51bGwpIHsKICAgICAgZHQud2Vla0RhdGEgPSBncmVnb3JpYW5Ub1dlZWsoZHQuYyk7CiAgICB9CiAgICByZXR1cm4gZHQud2Vla0RhdGE7CiAgfQoKICAvLyBjbG9uZSByZWFsbHkgbWVhbnMsICJtYWtlIGEgbmV3IG9iamVjdCB3aXRoIHRoZXNlIG1vZGlmaWNhdGlvbnMiLiBhbGwgInNldHRlcnMiIHJlYWxseSB1c2UgdGhpcwogIC8vIHRvIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2hpbGUgb25seSBjaGFuZ2luZyBzb21lIG9mIHRoZSBwcm9wZXJ0aWVzCiAgZnVuY3Rpb24gY2xvbmUkMShpbnN0LCBhbHRzKSB7CiAgICBjb25zdCBjdXJyZW50ID0gewogICAgICB0czogaW5zdC50cywKICAgICAgem9uZTogaW5zdC56b25lLAogICAgICBjOiBpbnN0LmMsCiAgICAgIG86IGluc3QubywKICAgICAgbG9jOiBpbnN0LmxvYywKICAgICAgaW52YWxpZDogaW5zdC5pbnZhbGlkLAogICAgfTsKICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoeyAuLi5jdXJyZW50LCAuLi5hbHRzLCBvbGQ6IGN1cnJlbnQgfSk7CiAgfQoKICAvLyBmaW5kIHRoZSByaWdodCBvZmZzZXQgYSBnaXZlbiBsb2NhbCB0aW1lLiBUaGUgbyBpbnB1dCBpcyBvdXIgZ3Vlc3MsIHdoaWNoIGRldGVybWluZXMgd2hpY2gKICAvLyBvZmZzZXQgd2UnbGwgcGljayBpbiBhbWJpZ3VvdXMgY2FzZXMgKGUuZy4gdGhlcmUgYXJlIHR3byAzIEFNcyBiL2MgRmFsbGJhY2sgRFNUKQogIGZ1bmN0aW9uIGZpeE9mZnNldChsb2NhbFRTLCBvLCB0eikgewogICAgLy8gT3VyIFVUQyB0aW1lIGlzIGp1c3QgYSBndWVzcyBiZWNhdXNlIG91ciBvZmZzZXQgaXMganVzdCBhIGd1ZXNzCiAgICBsZXQgdXRjR3Vlc3MgPSBsb2NhbFRTIC0gbyAqIDYwICogMTAwMDsKCiAgICAvLyBUZXN0IHdoZXRoZXIgdGhlIHpvbmUgbWF0Y2hlcyB0aGUgb2Zmc2V0IGZvciB0aGlzIHRzCiAgICBjb25zdCBvMiA9IHR6Lm9mZnNldCh1dGNHdWVzcyk7CgogICAgLy8gSWYgc28sIG9mZnNldCBkaWRuJ3QgY2hhbmdlIGFuZCB3ZSdyZSBkb25lCiAgICBpZiAobyA9PT0gbzIpIHsKICAgICAgcmV0dXJuIFt1dGNHdWVzcywgb107CiAgICB9CgogICAgLy8gSWYgbm90LCBjaGFuZ2UgdGhlIHRzIGJ5IHRoZSBkaWZmZXJlbmNlIGluIHRoZSBvZmZzZXQKICAgIHV0Y0d1ZXNzIC09IChvMiAtIG8pICogNjAgKiAxMDAwOwoKICAgIC8vIElmIHRoYXQgZ2l2ZXMgdXMgdGhlIGxvY2FsIHRpbWUgd2Ugd2FudCwgd2UncmUgZG9uZQogICAgY29uc3QgbzMgPSB0ei5vZmZzZXQodXRjR3Vlc3MpOwogICAgaWYgKG8yID09PSBvMykgewogICAgICByZXR1cm4gW3V0Y0d1ZXNzLCBvMl07CiAgICB9CgogICAgLy8gSWYgaXQncyBkaWZmZXJlbnQsIHdlJ3JlIGluIGEgaG9sZSB0aW1lLiBUaGUgb2Zmc2V0IGhhcyBjaGFuZ2VkLCBidXQgdGhlIHdlIGRvbid0IGFkanVzdCB0aGUgdGltZQogICAgcmV0dXJuIFtsb2NhbFRTIC0gTWF0aC5taW4obzIsIG8zKSAqIDYwICogMTAwMCwgTWF0aC5tYXgobzIsIG8zKV07CiAgfQoKICAvLyBjb252ZXJ0IGFuIGVwb2NoIHRpbWVzdGFtcCBpbnRvIGEgY2FsZW5kYXIgb2JqZWN0IHdpdGggdGhlIGdpdmVuIG9mZnNldAogIGZ1bmN0aW9uIHRzVG9PYmoodHMsIG9mZnNldCkgewogICAgdHMgKz0gb2Zmc2V0ICogNjAgKiAxMDAwOwoKICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSh0cyk7CgogICAgcmV0dXJuIHsKICAgICAgeWVhcjogZC5nZXRVVENGdWxsWWVhcigpLAogICAgICBtb250aDogZC5nZXRVVENNb250aCgpICsgMSwKICAgICAgZGF5OiBkLmdldFVUQ0RhdGUoKSwKICAgICAgaG91cjogZC5nZXRVVENIb3VycygpLAogICAgICBtaW51dGU6IGQuZ2V0VVRDTWludXRlcygpLAogICAgICBzZWNvbmQ6IGQuZ2V0VVRDU2Vjb25kcygpLAogICAgICBtaWxsaXNlY29uZDogZC5nZXRVVENNaWxsaXNlY29uZHMoKSwKICAgIH07CiAgfQoKICAvLyBjb252ZXJ0IGEgY2FsZW5kYXIgb2JqZWN0IHRvIGEgZXBvY2ggdGltZXN0YW1wCiAgZnVuY3Rpb24gb2JqVG9UUyhvYmosIG9mZnNldCwgem9uZSkgewogICAgcmV0dXJuIGZpeE9mZnNldChvYmpUb0xvY2FsVFMob2JqKSwgb2Zmc2V0LCB6b25lKTsKICB9CgogIC8vIGNyZWF0ZSBhIG5ldyBEVCBpbnN0YW5jZSBieSBhZGRpbmcgYSBkdXJhdGlvbiwgYWRqdXN0aW5nIGZvciBEU1RzCiAgZnVuY3Rpb24gYWRqdXN0VGltZShpbnN0LCBkdXIpIHsKICAgIGNvbnN0IG9QcmUgPSBpbnN0Lm8sCiAgICAgIHllYXIgPSBpbnN0LmMueWVhciArIE1hdGgudHJ1bmMoZHVyLnllYXJzKSwKICAgICAgbW9udGggPSBpbnN0LmMubW9udGggKyBNYXRoLnRydW5jKGR1ci5tb250aHMpICsgTWF0aC50cnVuYyhkdXIucXVhcnRlcnMpICogMywKICAgICAgYyA9IHsKICAgICAgICAuLi5pbnN0LmMsCiAgICAgICAgeWVhciwKICAgICAgICBtb250aCwKICAgICAgICBkYXk6CiAgICAgICAgICBNYXRoLm1pbihpbnN0LmMuZGF5LCBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkpICsKICAgICAgICAgIE1hdGgudHJ1bmMoZHVyLmRheXMpICsKICAgICAgICAgIE1hdGgudHJ1bmMoZHVyLndlZWtzKSAqIDcsCiAgICAgIH0sCiAgICAgIG1pbGxpc1RvQWRkID0gRHVyYXRpb24uZnJvbU9iamVjdCh7CiAgICAgICAgeWVhcnM6IGR1ci55ZWFycyAtIE1hdGgudHJ1bmMoZHVyLnllYXJzKSwKICAgICAgICBxdWFydGVyczogZHVyLnF1YXJ0ZXJzIC0gTWF0aC50cnVuYyhkdXIucXVhcnRlcnMpLAogICAgICAgIG1vbnRoczogZHVyLm1vbnRocyAtIE1hdGgudHJ1bmMoZHVyLm1vbnRocyksCiAgICAgICAgd2Vla3M6IGR1ci53ZWVrcyAtIE1hdGgudHJ1bmMoZHVyLndlZWtzKSwKICAgICAgICBkYXlzOiBkdXIuZGF5cyAtIE1hdGgudHJ1bmMoZHVyLmRheXMpLAogICAgICAgIGhvdXJzOiBkdXIuaG91cnMsCiAgICAgICAgbWludXRlczogZHVyLm1pbnV0ZXMsCiAgICAgICAgc2Vjb25kczogZHVyLnNlY29uZHMsCiAgICAgICAgbWlsbGlzZWNvbmRzOiBkdXIubWlsbGlzZWNvbmRzLAogICAgICB9KS5hcygibWlsbGlzZWNvbmRzIiksCiAgICAgIGxvY2FsVFMgPSBvYmpUb0xvY2FsVFMoYyk7CgogICAgbGV0IFt0cywgb10gPSBmaXhPZmZzZXQobG9jYWxUUywgb1ByZSwgaW5zdC56b25lKTsKCiAgICBpZiAobWlsbGlzVG9BZGQgIT09IDApIHsKICAgICAgdHMgKz0gbWlsbGlzVG9BZGQ7CiAgICAgIC8vIHRoYXQgY291bGQgaGF2ZSBjaGFuZ2VkIHRoZSBvZmZzZXQgYnkgZ29pbmcgb3ZlciBhIERTVCwgYnV0IHdlIHdhbnQgdG8ga2VlcCB0aGUgdHMgdGhlIHNhbWUKICAgICAgbyA9IGluc3Quem9uZS5vZmZzZXQodHMpOwogICAgfQoKICAgIHJldHVybiB7IHRzLCBvIH07CiAgfQoKICAvLyBoZWxwZXIgdXNlZnVsIGluIHR1cm5pbmcgdGhlIHJlc3VsdHMgb2YgcGFyc2luZyBpbnRvIHJlYWwgZGF0ZXMKICAvLyBieSBoYW5kbGluZyB0aGUgem9uZSBvcHRpb25zCiAgZnVuY3Rpb24gcGFyc2VEYXRhVG9EYXRlVGltZShwYXJzZWQsIHBhcnNlZFpvbmUsIG9wdHMsIGZvcm1hdCwgdGV4dCwgc3BlY2lmaWNPZmZzZXQpIHsKICAgIGNvbnN0IHsgc2V0Wm9uZSwgem9uZSB9ID0gb3B0czsKICAgIGlmIChwYXJzZWQgJiYgT2JqZWN0LmtleXMocGFyc2VkKS5sZW5ndGggIT09IDApIHsKICAgICAgY29uc3QgaW50ZXJwcmV0YXRpb25ab25lID0gcGFyc2VkWm9uZSB8fCB6b25lLAogICAgICAgIGluc3QgPSBEYXRlVGltZS5mcm9tT2JqZWN0KHBhcnNlZCwgewogICAgICAgICAgLi4ub3B0cywKICAgICAgICAgIHpvbmU6IGludGVycHJldGF0aW9uWm9uZSwKICAgICAgICAgIHNwZWNpZmljT2Zmc2V0LAogICAgICAgIH0pOwogICAgICByZXR1cm4gc2V0Wm9uZSA/IGluc3QgOiBpbnN0LnNldFpvbmUoem9uZSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZCgKICAgICAgICBuZXcgSW52YWxpZCgidW5wYXJzYWJsZSIsIGB0aGUgaW5wdXQgIiR7dGV4dH0iIGNhbid0IGJlIHBhcnNlZCBhcyAke2Zvcm1hdH1gKQogICAgICApOwogICAgfQogIH0KCiAgLy8gaWYgeW91IHdhbnQgdG8gb3V0cHV0IGEgdGVjaG5pY2FsIGZvcm1hdCAoZS5nLiBSRkMgMjgyMiksIHRoaXMgaGVscGVyCiAgLy8gaGVscHMgaGFuZGxlIHRoZSBkZXRhaWxzCiAgZnVuY3Rpb24gdG9UZWNoRm9ybWF0KGR0LCBmb3JtYXQsIGFsbG93WiA9IHRydWUpIHsKICAgIHJldHVybiBkdC5pc1ZhbGlkCiAgICAgID8gRm9ybWF0dGVyLmNyZWF0ZShMb2NhbGUuY3JlYXRlKCJlbi1VUyIpLCB7CiAgICAgICAgICBhbGxvd1osCiAgICAgICAgICBmb3JjZVNpbXBsZTogdHJ1ZSwKICAgICAgICB9KS5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcoZHQsIGZvcm1hdCkKICAgICAgOiBudWxsOwogIH0KCiAgZnVuY3Rpb24gdG9JU09EYXRlKG8sIGV4dGVuZGVkKSB7CiAgICBjb25zdCBsb25nRm9ybWF0ID0gby5jLnllYXIgPiA5OTk5IHx8IG8uYy55ZWFyIDwgMDsKICAgIGxldCBjID0gIiI7CiAgICBpZiAobG9uZ0Zvcm1hdCAmJiBvLmMueWVhciA+PSAwKSBjICs9ICIrIjsKICAgIGMgKz0gcGFkU3RhcnQoby5jLnllYXIsIGxvbmdGb3JtYXQgPyA2IDogNCk7CgogICAgaWYgKGV4dGVuZGVkKSB7CiAgICAgIGMgKz0gIi0iOwogICAgICBjICs9IHBhZFN0YXJ0KG8uYy5tb250aCk7CiAgICAgIGMgKz0gIi0iOwogICAgICBjICs9IHBhZFN0YXJ0KG8uYy5kYXkpOwogICAgfSBlbHNlIHsKICAgICAgYyArPSBwYWRTdGFydChvLmMubW9udGgpOwogICAgICBjICs9IHBhZFN0YXJ0KG8uYy5kYXkpOwogICAgfQogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiB0b0lTT1RpbWUoCiAgICBvLAogICAgZXh0ZW5kZWQsCiAgICBzdXBwcmVzc1NlY29uZHMsCiAgICBzdXBwcmVzc01pbGxpc2Vjb25kcywKICAgIGluY2x1ZGVPZmZzZXQsCiAgICBleHRlbmRlZFpvbmUKICApIHsKICAgIGxldCBjID0gcGFkU3RhcnQoby5jLmhvdXIpOwogICAgaWYgKGV4dGVuZGVkKSB7CiAgICAgIGMgKz0gIjoiOwogICAgICBjICs9IHBhZFN0YXJ0KG8uYy5taW51dGUpOwogICAgICBpZiAoby5jLnNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NTZWNvbmRzKSB7CiAgICAgICAgYyArPSAiOiI7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGMgKz0gcGFkU3RhcnQoby5jLm1pbnV0ZSk7CiAgICB9CgogICAgaWYgKG8uYy5zZWNvbmQgIT09IDAgfHwgIXN1cHByZXNzU2Vjb25kcykgewogICAgICBjICs9IHBhZFN0YXJ0KG8uYy5zZWNvbmQpOwoKICAgICAgaWYgKG8uYy5taWxsaXNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NNaWxsaXNlY29uZHMpIHsKICAgICAgICBjICs9ICIuIjsKICAgICAgICBjICs9IHBhZFN0YXJ0KG8uYy5taWxsaXNlY29uZCwgMyk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoaW5jbHVkZU9mZnNldCkgewogICAgICBpZiAoby5pc09mZnNldEZpeGVkICYmIG8ub2Zmc2V0ID09PSAwICYmICFleHRlbmRlZFpvbmUpIHsKICAgICAgICBjICs9ICJaIjsKICAgICAgfSBlbHNlIGlmIChvLm8gPCAwKSB7CiAgICAgICAgYyArPSAiLSI7CiAgICAgICAgYyArPSBwYWRTdGFydChNYXRoLnRydW5jKC1vLm8gLyA2MCkpOwogICAgICAgIGMgKz0gIjoiOwogICAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYygtby5vICUgNjApKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjICs9ICIrIjsKICAgICAgICBjICs9IHBhZFN0YXJ0KE1hdGgudHJ1bmMoby5vIC8gNjApKTsKICAgICAgICBjICs9ICI6IjsKICAgICAgICBjICs9IHBhZFN0YXJ0KE1hdGgudHJ1bmMoby5vICUgNjApKTsKICAgICAgfQogICAgfQoKICAgIGlmIChleHRlbmRlZFpvbmUpIHsKICAgICAgYyArPSAiWyIgKyBvLnpvbmUuaWFuYU5hbWUgKyAiXSI7CiAgICB9CiAgICByZXR1cm4gYzsKICB9CgogIC8vIGRlZmF1bHRzIGZvciB1bnNwZWNpZmllZCB1bml0cyBpbiB0aGUgc3VwcG9ydGVkIGNhbGVuZGFycwogIGNvbnN0IGRlZmF1bHRVbml0VmFsdWVzID0gewogICAgICBtb250aDogMSwKICAgICAgZGF5OiAxLAogICAgICBob3VyOiAwLAogICAgICBtaW51dGU6IDAsCiAgICAgIHNlY29uZDogMCwKICAgICAgbWlsbGlzZWNvbmQ6IDAsCiAgICB9LAogICAgZGVmYXVsdFdlZWtVbml0VmFsdWVzID0gewogICAgICB3ZWVrTnVtYmVyOiAxLAogICAgICB3ZWVrZGF5OiAxLAogICAgICBob3VyOiAwLAogICAgICBtaW51dGU6IDAsCiAgICAgIHNlY29uZDogMCwKICAgICAgbWlsbGlzZWNvbmQ6IDAsCiAgICB9LAogICAgZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzID0gewogICAgICBvcmRpbmFsOiAxLAogICAgICBob3VyOiAwLAogICAgICBtaW51dGU6IDAsCiAgICAgIHNlY29uZDogMCwKICAgICAgbWlsbGlzZWNvbmQ6IDAsCiAgICB9OwoKICAvLyBVbml0cyBpbiB0aGUgc3VwcG9ydGVkIGNhbGVuZGFycywgc29ydGVkIGJ5IGJpZ25lc3MKICBjb25zdCBvcmRlcmVkVW5pdHMgPSBbInllYXIiLCAibW9udGgiLCAiZGF5IiwgImhvdXIiLCAibWludXRlIiwgInNlY29uZCIsICJtaWxsaXNlY29uZCJdLAogICAgb3JkZXJlZFdlZWtVbml0cyA9IFsKICAgICAgIndlZWtZZWFyIiwKICAgICAgIndlZWtOdW1iZXIiLAogICAgICAid2Vla2RheSIsCiAgICAgICJob3VyIiwKICAgICAgIm1pbnV0ZSIsCiAgICAgICJzZWNvbmQiLAogICAgICAibWlsbGlzZWNvbmQiLAogICAgXSwKICAgIG9yZGVyZWRPcmRpbmFsVW5pdHMgPSBbInllYXIiLCAib3JkaW5hbCIsICJob3VyIiwgIm1pbnV0ZSIsICJzZWNvbmQiLCAibWlsbGlzZWNvbmQiXTsKCiAgLy8gc3RhbmRhcmRpemUgY2FzZSBhbmQgcGx1cmFsaXR5IGluIHVuaXRzCiAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdCh1bml0KSB7CiAgICBjb25zdCBub3JtYWxpemVkID0gewogICAgICB5ZWFyOiAieWVhciIsCiAgICAgIHllYXJzOiAieWVhciIsCiAgICAgIG1vbnRoOiAibW9udGgiLAogICAgICBtb250aHM6ICJtb250aCIsCiAgICAgIGRheTogImRheSIsCiAgICAgIGRheXM6ICJkYXkiLAogICAgICBob3VyOiAiaG91ciIsCiAgICAgIGhvdXJzOiAiaG91ciIsCiAgICAgIG1pbnV0ZTogIm1pbnV0ZSIsCiAgICAgIG1pbnV0ZXM6ICJtaW51dGUiLAogICAgICBxdWFydGVyOiAicXVhcnRlciIsCiAgICAgIHF1YXJ0ZXJzOiAicXVhcnRlciIsCiAgICAgIHNlY29uZDogInNlY29uZCIsCiAgICAgIHNlY29uZHM6ICJzZWNvbmQiLAogICAgICBtaWxsaXNlY29uZDogIm1pbGxpc2Vjb25kIiwKICAgICAgbWlsbGlzZWNvbmRzOiAibWlsbGlzZWNvbmQiLAogICAgICB3ZWVrZGF5OiAid2Vla2RheSIsCiAgICAgIHdlZWtkYXlzOiAid2Vla2RheSIsCiAgICAgIHdlZWtudW1iZXI6ICJ3ZWVrTnVtYmVyIiwKICAgICAgd2Vla3NudW1iZXI6ICJ3ZWVrTnVtYmVyIiwKICAgICAgd2Vla251bWJlcnM6ICJ3ZWVrTnVtYmVyIiwKICAgICAgd2Vla3llYXI6ICJ3ZWVrWWVhciIsCiAgICAgIHdlZWt5ZWFyczogIndlZWtZZWFyIiwKICAgICAgb3JkaW5hbDogIm9yZGluYWwiLAogICAgfVt1bml0LnRvTG93ZXJDYXNlKCldOwoKICAgIGlmICghbm9ybWFsaXplZCkgdGhyb3cgbmV3IEludmFsaWRVbml0RXJyb3IodW5pdCk7CgogICAgcmV0dXJuIG5vcm1hbGl6ZWQ7CiAgfQoKICAvLyB0aGlzIGlzIGEgZHVtYmVkIGRvd24gdmVyc2lvbiBvZiBmcm9tT2JqZWN0KCkgdGhhdCBydW5zIGFib3V0IDYwJSBmYXN0ZXIKICAvLyBidXQgZG9lc24ndCBkbyBhbnkgdmFsaWRhdGlvbiwgbWFrZXMgYSBidW5jaCBvZiBhc3N1bXB0aW9ucyBhYm91dCB3aGF0IHVuaXRzCiAgLy8gYXJlIHByZXNlbnQsIGFuZCBzbyBvbi4KICBmdW5jdGlvbiBxdWlja0RUKG9iaiwgb3B0cykgewogICAgY29uc3Qgem9uZSA9IG5vcm1hbGl6ZVpvbmUob3B0cy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSksCiAgICAgIGxvYyA9IExvY2FsZS5mcm9tT2JqZWN0KG9wdHMpLAogICAgICB0c05vdyA9IFNldHRpbmdzLm5vdygpOwoKICAgIGxldCB0cywgbzsKCiAgICAvLyBhc3N1bWUgd2UgaGF2ZSB0aGUgaGlnaGVyLW9yZGVyIHVuaXRzCiAgICBpZiAoIWlzVW5kZWZpbmVkKG9iai55ZWFyKSkgewogICAgICBmb3IgKGNvbnN0IHUgb2Ygb3JkZXJlZFVuaXRzKSB7CiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG9ialt1XSkpIHsKICAgICAgICAgIG9ialt1XSA9IGRlZmF1bHRVbml0VmFsdWVzW3VdOwogICAgICAgIH0KICAgICAgfQoKICAgICAgY29uc3QgaW52YWxpZCA9IGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikgfHwgaGFzSW52YWxpZFRpbWVEYXRhKG9iaik7CiAgICAgIGlmIChpbnZhbGlkKSB7CiAgICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoaW52YWxpZCk7CiAgICAgIH0KCiAgICAgIGNvbnN0IG9mZnNldFByb3ZpcyA9IHpvbmUub2Zmc2V0KHRzTm93KTsKICAgICAgW3RzLCBvXSA9IG9ialRvVFMob2JqLCBvZmZzZXRQcm92aXMsIHpvbmUpOwogICAgfSBlbHNlIHsKICAgICAgdHMgPSB0c05vdzsKICAgIH0KCiAgICByZXR1cm4gbmV3IERhdGVUaW1lKHsgdHMsIHpvbmUsIGxvYywgbyB9KTsKICB9CgogIGZ1bmN0aW9uIGRpZmZSZWxhdGl2ZShzdGFydCwgZW5kLCBvcHRzKSB7CiAgICBjb25zdCByb3VuZCA9IGlzVW5kZWZpbmVkKG9wdHMucm91bmQpID8gdHJ1ZSA6IG9wdHMucm91bmQsCiAgICAgIGZvcm1hdCA9IChjLCB1bml0KSA9PiB7CiAgICAgICAgYyA9IHJvdW5kVG8oYywgcm91bmQgfHwgb3B0cy5jYWxlbmRhcnkgPyAwIDogMiwgdHJ1ZSk7CiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gZW5kLmxvYy5jbG9uZShvcHRzKS5yZWxGb3JtYXR0ZXIob3B0cyk7CiAgICAgICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXQoYywgdW5pdCk7CiAgICAgIH0sCiAgICAgIGRpZmZlciA9ICh1bml0KSA9PiB7CiAgICAgICAgaWYgKG9wdHMuY2FsZW5kYXJ5KSB7CiAgICAgICAgICBpZiAoIWVuZC5oYXNTYW1lKHN0YXJ0LCB1bml0KSkgewogICAgICAgICAgICByZXR1cm4gZW5kLnN0YXJ0T2YodW5pdCkuZGlmZihzdGFydC5zdGFydE9mKHVuaXQpLCB1bml0KS5nZXQodW5pdCk7CiAgICAgICAgICB9IGVsc2UgcmV0dXJuIDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBlbmQuZGlmZihzdGFydCwgdW5pdCkuZ2V0KHVuaXQpOwogICAgICAgIH0KICAgICAgfTsKCiAgICBpZiAob3B0cy51bml0KSB7CiAgICAgIHJldHVybiBmb3JtYXQoZGlmZmVyKG9wdHMudW5pdCksIG9wdHMudW5pdCk7CiAgICB9CgogICAgZm9yIChjb25zdCB1bml0IG9mIG9wdHMudW5pdHMpIHsKICAgICAgY29uc3QgY291bnQgPSBkaWZmZXIodW5pdCk7CiAgICAgIGlmIChNYXRoLmFicyhjb3VudCkgPj0gMSkgewogICAgICAgIHJldHVybiBmb3JtYXQoY291bnQsIHVuaXQpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZm9ybWF0KHN0YXJ0ID4gZW5kID8gLTAgOiAwLCBvcHRzLnVuaXRzW29wdHMudW5pdHMubGVuZ3RoIC0gMV0pOwogIH0KCiAgZnVuY3Rpb24gbGFzdE9wdHMoYXJnTGlzdCkgewogICAgbGV0IG9wdHMgPSB7fSwKICAgICAgYXJnczsKICAgIGlmIChhcmdMaXN0Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ0xpc3RbYXJnTGlzdC5sZW5ndGggLSAxXSA9PT0gIm9iamVjdCIpIHsKICAgICAgb3B0cyA9IGFyZ0xpc3RbYXJnTGlzdC5sZW5ndGggLSAxXTsKICAgICAgYXJncyA9IEFycmF5LmZyb20oYXJnTGlzdCkuc2xpY2UoMCwgYXJnTGlzdC5sZW5ndGggLSAxKTsKICAgIH0gZWxzZSB7CiAgICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ0xpc3QpOwogICAgfQogICAgcmV0dXJuIFtvcHRzLCBhcmdzXTsKICB9CgogIC8qKgogICAqIEEgRGF0ZVRpbWUgaXMgYW4gaW1tdXRhYmxlIGRhdGEgc3RydWN0dXJlIHJlcHJlc2VudGluZyBhIHNwZWNpZmljIGRhdGUgYW5kIHRpbWUgYW5kIGFjY29tcGFueWluZyBtZXRob2RzLiBJdCBjb250YWlucyBjbGFzcyBhbmQgaW5zdGFuY2UgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS4KICAgKgogICAqIEEgRGF0ZVRpbWUgY29tcHJpc2VzIG9mOgogICAqICogQSB0aW1lc3RhbXAuIEVhY2ggRGF0ZVRpbWUgaW5zdGFuY2UgcmVmZXJzIHRvIGEgc3BlY2lmaWMgbWlsbGlzZWNvbmQgb2YgdGhlIFVuaXggZXBvY2guCiAgICogKiBBIHRpbWUgem9uZS4gRWFjaCBpbnN0YW5jZSBpcyBjb25zaWRlcmVkIGluIHRoZSBjb250ZXh0IG9mIGEgc3BlY2lmaWMgem9uZSAoYnkgZGVmYXVsdCB0aGUgbG9jYWwgc3lzdGVtJ3Mgem9uZSkuCiAgICogKiBDb25maWd1cmF0aW9uIHByb3BlcnRpZXMgdGhhdCBlZmZlY3QgaG93IG91dHB1dCBzdHJpbmdzIGFyZSBmb3JtYXR0ZWQsIHN1Y2ggYXMgYGxvY2FsZWAsIGBudW1iZXJpbmdTeXN0ZW1gLCBhbmQgYG91dHB1dENhbGVuZGFyYC4KICAgKgogICAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiB0aGUgbW9zdCBjb21tb25seSB1c2VkIGZ1bmN0aW9uYWxpdHkgaXQgcHJvdmlkZXM6CiAgICoKICAgKiAqICoqQ3JlYXRpb24qKjogVG8gY3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBpdHMgY29tcG9uZW50cywgdXNlIG9uZSBvZiBpdHMgZmFjdG9yeSBjbGFzcyBtZXRob2RzOiB7QGxpbmsgRGF0ZVRpbWUubG9jYWx9LCB7QGxpbmsgRGF0ZVRpbWUudXRjfSwgYW5kIChtb3N0IGZsZXhpYmx5KSB7QGxpbmsgRGF0ZVRpbWUuZnJvbU9iamVjdH0uIFRvIGNyZWF0ZSBvbmUgZnJvbSBhIHN0YW5kYXJkIHN0cmluZyBmb3JtYXQsIHVzZSB7QGxpbmsgRGF0ZVRpbWUuZnJvbUlTT30sIHtAbGluayBEYXRlVGltZS5mcm9tSFRUUH0sIGFuZCB7QGxpbmsgRGF0ZVRpbWUuZnJvbVJGQzI4MjJ9LiBUbyBjcmVhdGUgb25lIGZyb20gYSBjdXN0b20gc3RyaW5nIGZvcm1hdCwgdXNlIHtAbGluayBEYXRlVGltZS5mcm9tRm9ybWF0fS4gVG8gY3JlYXRlIG9uZSBmcm9tIGEgbmF0aXZlIEpTIGRhdGUsIHVzZSB7QGxpbmsgRGF0ZVRpbWUuZnJvbUpTRGF0ZX0uCiAgICogKiAqKkdyZWdvcmlhbiBjYWxlbmRhciBhbmQgdGltZSoqOiBUbyBleGFtaW5lIHRoZSBHcmVnb3JpYW4gcHJvcGVydGllcyBvZiBhIERhdGVUaW1lIGluZGl2aWR1YWxseSAoaS5lIGFzIG9wcG9zZWQgdG8gY29sbGVjdGl2ZWx5IHRocm91Z2gge0BsaW5rIERhdGVUaW1lI3RvT2JqZWN0fSksIHVzZSB0aGUge0BsaW5rIERhdGVUaW1lI3llYXJ9LCB7QGxpbmsgRGF0ZVRpbWUjbW9udGh9LAogICAqIHtAbGluayBEYXRlVGltZSNkYXl9LCB7QGxpbmsgRGF0ZVRpbWUjaG91cn0sIHtAbGluayBEYXRlVGltZSNtaW51dGV9LCB7QGxpbmsgRGF0ZVRpbWUjc2Vjb25kfSwge0BsaW5rIERhdGVUaW1lI21pbGxpc2Vjb25kfSBhY2Nlc3NvcnMuCiAgICogKiAqKldlZWsgY2FsZW5kYXIqKjogRm9yIElTTyB3ZWVrIGNhbGVuZGFyIGF0dHJpYnV0ZXMsIHNlZSB0aGUge0BsaW5rIERhdGVUaW1lI3dlZWtZZWFyfSwge0BsaW5rIERhdGVUaW1lI3dlZWtOdW1iZXJ9LCBhbmQge0BsaW5rIERhdGVUaW1lI3dlZWtkYXl9IGFjY2Vzc29ycy4KICAgKiAqICoqQ29uZmlndXJhdGlvbioqIFNlZSB0aGUge0BsaW5rIERhdGVUaW1lI2xvY2FsZX0gYW5kIHtAbGluayBEYXRlVGltZSNudW1iZXJpbmdTeXN0ZW19IGFjY2Vzc29ycy4KICAgKiAqICoqVHJhbnNmb3JtYXRpb24qKjogVG8gdHJhbnNmb3JtIHRoZSBEYXRlVGltZSBpbnRvIG90aGVyIERhdGVUaW1lcywgdXNlIHtAbGluayBEYXRlVGltZSNzZXR9LCB7QGxpbmsgRGF0ZVRpbWUjcmVjb25maWd1cmV9LCB7QGxpbmsgRGF0ZVRpbWUjc2V0Wm9uZX0sIHtAbGluayBEYXRlVGltZSNzZXRMb2NhbGV9LCB7QGxpbmsgRGF0ZVRpbWUucGx1c30sIHtAbGluayBEYXRlVGltZSNtaW51c30sIHtAbGluayBEYXRlVGltZSNlbmRPZn0sIHtAbGluayBEYXRlVGltZSNzdGFydE9mfSwge0BsaW5rIERhdGVUaW1lI3RvVVRDfSwgYW5kIHtAbGluayBEYXRlVGltZSN0b0xvY2FsfS4KICAgKiAqICoqT3V0cHV0Kio6IFRvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgdXNlIHRoZSB7QGxpbmsgRGF0ZVRpbWUjdG9SZWxhdGl2ZX0sIHtAbGluayBEYXRlVGltZSN0b1JlbGF0aXZlQ2FsZW5kYXJ9LCB7QGxpbmsgRGF0ZVRpbWUjdG9KU09OfSwge0BsaW5rIERhdGVUaW1lI3RvSVNPfSwge0BsaW5rIERhdGVUaW1lI3RvSFRUUH0sIHtAbGluayBEYXRlVGltZSN0b09iamVjdH0sIHtAbGluayBEYXRlVGltZSN0b1JGQzI4MjJ9LCB7QGxpbmsgRGF0ZVRpbWUjdG9TdHJpbmd9LCB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9LCB7QGxpbmsgRGF0ZVRpbWUjdG9Gb3JtYXR9LCB7QGxpbmsgRGF0ZVRpbWUjdG9NaWxsaXN9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9KU0RhdGV9LgogICAqCiAgICogVGhlcmUncyBwbGVudHkgb3RoZXJzIGRvY3VtZW50ZWQgYmVsb3cuIEluIGFkZGl0aW9uLCBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBzdWJ0bGVyIHRvcGljcyBsaWtlIGludGVybmF0aW9uYWxpemF0aW9uLCB0aW1lIHpvbmVzLCBhbHRlcm5hdGl2ZSBjYWxlbmRhcnMsIHZhbGlkaXR5LCBhbmQgc28gb24sIHNlZSB0aGUgZXh0ZXJuYWwgZG9jdW1lbnRhdGlvbi4KICAgKi8KICBjbGFzcyBEYXRlVGltZSB7CiAgICAvKioKICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICovCiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHsKICAgICAgY29uc3Qgem9uZSA9IGNvbmZpZy56b25lIHx8IFNldHRpbmdzLmRlZmF1bHRab25lOwoKICAgICAgbGV0IGludmFsaWQgPQogICAgICAgIGNvbmZpZy5pbnZhbGlkIHx8CiAgICAgICAgKE51bWJlci5pc05hTihjb25maWcudHMpID8gbmV3IEludmFsaWQoImludmFsaWQgaW5wdXQiKSA6IG51bGwpIHx8CiAgICAgICAgKCF6b25lLmlzVmFsaWQgPyB1bnN1cHBvcnRlZFpvbmUoem9uZSkgOiBudWxsKTsKICAgICAgLyoqCiAgICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICAgKi8KICAgICAgdGhpcy50cyA9IGlzVW5kZWZpbmVkKGNvbmZpZy50cykgPyBTZXR0aW5ncy5ub3coKSA6IGNvbmZpZy50czsKCiAgICAgIGxldCBjID0gbnVsbCwKICAgICAgICBvID0gbnVsbDsKICAgICAgaWYgKCFpbnZhbGlkKSB7CiAgICAgICAgY29uc3QgdW5jaGFuZ2VkID0gY29uZmlnLm9sZCAmJiBjb25maWcub2xkLnRzID09PSB0aGlzLnRzICYmIGNvbmZpZy5vbGQuem9uZS5lcXVhbHMoem9uZSk7CgogICAgICAgIGlmICh1bmNoYW5nZWQpIHsKICAgICAgICAgIFtjLCBvXSA9IFtjb25maWcub2xkLmMsIGNvbmZpZy5vbGQub107CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IG90ID0gem9uZS5vZmZzZXQodGhpcy50cyk7CiAgICAgICAgICBjID0gdHNUb09iaih0aGlzLnRzLCBvdCk7CiAgICAgICAgICBpbnZhbGlkID0gTnVtYmVyLmlzTmFOKGMueWVhcikgPyBuZXcgSW52YWxpZCgiaW52YWxpZCBpbnB1dCIpIDogbnVsbDsKICAgICAgICAgIGMgPSBpbnZhbGlkID8gbnVsbCA6IGM7CiAgICAgICAgICBvID0gaW52YWxpZCA/IG51bGwgOiBvdDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8qKgogICAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAgICovCiAgICAgIHRoaXMuX3pvbmUgPSB6b25lOwogICAgICAvKioKICAgICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgICAqLwogICAgICB0aGlzLmxvYyA9IGNvbmZpZy5sb2MgfHwgTG9jYWxlLmNyZWF0ZSgpOwogICAgICAvKioKICAgICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgICAqLwogICAgICB0aGlzLmludmFsaWQgPSBpbnZhbGlkOwogICAgICAvKioKICAgICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgICAqLwogICAgICB0aGlzLndlZWtEYXRhID0gbnVsbDsKICAgICAgLyoqCiAgICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICAgKi8KICAgICAgdGhpcy5jID0gYzsKICAgICAgLyoqCiAgICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICAgKi8KICAgICAgdGhpcy5vID0gbzsKICAgICAgLyoqCiAgICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICAgKi8KICAgICAgdGhpcy5pc0x1eG9uRGF0ZVRpbWUgPSB0cnVlOwogICAgfQoKICAgIC8vIENPTlNUUlVDVAoKICAgIC8qKgogICAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZm9yIHRoZSBjdXJyZW50IGluc3RhbnQsIGluIHRoZSBzeXN0ZW0ncyB0aW1lIHpvbmUuCiAgICAgKgogICAgICogVXNlIFNldHRpbmdzIHRvIG92ZXJyaWRlIHRoZXNlIGRlZmF1bHQgdmFsdWVzIGlmIG5lZWRlZC4KICAgICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvSVNPKCkgLy9+PiBub3cgaW4gdGhlIElTTyBmb3JtYXQKICAgICAqIEByZXR1cm4ge0RhdGVUaW1lfQogICAgICovCiAgICBzdGF0aWMgbm93KCkgewogICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHt9KTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhIGxvY2FsIERhdGVUaW1lCiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGBsb2NhbCgpYCB3aXRoIG5vIGFyZ3VtZW50cyksIHRoZSBjdXJyZW50IHRpbWUgd2lsbCBiZSB1c2VkCiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoPTFdIC0gVGhlIG1vbnRoLCAxLWluZGV4ZWQKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGF5PTFdIC0gVGhlIGRheSBvZiB0aGUgbW9udGgsIDEtaW5kZXhlZAogICAgICogQHBhcmFtIHtudW1iZXJ9IFtob3VyPTBdIC0gVGhlIGhvdXIgb2YgdGhlIGRheSwgaW4gMjQtaG91ciB0aW1lCiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21pbnV0ZT0wXSAtIFRoZSBtaW51dGUgb2YgdGhlIGhvdXIsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OQogICAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmQ9MF0gLSBUaGUgc2Vjb25kIG9mIHRoZSBtaW51dGUsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OQogICAgICogQHBhcmFtIHtudW1iZXJ9IFttaWxsaXNlY29uZD0wXSAtIFRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgOTk5CiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gbm93CiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCh7IHpvbmU6ICJBbWVyaWNhL05ld19Zb3JrIiB9KSAgICAgIC8vfj4gbm93LCBpbiBVUyBlYXN0IGNvYXN0IHRpbWUKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAxLTAxVDAwOjAwOjAwCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzKSAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0wMVQwMDowMDowMAogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIHsgbG9jYWxlOiAiZnIiIH0pICAgICAvL34+IDIwMTctMDMtMTJUMDA6MDA6MDAsIHdpdGggYSBGcmVuY2ggbG9jYWxlCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzLCAxMiwgNSkgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMAogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUsIHsgem9uZTogInV0YyIgfSkgICAvL34+IDIwMTctMDMtMTJUMDU6MDA6MDAsIGluIFVUQwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUsIDQ1KSAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MDAKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTApICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzLCAxMiwgNSwgNDUsIDEwLCA3NjUpICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTo0NToxMC43NjUKICAgICAqIEByZXR1cm4ge0RhdGVUaW1lfQogICAgICovCiAgICBzdGF0aWMgbG9jYWwoKSB7CiAgICAgIGNvbnN0IFtvcHRzLCBhcmdzXSA9IGxhc3RPcHRzKGFyZ3VtZW50cyksCiAgICAgICAgW3llYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF0gPSBhcmdzOwogICAgICByZXR1cm4gcXVpY2tEVCh7IHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCB9LCBvcHRzKTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhIERhdGVUaW1lIGluIFVUQwogICAgICogQHBhcmFtIHtudW1iZXJ9IFt5ZWFyXSAtIFRoZSBjYWxlbmRhciB5ZWFyLiBJZiBvbWl0dGVkIChhcyBpbiwgY2FsbCBgdXRjKClgIHdpdGggbm8gYXJndW1lbnRzKSwgdGhlIGN1cnJlbnQgdGltZSB3aWxsIGJlIHVzZWQKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbW9udGg9MV0gLSBUaGUgbW9udGgsIDEtaW5kZXhlZAogICAgICogQHBhcmFtIHtudW1iZXJ9IFtkYXk9MV0gLSBUaGUgZGF5IG9mIHRoZSBtb250aAogICAgICogQHBhcmFtIHtudW1iZXJ9IFtob3VyPTBdIC0gVGhlIGhvdXIgb2YgdGhlIGRheSwgaW4gMjQtaG91ciB0aW1lCiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21pbnV0ZT0wXSAtIFRoZSBtaW51dGUgb2YgdGhlIGhvdXIsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OQogICAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmQ9MF0gLSBUaGUgc2Vjb25kIG9mIHRoZSBtaW51dGUsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OQogICAgICogQHBhcmFtIHtudW1iZXJ9IFttaWxsaXNlY29uZD0wXSAtIFRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgOTk5CiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIERhdGVUaW1lCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub3V0cHV0Q2FsZW5kYXJdIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm51bWJlcmluZ1N5c3RlbV0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3cKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMS0wMVQwMDowMDowMFoKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0wMVQwMDowMDowMFoKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMFoKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMFoKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUpICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTo0NTowMFoKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIHsgbG9jYWxlOiAiZnIiIH0pICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTo0NTowMFogd2l0aCBhIEZyZW5jaCBsb2NhbGUKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIDEwKSAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTo0NToxMFoKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIDEwLCA3NjUsIHsgbG9jYWxlOiAiZnIiIH0pIC8vfj4gMjAxNy0wMy0xMlQwNTo0NToxMC43NjVaIHdpdGggYSBGcmVuY2ggbG9jYWxlCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0KICAgICAqLwogICAgc3RhdGljIHV0YygpIHsKICAgICAgY29uc3QgW29wdHMsIGFyZ3NdID0gbGFzdE9wdHMoYXJndW1lbnRzKSwKICAgICAgICBbeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXSA9IGFyZ3M7CgogICAgICBvcHRzLnpvbmUgPSBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2U7CiAgICAgIHJldHVybiBxdWlja0RUKHsgeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kIH0sIG9wdHMpOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QuIFVzZXMgdGhlIGRlZmF1bHQgem9uZS4KICAgICAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSAtIGEgSmF2YVNjcmlwdCBEYXRlIG9iamVjdAogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZQogICAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0KICAgICAqLwogICAgc3RhdGljIGZyb21KU0RhdGUoZGF0ZSwgb3B0aW9ucyA9IHt9KSB7CiAgICAgIGNvbnN0IHRzID0gaXNEYXRlKGRhdGUpID8gZGF0ZS52YWx1ZU9mKCkgOiBOYU47CiAgICAgIGlmIChOdW1iZXIuaXNOYU4odHMpKSB7CiAgICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoImludmFsaWQgaW5wdXQiKTsKICAgICAgfQoKICAgICAgY29uc3Qgem9uZVRvVXNlID0gbm9ybWFsaXplWm9uZShvcHRpb25zLnpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKTsKICAgICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkgewogICAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKHVuc3VwcG9ydGVkWm9uZSh6b25lVG9Vc2UpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7CiAgICAgICAgdHM6IHRzLAogICAgICAgIHpvbmU6IHpvbmVUb1VzZSwKICAgICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdGlvbnMpLAogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaCAobWVhbmluZyBzaW5jZSAxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLiBVc2VzIHRoZSBkZWZhdWx0IHpvbmUuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWlsbGlzZWNvbmRzIC0gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDE5NzAgVVRDCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIERhdGVUaW1lCiAgICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0aW9ucy56b25lPSdsb2NhbCddIC0gdGhlIHpvbmUgdG8gcGxhY2UgdGhlIERhdGVUaW1lIGludG8KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2UKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZQogICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2UKICAgICAqIEByZXR1cm4ge0RhdGVUaW1lfQogICAgICovCiAgICBzdGF0aWMgZnJvbU1pbGxpcyhtaWxsaXNlY29uZHMsIG9wdGlvbnMgPSB7fSkgewogICAgICBpZiAoIWlzTnVtYmVyJDEobWlsbGlzZWNvbmRzKSkgewogICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigKICAgICAgICAgIGBmcm9tTWlsbGlzIHJlcXVpcmVzIGEgbnVtZXJpY2FsIGlucHV0LCBidXQgcmVjZWl2ZWQgYSAke3R5cGVvZiBtaWxsaXNlY29uZHN9IHdpdGggdmFsdWUgJHttaWxsaXNlY29uZHN9YAogICAgICAgICk7CiAgICAgIH0gZWxzZSBpZiAobWlsbGlzZWNvbmRzIDwgLU1BWF9EQVRFIHx8IG1pbGxpc2Vjb25kcyA+IE1BWF9EQVRFKSB7CiAgICAgICAgLy8gdGhpcyBpc24ndCBwZXJmZWN0IGJlY2F1c2UgYmVjYXVzZSB3ZSBjYW4gc3RpbGwgZW5kIHVwIG91dCBvZiByYW5nZSBiZWNhdXNlIG9mIGFkZGl0aW9uYWwgc2hpZnRpbmcsIGJ1dCBpdCdzIGEgc3RhcnQKICAgICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZCgiVGltZXN0YW1wIG91dCBvZiByYW5nZSIpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoewogICAgICAgICAgdHM6IG1pbGxpc2Vjb25kcywKICAgICAgICAgIHpvbmU6IG5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSksCiAgICAgICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdGlvbnMpLAogICAgICAgIH0pOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgdGhlIGVwb2NoIChtZWFuaW5nIHNpbmNlIDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuIFVzZXMgdGhlIGRlZmF1bHQgem9uZS4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzIC0gYSBudW1iZXIgb2Ygc2Vjb25kcyBzaW5jZSAxOTcwIFVUQwogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZQogICAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2UKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0KICAgICAqLwogICAgc3RhdGljIGZyb21TZWNvbmRzKHNlY29uZHMsIG9wdGlvbnMgPSB7fSkgewogICAgICBpZiAoIWlzTnVtYmVyJDEoc2Vjb25kcykpIHsKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoImZyb21TZWNvbmRzIHJlcXVpcmVzIGEgbnVtZXJpY2FsIGlucHV0Iik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7CiAgICAgICAgICB0czogc2Vjb25kcyAqIDEwMDAsCiAgICAgICAgICB6b25lOiBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpLAogICAgICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKSwKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFyJyBhbmQgJ2hvdXInIHdpdGggcmVhc29uYWJsZSBkZWZhdWx0cy4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IHRvIGNyZWF0ZSB0aGUgRGF0ZVRpbWUgZnJvbQogICAgICogQHBhcmFtIHtudW1iZXJ9IG9iai55ZWFyIC0gYSB5ZWFyLCBzdWNoIGFzIDE5ODcKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubW9udGggLSBhIG1vbnRoLCAxLTEyCiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmRheSAtIGEgZGF5IG9mIHRoZSBtb250aCwgMS0zMSwgZGVwZW5kaW5nIG9uIHRoZSBtb250aAogICAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5vcmRpbmFsIC0gZGF5IG9mIHRoZSB5ZWFyLCAxLTM2NSBvciAzNjYKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla1llYXIgLSBhbiBJU08gd2VlayB5ZWFyCiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtOdW1iZXIgLSBhbiBJU08gd2VlayBudW1iZXIsIGJldHdlZW4gMSBhbmQgNTIgb3IgNTMsIGRlcGVuZGluZyBvbiB0aGUgeWVhcgogICAgICogQHBhcmFtIHtudW1iZXJ9IG9iai53ZWVrZGF5IC0gYW4gSVNPIHdlZWtkYXksIDEtNywgd2hlcmUgMSBpcyBNb25kYXkgYW5kIDcgaXMgU3VuZGF5CiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmhvdXIgLSBob3VyIG9mIHRoZSBkYXksIDAtMjMKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWludXRlIC0gbWludXRlIG9mIHRoZSBob3VyLCAwLTU5CiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnNlY29uZCAtIHNlY29uZCBvZiB0aGUgbWludXRlLCAwLTU5CiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbGxpc2Vjb25kIC0gbWlsbGlzZWNvbmQgb2YgdGhlIHNlY29uZCwgMC05OTkKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhpcyBEYXRlVGltZQogICAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGludGVycHJldCB0aGUgbnVtYmVycyBpbiB0aGUgY29udGV4dCBvZiBhIHBhcnRpY3VsYXIgem9uZS4gQ2FuIHRha2UgYW55IHZhbHVlIHRha2VuIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBzZXRab25lKCkKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2UKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZQogICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2UKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB5ZWFyOiAxOTgyLCBtb250aDogNSwgZGF5OiAyNX0pLnRvSVNPRGF0ZSgpIC8vPT4gJzE5ODItMDUtMjUnCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgeWVhcjogMTk4MiB9KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTAxLTAxJwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSkgLy9+PiB0b2RheSBhdCAxMDoyNjowNgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSwgeyB6b25lOiAndXRjJyB9KSwKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0sIHsgem9uZTogJ2xvY2FsJyB9KQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSwgeyB6b25lOiAnQW1lcmljYS9OZXdfWW9yaycgfSkKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyB3ZWVrWWVhcjogMjAxNiwgd2Vla051bWJlcjogMiwgd2Vla2RheTogMyB9KS50b0lTT0RhdGUoKSAvLz0+ICcyMDE2LTAxLTEzJwogICAgICogQHJldHVybiB7RGF0ZVRpbWV9CiAgICAgKi8KICAgIHN0YXRpYyBmcm9tT2JqZWN0KG9iaiwgb3B0cyA9IHt9KSB7CiAgICAgIG9iaiA9IG9iaiB8fCB7fTsKICAgICAgY29uc3Qgem9uZVRvVXNlID0gbm9ybWFsaXplWm9uZShvcHRzLnpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKTsKICAgICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkgewogICAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKHVuc3VwcG9ydGVkWm9uZSh6b25lVG9Vc2UpKTsKICAgICAgfQoKICAgICAgY29uc3QgdHNOb3cgPSBTZXR0aW5ncy5ub3coKSwKICAgICAgICBvZmZzZXRQcm92aXMgPSAhaXNVbmRlZmluZWQob3B0cy5zcGVjaWZpY09mZnNldCkKICAgICAgICAgID8gb3B0cy5zcGVjaWZpY09mZnNldAogICAgICAgICAgOiB6b25lVG9Vc2Uub2Zmc2V0KHRzTm93KSwKICAgICAgICBub3JtYWxpemVkID0gbm9ybWFsaXplT2JqZWN0KG9iaiwgbm9ybWFsaXplVW5pdCksCiAgICAgICAgY29udGFpbnNPcmRpbmFsID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQub3JkaW5hbCksCiAgICAgICAgY29udGFpbnNHcmVnb3JZZWFyID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQueWVhciksCiAgICAgICAgY29udGFpbnNHcmVnb3JNRCA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLm1vbnRoKSB8fCAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5kYXkpLAogICAgICAgIGNvbnRhaW5zR3JlZ29yID0gY29udGFpbnNHcmVnb3JZZWFyIHx8IGNvbnRhaW5zR3JlZ29yTUQsCiAgICAgICAgZGVmaW5pdGVXZWVrRGVmID0gbm9ybWFsaXplZC53ZWVrWWVhciB8fCBub3JtYWxpemVkLndlZWtOdW1iZXIsCiAgICAgICAgbG9jID0gTG9jYWxlLmZyb21PYmplY3Qob3B0cyk7CgogICAgICAvLyBjYXNlczoKICAgICAgLy8ganVzdCBhIHdlZWtkYXkgLT4gdGhpcyB3ZWVrJ3MgaW5zdGFuY2Ugb2YgdGhhdCB3ZWVrZGF5LCBubyB3b3JyaWVzCiAgICAgIC8vIChncmVnb3JpYW4gZGF0YSBvciBvcmRpbmFsKSArICh3ZWVrWWVhciBvciB3ZWVrTnVtYmVyKSAtPiBlcnJvcgogICAgICAvLyAoZ3JlZ29yaWFuIG1vbnRoIG9yIGRheSkgKyBvcmRpbmFsIC0+IGVycm9yCiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVzZSB3ZWVrcyBvciBvcmRpbmFscyBvciBncmVnb3JpYW4sIGRlcGVuZGluZyBvbiB3aGF0J3Mgc3BlY2lmaWVkCgogICAgICBpZiAoKGNvbnRhaW5zR3JlZ29yIHx8IGNvbnRhaW5zT3JkaW5hbCkgJiYgZGVmaW5pdGVXZWVrRGVmKSB7CiAgICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKAogICAgICAgICAgIkNhbid0IG1peCB3ZWVrWWVhci93ZWVrTnVtYmVyIHVuaXRzIHdpdGggeWVhci9tb250aC9kYXkgb3Igb3JkaW5hbHMiCiAgICAgICAgKTsKICAgICAgfQoKICAgICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7CiAgICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheSIpOwogICAgICB9CgogICAgICBjb25zdCB1c2VXZWVrRGF0YSA9IGRlZmluaXRlV2Vla0RlZiB8fCAobm9ybWFsaXplZC53ZWVrZGF5ICYmICFjb250YWluc0dyZWdvcik7CgogICAgICAvLyBjb25maWd1cmUgb3Vyc2VsdmVzIHRvIGRlYWwgd2l0aCBncmVnb3JpYW4gZGF0ZXMgb3Igd2VlayBzdHVmZgogICAgICBsZXQgdW5pdHMsCiAgICAgICAgZGVmYXVsdFZhbHVlcywKICAgICAgICBvYmpOb3cgPSB0c1RvT2JqKHRzTm93LCBvZmZzZXRQcm92aXMpOwogICAgICBpZiAodXNlV2Vla0RhdGEpIHsKICAgICAgICB1bml0cyA9IG9yZGVyZWRXZWVrVW5pdHM7CiAgICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRXZWVrVW5pdFZhbHVlczsKICAgICAgICBvYmpOb3cgPSBncmVnb3JpYW5Ub1dlZWsob2JqTm93KTsKICAgICAgfSBlbHNlIGlmIChjb250YWluc09yZGluYWwpIHsKICAgICAgICB1bml0cyA9IG9yZGVyZWRPcmRpbmFsVW5pdHM7CiAgICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRPcmRpbmFsVW5pdFZhbHVlczsKICAgICAgICBvYmpOb3cgPSBncmVnb3JpYW5Ub09yZGluYWwob2JqTm93KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB1bml0cyA9IG9yZGVyZWRVbml0czsKICAgICAgICBkZWZhdWx0VmFsdWVzID0gZGVmYXVsdFVuaXRWYWx1ZXM7CiAgICAgIH0KCiAgICAgIC8vIHNldCBkZWZhdWx0IHZhbHVlcyBmb3IgbWlzc2luZyBzdHVmZgogICAgICBsZXQgZm91bmRGaXJzdCA9IGZhbHNlOwogICAgICBmb3IgKGNvbnN0IHUgb2YgdW5pdHMpIHsKICAgICAgICBjb25zdCB2ID0gbm9ybWFsaXplZFt1XTsKICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHYpKSB7CiAgICAgICAgICBmb3VuZEZpcnN0ID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgaWYgKGZvdW5kRmlyc3QpIHsKICAgICAgICAgIG5vcm1hbGl6ZWRbdV0gPSBkZWZhdWx0VmFsdWVzW3VdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBub3JtYWxpemVkW3VdID0gb2JqTm93W3VdOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gbWFrZSBzdXJlIHRoZSB2YWx1ZXMgd2UgaGF2ZSBhcmUgaW4gcmFuZ2UKICAgICAgY29uc3QgaGlnaGVyT3JkZXJJbnZhbGlkID0gdXNlV2Vla0RhdGEKICAgICAgICAgID8gaGFzSW52YWxpZFdlZWtEYXRhKG5vcm1hbGl6ZWQpCiAgICAgICAgICA6IGNvbnRhaW5zT3JkaW5hbAogICAgICAgICAgPyBoYXNJbnZhbGlkT3JkaW5hbERhdGEobm9ybWFsaXplZCkKICAgICAgICAgIDogaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEobm9ybWFsaXplZCksCiAgICAgICAgaW52YWxpZCA9IGhpZ2hlck9yZGVySW52YWxpZCB8fCBoYXNJbnZhbGlkVGltZURhdGEobm9ybWFsaXplZCk7CgogICAgICBpZiAoaW52YWxpZCkgewogICAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKGludmFsaWQpOwogICAgICB9CgogICAgICAvLyBjb21wdXRlIHRoZSBhY3R1YWwgdGltZQogICAgICBjb25zdCBncmVnb3JpYW4gPSB1c2VXZWVrRGF0YQogICAgICAgICAgPyB3ZWVrVG9HcmVnb3JpYW4obm9ybWFsaXplZCkKICAgICAgICAgIDogY29udGFpbnNPcmRpbmFsCiAgICAgICAgICA/IG9yZGluYWxUb0dyZWdvcmlhbihub3JtYWxpemVkKQogICAgICAgICAgOiBub3JtYWxpemVkLAogICAgICAgIFt0c0ZpbmFsLCBvZmZzZXRGaW5hbF0gPSBvYmpUb1RTKGdyZWdvcmlhbiwgb2Zmc2V0UHJvdmlzLCB6b25lVG9Vc2UpLAogICAgICAgIGluc3QgPSBuZXcgRGF0ZVRpbWUoewogICAgICAgICAgdHM6IHRzRmluYWwsCiAgICAgICAgICB6b25lOiB6b25lVG9Vc2UsCiAgICAgICAgICBvOiBvZmZzZXRGaW5hbCwKICAgICAgICAgIGxvYywKICAgICAgICB9KTsKCiAgICAgIC8vIGdyZWdvcmlhbiBkYXRhICsgd2Vla2RheSBzZXJ2ZXMgb25seSB0byB2YWxpZGF0ZQogICAgICBpZiAobm9ybWFsaXplZC53ZWVrZGF5ICYmIGNvbnRhaW5zR3JlZ29yICYmIG9iai53ZWVrZGF5ICE9PSBpbnN0LndlZWtkYXkpIHsKICAgICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZCgKICAgICAgICAgICJtaXNtYXRjaGVkIHdlZWtkYXkiLAogICAgICAgICAgYHlvdSBjYW4ndCBzcGVjaWZ5IGJvdGggYSB3ZWVrZGF5IG9mICR7bm9ybWFsaXplZC53ZWVrZGF5fSBhbmQgYSBkYXRlIG9mICR7aW5zdC50b0lTTygpfWAKICAgICAgICApOwogICAgICB9CgogICAgICByZXR1cm4gaW5zdDsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gSVNPIDg2MDEgc3RyaW5nCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBJU08gc3RyaW5nCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvbgogICAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIGZpeGVkLW9mZnNldCB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nc3lzdGVtJ3MgbG9jYWxlJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyXSAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2UKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW1dIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2UKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzJykKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzKzA2OjAwJykKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzKzA2OjAwJywge3NldFpvbmU6IHRydWV9KQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi0wNS0yNVQwOTowODozNC4xMjMnLCB7em9uZTogJ3V0Yyd9KQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi1XMDUtNCcpCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0KICAgICAqLwogICAgc3RhdGljIGZyb21JU08odGV4dCwgb3B0cyA9IHt9KSB7CiAgICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlSVNPRGF0ZSh0ZXh0KTsKICAgICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgIklTTyA4NjAxIiwgdGV4dCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIFJGQyAyODIyIHN0cmluZwogICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgUkZDIDI4MjIgc3RyaW5nCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvbgogICAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lLiBTaW5jZSB0aGUgb2Zmc2V0IGlzIGFsd2F5cyBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpdHNlbGYsIHRoaXMgaGFzIG5vIGVmZmVjdCBvbiB0aGUgaW50ZXJwcmV0YXRpb24gb2Ygc3RyaW5nLCBtZXJlbHkgdGhlIHpvbmUgdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpcyBleHByZXNzZWQgaW4uCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIGZpeGVkLW9mZnNldCB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nc3lzdGVtJ3MgbG9jYWxlJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZQogICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVJGQzI4MjIoJzI1IE5vdiAyMDE2IDEzOjIzOjEyIEdNVCcpCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignRnJpLCAyNSBOb3YgMjAxNiAxMzoyMzoxMiArMDYwMCcpCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignMjUgTm92IDIwMTYgMTM6MjMgWicpCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0KICAgICAqLwogICAgc3RhdGljIGZyb21SRkMyODIyKHRleHQsIG9wdHMgPSB7fSkgewogICAgICBjb25zdCBbdmFscywgcGFyc2VkWm9uZV0gPSBwYXJzZVJGQzI4MjJEYXRlKHRleHQpOwogICAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCAiUkZDIDI4MjIiLCB0ZXh0KTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gSFRUUCBoZWFkZXIgZGF0ZQogICAgICogQHNlZSBodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMzLmh0bWwjc2VjMy4zLjEKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIEhUVFAgaGVhZGVyIGRhdGUKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uCiAgICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gY29udmVydCB0aGUgdGltZSB0byB0aGlzIHpvbmUuIFNpbmNlIEhUVFAgZGF0ZXMgYXJlIGFsd2F5cyBpbiBVVEMsIHRoaXMgaGFzIG5vIGVmZmVjdCBvbiB0aGUgaW50ZXJwcmV0YXRpb24gb2Ygc3RyaW5nLCBtZXJlbHkgdGhlIHpvbmUgdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpcyBleHByZXNzZWQgaW4uCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCB0aGUgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcuIEZvciBIVFRQIGRhdGVzLCB0aGlzIGlzIGFsd2F5cyBVVEMsIHNvIHRoaXMgb3B0aW9uIGlzIGVxdWl2YWxlbnQgdG8gc2V0dGluZyB0aGUgYHpvbmVgIG9wdGlvbiB0byAndXRjJywgYnV0IHRoaXMgb3B0aW9uIGlzIGluY2x1ZGVkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHNpbWlsYXIgbWV0aG9kcy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2UKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZQogICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2UKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21IVFRQKCdTdW4sIDA2IE5vdiAxOTk0IDA4OjQ5OjM3IEdNVCcpCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSFRUUCgnU3VuZGF5LCAwNi1Ob3YtOTQgMDg6NDk6MzcgR01UJykKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21IVFRQKCdTdW4gTm92ICA2IDA4OjQ5OjM3IDE5OTQnKQogICAgICogQHJldHVybiB7RGF0ZVRpbWV9CiAgICAgKi8KICAgIHN0YXRpYyBmcm9tSFRUUCh0ZXh0LCBvcHRzID0ge30pIHsKICAgICAgY29uc3QgW3ZhbHMsIHBhcnNlZFpvbmVdID0gcGFyc2VIVFRQRGF0ZSh0ZXh0KTsKICAgICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgIkhUVFAiLCBvcHRzKTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gaW5wdXQgc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nLgogICAgICogRGVmYXVsdHMgdG8gZW4tVVMgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZCwgcmVnYXJkbGVzcyBvZiB0aGUgc3lzdGVtJ3MgbG9jYWxlLiBGb3IgYSB0YWJsZSBvZiB0b2tlbnMgYW5kIHRoZWlyIGludGVycHJldGF0aW9ucywgc2VlIFtoZXJlXShodHRwczovL21vbWVudC5naXRodWIuaW8vbHV4b24vIy9wYXJzaW5nP2lkPXRhYmxlLW9mLXRva2VucykuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBzdHJpbmcgdG8gcGFyc2UKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHRoZSBzdHJpbmcgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gKHNlZSB0aGUgbGluayBiZWxvdyBmb3IgdGhlIGZvcm1hdHMpCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvbgogICAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIHRoaXMgem9uZQogICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggYSB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZQogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIGEgbG9jYWxlIHN0cmluZyB0byB1c2Ugd2hlbiBwYXJzaW5nLiBXaWxsIGFsc28gc2V0IHRoZSBEYXRlVGltZSB0byB0aGlzIGxvY2FsZQogICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIHRvIHRoaXMgbnVtYmVyaW5nIHN5c3RlbQogICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0KICAgICAqLwogICAgc3RhdGljIGZyb21Gb3JtYXQodGV4dCwgZm10LCBvcHRzID0ge30pIHsKICAgICAgaWYgKGlzVW5kZWZpbmVkKHRleHQpIHx8IGlzVW5kZWZpbmVkKGZtdCkpIHsKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoImZyb21Gb3JtYXQgcmVxdWlyZXMgYW4gaW5wdXQgc3RyaW5nIGFuZCBhIGZvcm1hdCIpOwogICAgICB9CgogICAgICBjb25zdCB7IGxvY2FsZSA9IG51bGwsIG51bWJlcmluZ1N5c3RlbSA9IG51bGwgfSA9IG9wdHMsCiAgICAgICAgbG9jYWxlVG9Vc2UgPSBMb2NhbGUuZnJvbU9wdHMoewogICAgICAgICAgbG9jYWxlLAogICAgICAgICAgbnVtYmVyaW5nU3lzdGVtLAogICAgICAgICAgZGVmYXVsdFRvRU46IHRydWUsCiAgICAgICAgfSksCiAgICAgICAgW3ZhbHMsIHBhcnNlZFpvbmUsIHNwZWNpZmljT2Zmc2V0LCBpbnZhbGlkXSA9IHBhcnNlRnJvbVRva2Vucyhsb2NhbGVUb1VzZSwgdGV4dCwgZm10KTsKICAgICAgaWYgKGludmFsaWQpIHsKICAgICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBgZm9ybWF0ICR7Zm10fWAsIHRleHQsIHNwZWNpZmljT2Zmc2V0KTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRlcHJlY2F0ZWQgdXNlIGZyb21Gb3JtYXQgaW5zdGVhZAogICAgICovCiAgICBzdGF0aWMgZnJvbVN0cmluZyh0ZXh0LCBmbXQsIG9wdHMgPSB7fSkgewogICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUZvcm1hdCh0ZXh0LCBmbXQsIG9wdHMpOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIFNRTCBkYXRlLCB0aW1lLCBvciBkYXRldGltZQogICAgICogRGVmYXVsdHMgdG8gZW4tVVMgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZCwgcmVnYXJkbGVzcyBvZiB0aGUgc3lzdGVtJ3MgbG9jYWxlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBzdHJpbmcgdG8gcGFyc2UKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uCiAgICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gdXNlIHRoaXMgem9uZSBpZiBubyBvZmZzZXQgaXMgc3BlY2lmaWVkIGluIHRoZSBpbnB1dCBzdHJpbmcgaXRzZWxmLiBXaWxsIGFsc28gY29udmVydCB0aGUgRGF0ZVRpbWUgdG8gdGhpcyB6b25lCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gYSBsb2NhbGUgc3RyaW5nIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIERhdGVUaW1lIHRvIHRoaXMgbG9jYWxlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2Ugd2hlbiBwYXJzaW5nLiBXaWxsIGFsc28gc2V0IHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgdG8gdGhpcyBudW1iZXJpbmcgc3lzdGVtCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2UKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUnKQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNCcpCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MicpCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MiswNjowMCcpCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MiBBbWVyaWNhL0xvc19BbmdlbGVzJykKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyIEFtZXJpY2EvTG9zX0FuZ2VsZXMnLCB7IHNldFpvbmU6IHRydWUgfSkKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyJywgeyB6b25lOiAnQW1lcmljYS9Mb3NfQW5nZWxlcycgfSkKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzA5OjEyOjM0LjM0MicpCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0KICAgICAqLwogICAgc3RhdGljIGZyb21TUUwodGV4dCwgb3B0cyA9IHt9KSB7CiAgICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlU1FMKHRleHQpOwogICAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCAiU1FMIiwgdGV4dCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYW4gaW52YWxpZCBEYXRlVGltZS4KICAgICAqIEBwYXJhbSB7RGF0ZVRpbWV9IHJlYXNvbiAtIHNpbXBsZSBzdHJpbmcgb2Ygd2h5IHRoaXMgRGF0ZVRpbWUgaXMgaW52YWxpZC4gU2hvdWxkIG5vdCBjb250YWluIHBhcmFtZXRlcnMgb3IgYW55dGhpbmcgZWxzZSBkYXRhLWRlcGVuZGVudAogICAgICogQHBhcmFtIHtzdHJpbmd9IFtleHBsYW5hdGlvbj1udWxsXSAtIGxvbmdlciBleHBsYW5hdGlvbiwgbWF5IGluY2x1ZGUgcGFyYW1ldGVycyBhbmQgb3RoZXIgdXNlZnVsIGRlYnVnZ2luZyBpbmZvcm1hdGlvbgogICAgICogQHJldHVybiB7RGF0ZVRpbWV9CiAgICAgKi8KICAgIHN0YXRpYyBpbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24gPSBudWxsKSB7CiAgICAgIGlmICghcmVhc29uKSB7CiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCJuZWVkIHRvIHNwZWNpZnkgYSByZWFzb24gdGhlIERhdGVUaW1lIGlzIGludmFsaWQiKTsKICAgICAgfQoKICAgICAgY29uc3QgaW52YWxpZCA9IHJlYXNvbiBpbnN0YW5jZW9mIEludmFsaWQgPyByZWFzb24gOiBuZXcgSW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKTsKCiAgICAgIGlmIChTZXR0aW5ncy50aHJvd09uSW52YWxpZCkgewogICAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZVRpbWVFcnJvcihpbnZhbGlkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHsgaW52YWxpZCB9KTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGFuIGluc3RhbmNlIG9mIERhdGVUaW1lLiBXb3JrcyBhY3Jvc3MgY29udGV4dCBib3VuZGFyaWVzCiAgICAgKiBAcGFyYW0ge29iamVjdH0gbwogICAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgICAqLwogICAgc3RhdGljIGlzRGF0ZVRpbWUobykgewogICAgICByZXR1cm4gKG8gJiYgby5pc0x1eG9uRGF0ZVRpbWUpIHx8IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogUHJvZHVjZSB0aGUgZm9ybWF0IHN0cmluZyBmb3IgYSBzZXQgb2Ygb3B0aW9ucwogICAgICogQHBhcmFtIGZvcm1hdE9wdHMKICAgICAqIEBwYXJhbSBsb2NhbGVPcHRzCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfQogICAgICovCiAgICBzdGF0aWMgcGFyc2VGb3JtYXRGb3JPcHRzKGZvcm1hdE9wdHMsIGxvY2FsZU9wdHMgPSB7fSkgewogICAgICBjb25zdCB0b2tlbkxpc3QgPSBmb3JtYXRPcHRzVG9Ub2tlbnMoZm9ybWF0T3B0cywgTG9jYWxlLmZyb21PYmplY3QobG9jYWxlT3B0cykpOwogICAgICByZXR1cm4gIXRva2VuTGlzdCA/IG51bGwgOiB0b2tlbkxpc3QubWFwKCh0KSA9PiAodCA/IHQudmFsIDogbnVsbCkpLmpvaW4oIiIpOwogICAgfQoKICAgIC8qKgogICAgICogUHJvZHVjZSB0aGUgdGhlIGZ1bGx5IGV4cGFuZGVkIGZvcm1hdCB0b2tlbiBmb3IgdGhlIGxvY2FsZQogICAgICogRG9lcyBOT1QgcXVvdGUgY2hhcmFjdGVycywgc28gcXVvdGVkIHRva2VucyB3aWxsIG5vdCByb3VuZCB0cmlwIGNvcnJlY3RseQogICAgICogQHBhcmFtIGZtdAogICAgICogQHBhcmFtIGxvY2FsZU9wdHMKICAgICAqIEByZXR1cm5zIHtzdHJpbmd9CiAgICAgKi8KICAgIHN0YXRpYyBleHBhbmRGb3JtYXQoZm10LCBsb2NhbGVPcHRzID0ge30pIHsKICAgICAgY29uc3QgZXhwYW5kZWQgPSBleHBhbmRNYWNyb1Rva2VucyhGb3JtYXR0ZXIucGFyc2VGb3JtYXQoZm10KSwgTG9jYWxlLmZyb21PYmplY3QobG9jYWxlT3B0cykpOwogICAgICByZXR1cm4gZXhwYW5kZWQubWFwKCh0KSA9PiB0LnZhbCkuam9pbigiIik7CiAgICB9CgogICAgLy8gSU5GTwoKICAgIC8qKgogICAgICogR2V0IHRoZSB2YWx1ZSBvZiB1bml0LgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlJyBvciAnZGF5JwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNywgNCkuZ2V0KCdtb250aCcpOyAvLz0+IDcKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnZGF5Jyk7IC8vPT4gNAogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCiAgICBnZXQodW5pdCkgewogICAgICByZXR1cm4gdGhpc1t1bml0XTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgdmFsaWQuIEludmFsaWQgRGF0ZVRpbWVzIG9jY3VyIHdoZW46CiAgICAgKiAqIFRoZSBEYXRlVGltZSB3YXMgY3JlYXRlZCBmcm9tIGludmFsaWQgY2FsZW5kYXIgaW5mb3JtYXRpb24sIHN1Y2ggYXMgdGhlIDEzdGggbW9udGggb3IgRmVicnVhcnkgMzAKICAgICAqICogVGhlIERhdGVUaW1lIHdhcyBjcmVhdGVkIGJ5IGFuIG9wZXJhdGlvbiBvbiBhbm90aGVyIGludmFsaWQgZGF0ZQogICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgKi8KICAgIGdldCBpc1ZhbGlkKCkgewogICAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBhbiBlcnJvciBjb2RlIGlmIHRoaXMgRGF0ZVRpbWUgaXMgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRGF0ZVRpbWUgaXMgdmFsaWQKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKi8KICAgIGdldCBpbnZhbGlkUmVhc29uKCkgewogICAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIERhdGVUaW1lIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBEYXRlVGltZSBpcyB2YWxpZAogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgZ2V0IGludmFsaWRFeHBsYW5hdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIGxvY2FsZSBvZiBhIERhdGVUaW1lLCBzdWNoICdlbi1HQicuIFRoZSBsb2NhbGUgaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIERhdGVUaW1lCiAgICAgKgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgZ2V0IGxvY2FsZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLmxvY2FsZSA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEYXRlVGltZSwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZQogICAgICoKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKi8KICAgIGdldCBudW1iZXJpbmdTeXN0ZW0oKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW0gOiBudWxsOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBvdXRwdXQgY2FsZW5kYXIgb2YgYSBEYXRlVGltZSwgc3VjaCAnaXNsYW1pYycuIFRoZSBvdXRwdXQgY2FsZW5kYXIgaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIERhdGVUaW1lCiAgICAgKgogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgZ2V0IG91dHB1dENhbGVuZGFyKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgOiBudWxsOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSB0aW1lIHpvbmUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgRGF0ZVRpbWUuCiAgICAgKiBAdHlwZSB7Wm9uZX0KICAgICAqLwogICAgZ2V0IHpvbmUoKSB7CiAgICAgIHJldHVybiB0aGlzLl96b25lOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSB0aW1lIHpvbmUuCiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICovCiAgICBnZXQgem9uZU5hbWUoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUubmFtZSA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIHllYXIKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS55ZWFyIC8vPT4gMjAxNwogICAgICogQHR5cGUge251bWJlcn0KICAgICAqLwogICAgZ2V0IHllYXIoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMueWVhciA6IE5hTjsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgcXVhcnRlcgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLnF1YXJ0ZXIgLy89PiAyCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICovCiAgICBnZXQgcXVhcnRlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IE1hdGguY2VpbCh0aGlzLmMubW9udGggLyAzKSA6IE5hTjsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgbW9udGggKDEtMTIpLgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLm1vbnRoIC8vPT4gNQogICAgICogQHR5cGUge251bWJlcn0KICAgICAqLwogICAgZ2V0IG1vbnRoKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1vbnRoIDogTmFOOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBkYXkgb2YgdGhlIG1vbnRoICgxLTMwaXNoKS4KICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5kYXkgLy89PiAyNQogICAgICogQHR5cGUge251bWJlcn0KICAgICAqLwogICAgZ2V0IGRheSgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5kYXkgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIGhvdXIgb2YgdGhlIGRheSAoMC0yMykuCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSwgOSkuaG91ciAvLz0+IDkKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKi8KICAgIGdldCBob3VyKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLmhvdXIgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIG1pbnV0ZSBvZiB0aGUgaG91ciAoMC01OSkuCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSwgOSwgMzApLm1pbnV0ZSAvLz0+IDMwCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICovCiAgICBnZXQgbWludXRlKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbnV0ZSA6IE5hTjsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgc2Vjb25kIG9mIHRoZSBtaW51dGUgKDAtNTkpLgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDksIDMwLCA1Mikuc2Vjb25kIC8vPT4gNTIKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKi8KICAgIGdldCBzZWNvbmQoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMuc2Vjb25kIDogTmFOOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kICgwLTk5OSkuCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSwgOSwgMzAsIDUyLCA2NTQpLm1pbGxpc2Vjb25kIC8vPT4gNjU0CiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICovCiAgICBnZXQgbWlsbGlzZWNvbmQoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMubWlsbGlzZWNvbmQgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIHdlZWsgeWVhcgogICAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAxMiwgMzEpLndlZWtZZWFyIC8vPT4gMjAxNQogICAgICogQHR5cGUge251bWJlcn0KICAgICAqLwogICAgZ2V0IHdlZWtZZWFyKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRXZWVrRGF0YSh0aGlzKS53ZWVrWWVhciA6IE5hTjsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgd2VlayBudW1iZXIgb2YgdGhlIHdlZWsgeWVhciAoMS01MmlzaCkuCiAgICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS53ZWVrTnVtYmVyIC8vPT4gMjEKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKi8KICAgIGdldCB3ZWVrTnVtYmVyKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRXZWVrRGF0YSh0aGlzKS53ZWVrTnVtYmVyIDogTmFOOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBkYXkgb2YgdGhlIHdlZWsuCiAgICAgKiAxIGlzIE1vbmRheSBhbmQgNyBpcyBTdW5kYXkKICAgICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMTEsIDMxKS53ZWVrZGF5IC8vPT4gNAogICAgICogQHR5cGUge251bWJlcn0KICAgICAqLwogICAgZ2V0IHdlZWtkYXkoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtkYXkgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIG9yZGluYWwgKG1lYW5pbmcgdGhlIGRheSBvZiB0aGUgeWVhcikKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5vcmRpbmFsIC8vPT4gMTQ1CiAgICAgKiBAdHlwZSB7bnVtYmVyfERhdGVUaW1lfQogICAgICovCiAgICBnZXQgb3JkaW5hbCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IGdyZWdvcmlhblRvT3JkaW5hbCh0aGlzLmMpLm9yZGluYWwgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIHNob3J0IG1vbnRoIG5hbWUsIHN1Y2ggYXMgJ09jdCcuCiAgICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWQKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkubW9udGhTaG9ydCAvLz0+IE9jdAogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgZ2V0IG1vbnRoU2hvcnQoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLm1vbnRocygic2hvcnQiLCB7IGxvY09iajogdGhpcy5sb2MgfSlbdGhpcy5tb250aCAtIDFdIDogbnVsbDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgbG9uZyBtb250aCBuYW1lLCBzdWNoIGFzICdPY3RvYmVyJy4KICAgICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZAogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMTAsIDMwKS5tb250aExvbmcgLy89PiBPY3RvYmVyCiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICovCiAgICBnZXQgbW9udGhMb25nKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby5tb250aHMoImxvbmciLCB7IGxvY09iajogdGhpcy5sb2MgfSlbdGhpcy5tb250aCAtIDFdIDogbnVsbDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgc2hvcnQgd2Vla2RheSwgc3VjaCBhcyAnTW9uJy4KICAgICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZAogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMTAsIDMwKS53ZWVrZGF5U2hvcnQgLy89PiBNb24KICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKi8KICAgIGdldCB3ZWVrZGF5U2hvcnQoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLndlZWtkYXlzKCJzaG9ydCIsIHsgbG9jT2JqOiB0aGlzLmxvYyB9KVt0aGlzLndlZWtkYXkgLSAxXSA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIGxvbmcgd2Vla2RheSwgc3VjaCBhcyAnTW9uZGF5Jy4KICAgICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZAogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMTAsIDMwKS53ZWVrZGF5TG9uZyAvLz0+IE1vbmRheQogICAgICogQHR5cGUge3N0cmluZ30KICAgICAqLwogICAgZ2V0IHdlZWtkYXlMb25nKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby53ZWVrZGF5cygibG9uZyIsIHsgbG9jT2JqOiB0aGlzLmxvYyB9KVt0aGlzLndlZWtkYXkgLSAxXSA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIFVUQyBvZmZzZXQgb2YgdGhpcyBEYXRlVGltZSBpbiBtaW51dGVzCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5vZmZzZXQgLy89PiAtMjQwCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5vZmZzZXQgLy89PiAwCiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICovCiAgICBnZXQgb2Zmc2V0KCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gK3RoaXMubyA6IE5hTjsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0aGUgc2hvcnQgaHVtYW4gbmFtZSBmb3IgdGhlIHpvbmUncyBjdXJyZW50IG9mZnNldCwgZm9yIGV4YW1wbGUgIkVTVCIgb3IgIkVEVCIuCiAgICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWQKICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgKi8KICAgIGdldCBvZmZzZXROYW1lU2hvcnQoKSB7CiAgICAgIGlmICh0aGlzLmlzVmFsaWQpIHsKICAgICAgICByZXR1cm4gdGhpcy56b25lLm9mZnNldE5hbWUodGhpcy50cywgewogICAgICAgICAgZm9ybWF0OiAic2hvcnQiLAogICAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZSwKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBsb25nIGh1bWFuIG5hbWUgZm9yIHRoZSB6b25lJ3MgY3VycmVudCBvZmZzZXQsIGZvciBleGFtcGxlICJFYXN0ZXJuIFN0YW5kYXJkIFRpbWUiIG9yICJFYXN0ZXJuIERheWxpZ2h0IFRpbWUiLgogICAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkCiAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICovCiAgICBnZXQgb2Zmc2V0TmFtZUxvbmcoKSB7CiAgICAgIGlmICh0aGlzLmlzVmFsaWQpIHsKICAgICAgICByZXR1cm4gdGhpcy56b25lLm9mZnNldE5hbWUodGhpcy50cywgewogICAgICAgICAgZm9ybWF0OiAibG9uZyIsCiAgICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLAogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgd2hldGhlciB0aGlzIHpvbmUncyBvZmZzZXQgZXZlciBjaGFuZ2VzLCBhcyBpbiBhIERTVC4KICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICovCiAgICBnZXQgaXNPZmZzZXRGaXhlZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuem9uZS5pc1VuaXZlcnNhbCA6IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgaW4gYSBEU1QuCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqLwogICAgZ2V0IGlzSW5EU1QoKSB7CiAgICAgIGlmICh0aGlzLmlzT2Zmc2V0Rml4ZWQpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICgKICAgICAgICAgIHRoaXMub2Zmc2V0ID4gdGhpcy5zZXQoeyBtb250aDogMSwgZGF5OiAxIH0pLm9mZnNldCB8fAogICAgICAgICAgdGhpcy5vZmZzZXQgPiB0aGlzLnNldCh7IG1vbnRoOiA1IH0pLm9mZnNldAogICAgICAgICk7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIERhdGVUaW1lIGlzIGluIGEgbGVhcCB5ZWFyLCBmYWxzZSBvdGhlcndpc2UKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTYpLmlzSW5MZWFwWWVhciAvLz0+IHRydWUKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmlzSW5MZWFwWWVhciAvLz0+IGZhbHNlCiAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAqLwogICAgZ2V0IGlzSW5MZWFwWWVhcigpIHsKICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoaXMgRGF0ZVRpbWUncyBtb250aAogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNiwgMikuZGF5c0luTW9udGggLy89PiAyOQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNiwgMykuZGF5c0luTW9udGggLy89PiAzMQogICAgICogQHR5cGUge251bWJlcn0KICAgICAqLwogICAgZ2V0IGRheXNJbk1vbnRoKCkgewogICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyLCB0aGlzLm1vbnRoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoaXMgRGF0ZVRpbWUncyB5ZWFyCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5kYXlzSW5ZZWFyIC8vPT4gMzY2CiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDEzKS5kYXlzSW5ZZWFyIC8vPT4gMzY1CiAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICovCiAgICBnZXQgZGF5c0luWWVhcigpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IGRheXNJblllYXIodGhpcy55ZWFyKSA6IE5hTjsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB3ZWVrcyBpbiB0aGlzIERhdGVUaW1lJ3MgeWVhcgogICAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDA0KS53ZWVrc0luV2Vla1llYXIgLy89PiA1MwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxMykud2Vla3NJbldlZWtZZWFyIC8vPT4gNTIKICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgKi8KICAgIGdldCB3ZWVrc0luV2Vla1llYXIoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB3ZWVrc0luV2Vla1llYXIodGhpcy53ZWVrWWVhcikgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSByZXNvbHZlZCBJbnRsIG9wdGlvbnMgZm9yIHRoaXMgRGF0ZVRpbWUuCiAgICAgKiBUaGlzIGlzIHVzZWZ1bCBpbiB1bmRlcnN0YW5kaW5nIHRoZSBiZWhhdmlvciBvZiBmb3JtYXR0aW5nIG1ldGhvZHMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gdGhlIHNhbWUgb3B0aW9ucyBhcyB0b0xvY2FsZVN0cmluZwogICAgICogQHJldHVybiB7T2JqZWN0fQogICAgICovCiAgICByZXNvbHZlZExvY2FsZU9wdGlvbnMob3B0cyA9IHt9KSB7CiAgICAgIGNvbnN0IHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIGNhbGVuZGFyIH0gPSBGb3JtYXR0ZXIuY3JlYXRlKAogICAgICAgIHRoaXMubG9jLmNsb25lKG9wdHMpLAogICAgICAgIG9wdHMKICAgICAgKS5yZXNvbHZlZE9wdGlvbnModGhpcyk7CiAgICAgIHJldHVybiB7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcjogY2FsZW5kYXIgfTsKICAgIH0KCiAgICAvLyBUUkFOU0ZPUk0KCiAgICAvKioKICAgICAqICJTZXQiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gVVRDLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuCiAgICAgKgogICAgICogRXF1aXZhbGVudCB0byB7QGxpbmsgRGF0ZVRpbWUjc2V0Wm9uZX0oJ3V0YycpCiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIG9wdGlvbmFsbHksIGFuIG9mZnNldCBmcm9tIFVUQyBpbiBtaW51dGVzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gb3B0aW9ucyB0byBwYXNzIHRvIGBzZXRab25lKClgCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0KICAgICAqLwogICAgdG9VVEMob2Zmc2V0ID0gMCwgb3B0cyA9IHt9KSB7CiAgICAgIHJldHVybiB0aGlzLnNldFpvbmUoRml4ZWRPZmZzZXRab25lLmluc3RhbmNlKG9mZnNldCksIG9wdHMpOwogICAgfQoKICAgIC8qKgogICAgICogIlNldCIgdGhlIERhdGVUaW1lJ3Mgem9uZSB0byB0aGUgaG9zdCdzIGxvY2FsIHpvbmUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS4KICAgICAqCiAgICAgKiBFcXVpdmFsZW50IHRvIGBzZXRab25lKCdsb2NhbCcpYAogICAgICogQHJldHVybiB7RGF0ZVRpbWV9CiAgICAgKi8KICAgIHRvTG9jYWwoKSB7CiAgICAgIHJldHVybiB0aGlzLnNldFpvbmUoU2V0dGluZ3MuZGVmYXVsdFpvbmUpOwogICAgfQoKICAgIC8qKgogICAgICogIlNldCIgdGhlIERhdGVUaW1lJ3Mgem9uZSB0byBzcGVjaWZpZWQgem9uZS4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLgogICAgICoKICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBzZXR0ZXIga2VlcHMgdGhlIHVuZGVybHlpbmcgdGltZSB0aGUgc2FtZSAoYXMgaW4sIHRoZSBzYW1lIHRpbWVzdGFtcCksIGJ1dCB0aGUgbmV3IGluc3RhbmNlIHdpbGwgcmVwb3J0IGRpZmZlcmVudCBsb2NhbCB0aW1lcyBhbmQgY29uc2lkZXIgRFNUcyB3aGVuIG1ha2luZyBjb21wdXRhdGlvbnMsIGFzIHdpdGgge0BsaW5rIERhdGVUaW1lI3BsdXN9LiBZb3UgbWF5IHdpc2ggdG8gdXNlIHtAbGluayBEYXRlVGltZSN0b0xvY2FsfSBhbmQge0BsaW5rIERhdGVUaW1lI3RvVVRDfSB3aGljaCBwcm92aWRlIHNpbXBsZSBjb252ZW5pZW5jZSB3cmFwcGVycyBmb3IgY29tbW9ubHkgdXNlZCB6b25lcy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFt6b25lPSdsb2NhbCddIC0gYSB6b25lIGlkZW50aWZpZXIuIEFzIGEgc3RyaW5nLCB0aGF0IGNhbiBiZSBhbnkgSUFOQSB6b25lIHN1cHBvcnRlZCBieSB0aGUgaG9zdCBlbnZpcm9ubWVudCwgb3IgYSBmaXhlZC1vZmZzZXQgbmFtZSBvZiB0aGUgZm9ybSAnVVRDKzMnLCBvciB0aGUgc3RyaW5ncyAnbG9jYWwnIG9yICd1dGMnLiBZb3UgbWF5IGFsc28gc3VwcGx5IGFuIGluc3RhbmNlIG9mIGEge0BsaW5rIERhdGVUaW1lI1pvbmV9IGNsYXNzLgogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmtlZXBMb2NhbFRpbWU9ZmFsc2VdIC0gSWYgdHJ1ZSwgYWRqdXN0IHRoZSB1bmRlcmx5aW5nIHRpbWUgc28gdGhhdCB0aGUgbG9jYWwgdGltZSBzdGF5cyB0aGUgc2FtZSwgYnV0IGluIHRoZSB0YXJnZXQgem9uZS4gWW91IHNob3VsZCByYXJlbHkgbmVlZCB0aGlzLgogICAgICogQHJldHVybiB7RGF0ZVRpbWV9CiAgICAgKi8KICAgIHNldFpvbmUoem9uZSwgeyBrZWVwTG9jYWxUaW1lID0gZmFsc2UsIGtlZXBDYWxlbmRhclRpbWUgPSBmYWxzZSB9ID0ge30pIHsKICAgICAgem9uZSA9IG5vcm1hbGl6ZVpvbmUoem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpOwogICAgICBpZiAoem9uZS5lcXVhbHModGhpcy56b25lKSkgewogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9IGVsc2UgaWYgKCF6b25lLmlzVmFsaWQpIHsKICAgICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZCh1bnN1cHBvcnRlZFpvbmUoem9uZSkpOwogICAgICB9IGVsc2UgewogICAgICAgIGxldCBuZXdUUyA9IHRoaXMudHM7CiAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUgfHwga2VlcENhbGVuZGFyVGltZSkgewogICAgICAgICAgY29uc3Qgb2Zmc2V0R3Vlc3MgPSB6b25lLm9mZnNldCh0aGlzLnRzKTsKICAgICAgICAgIGNvbnN0IGFzT2JqID0gdGhpcy50b09iamVjdCgpOwogICAgICAgICAgW25ld1RTXSA9IG9ialRvVFMoYXNPYmosIG9mZnNldEd1ZXNzLCB6b25lKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNsb25lJDEodGhpcywgeyB0czogbmV3VFMsIHpvbmUgfSk7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqICJTZXQiIHRoZSBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3Igb3V0cHV0Q2FsZW5kYXIuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0gdGhlIHByb3BlcnRpZXMgdG8gc2V0CiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucmVjb25maWd1cmUoeyBsb2NhbGU6ICdlbi1HQicgfSkKICAgICAqIEByZXR1cm4ge0RhdGVUaW1lfQogICAgICovCiAgICByZWNvbmZpZ3VyZSh7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhciB9ID0ge30pIHsKICAgICAgY29uc3QgbG9jID0gdGhpcy5sb2MuY2xvbmUoeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIgfSk7CiAgICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHsgbG9jIH0pOwogICAgfQoKICAgIC8qKgogICAgICogIlNldCIgdGhlIGxvY2FsZS4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLgogICAgICogSnVzdCBhIGNvbnZlbmllbnQgYWxpYXMgZm9yIHJlY29uZmlndXJlKHsgbG9jYWxlIH0pCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkuc2V0TG9jYWxlKCdlbi1HQicpCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0KICAgICAqLwogICAgc2V0TG9jYWxlKGxvY2FsZSkgewogICAgICByZXR1cm4gdGhpcy5yZWNvbmZpZ3VyZSh7IGxvY2FsZSB9KTsKICAgIH0KCiAgICAvKioKICAgICAqICJTZXQiIHRoZSB2YWx1ZXMgb2Ygc3BlY2lmaWVkIHVuaXRzLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuCiAgICAgKiBZb3UgY2FuIG9ubHkgc2V0IHVuaXRzIHdpdGggdGhpcyBtZXRob2Q7IGZvciAic2V0dGluZyIgbWV0YWRhdGEsIHNlZSB7QGxpbmsgRGF0ZVRpbWUjcmVjb25maWd1cmV9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjc2V0Wm9uZX0uCiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gYSBtYXBwaW5nIG9mIHVuaXRzIHRvIG51bWJlcnMKICAgICAqIEBleGFtcGxlIGR0LnNldCh7IHllYXI6IDIwMTcgfSkKICAgICAqIEBleGFtcGxlIGR0LnNldCh7IGhvdXI6IDgsIG1pbnV0ZTogMzAgfSkKICAgICAqIEBleGFtcGxlIGR0LnNldCh7IHdlZWtkYXk6IDUgfSkKICAgICAqIEBleGFtcGxlIGR0LnNldCh7IHllYXI6IDIwMDUsIG9yZGluYWw6IDIzNCB9KQogICAgICogQHJldHVybiB7RGF0ZVRpbWV9CiAgICAgKi8KICAgIHNldCh2YWx1ZXMpIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzOwoKICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZU9iamVjdCh2YWx1ZXMsIG5vcm1hbGl6ZVVuaXQpLAogICAgICAgIHNldHRpbmdXZWVrU3R1ZmYgPQogICAgICAgICAgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQud2Vla1llYXIpIHx8CiAgICAgICAgICAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrTnVtYmVyKSB8fAogICAgICAgICAgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQud2Vla2RheSksCiAgICAgICAgY29udGFpbnNPcmRpbmFsID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQub3JkaW5hbCksCiAgICAgICAgY29udGFpbnNHcmVnb3JZZWFyID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQueWVhciksCiAgICAgICAgY29udGFpbnNHcmVnb3JNRCA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLm1vbnRoKSB8fCAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5kYXkpLAogICAgICAgIGNvbnRhaW5zR3JlZ29yID0gY29udGFpbnNHcmVnb3JZZWFyIHx8IGNvbnRhaW5zR3JlZ29yTUQsCiAgICAgICAgZGVmaW5pdGVXZWVrRGVmID0gbm9ybWFsaXplZC53ZWVrWWVhciB8fCBub3JtYWxpemVkLndlZWtOdW1iZXI7CgogICAgICBpZiAoKGNvbnRhaW5zR3JlZ29yIHx8IGNvbnRhaW5zT3JkaW5hbCkgJiYgZGVmaW5pdGVXZWVrRGVmKSB7CiAgICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKAogICAgICAgICAgIkNhbid0IG1peCB3ZWVrWWVhci93ZWVrTnVtYmVyIHVuaXRzIHdpdGggeWVhci9tb250aC9kYXkgb3Igb3JkaW5hbHMiCiAgICAgICAgKTsKICAgICAgfQoKICAgICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7CiAgICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheSIpOwogICAgICB9CgogICAgICBsZXQgbWl4ZWQ7CiAgICAgIGlmIChzZXR0aW5nV2Vla1N0dWZmKSB7CiAgICAgICAgbWl4ZWQgPSB3ZWVrVG9HcmVnb3JpYW4oeyAuLi5ncmVnb3JpYW5Ub1dlZWsodGhpcy5jKSwgLi4ubm9ybWFsaXplZCB9KTsKICAgICAgfSBlbHNlIGlmICghaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSkgewogICAgICAgIG1peGVkID0gb3JkaW5hbFRvR3JlZ29yaWFuKHsgLi4uZ3JlZ29yaWFuVG9PcmRpbmFsKHRoaXMuYyksIC4uLm5vcm1hbGl6ZWQgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbWl4ZWQgPSB7IC4uLnRoaXMudG9PYmplY3QoKSwgLi4ubm9ybWFsaXplZCB9OwoKICAgICAgICAvLyBpZiB3ZSBkaWRuJ3Qgc2V0IHRoZSBkYXkgYnV0IHdlIGVuZGVkIHVwIG9uIGFuIG92ZXJmbG93IGRhdGUsCiAgICAgICAgLy8gdXNlIHRoZSBsYXN0IGRheSBvZiB0aGUgcmlnaHQgbW9udGgKICAgICAgICBpZiAoaXNVbmRlZmluZWQobm9ybWFsaXplZC5kYXkpKSB7CiAgICAgICAgICBtaXhlZC5kYXkgPSBNYXRoLm1pbihkYXlzSW5Nb250aChtaXhlZC55ZWFyLCBtaXhlZC5tb250aCksIG1peGVkLmRheSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBjb25zdCBbdHMsIG9dID0gb2JqVG9UUyhtaXhlZCwgdGhpcy5vLCB0aGlzLnpvbmUpOwogICAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCB7IHRzLCBvIH0pOwogICAgfQoKICAgIC8qKgogICAgICogQWRkIGEgcGVyaW9kIG9mIHRpbWUgdG8gdGhpcyBEYXRlVGltZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUKICAgICAqCiAgICAgKiBBZGRpbmcgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG9yIG1pbGxpc2Vjb25kcyBpbmNyZWFzZXMgdGhlIHRpbWVzdGFtcCBieSB0aGUgcmlnaHQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy4gQWRkaW5nIGRheXMsIG1vbnRocywgb3IgeWVhcnMgc2hpZnRzIHRoZSBjYWxlbmRhciwgYWNjb3VudGluZyBmb3IgRFNUcyBhbmQgbGVhcCB5ZWFycyBhbG9uZyB0aGUgd2F5LiBUaHVzLCBgZHQucGx1cyh7IGhvdXJzOiAyNCB9KWAgbWF5IHJlc3VsdCBpbiBhIGRpZmZlcmVudCB0aW1lIHRoYW4gYGR0LnBsdXMoeyBkYXlzOiAxIH0pYCBpZiB0aGVyZSdzIGEgRFNUIHNoaWZ0IGluIGJldHdlZW4uCiAgICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBhZGQuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKDEyMykgLy9+PiBpbiAxMjMgbWlsbGlzZWNvbmRzCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgbWludXRlczogMTUgfSkgLy9+PiBpbiAxNSBtaW51dGVzCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KSAvL34+IHRoaXMgdGltZSB0b21vcnJvdwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IC0xIH0pIC8vfj4gdGhpcyB0aW1lIHllc3RlcmRheQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGhvdXJzOiAzLCBtaW51dGVzOiAxMyB9KSAvL34+IGluIDMgaHIsIDEzIG1pbgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyhEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDMsIG1pbnV0ZXM6IDEzIH0pKSAvL34+IGluIDMgaHIsIDEzIG1pbgogICAgICogQHJldHVybiB7RGF0ZVRpbWV9CiAgICAgKi8KICAgIHBsdXMoZHVyYXRpb24pIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzOwogICAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKTsKICAgICAgcmV0dXJuIGNsb25lJDEodGhpcywgYWRqdXN0VGltZSh0aGlzLCBkdXIpKTsKICAgIH0KCiAgICAvKioKICAgICAqIFN1YnRyYWN0IGEgcGVyaW9kIG9mIHRpbWUgdG8gdGhpcyBEYXRlVGltZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUKICAgICAqIFNlZSB7QGxpbmsgRGF0ZVRpbWUjcGx1c30KICAgICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSBUaGUgYW1vdW50IHRvIHN1YnRyYWN0LiBFaXRoZXIgYSBMdXhvbiBEdXJhdGlvbiwgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCB0aGUgb2JqZWN0IGFyZ3VtZW50IHRvIER1cmF0aW9uLmZyb21PYmplY3QoKQogICAgIEByZXR1cm4ge0RhdGVUaW1lfQogICAgICovCiAgICBtaW51cyhkdXJhdGlvbikgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7CiAgICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLm5lZ2F0ZSgpOwogICAgICByZXR1cm4gY2xvbmUkMSh0aGlzLCBhZGp1c3RUaW1lKHRoaXMsIGR1cikpOwogICAgfQoKICAgIC8qKgogICAgICogIlNldCIgdGhpcyBEYXRlVGltZSB0byB0aGUgYmVnaW5uaW5nIG9mIGEgdW5pdCBvZiB0aW1lLgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBUaGUgdW5pdCB0byBnbyB0byB0aGUgYmVnaW5uaW5nIG9mLiBDYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCBvciAnbWlsbGlzZWNvbmQnLgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuc3RhcnRPZignbW9udGgnKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMy0wMScKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ3llYXInKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMS0wMScKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ3dlZWsnKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMy0wMycsIHdlZWtzIGFsd2F5cyBzdGFydCBvbiBNb25kYXlzCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuc3RhcnRPZignZGF5JykudG9JU09UaW1lKCk7IC8vPT4gJzAwOjAwLjAwMC0wNTowMCcKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5zdGFydE9mKCdob3VyJykudG9JU09UaW1lKCk7IC8vPT4gJzA1OjAwOjAwLjAwMC0wNTowMCcKICAgICAqIEByZXR1cm4ge0RhdGVUaW1lfQogICAgICovCiAgICBzdGFydE9mKHVuaXQpIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzOwogICAgICBjb25zdCBvID0ge30sCiAgICAgICAgbm9ybWFsaXplZFVuaXQgPSBEdXJhdGlvbi5ub3JtYWxpemVVbml0KHVuaXQpOwogICAgICBzd2l0Y2ggKG5vcm1hbGl6ZWRVbml0KSB7CiAgICAgICAgY2FzZSAieWVhcnMiOgogICAgICAgICAgby5tb250aCA9IDE7CiAgICAgICAgLy8gZmFsbHMgdGhyb3VnaAogICAgICAgIGNhc2UgInF1YXJ0ZXJzIjoKICAgICAgICBjYXNlICJtb250aHMiOgogICAgICAgICAgby5kYXkgPSAxOwogICAgICAgIC8vIGZhbGxzIHRocm91Z2gKICAgICAgICBjYXNlICJ3ZWVrcyI6CiAgICAgICAgY2FzZSAiZGF5cyI6CiAgICAgICAgICBvLmhvdXIgPSAwOwogICAgICAgIC8vIGZhbGxzIHRocm91Z2gKICAgICAgICBjYXNlICJob3VycyI6CiAgICAgICAgICBvLm1pbnV0ZSA9IDA7CiAgICAgICAgLy8gZmFsbHMgdGhyb3VnaAogICAgICAgIGNhc2UgIm1pbnV0ZXMiOgogICAgICAgICAgby5zZWNvbmQgPSAwOwogICAgICAgIC8vIGZhbGxzIHRocm91Z2gKICAgICAgICBjYXNlICJzZWNvbmRzIjoKICAgICAgICAgIG8ubWlsbGlzZWNvbmQgPSAwOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8gbm8gZGVmYXVsdCwgaW52YWxpZCB1bml0cyB0aHJvdyBpbiBub3JtYWxpemVVbml0KCkKICAgICAgfQoKICAgICAgaWYgKG5vcm1hbGl6ZWRVbml0ID09PSAid2Vla3MiKSB7CiAgICAgICAgby53ZWVrZGF5ID0gMTsKICAgICAgfQoKICAgICAgaWYgKG5vcm1hbGl6ZWRVbml0ID09PSAicXVhcnRlcnMiKSB7CiAgICAgICAgY29uc3QgcSA9IE1hdGguY2VpbCh0aGlzLm1vbnRoIC8gMyk7CiAgICAgICAgby5tb250aCA9IChxIC0gMSkgKiAzICsgMTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuc2V0KG8pOwogICAgfQoKICAgIC8qKgogICAgICogIlNldCIgdGhpcyBEYXRlVGltZSB0byB0aGUgZW5kIChtZWFuaW5nIHRoZSBsYXN0IG1pbGxpc2Vjb25kKSBvZiBhIHVuaXQgb2YgdGltZQogICAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBUaGUgdW5pdCB0byBnbyB0byB0aGUgZW5kIG9mLiBDYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCBvciAnbWlsbGlzZWNvbmQnLgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ21vbnRoJykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0zMVQyMzo1OTo1OS45OTktMDU6MDAnCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5lbmRPZigneWVhcicpLnRvSVNPKCk7IC8vPT4gJzIwMTQtMTItMzFUMjM6NTk6NTkuOTk5LTA1OjAwJwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ3dlZWsnKS50b0lTTygpOyAvLyA9PiAnMjAxNC0wMy0wOVQyMzo1OTo1OS45OTktMDU6MDAnLCB3ZWVrcyBzdGFydCBvbiBNb25kYXlzCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuZW5kT2YoJ2RheScpLnRvSVNPKCk7IC8vPT4gJzIwMTQtMDMtMDNUMjM6NTk6NTkuOTk5LTA1OjAwJwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMywgNSwgMzApLmVuZE9mKCdob3VyJykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0wM1QwNTo1OTo1OS45OTktMDU6MDAnCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0KICAgICAqLwogICAgZW5kT2YodW5pdCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkCiAgICAgICAgPyB0aGlzLnBsdXMoeyBbdW5pdF06IDEgfSkKICAgICAgICAgICAgLnN0YXJ0T2YodW5pdCkKICAgICAgICAgICAgLm1pbnVzKDEpCiAgICAgICAgOiB0aGlzOwogICAgfQoKICAgIC8vIE9VVFBVVAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQgc3RyaW5nLgogICAgICogKipZb3UgbWF5IG5vdCB3YW50IHRoaXMuKiogU2VlIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9yIGEgbW9yZSBmbGV4aWJsZSBmb3JtYXR0aW5nIHRvb2wuIEZvciBhIHRhYmxlIG9mIHRva2VucyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb25zLCBzZWUgW2hlcmVdKGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi8jL2Zvcm1hdHRpbmc/aWQ9dGFibGUtb2YtdG9rZW5zKS4KICAgICAqIERlZmF1bHRzIHRvIGVuLVVTIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWQsIHJlZ2FyZGxlc3Mgb2YgdGhlIHN5c3RlbSdzIGxvY2FsZS4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHN0cmluZwogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRzIHRvIG92ZXJyaWRlIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgb24gdGhpcyBEYXRlVGltZQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJykgLy89PiAnMjAxNyBBcHIgMjInCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5zZXRMb2NhbGUoJ2ZyJykudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJykgLy89PiAnMjAxNyBhdnIuIDIyJwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJywgeyBsb2NhbGU6ICJmciIgfSkgLy89PiAnMjAxNyBhdnIuIDIyJwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoIkhIICdob3VycyBhbmQnIG1tICdtaW51dGVzJyIpIC8vPT4gJzIwIGhvdXJzIGFuZCA1NSBtaW51dGVzJwogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b0Zvcm1hdChmbXQsIG9wdHMgPSB7fSkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkCiAgICAgICAgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLnJlZGVmYXVsdFRvRU4ob3B0cykpLmZvcm1hdERhdGVUaW1lRnJvbVN0cmluZyh0aGlzLCBmbXQpCiAgICAgICAgOiBJTlZBTElEJDE7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGEgbG9jYWxpemVkIHN0cmluZyByZXByZXNlbnRpbmcgdGhpcyBkYXRlLiBBY2NlcHRzIHRoZSBzYW1lIG9wdGlvbnMgYXMgdGhlIEludGwuRGF0ZVRpbWVGb3JtYXQgY29uc3RydWN0b3IgYW5kIGFueSBwcmVzZXRzIGRlZmluZWQgYnkgTHV4b24sIHN1Y2ggYXMgYERhdGVUaW1lLkRBVEVfRlVMTGAgb3IgYERhdGVUaW1lLlRJTUVfU0lNUExFYC4KICAgICAqIFRoZSBleGFjdCBiZWhhdmlvciBvZiB0aGlzIG1ldGhvZCBpcyBicm93c2VyLXNwZWNpZmljLCBidXQgaW4gZ2VuZXJhbCBpdCB3aWxsIHJldHVybiBhbiBhcHByb3ByaWF0ZSByZXByZXNlbnRhdGlvbgogICAgICogb2YgdGhlIERhdGVUaW1lIGluIHRoZSBhc3NpZ25lZCBsb2NhbGUuCiAgICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWQKICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXQKICAgICAqIEBwYXJhbSBmb3JtYXRPcHRzIHtPYmplY3R9IC0gSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBvcHRpb25zIGFuZCBjb25maWd1cmF0aW9uIG9wdGlvbnMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0cyB0byBvdmVycmlkZSB0aGUgY29uZmlndXJhdGlvbiBvcHRpb25zIG9uIHRoaXMgRGF0ZVRpbWUKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKCk7IC8vPT4gNC8yMC8yMDE3CiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5zZXRMb2NhbGUoJ2VuLWdiJykudG9Mb2NhbGVTdHJpbmcoKTsgLy89PiAnMjAvMDQvMjAxNycKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVfRlVMTCk7IC8vPT4gJ0FwcmlsIDIwLCAyMDE3JwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURV9GVUxMLCB7IGxvY2FsZTogJ2ZyJyB9KTsgLy89PiAnMjggYW/Du3QgMjAyMicKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLlRJTUVfU0lNUExFKTsgLy89PiAnMTE6MzIgQU0nCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFVElNRV9TSE9SVCk7IC8vPT4gJzQvMjAvMjAxNywgMTE6MzIgQU0nCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyh7IHdlZWtkYXk6ICdsb25nJywgbW9udGg6ICdsb25nJywgZGF5OiAnMi1kaWdpdCcgfSk7IC8vPT4gJ1RodXJzZGF5LCBBcHJpbCAyMCcKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKHsgd2Vla2RheTogJ3Nob3J0JywgbW9udGg6ICdzaG9ydCcsIGRheTogJzItZGlnaXQnLCBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pOyAvLz0+ICdUaHUsIEFwciAyMCwgMTE6MjcgQU0nCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyh7IGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcsIGhvdXJDeWNsZTogJ2gyMycgfSk7IC8vPT4gJzExOjMyJwogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b0xvY2FsZVN0cmluZyhmb3JtYXRPcHRzID0gREFURV9TSE9SVCwgb3B0cyA9IHt9KSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQKICAgICAgICA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MuY2xvbmUob3B0cyksIGZvcm1hdE9wdHMpLmZvcm1hdERhdGVUaW1lKHRoaXMpCiAgICAgICAgOiBJTlZBTElEJDE7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGZvcm1hdCAicGFydHMiLCBtZWFuaW5nIGluZGl2aWR1YWwgdG9rZW5zIGFsb25nIHdpdGggbWV0YWRhdGEuIFRoaXMgaXMgYWxsb3dzIGNhbGxlcnMgdG8gcG9zdC1wcm9jZXNzIGluZGl2aWR1YWwgc2VjdGlvbnMgb2YgdGhlIGZvcm1hdHRlZCBvdXRwdXQuCiAgICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWQKICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXQvZm9ybWF0VG9QYXJ0cwogICAgICogQHBhcmFtIG9wdHMge09iamVjdH0gLSBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIG9wdGlvbnMsIHNhbWUgYXMgYHRvTG9jYWxlU3RyaW5nYC4KICAgICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlUGFydHMoKTsgLy89PiBbCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ2RheScsIHZhbHVlOiAnMjUnIH0sCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZTogJy8nIH0sCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ21vbnRoJywgdmFsdWU6ICcwNScgfSwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAnbGl0ZXJhbCcsIHZhbHVlOiAnLycgfSwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAneWVhcicsIHZhbHVlOiAnMTk4MicgfQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gXQogICAgICovCiAgICB0b0xvY2FsZVBhcnRzKG9wdHMgPSB7fSkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkCiAgICAgICAgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLmNsb25lKG9wdHMpLCBvcHRzKS5mb3JtYXREYXRlVGltZVBhcnRzKHRoaXMpCiAgICAgICAgOiBbXTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMKICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMAogICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc1NlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDAKICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCcKICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZXh0ZW5kZWRab25lPWZhbHNlXSAtIGFkZCB0aGUgdGltZSB6b25lIGZvcm1hdCBleHRlbnNpb24KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdAogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODMsIDUsIDI1KS50b0lTTygpIC8vPT4gJzE5ODItMDUtMjVUMDA6MDA6MDAuMDAwWicKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvSVNPKCkgLy89PiAnMjAxNy0wNC0yMlQyMDo0NzowNS4zMzUtMDQ6MDAnCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTyh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pIC8vPT4gJzIwMTctMDQtMjJUMjA6NDc6MDUuMzM1JwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9JU08oeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMjAxNzA0MjJUMjA0NzA1LjMzNS0wNDAwJwogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b0lTTyh7CiAgICAgIGZvcm1hdCA9ICJleHRlbmRlZCIsCiAgICAgIHN1cHByZXNzU2Vjb25kcyA9IGZhbHNlLAogICAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IGZhbHNlLAogICAgICBpbmNsdWRlT2Zmc2V0ID0gdHJ1ZSwKICAgICAgZXh0ZW5kZWRab25lID0gZmFsc2UsCiAgICB9ID0ge30pIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgY29uc3QgZXh0ID0gZm9ybWF0ID09PSAiZXh0ZW5kZWQiOwoKICAgICAgbGV0IGMgPSB0b0lTT0RhdGUodGhpcywgZXh0KTsKICAgICAgYyArPSAiVCI7CiAgICAgIGMgKz0gdG9JU09UaW1lKHRoaXMsIGV4dCwgc3VwcHJlc3NTZWNvbmRzLCBzdXBwcmVzc01pbGxpc2Vjb25kcywgaW5jbHVkZU9mZnNldCwgZXh0ZW5kZWRab25lKTsKICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSdzIGRhdGUgY29tcG9uZW50CiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdAogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTA1LTI1JwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT0RhdGUoeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMTk4MjA1MjUnCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9CiAgICAgKi8KICAgIHRvSVNPRGF0ZSh7IGZvcm1hdCA9ICJleHRlbmRlZCIgfSA9IHt9KSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiB0b0lTT0RhdGUodGhpcywgZm9ybWF0ID09PSAiZXh0ZW5kZWQiKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lJ3Mgd2VlayBkYXRlCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPV2Vla0RhdGUoKSAvLz0+ICcxOTgyLVcyMS0yJwogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b0lTT1dlZWtEYXRlKCkgewogICAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsICJra2trLSdXJ1dXLWMiKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lJ3MgdGltZSBjb21wb25lbnQKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucwogICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc01pbGxpc2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzU2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIHNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMAogICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0PXRydWVdIC0gaW5jbHVkZSB0aGUgb2Zmc2V0LCBzdWNoIGFzICdaJyBvciAnLTA0OjAwJwogICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5leHRlbmRlZFpvbmU9dHJ1ZV0gLSBhZGQgdGhlIHRpbWUgem9uZSBmb3JtYXQgZXh0ZW5zaW9uCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVQcmVmaXg9ZmFsc2VdIC0gaW5jbHVkZSB0aGUgYFRgIHByZWZpeAogICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmZvcm1hdD0nZXh0ZW5kZWQnXSAtIGNob29zZSBiZXR3ZWVuIHRoZSBiYXNpYyBhbmQgZXh0ZW5kZWQgZm9ybWF0CiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0IH0pLnRvSVNPVGltZSgpIC8vPT4gJzA3OjM0OjE5LjM2MVonCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0LCBzZWNvbmRzOiAwLCBtaWxsaXNlY29uZHM6IDAgfSkudG9JU09UaW1lKHsgc3VwcHJlc3NTZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzA3OjM0WicKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLnNldCh7IGhvdXI6IDcsIG1pbnV0ZTogMzQgfSkudG9JU09UaW1lKHsgZm9ybWF0OiAnYmFzaWMnIH0pIC8vPT4gJzA3MzQxOS4zNjFaJwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCB9KS50b0lTT1RpbWUoeyBpbmNsdWRlUHJlZml4OiB0cnVlIH0pIC8vPT4gJ1QwNzozNDoxOS4zNjFaJwogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b0lTT1RpbWUoewogICAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IGZhbHNlLAogICAgICBzdXBwcmVzc1NlY29uZHMgPSBmYWxzZSwKICAgICAgaW5jbHVkZU9mZnNldCA9IHRydWUsCiAgICAgIGluY2x1ZGVQcmVmaXggPSBmYWxzZSwKICAgICAgZXh0ZW5kZWRab25lID0gZmFsc2UsCiAgICAgIGZvcm1hdCA9ICJleHRlbmRlZCIsCiAgICB9ID0ge30pIHsKICAgICAgaWYgKCF0aGlzLmlzVmFsaWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgbGV0IGMgPSBpbmNsdWRlUHJlZml4ID8gIlQiIDogIiI7CiAgICAgIHJldHVybiAoCiAgICAgICAgYyArCiAgICAgICAgdG9JU09UaW1lKAogICAgICAgICAgdGhpcywKICAgICAgICAgIGZvcm1hdCA9PT0gImV4dGVuZGVkIiwKICAgICAgICAgIHN1cHByZXNzU2Vjb25kcywKICAgICAgICAgIHN1cHByZXNzTWlsbGlzZWNvbmRzLAogICAgICAgICAgaW5jbHVkZU9mZnNldCwKICAgICAgICAgIGV4dGVuZGVkWm9uZQogICAgICAgICkKICAgICAgKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gUkZDIDI4MjItY29tcGF0aWJsZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzKS50b1JGQzI4MjIoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwICswMDAwJwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvUkZDMjgyMigpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMDA6MDA6MDAgLTA0MDAnCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9CiAgICAgKi8KICAgIHRvUkZDMjgyMigpIHsKICAgICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLCAiRUVFLCBkZCBMTEwgeXl5eSBISDptbTpzcyBaWloiLCBmYWxzZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBIVFRQIGhlYWRlcnMuIFRoZSBvdXRwdXQgaXMgYWx3YXlzIGV4cHJlc3NlZCBpbiBHTVQuCiAgICAgKiBTcGVjaWZpY2FsbHksIHRoZSBzdHJpbmcgY29uZm9ybXMgdG8gUkZDIDExMjMuCiAgICAgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9Qcm90b2NvbHMvcmZjMjYxNi9yZmMyNjE2LXNlYzMuaHRtbCNzZWMzLjMuMQogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzKS50b0hUVFAoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwIEdNVCcKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMywgMTkpLnRvSFRUUCgpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMTk6MDA6MDAgR01UJwogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b0hUVFAoKSB7CiAgICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcy50b1VUQygpLCAiRUVFLCBkZCBMTEwgeXl5eSBISDptbTpzcyAnR01UJyIpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gU1FMIERhdGUKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9TUUxEYXRlKCkgLy89PiAnMjAxNC0wNy0xMycKICAgICAqIEByZXR1cm4ge3N0cmluZ30KICAgICAqLwogICAgdG9TUUxEYXRlKCkgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIHJldHVybiB0b0lTT0RhdGUodGhpcywgdHJ1ZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBTUUwgVGltZQogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVab25lPWZhbHNlXSAtIGluY2x1ZGUgdGhlIHpvbmUsIHN1Y2ggYXMgJ0FtZXJpY2EvTmV3X1lvcmsnLiBPdmVycmlkZXMgaW5jbHVkZU9mZnNldC4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCcKICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldFNwYWNlPXRydWVdIC0gaW5jbHVkZSB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdGltZSBhbmQgdGhlIG9mZnNldCwgc3VjaCBhcyAnMDU6MTU6MTYuMzQ1IC0wNDowMCcKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLnRvU1FMKCkgLy89PiAnMDU6MTU6MTYuMzQ1JwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoKSAvLz0+ICcwNToxNToxNi4zNDUgLTA0OjAwJwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcwNToxNToxNi4zNDUnCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b1NRTCh7IGluY2x1ZGVab25lOiBmYWxzZSB9KSAvLz0+ICcwNToxNToxNi4zNDUgQW1lcmljYS9OZXdfWW9yaycKICAgICAqIEByZXR1cm4ge3N0cmluZ30KICAgICAqLwogICAgdG9TUUxUaW1lKHsgaW5jbHVkZU9mZnNldCA9IHRydWUsIGluY2x1ZGVab25lID0gZmFsc2UsIGluY2x1ZGVPZmZzZXRTcGFjZSA9IHRydWUgfSA9IHt9KSB7CiAgICAgIGxldCBmbXQgPSAiSEg6bW06c3MuU1NTIjsKCiAgICAgIGlmIChpbmNsdWRlWm9uZSB8fCBpbmNsdWRlT2Zmc2V0KSB7CiAgICAgICAgaWYgKGluY2x1ZGVPZmZzZXRTcGFjZSkgewogICAgICAgICAgZm10ICs9ICIgIjsKICAgICAgICB9CiAgICAgICAgaWYgKGluY2x1ZGVab25lKSB7CiAgICAgICAgICBmbXQgKz0gInoiOwogICAgICAgIH0gZWxzZSBpZiAoaW5jbHVkZU9mZnNldCkgewogICAgICAgICAgZm10ICs9ICJaWiI7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsIGZtdCwgdHJ1ZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBTUUwgRGF0ZVRpbWUKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucwogICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlWm9uZT1mYWxzZV0gLSBpbmNsdWRlIHRoZSB6b25lLCBzdWNoIGFzICdBbWVyaWNhL05ld19Zb3JrJy4gT3ZlcnJpZGVzIGluY2x1ZGVPZmZzZXQuCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXRTcGFjZT10cnVlXSAtIGluY2x1ZGUgdGhlIHNwYWNlIGJldHdlZW4gdGhlIHRpbWUgYW5kIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJzA1OjE1OjE2LjM0NSAtMDQ6MDAnCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvU1FMKCkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgWicKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1NRTCgpIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwIC0wNDowMCcKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1NRTCh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwJwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvU1FMKHsgaW5jbHVkZVpvbmU6IHRydWUgfSkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAgQW1lcmljYS9OZXdfWW9yaycKICAgICAqIEByZXR1cm4ge3N0cmluZ30KICAgICAqLwogICAgdG9TUUwob3B0cyA9IHt9KSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiBgJHt0aGlzLnRvU1FMRGF0ZSgpfSAke3RoaXMudG9TUUxUaW1lKG9wdHMpfWA7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIGRlYnVnZ2luZwogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b1N0cmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudG9JU08oKSA6IElOVkFMSUQkMTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIGVwb2NoIG1pbGxpc2Vjb25kcyBvZiB0aGlzIERhdGVUaW1lLiBBbGlhcyBvZiB7QGxpbmsgRGF0ZVRpbWUjdG9NaWxsaXN9CiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9CiAgICAgKi8KICAgIHZhbHVlT2YoKSB7CiAgICAgIHJldHVybiB0aGlzLnRvTWlsbGlzKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBlcG9jaCBtaWxsaXNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS4KICAgICAqIEByZXR1cm4ge251bWJlcn0KICAgICAqLwogICAgdG9NaWxsaXMoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRzIDogTmFOOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgZXBvY2ggc2Vjb25kcyBvZiB0aGlzIERhdGVUaW1lLgogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCiAgICB0b1NlY29uZHMoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRzIC8gMTAwMCA6IE5hTjsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIGVwb2NoIHNlY29uZHMgKGFzIGEgd2hvbGUgbnVtYmVyKSBvZiB0aGlzIERhdGVUaW1lLgogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCiAgICB0b1VuaXhJbnRlZ2VyKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5mbG9vcih0aGlzLnRzIC8gMTAwMCkgOiBOYU47CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBKU09OLgogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB0b0pTT04oKSB7CiAgICAgIHJldHVybiB0aGlzLnRvSVNPKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm5zIGEgQlNPTiBzZXJpYWxpemFibGUgZXF1aXZhbGVudCB0byB0aGlzIERhdGVUaW1lLgogICAgICogQHJldHVybiB7RGF0ZX0KICAgICAqLwogICAgdG9CU09OKCkgewogICAgICByZXR1cm4gdGhpcy50b0pTRGF0ZSgpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGggdGhpcyBEYXRlVGltZSdzIHllYXIsIG1vbnRoLCBkYXksIGFuZCBzbyBvbi4KICAgICAqIEBwYXJhbSBvcHRzIC0gb3B0aW9ucyBmb3IgZ2VuZXJhdGluZyB0aGUgb2JqZWN0CiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVDb25maWc9ZmFsc2VdIC0gaW5jbHVkZSBjb25maWd1cmF0aW9uIGF0dHJpYnV0ZXMgaW4gdGhlIG91dHB1dAogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9PYmplY3QoKSAvLz0+IHsgeWVhcjogMjAxNywgbW9udGg6IDQsIGRheTogMjIsIGhvdXI6IDIwLCBtaW51dGU6IDQ5LCBzZWNvbmQ6IDQyLCBtaWxsaXNlY29uZDogMjY4IH0KICAgICAqIEByZXR1cm4ge09iamVjdH0KICAgICAqLwogICAgdG9PYmplY3Qob3B0cyA9IHt9KSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4ge307CgogICAgICBjb25zdCBiYXNlID0geyAuLi50aGlzLmMgfTsKCiAgICAgIGlmIChvcHRzLmluY2x1ZGVDb25maWcpIHsKICAgICAgICBiYXNlLm91dHB1dENhbGVuZGFyID0gdGhpcy5vdXRwdXRDYWxlbmRhcjsKICAgICAgICBiYXNlLm51bWJlcmluZ1N5c3RlbSA9IHRoaXMubG9jLm51bWJlcmluZ1N5c3RlbTsKICAgICAgICBiYXNlLmxvY2FsZSA9IHRoaXMubG9jLmxvY2FsZTsKICAgICAgfQogICAgICByZXR1cm4gYmFzZTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYSBKYXZhU2NyaXB0IERhdGUgZXF1aXZhbGVudCB0byB0aGlzIERhdGVUaW1lLgogICAgICogQHJldHVybiB7RGF0ZX0KICAgICAqLwogICAgdG9KU0RhdGUoKSB7CiAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmlzVmFsaWQgPyB0aGlzLnRzIDogTmFOKTsKICAgIH0KCiAgICAvLyBDT01QQVJFCgogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gRGF0ZVRpbWVzIGFzIGEgRHVyYXRpb24uCiAgICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBvdGhlckRhdGVUaW1lIC0gdGhlIERhdGVUaW1lIHRvIGNvbXBhcmUgdGhpcyBvbmUgdG8KICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIGFycmF5IG9mIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvbi4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0aGF0IGFmZmVjdCB0aGUgY3JlYXRpb24gb2YgdGhlIER1cmF0aW9uCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2UKICAgICAqIEBleGFtcGxlCiAgICAgKiB2YXIgaTEgPSBEYXRlVGltZS5mcm9tSVNPKCcxOTgyLTA1LTI1VDA5OjQ1JyksCiAgICAgKiAgICAgaTIgPSBEYXRlVGltZS5mcm9tSVNPKCcxOTgzLTEwLTE0VDEwOjMwJyk7CiAgICAgKiBpMi5kaWZmKGkxKS50b09iamVjdCgpIC8vPT4geyBtaWxsaXNlY29uZHM6IDQzODA3NTAwMDAwIH0KICAgICAqIGkyLmRpZmYoaTEsICdob3VycycpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMjE2OC43NSB9CiAgICAgKiBpMi5kaWZmKGkxLCBbJ21vbnRocycsICdkYXlzJ10pLnRvT2JqZWN0KCkgLy89PiB7IG1vbnRoczogMTYsIGRheXM6IDE5LjAzMTI1IH0KICAgICAqIGkyLmRpZmYoaTEsIFsnbW9udGhzJywgJ2RheXMnLCAnaG91cnMnXSkudG9PYmplY3QoKSAvLz0+IHsgbW9udGhzOiAxNiwgZGF5czogMTksIGhvdXJzOiAwLjc1IH0KICAgICAqIEByZXR1cm4ge0R1cmF0aW9ufQogICAgICovCiAgICBkaWZmKG90aGVyRGF0ZVRpbWUsIHVuaXQgPSAibWlsbGlzZWNvbmRzIiwgb3B0cyA9IHt9KSB7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkIHx8ICFvdGhlckRhdGVUaW1lLmlzVmFsaWQpIHsKICAgICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZCgiY3JlYXRlZCBieSBkaWZmaW5nIGFuIGludmFsaWQgRGF0ZVRpbWUiKTsKICAgICAgfQoKICAgICAgY29uc3QgZHVyT3B0cyA9IHsgbG9jYWxlOiB0aGlzLmxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtOiB0aGlzLm51bWJlcmluZ1N5c3RlbSwgLi4ub3B0cyB9OwoKICAgICAgY29uc3QgdW5pdHMgPSBtYXliZUFycmF5KHVuaXQpLm1hcChEdXJhdGlvbi5ub3JtYWxpemVVbml0KSwKICAgICAgICBvdGhlcklzTGF0ZXIgPSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKSA+IHRoaXMudmFsdWVPZigpLAogICAgICAgIGVhcmxpZXIgPSBvdGhlcklzTGF0ZXIgPyB0aGlzIDogb3RoZXJEYXRlVGltZSwKICAgICAgICBsYXRlciA9IG90aGVySXNMYXRlciA/IG90aGVyRGF0ZVRpbWUgOiB0aGlzLAogICAgICAgIGRpZmZlZCA9IGRpZmYoZWFybGllciwgbGF0ZXIsIHVuaXRzLCBkdXJPcHRzKTsKCiAgICAgIHJldHVybiBvdGhlcklzTGF0ZXIgPyBkaWZmZWQubmVnYXRlKCkgOiBkaWZmZWQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGlzIERhdGVUaW1lIGFuZCByaWdodCBub3cuCiAgICAgKiBTZWUge0BsaW5rIERhdGVUaW1lI2RpZmZ9CiAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW3VuaXQ9WydtaWxsaXNlY29uZHMnXV0gLSB0aGUgdW5pdCBvciB1bml0cyB1bml0cyAoc3VjaCBhcyAnaG91cnMnIG9yICdkYXlzJykgdG8gaW5jbHVkZSBpbiB0aGUgZHVyYXRpb24KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0aGF0IGFmZmVjdCB0aGUgY3JlYXRpb24gb2YgdGhlIER1cmF0aW9uCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2UKICAgICAqIEByZXR1cm4ge0R1cmF0aW9ufQogICAgICovCiAgICBkaWZmTm93KHVuaXQgPSAibWlsbGlzZWNvbmRzIiwgb3B0cyA9IHt9KSB7CiAgICAgIHJldHVybiB0aGlzLmRpZmYoRGF0ZVRpbWUubm93KCksIHVuaXQsIG9wdHMpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIGFuIEludGVydmFsIHNwYW5uaW5nIGJldHdlZW4gdGhpcyBEYXRlVGltZSBhbmQgYW5vdGhlciBEYXRlVGltZQogICAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBvdGhlciBlbmQgcG9pbnQgb2YgdGhlIEludGVydmFsCiAgICAgKiBAcmV0dXJuIHtJbnRlcnZhbH0KICAgICAqLwogICAgdW50aWwob3RoZXJEYXRlVGltZSkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyh0aGlzLCBvdGhlckRhdGVUaW1lKSA6IHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIERhdGVUaW1lIGlzIGluIHRoZSBzYW1lIHVuaXQgb2YgdGltZSBhcyBhbm90aGVyIERhdGVUaW1lLgogICAgICogSGlnaGVyLW9yZGVyIHVuaXRzIG11c3QgYWxzbyBiZSBpZGVudGljYWwgZm9yIHRoaXMgZnVuY3Rpb24gdG8gcmV0dXJuIGB0cnVlYC4KICAgICAqIE5vdGUgdGhhdCB0aW1lIHpvbmVzIGFyZSAqKmlnbm9yZWQqKiBpbiB0aGlzIGNvbXBhcmlzb24sIHdoaWNoIGNvbXBhcmVzIHRoZSAqKmxvY2FsKiogY2FsZW5kYXIgdGltZS4gVXNlIHtAbGluayBEYXRlVGltZSNzZXRab25lfSB0byBjb252ZXJ0IG9uZSBvZiB0aGUgZGF0ZXMgaWYgbmVlZGVkLgogICAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBvdGhlciBEYXRlVGltZQogICAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNoZWNrIHNhbWVuZXNzIG9uCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5oYXNTYW1lKG90aGVyRFQsICdkYXknKTsgLy9+PiB0cnVlIGlmIG90aGVyRFQgaXMgaW4gdGhlIHNhbWUgY3VycmVudCBjYWxlbmRhciBkYXkKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KICAgIGhhc1NhbWUob3RoZXJEYXRlVGltZSwgdW5pdCkgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlOwoKICAgICAgY29uc3QgaW5wdXRNcyA9IG90aGVyRGF0ZVRpbWUudmFsdWVPZigpOwogICAgICBjb25zdCBhZGp1c3RlZFRvWm9uZSA9IHRoaXMuc2V0Wm9uZShvdGhlckRhdGVUaW1lLnpvbmUsIHsga2VlcExvY2FsVGltZTogdHJ1ZSB9KTsKICAgICAgcmV0dXJuIGFkanVzdGVkVG9ab25lLnN0YXJ0T2YodW5pdCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IGFkanVzdGVkVG9ab25lLmVuZE9mKHVuaXQpOwogICAgfQoKICAgIC8qKgogICAgICogRXF1YWxpdHkgY2hlY2sKICAgICAqIFR3byBEYXRlVGltZXMgYXJlIGVxdWFsIGlmZiB0aGV5IHJlcHJlc2VudCB0aGUgc2FtZSBtaWxsaXNlY29uZCwgaGF2ZSB0aGUgc2FtZSB6b25lIGFuZCBsb2NhdGlvbiwgYW5kIGFyZSBib3RoIHZhbGlkLgogICAgICogVG8gY29tcGFyZSBqdXN0IHRoZSBtaWxsaXNlY29uZCB2YWx1ZXMsIHVzZSBgK2R0MSA9PT0gK2R0MmAuCiAgICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBvdGhlciAtIHRoZSBvdGhlciBEYXRlVGltZQogICAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgICAqLwogICAgZXF1YWxzKG90aGVyKSB7CiAgICAgIHJldHVybiAoCiAgICAgICAgdGhpcy5pc1ZhbGlkICYmCiAgICAgICAgb3RoZXIuaXNWYWxpZCAmJgogICAgICAgIHRoaXMudmFsdWVPZigpID09PSBvdGhlci52YWx1ZU9mKCkgJiYKICAgICAgICB0aGlzLnpvbmUuZXF1YWxzKG90aGVyLnpvbmUpICYmCiAgICAgICAgdGhpcy5sb2MuZXF1YWxzKG90aGVyLmxvYykKICAgICAgKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB0aGlzIHRpbWUgcmVsYXRpdmUgdG8gbm93LCBzdWNoIGFzICJpbiB0d28gZGF5cyIuIENhbiBvbmx5IGludGVybmF0aW9uYWxpemUgaWYgeW91cgogICAgICogcGxhdGZvcm0gc3VwcG9ydHMgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQuIFJvdW5kcyBkb3duIGJ5IGRlZmF1bHQuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIG91dHB1dAogICAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5ub3coKV0gLSB0aGUgRGF0ZVRpbWUgdG8gdXNlIGFzIHRoZSBiYXNpcyB0byB3aGljaCB0aGlzIHRpbWUgaXMgY29tcGFyZWQuIERlZmF1bHRzIHRvIG5vdy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zdHlsZT0ibG9uZyJdIC0gdGhlIHN0eWxlIG9mIHVuaXRzLCBtdXN0IGJlICJsb25nIiwgInNob3J0Iiwgb3IgIm5hcnJvdyIKICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBvcHRpb25zLnVuaXQgLSB1c2UgYSBzcGVjaWZpYyB1bml0IG9yIGFycmF5IG9mIHVuaXRzOyBpZiBvbWl0dGVkLCBvciBhbiBhcnJheSwgdGhlIG1ldGhvZCB3aWxsIHBpY2sgdGhlIGJlc3QgdW5pdC4gVXNlIGFuIGFycmF5IG9yIG9uZSBvZiAieWVhcnMiLCAicXVhcnRlcnMiLCAibW9udGhzIiwgIndlZWtzIiwgImRheXMiLCAiaG91cnMiLCAibWludXRlcyIsIG9yICJzZWNvbmRzIgogICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yb3VuZD10cnVlXSAtIHdoZXRoZXIgdG8gcm91bmQgdGhlIG51bWJlcnMgaW4gdGhlIG91dHB1dC4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5wYWRkaW5nPTBdIC0gcGFkZGluZyBpbiBtaWxsaXNlY29uZHMuIFRoaXMgYWxsb3dzIHlvdSB0byByb3VuZCB1cCB0aGUgcmVzdWx0IGlmIGl0IGZpdHMgaW5zaWRlIHRoZSB0aHJlc2hvbGQuIERvbid0IHVzZSBpbiBjb21iaW5hdGlvbiB3aXRoIHtyb3VuZDogZmFsc2V9IGJlY2F1c2UgdGhlIGRlY2ltYWwgb3V0cHV0IHdpbGwgaW5jbHVkZSB0aGUgcGFkZGluZy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmxvY2FsZSAtIG92ZXJyaWRlIHRoZSBsb2NhbGUgb2YgdGhpcyBEYXRlVGltZQogICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gb3ZlcnJpZGUgdGhlIG51bWJlcmluZ1N5c3RlbSBvZiB0aGlzIERhdGVUaW1lLiBUaGUgSW50bCBzeXN0ZW0gbWF5IGNob29zZSBub3QgdG8gaG9ub3IgdGhpcwogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZSgpIC8vPT4gImluIDEgZGF5IgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKCJlcyIpLnRvUmVsYXRpdmUoeyBkYXlzOiAxIH0pIC8vPT4gImRlbnRybyBkZSAxIGTDrWEiCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlKHsgbG9jYWxlOiAiZnIiIH0pIC8vPT4gImRhbnMgMjMgaGV1cmVzIgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkubWludXMoeyBkYXlzOiAyIH0pLnRvUmVsYXRpdmUoKSAvLz0+ICIyIGRheXMgYWdvIgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkubWludXMoeyBkYXlzOiAyIH0pLnRvUmVsYXRpdmUoeyB1bml0OiAiaG91cnMiIH0pIC8vPT4gIjQ4IGhvdXJzIGFnbyIKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm1pbnVzKHsgaG91cnM6IDM2IH0pLnRvUmVsYXRpdmUoeyByb3VuZDogZmFsc2UgfSkgLy89PiAiMS41IGRheXMgYWdvIgogICAgICovCiAgICB0b1JlbGF0aXZlKG9wdGlvbnMgPSB7fSkgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIG51bGw7CiAgICAgIGNvbnN0IGJhc2UgPSBvcHRpb25zLmJhc2UgfHwgRGF0ZVRpbWUuZnJvbU9iamVjdCh7fSwgeyB6b25lOiB0aGlzLnpvbmUgfSksCiAgICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyA/ICh0aGlzIDwgYmFzZSA/IC1vcHRpb25zLnBhZGRpbmcgOiBvcHRpb25zLnBhZGRpbmcpIDogMDsKICAgICAgbGV0IHVuaXRzID0gWyJ5ZWFycyIsICJtb250aHMiLCAiZGF5cyIsICJob3VycyIsICJtaW51dGVzIiwgInNlY29uZHMiXTsKICAgICAgbGV0IHVuaXQgPSBvcHRpb25zLnVuaXQ7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMudW5pdCkpIHsKICAgICAgICB1bml0cyA9IG9wdGlvbnMudW5pdDsKICAgICAgICB1bml0ID0gdW5kZWZpbmVkOwogICAgICB9CiAgICAgIHJldHVybiBkaWZmUmVsYXRpdmUoYmFzZSwgdGhpcy5wbHVzKHBhZGRpbmcpLCB7CiAgICAgICAgLi4ub3B0aW9ucywKICAgICAgICBudW1lcmljOiAiYWx3YXlzIiwKICAgICAgICB1bml0cywKICAgICAgICB1bml0LAogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBkYXRlIHJlbGF0aXZlIHRvIHRvZGF5LCBzdWNoIGFzICJ5ZXN0ZXJkYXkiIG9yICJuZXh0IG1vbnRoIi4KICAgICAqIE9ubHkgaW50ZXJuYXRpb25hbGl6ZXMgb24gcGxhdGZvcm1zIHRoYXQgc3VwcG9ydHMgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIG91dHB1dAogICAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5ub3coKV0gLSB0aGUgRGF0ZVRpbWUgdG8gdXNlIGFzIHRoZSBiYXNpcyB0byB3aGljaCB0aGlzIHRpbWUgaXMgY29tcGFyZWQuIERlZmF1bHRzIHRvIG5vdy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmxvY2FsZSAtIG92ZXJyaWRlIHRoZSBsb2NhbGUgb2YgdGhpcyBEYXRlVGltZQogICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudW5pdCAtIHVzZSBhIHNwZWNpZmljIHVuaXQ7IGlmIG9taXR0ZWQsIHRoZSBtZXRob2Qgd2lsbCBwaWNrIHRoZSB1bml0LiBVc2Ugb25lIG9mICJ5ZWFycyIsICJxdWFydGVycyIsICJtb250aHMiLCAid2Vla3MiLCBvciAiZGF5cyIKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIG92ZXJyaWRlIHRoZSBudW1iZXJpbmdTeXN0ZW0gb2YgdGhpcyBEYXRlVGltZS4gVGhlIEludGwgc3lzdGVtIG1heSBjaG9vc2Ugbm90IHRvIGhvbm9yIHRoaXMKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmVDYWxlbmRhcigpIC8vPT4gInRvbW9ycm93IgogICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKCJlcyIpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmUoKSAvLz0+ICIibWHDsWFuYSIKICAgICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmVDYWxlbmRhcih7IGxvY2FsZTogImZyIiB9KSAvLz0+ICJkZW1haW4iCiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5taW51cyh7IGRheXM6IDIgfSkudG9SZWxhdGl2ZUNhbGVuZGFyKCkgLy89PiAiMiBkYXlzIGFnbyIKICAgICAqLwogICAgdG9SZWxhdGl2ZUNhbGVuZGFyKG9wdGlvbnMgPSB7fSkgewogICAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIG51bGw7CgogICAgICByZXR1cm4gZGlmZlJlbGF0aXZlKG9wdGlvbnMuYmFzZSB8fCBEYXRlVGltZS5mcm9tT2JqZWN0KHt9LCB7IHpvbmU6IHRoaXMuem9uZSB9KSwgdGhpcywgewogICAgICAgIC4uLm9wdGlvbnMsCiAgICAgICAgbnVtZXJpYzogImF1dG8iLAogICAgICAgIHVuaXRzOiBbInllYXJzIiwgIm1vbnRocyIsICJkYXlzIl0sCiAgICAgICAgY2FsZW5kYXJ5OiB0cnVlLAogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiB0aGUgbWluIG9mIHNldmVyYWwgZGF0ZSB0aW1lcwogICAgICogQHBhcmFtIHsuLi5EYXRlVGltZX0gZGF0ZVRpbWVzIC0gdGhlIERhdGVUaW1lcyBmcm9tIHdoaWNoIHRvIGNob29zZSB0aGUgbWluaW11bQogICAgICogQHJldHVybiB7RGF0ZVRpbWV9IHRoZSBtaW4gRGF0ZVRpbWUsIG9yIHVuZGVmaW5lZCBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudAogICAgICovCiAgICBzdGF0aWMgbWluKC4uLmRhdGVUaW1lcykgewogICAgICBpZiAoIWRhdGVUaW1lcy5ldmVyeShEYXRlVGltZS5pc0RhdGVUaW1lKSkgewogICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigibWluIHJlcXVpcmVzIGFsbCBhcmd1bWVudHMgYmUgRGF0ZVRpbWVzIik7CiAgICAgIH0KICAgICAgcmV0dXJuIGJlc3RCeShkYXRlVGltZXMsIChpKSA9PiBpLnZhbHVlT2YoKSwgTWF0aC5taW4pOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIHRoZSBtYXggb2Ygc2V2ZXJhbCBkYXRlIHRpbWVzCiAgICAgKiBAcGFyYW0gey4uLkRhdGVUaW1lfSBkYXRlVGltZXMgLSB0aGUgRGF0ZVRpbWVzIGZyb20gd2hpY2ggdG8gY2hvb3NlIHRoZSBtYXhpbXVtCiAgICAgKiBAcmV0dXJuIHtEYXRlVGltZX0gdGhlIG1heCBEYXRlVGltZSwgb3IgdW5kZWZpbmVkIGlmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50CiAgICAgKi8KICAgIHN0YXRpYyBtYXgoLi4uZGF0ZVRpbWVzKSB7CiAgICAgIGlmICghZGF0ZVRpbWVzLmV2ZXJ5KERhdGVUaW1lLmlzRGF0ZVRpbWUpKSB7CiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCJtYXggcmVxdWlyZXMgYWxsIGFyZ3VtZW50cyBiZSBEYXRlVGltZXMiKTsKICAgICAgfQogICAgICByZXR1cm4gYmVzdEJ5KGRhdGVUaW1lcywgKGkpID0+IGkudmFsdWVPZigpLCBNYXRoLm1heCk7CiAgICB9CgogICAgLy8gTUlTQwoKICAgIC8qKgogICAgICogRXhwbGFpbiBob3cgYSBzdHJpbmcgd291bGQgYmUgcGFyc2VkIGJ5IGZyb21Gb3JtYXQoKQogICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgc3RyaW5nIHRvIHBhcnNlCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCB0aGUgc3RyaW5nIGlzIGV4cGVjdGVkIHRvIGJlIGluIChzZWUgZGVzY3JpcHRpb24pCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgdGFrZW4gYnkgZnJvbUZvcm1hdCgpCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9CiAgICAgKi8KICAgIHN0YXRpYyBmcm9tRm9ybWF0RXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMgPSB7fSkgewogICAgICBjb25zdCB7IGxvY2FsZSA9IG51bGwsIG51bWJlcmluZ1N5c3RlbSA9IG51bGwgfSA9IG9wdGlvbnMsCiAgICAgICAgbG9jYWxlVG9Vc2UgPSBMb2NhbGUuZnJvbU9wdHMoewogICAgICAgICAgbG9jYWxlLAogICAgICAgICAgbnVtYmVyaW5nU3lzdGVtLAogICAgICAgICAgZGVmYXVsdFRvRU46IHRydWUsCiAgICAgICAgfSk7CiAgICAgIHJldHVybiBleHBsYWluRnJvbVRva2Vucyhsb2NhbGVUb1VzZSwgdGV4dCwgZm10KTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXByZWNhdGVkIHVzZSBmcm9tRm9ybWF0RXhwbGFpbiBpbnN0ZWFkCiAgICAgKi8KICAgIHN0YXRpYyBmcm9tU3RyaW5nRXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMgPSB7fSkgewogICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUZvcm1hdEV4cGxhaW4odGV4dCwgZm10LCBvcHRpb25zKTsKICAgIH0KCiAgICAvLyBGT1JNQVQgUFJFU0VUUwoKICAgIC8qKgogICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAxMC8xNC8xOTgzCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IERBVEVfU0hPUlQoKSB7CiAgICAgIHJldHVybiBEQVRFX1NIT1JUOwogICAgfQoKICAgIC8qKgogICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzJwogICAgICogQHR5cGUge09iamVjdH0KICAgICAqLwogICAgc3RhdGljIGdldCBEQVRFX01FRCgpIHsKICAgICAgcmV0dXJuIERBVEVfTUVEOwogICAgfQoKICAgIC8qKgogICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpLCBPY3QgMTQsIDE5ODMnCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IERBVEVfTUVEX1dJVEhfV0VFS0RBWSgpIHsKICAgICAgcmV0dXJuIERBVEVfTUVEX1dJVEhfV0VFS0RBWTsKICAgIH0KCiAgICAvKioKICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdG9iZXIgMTQsIDE5ODMnCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IERBVEVfRlVMTCgpIHsKICAgICAgcmV0dXJuIERBVEVfRlVMTDsKICAgIH0KCiAgICAvKioKICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ1R1ZXNkYXksIE9jdG9iZXIgMTQsIDE5ODMnCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IERBVEVfSFVHRSgpIHsKICAgICAgcmV0dXJuIERBVEVfSFVHRTsKICAgIH0KCiAgICAvKioKICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IFRJTUVfU0lNUExFKCkgewogICAgICByZXR1cm4gVElNRV9TSU1QTEU7CiAgICB9CgogICAgLyoqCiAgICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLgogICAgICogQHR5cGUge09iamVjdH0KICAgICAqLwogICAgc3RhdGljIGdldCBUSU1FX1dJVEhfU0VDT05EUygpIHsKICAgICAgcmV0dXJuIFRJTUVfV0lUSF9TRUNPTkRTOwogICAgfQoKICAgIC8qKgogICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgQU0gRURUJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IFRJTUVfV0lUSF9TSE9SVF9PRkZTRVQoKSB7CiAgICAgIHJldHVybiBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VUOwogICAgfQoKICAgIC8qKgogICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgQU0gRWFzdGVybiBEYXlsaWdodCBUaW1lJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IFRJTUVfV0lUSF9MT05HX09GRlNFVCgpIHsKICAgICAgcmV0dXJuIFRJTUVfV0lUSF9MT05HX09GRlNFVDsKICAgIH0KCiAgICAvKioKICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwJywgYWx3YXlzIDI0LWhvdXIuCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IFRJTUVfMjRfU0lNUExFKCkgewogICAgICByZXR1cm4gVElNRV8yNF9TSU1QTEU7CiAgICB9CgogICAgLyoqCiAgICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMycsIGFsd2F5cyAyNC1ob3VyLgogICAgICogQHR5cGUge09iamVjdH0KICAgICAqLwogICAgc3RhdGljIGdldCBUSU1FXzI0X1dJVEhfU0VDT05EUygpIHsKICAgICAgcmV0dXJuIFRJTUVfMjRfV0lUSF9TRUNPTkRTOwogICAgfQoKICAgIC8qKgogICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgRURUJywgYWx3YXlzIDI0LWhvdXIuCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQoKSB7CiAgICAgIHJldHVybiBUSU1FXzI0X1dJVEhfU0hPUlRfT0ZGU0VUOwogICAgfQoKICAgIC8qKgogICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgRWFzdGVybiBEYXlsaWdodCBUaW1lJywgYWx3YXlzIDI0LWhvdXIuCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCgpIHsKICAgICAgcmV0dXJuIFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVDsKICAgIH0KCiAgICAvKioKICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzEwLzE0LzE5ODMsIDk6MzAgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy4KICAgICAqIEB0eXBlIHtPYmplY3R9CiAgICAgKi8KICAgIHN0YXRpYyBnZXQgREFURVRJTUVfU0hPUlQoKSB7CiAgICAgIHJldHVybiBEQVRFVElNRV9TSE9SVDsKICAgIH0KCiAgICAvKioKICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzEwLzE0LzE5ODMsIDk6MzA6MzMgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy4KICAgICAqIEB0eXBlIHtPYmplY3R9CiAgICAgKi8KICAgIHN0YXRpYyBnZXQgREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTKCkgewogICAgICByZXR1cm4gREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTOwogICAgfQoKICAgIC8qKgogICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IERBVEVUSU1FX01FRCgpIHsKICAgICAgcmV0dXJuIERBVEVUSU1FX01FRDsKICAgIH0KCiAgICAvKioKICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdCAxNCwgMTk4MywgOTozMDozMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLgogICAgICogQHR5cGUge09iamVjdH0KICAgICAqLwogICAgc3RhdGljIGdldCBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTKCkgewogICAgICByZXR1cm4gREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUzsKICAgIH0KCiAgICAvKioKICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ0ZyaSwgMTQgT2N0IDE5ODMsIDk6MzAgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy4KICAgICAqIEB0eXBlIHtPYmplY3R9CiAgICAgKi8KICAgIHN0YXRpYyBnZXQgREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWSgpIHsKICAgICAgcmV0dXJuIERBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVk7CiAgICB9CgogICAgLyoqCiAgICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3RvYmVyIDE0LCAxOTgzLCA5OjMwIEFNIEVEVCcuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLgogICAgICogQHR5cGUge09iamVjdH0KICAgICAqLwogICAgc3RhdGljIGdldCBEQVRFVElNRV9GVUxMKCkgewogICAgICByZXR1cm4gREFURVRJTUVfRlVMTDsKICAgIH0KCiAgICAvKioKICAgICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdG9iZXIgMTQsIDE5ODMsIDk6MzA6MzMgQU0gRURUJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTKCkgewogICAgICByZXR1cm4gREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFM7CiAgICB9CgogICAgLyoqCiAgICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmlkYXksIE9jdG9iZXIgMTQsIDE5ODMsIDk6MzAgQU0gRWFzdGVybiBEYXlsaWdodCBUaW1lJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICBzdGF0aWMgZ2V0IERBVEVUSU1FX0hVR0UoKSB7CiAgICAgIHJldHVybiBEQVRFVElNRV9IVUdFOwogICAgfQoKICAgIC8qKgogICAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpZGF5LCBPY3RvYmVyIDE0LCAxOTgzLCA5OjMwOjMzIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLgogICAgICogQHR5cGUge09iamVjdH0KICAgICAqLwogICAgc3RhdGljIGdldCBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUygpIHsKICAgICAgcmV0dXJuIERBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTOwogICAgfQogIH0KCiAgLyoqCiAgICogQHByaXZhdGUKICAgKi8KICBmdW5jdGlvbiBmcmllbmRseURhdGVUaW1lKGRhdGVUaW1laXNoKSB7CiAgICBpZiAoRGF0ZVRpbWUuaXNEYXRlVGltZShkYXRlVGltZWlzaCkpIHsKICAgICAgcmV0dXJuIGRhdGVUaW1laXNoOwogICAgfSBlbHNlIGlmIChkYXRlVGltZWlzaCAmJiBkYXRlVGltZWlzaC52YWx1ZU9mICYmIGlzTnVtYmVyJDEoZGF0ZVRpbWVpc2gudmFsdWVPZigpKSkgewogICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkYXRlVGltZWlzaCk7CiAgICB9IGVsc2UgaWYgKGRhdGVUaW1laXNoICYmIHR5cGVvZiBkYXRlVGltZWlzaCA9PT0gIm9iamVjdCIpIHsKICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3QoZGF0ZVRpbWVpc2gpOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKAogICAgICAgIGBVbmtub3duIGRhdGV0aW1lIGFyZ3VtZW50OiAke2RhdGVUaW1laXNofSwgb2YgdHlwZSAke3R5cGVvZiBkYXRlVGltZWlzaH1gCiAgICAgICk7CiAgICB9CiAgfQoKICAvLyBGSVhNRSBwcm9maWxlIGFkZGluZyBhIHBlci1UcmVlIFRyZWVOb2RlIGNhY2hlLCB2YWxpZGF0aW5nIGl0IGJ5CiAgLy8gcGFyZW50IHBvaW50ZXIKICAvLy8gVGhlIGRlZmF1bHQgbWF4aW11bSBsZW5ndGggb2YgYSBgVHJlZUJ1ZmZlcmAgbm9kZS4KICBjb25zdCBEZWZhdWx0QnVmZmVyTGVuZ3RoID0gMTAyNDsKICBsZXQgbmV4dFByb3BJRCA9IDA7CiAgY2xhc3MgUmFuZ2UkMSB7CiAgICAgIGNvbnN0cnVjdG9yKGZyb20sIHRvKSB7CiAgICAgICAgICB0aGlzLmZyb20gPSBmcm9tOwogICAgICAgICAgdGhpcy50byA9IHRvOwogICAgICB9CiAgfQogIC8vLyBFYWNoIFtub2RlIHR5cGVdKCNjb21tb24uTm9kZVR5cGUpIG9yIFtpbmRpdmlkdWFsIHRyZWVdKCNjb21tb24uVHJlZSkKICAvLy8gY2FuIGhhdmUgbWV0YWRhdGEgYXNzb2NpYXRlZCB3aXRoIGl0IGluIHByb3BzLiBJbnN0YW5jZXMgb2YgdGhpcwogIC8vLyBjbGFzcyByZXByZXNlbnQgcHJvcCBuYW1lcy4KICBjbGFzcyBOb2RlUHJvcCB7CiAgICAgIC8vLyBDcmVhdGUgYSBuZXcgbm9kZSBwcm9wIHR5cGUuCiAgICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7CiAgICAgICAgICB0aGlzLmlkID0gbmV4dFByb3BJRCsrOwogICAgICAgICAgdGhpcy5wZXJOb2RlID0gISFjb25maWcucGVyTm9kZTsKICAgICAgICAgIHRoaXMuZGVzZXJpYWxpemUgPSBjb25maWcuZGVzZXJpYWxpemUgfHwgKCgpID0+IHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlRoaXMgbm9kZSB0eXBlIGRvZXNuJ3QgZGVmaW5lIGEgZGVzZXJpYWxpemUgZnVuY3Rpb24iKTsKICAgICAgICAgIH0pOwogICAgICB9CiAgICAgIC8vLyBUaGlzIGlzIG1lYW50IHRvIGJlIHVzZWQgd2l0aAogICAgICAvLy8gW2BOb2RlU2V0LmV4dGVuZGBdKCNjb21tb24uTm9kZVNldC5leHRlbmQpIG9yCiAgICAgIC8vLyBbYExSUGFyc2VyLmNvbmZpZ3VyZWBdKCNsci5QYXJzZXJDb25maWcucHJvcHMpIHRvIGNvbXB1dGUKICAgICAgLy8vIHByb3AgdmFsdWVzIGZvciBlYWNoIG5vZGUgdHlwZSBpbiB0aGUgc2V0LiBUYWtlcyBhIFttYXRjaAogICAgICAvLy8gb2JqZWN0XSgjY29tbW9uLk5vZGVUeXBlXm1hdGNoKSBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgdW5kZWZpbmVkCiAgICAgIC8vLyBpZiB0aGUgbm9kZSB0eXBlIGRvZXNuJ3QgZ2V0IHRoaXMgcHJvcCwgYW5kIHRoZSBwcm9wJ3MgdmFsdWUgaWYKICAgICAgLy8vIGl0IGRvZXMuCiAgICAgIGFkZChtYXRjaCkgewogICAgICAgICAgaWYgKHRoaXMucGVyTm9kZSkKICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigiQ2FuJ3QgYWRkIHBlci1ub2RlIHByb3BzIHRvIG5vZGUgdHlwZXMiKTsKICAgICAgICAgIGlmICh0eXBlb2YgbWF0Y2ggIT0gImZ1bmN0aW9uIikKICAgICAgICAgICAgICBtYXRjaCA9IE5vZGVUeXBlLm1hdGNoKG1hdGNoKTsKICAgICAgICAgIHJldHVybiAodHlwZSkgPT4gewogICAgICAgICAgICAgIGxldCByZXN1bHQgPSBtYXRjaCh0eXBlKTsKICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBudWxsIDogW3RoaXMsIHJlc3VsdF07CiAgICAgICAgICB9OwogICAgICB9CiAgfQogIC8vLyBQcm9wIHRoYXQgaXMgdXNlZCB0byBkZXNjcmliZSBtYXRjaGluZyBkZWxpbWl0ZXJzLiBGb3Igb3BlbmluZwogIC8vLyBkZWxpbWl0ZXJzLCB0aGlzIGhvbGRzIGFuIGFycmF5IG9mIG5vZGUgbmFtZXMgKHdyaXR0ZW4gYXMgYQogIC8vLyBzcGFjZS1zZXBhcmF0ZWQgc3RyaW5nIHdoZW4gZGVjbGFyaW5nIHRoaXMgcHJvcCBpbiBhIGdyYW1tYXIpCiAgLy8vIGZvciB0aGUgbm9kZSB0eXBlcyBvZiBjbG9zaW5nIGRlbGltaXRlcnMgdGhhdCBtYXRjaCBpdC4KICBOb2RlUHJvcC5jbG9zZWRCeSA9IG5ldyBOb2RlUHJvcCh7IGRlc2VyaWFsaXplOiBzdHIgPT4gc3RyLnNwbGl0KCIgIikgfSk7CiAgLy8vIFRoZSBpbnZlcnNlIG9mIFtgY2xvc2VkQnlgXSgjY29tbW9uLk5vZGVQcm9wXmNsb3NlZEJ5KS4gVGhpcyBpcwogIC8vLyBhdHRhY2hlZCB0byBjbG9zaW5nIGRlbGltaXRlcnMsIGhvbGRpbmcgYW4gYXJyYXkgb2Ygbm9kZSBuYW1lcwogIC8vLyBvZiB0eXBlcyBvZiBtYXRjaGluZyBvcGVuaW5nIGRlbGltaXRlcnMuCiAgTm9kZVByb3Aub3BlbmVkQnkgPSBuZXcgTm9kZVByb3AoeyBkZXNlcmlhbGl6ZTogc3RyID0+IHN0ci5zcGxpdCgiICIpIH0pOwogIC8vLyBVc2VkIHRvIGFzc2lnbiBub2RlIHR5cGVzIHRvIGdyb3VwcyAoZm9yIGV4YW1wbGUsIGFsbCBub2RlCiAgLy8vIHR5cGVzIHRoYXQgcmVwcmVzZW50IGFuIGV4cHJlc3Npb24gY291bGQgYmUgdGFnZ2VkIHdpdGggYW4KICAvLy8gYCJFeHByZXNzaW9uImAgZ3JvdXApLgogIE5vZGVQcm9wLmdyb3VwID0gbmV3IE5vZGVQcm9wKHsgZGVzZXJpYWxpemU6IHN0ciA9PiBzdHIuc3BsaXQoIiAiKSB9KTsKICAvLy8gVGhlIGhhc2ggb2YgdGhlIFtjb250ZXh0XSgjbHIuQ29udGV4dFRyYWNrZXIuY29uc3RydWN0b3IpCiAgLy8vIHRoYXQgdGhlIG5vZGUgd2FzIHBhcnNlZCBpbiwgaWYgYW55LiBVc2VkIHRvIGxpbWl0IHJldXNlIG9mCiAgLy8vIGNvbnRleHR1YWwgbm9kZXMuCiAgTm9kZVByb3AuY29udGV4dEhhc2ggPSBuZXcgTm9kZVByb3AoeyBwZXJOb2RlOiB0cnVlIH0pOwogIC8vLyBUaGUgZGlzdGFuY2UgYmV5b25kIHRoZSBlbmQgb2YgdGhlIG5vZGUgdGhhdCB0aGUgdG9rZW5pemVyCiAgLy8vIGxvb2tlZCBhaGVhZCBmb3IgYW55IG9mIHRoZSB0b2tlbnMgaW5zaWRlIHRoZSBub2RlLiAoVGhlIExSCiAgLy8vIHBhcnNlciBvbmx5IHN0b3JlcyB0aGlzIHdoZW4gaXQgaXMgbGFyZ2VyIHRoYW4gMjUsIGZvcgogIC8vLyBlZmZpY2llbmN5IHJlYXNvbnMuKQogIE5vZGVQcm9wLmxvb2tBaGVhZCA9IG5ldyBOb2RlUHJvcCh7IHBlck5vZGU6IHRydWUgfSk7CiAgLy8vIFRoaXMgcGVyLW5vZGUgcHJvcCBpcyB1c2VkIHRvIHJlcGxhY2UgYSBnaXZlbiBub2RlLCBvciBwYXJ0IG9mIGEKICAvLy8gbm9kZSwgd2l0aCBhbm90aGVyIHRyZWUuIFRoaXMgaXMgdXNlZnVsIHRvIGluY2x1ZGUgdHJlZXMgZnJvbQogIC8vLyBkaWZmZXJlbnQgbGFuZ3VhZ2VzIGluIG1peGVkLWxhbmd1YWdlIHBhcnNlcnMuCiAgTm9kZVByb3AubW91bnRlZCA9IG5ldyBOb2RlUHJvcCh7IHBlck5vZGU6IHRydWUgfSk7CiAgY29uc3Qgbm9Qcm9wcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgLy8vIEVhY2ggbm9kZSBpbiBhIHN5bnRheCB0cmVlIGhhcyBhIG5vZGUgdHlwZSBhc3NvY2lhdGVkIHdpdGggaXQuCiAgY2xhc3MgTm9kZVR5cGUgewogICAgICAvLy8gQGludGVybmFsCiAgICAgIGNvbnN0cnVjdG9yKAogICAgICAvLy8gVGhlIG5hbWUgb2YgdGhlIG5vZGUgdHlwZS4gTm90IG5lY2Vzc2FyaWx5IHVuaXF1ZSwgYnV0IGlmIHRoZQogICAgICAvLy8gZ3JhbW1hciB3YXMgd3JpdHRlbiBwcm9wZXJseSwgZGlmZmVyZW50IG5vZGUgdHlwZXMgd2l0aCB0aGUKICAgICAgLy8vIHNhbWUgbmFtZSB3aXRoaW4gYSBub2RlIHNldCBzaG91bGQgcGxheSB0aGUgc2FtZSBzZW1hbnRpYwogICAgICAvLy8gcm9sZS4KICAgICAgbmFtZSwgCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgcHJvcHMsIAogICAgICAvLy8gVGhlIGlkIG9mIHRoaXMgbm9kZSBpbiBpdHMgc2V0LiBDb3JyZXNwb25kcyB0byB0aGUgdGVybSBpZHMKICAgICAgLy8vIHVzZWQgaW4gdGhlIHBhcnNlci4KICAgICAgaWQsIAogICAgICAvLy8gQGludGVybmFsCiAgICAgIGZsYWdzID0gMCkgewogICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgICAgIHRoaXMucHJvcHMgPSBwcm9wczsKICAgICAgICAgIHRoaXMuaWQgPSBpZDsKICAgICAgICAgIHRoaXMuZmxhZ3MgPSBmbGFnczsKICAgICAgfQogICAgICAvLy8gRGVmaW5lIGEgbm9kZSB0eXBlLgogICAgICBzdGF0aWMgZGVmaW5lKHNwZWMpIHsKICAgICAgICAgIGxldCBwcm9wcyA9IHNwZWMucHJvcHMgJiYgc3BlYy5wcm9wcy5sZW5ndGggPyBPYmplY3QuY3JlYXRlKG51bGwpIDogbm9Qcm9wczsKICAgICAgICAgIGxldCBmbGFncyA9IChzcGVjLnRvcCA/IDEgLyogVG9wICovIDogMCkgfCAoc3BlYy5za2lwcGVkID8gMiAvKiBTa2lwcGVkICovIDogMCkgfAogICAgICAgICAgICAgIChzcGVjLmVycm9yID8gNCAvKiBFcnJvciAqLyA6IDApIHwgKHNwZWMubmFtZSA9PSBudWxsID8gOCAvKiBBbm9ueW1vdXMgKi8gOiAwKTsKICAgICAgICAgIGxldCB0eXBlID0gbmV3IE5vZGVUeXBlKHNwZWMubmFtZSB8fCAiIiwgcHJvcHMsIHNwZWMuaWQsIGZsYWdzKTsKICAgICAgICAgIGlmIChzcGVjLnByb3BzKQogICAgICAgICAgICAgIGZvciAobGV0IHNyYyBvZiBzcGVjLnByb3BzKSB7CiAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzcmMpKQogICAgICAgICAgICAgICAgICAgICAgc3JjID0gc3JjKHR5cGUpOwogICAgICAgICAgICAgICAgICBpZiAoc3JjKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3JjWzBdLnBlck5vZGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoIkNhbid0IHN0b3JlIGEgcGVyLW5vZGUgcHJvcCBvbiBhIG5vZGUgdHlwZSIpOwogICAgICAgICAgICAgICAgICAgICAgcHJvcHNbc3JjWzBdLmlkXSA9IHNyY1sxXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0eXBlOwogICAgICB9CiAgICAgIC8vLyBSZXRyaWV2ZXMgYSBub2RlIHByb3AgZm9yIHRoaXMgdHlwZS4gV2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgaWYKICAgICAgLy8vIHRoZSBwcm9wIGlzbid0IHByZXNlbnQgb24gdGhpcyBub2RlLgogICAgICBwcm9wKHByb3ApIHsgcmV0dXJuIHRoaXMucHJvcHNbcHJvcC5pZF07IH0KICAgICAgLy8vIFRydWUgd2hlbiB0aGlzIGlzIHRoZSB0b3Agbm9kZSBvZiBhIGdyYW1tYXIuCiAgICAgIGdldCBpc1RvcCgpIHsgcmV0dXJuICh0aGlzLmZsYWdzICYgMSAvKiBUb3AgKi8pID4gMDsgfQogICAgICAvLy8gVHJ1ZSB3aGVuIHRoaXMgbm9kZSBpcyBwcm9kdWNlZCBieSBhIHNraXAgcnVsZS4KICAgICAgZ2V0IGlzU2tpcHBlZCgpIHsgcmV0dXJuICh0aGlzLmZsYWdzICYgMiAvKiBTa2lwcGVkICovKSA+IDA7IH0KICAgICAgLy8vIEluZGljYXRlcyB3aGV0aGVyIHRoaXMgaXMgYW4gZXJyb3Igbm9kZS4KICAgICAgZ2V0IGlzRXJyb3IoKSB7IHJldHVybiAodGhpcy5mbGFncyAmIDQgLyogRXJyb3IgKi8pID4gMDsgfQogICAgICAvLy8gV2hlbiB0cnVlLCB0aGlzIG5vZGUgdHlwZSBkb2Vzbid0IGNvcnJlc3BvbmQgdG8gYSB1c2VyLWRlY2xhcmVkCiAgICAgIC8vLyBuYW1lZCBub2RlLCBmb3IgZXhhbXBsZSBiZWNhdXNlIGl0IGlzIHVzZWQgdG8gY2FjaGUgcmVwZXRpdGlvbi4KICAgICAgZ2V0IGlzQW5vbnltb3VzKCkgeyByZXR1cm4gKHRoaXMuZmxhZ3MgJiA4IC8qIEFub255bW91cyAqLykgPiAwOyB9CiAgICAgIC8vLyBSZXR1cm5zIHRydWUgd2hlbiB0aGlzIG5vZGUncyBuYW1lIG9yIG9uZSBvZiBpdHMKICAgICAgLy8vIFtncm91cHNdKCNjb21tb24uTm9kZVByb3BeZ3JvdXApIG1hdGNoZXMgdGhlIGdpdmVuIHN0cmluZy4KICAgICAgaXMobmFtZSkgewogICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMubmFtZSA9PSBuYW1lKQogICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICBsZXQgZ3JvdXAgPSB0aGlzLnByb3AoTm9kZVByb3AuZ3JvdXApOwogICAgICAgICAgICAgIHJldHVybiBncm91cCA/IGdyb3VwLmluZGV4T2YobmFtZSkgPiAtMSA6IGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXMuaWQgPT0gbmFtZTsKICAgICAgfQogICAgICAvLy8gQ3JlYXRlIGEgZnVuY3Rpb24gZnJvbSBub2RlIHR5cGVzIHRvIGFyYml0cmFyeSB2YWx1ZXMgYnkKICAgICAgLy8vIHNwZWNpZnlpbmcgYW4gb2JqZWN0IHdob3NlIHByb3BlcnR5IG5hbWVzIGFyZSBub2RlIG9yCiAgICAgIC8vLyBbZ3JvdXBdKCNjb21tb24uTm9kZVByb3BeZ3JvdXApIG5hbWVzLiBPZnRlbiB1c2VmdWwgd2l0aAogICAgICAvLy8gW2BOb2RlUHJvcC5hZGRgXSgjY29tbW9uLk5vZGVQcm9wLmFkZCkuIFlvdSBjYW4gcHV0IG11bHRpcGxlCiAgICAgIC8vLyBuYW1lcywgc2VwYXJhdGVkIGJ5IHNwYWNlcywgaW4gYSBzaW5nbGUgcHJvcGVydHkgbmFtZSB0byBtYXAKICAgICAgLy8vIG11bHRpcGxlIG5vZGUgbmFtZXMgdG8gYSBzaW5nbGUgdmFsdWUuCiAgICAgIHN0YXRpYyBtYXRjaChtYXApIHsKICAgICAgICAgIGxldCBkaXJlY3QgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICAgICAgZm9yIChsZXQgcHJvcCBpbiBtYXApCiAgICAgICAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBwcm9wLnNwbGl0KCIgIikpCiAgICAgICAgICAgICAgICAgIGRpcmVjdFtuYW1lXSA9IG1hcFtwcm9wXTsKICAgICAgICAgIHJldHVybiAobm9kZSkgPT4gewogICAgICAgICAgICAgIGZvciAobGV0IGdyb3VwcyA9IG5vZGUucHJvcChOb2RlUHJvcC5ncm91cCksIGkgPSAtMTsgaSA8IChncm91cHMgPyBncm91cHMubGVuZ3RoIDogMCk7IGkrKykgewogICAgICAgICAgICAgICAgICBsZXQgZm91bmQgPSBkaXJlY3RbaSA8IDAgPyBub2RlLm5hbWUgOiBncm91cHNbaV1dOwogICAgICAgICAgICAgICAgICBpZiAoZm91bmQpCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgfQogIH0KICAvLy8gQW4gZW1wdHkgZHVtbXkgbm9kZSB0eXBlIHRvIHVzZSB3aGVuIG5vIGFjdHVhbCB0eXBlIGlzIGF2YWlsYWJsZS4KICBOb2RlVHlwZS5ub25lID0gbmV3IE5vZGVUeXBlKCIiLCBPYmplY3QuY3JlYXRlKG51bGwpLCAwLCA4IC8qIEFub255bW91cyAqLyk7CiAgLy8vIEEgbm9kZSBzZXQgaG9sZHMgYSBjb2xsZWN0aW9uIG9mIG5vZGUgdHlwZXMuIEl0IGlzIHVzZWQgdG8KICAvLy8gY29tcGFjdGx5IHJlcHJlc2VudCB0cmVlcyBieSBzdG9yaW5nIHRoZWlyIHR5cGUgaWRzLCByYXRoZXIgdGhhbiBhCiAgLy8vIGZ1bGwgcG9pbnRlciB0byB0aGUgdHlwZSBvYmplY3QsIGluIGEgbnVtZXJpYyBhcnJheS4gRWFjaCBwYXJzZXIKICAvLy8gW2hhc10oI2xyLkxSUGFyc2VyLm5vZGVTZXQpIGEgbm9kZSBzZXQsIGFuZCBbdHJlZQogIC8vLyBidWZmZXJzXSgjY29tbW9uLlRyZWVCdWZmZXIpIGNhbiBvbmx5IHN0b3JlIGNvbGxlY3Rpb25zIG9mIG5vZGVzCiAgLy8vIGZyb20gdGhlIHNhbWUgc2V0LiBBIHNldCBjYW4gaGF2ZSBhIG1heGltdW0gb2YgMioqMTYgKDY1NTM2KSBub2RlCiAgLy8vIHR5cGVzIGluIGl0LCBzbyB0aGF0IHRoZSBpZHMgZml0IGludG8gMTYtYml0IHR5cGVkIGFycmF5IHNsb3RzLgogIGNsYXNzIE5vZGVTZXQgewogICAgICAvLy8gQ3JlYXRlIGEgc2V0IHdpdGggdGhlIGdpdmVuIHR5cGVzLiBUaGUgYGlkYCBwcm9wZXJ0eSBvZiBlYWNoCiAgICAgIC8vLyB0eXBlIHNob3VsZCBjb3JyZXNwb25kIHRvIGl0cyBwb3NpdGlvbiB3aXRoaW4gdGhlIGFycmF5LgogICAgICBjb25zdHJ1Y3RvcigKICAgICAgLy8vIFRoZSBub2RlIHR5cGVzIGluIHRoaXMgc2V0LCBieSBpZC4KICAgICAgdHlwZXMpIHsKICAgICAgICAgIHRoaXMudHlwZXMgPSB0eXBlczsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspCiAgICAgICAgICAgICAgaWYgKHR5cGVzW2ldLmlkICE9IGkpCiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCJOb2RlIHR5cGUgaWRzIHNob3VsZCBjb3JyZXNwb25kIHRvIGFycmF5IHBvc2l0aW9ucyB3aGVuIGNyZWF0aW5nIGEgbm9kZSBzZXQiKTsKICAgICAgfQogICAgICAvLy8gQ3JlYXRlIGEgY29weSBvZiB0aGlzIHNldCB3aXRoIHNvbWUgbm9kZSBwcm9wZXJ0aWVzIGFkZGVkLiBUaGUKICAgICAgLy8vIGFyZ3VtZW50cyB0byB0aGlzIG1ldGhvZCBjYW4gYmUgY3JlYXRlZCB3aXRoCiAgICAgIC8vLyBbYE5vZGVQcm9wLmFkZGBdKCNjb21tb24uTm9kZVByb3AuYWRkKS4KICAgICAgZXh0ZW5kKC4uLnByb3BzKSB7CiAgICAgICAgICBsZXQgbmV3VHlwZXMgPSBbXTsKICAgICAgICAgIGZvciAobGV0IHR5cGUgb2YgdGhpcy50eXBlcykgewogICAgICAgICAgICAgIGxldCBuZXdQcm9wcyA9IG51bGw7CiAgICAgICAgICAgICAgZm9yIChsZXQgc291cmNlIG9mIHByb3BzKSB7CiAgICAgICAgICAgICAgICAgIGxldCBhZGQgPSBzb3VyY2UodHlwZSk7CiAgICAgICAgICAgICAgICAgIGlmIChhZGQpIHsKICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV3UHJvcHMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCB0eXBlLnByb3BzKTsKICAgICAgICAgICAgICAgICAgICAgIG5ld1Byb3BzW2FkZFswXS5pZF0gPSBhZGRbMV07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbmV3VHlwZXMucHVzaChuZXdQcm9wcyA/IG5ldyBOb2RlVHlwZSh0eXBlLm5hbWUsIG5ld1Byb3BzLCB0eXBlLmlkLCB0eXBlLmZsYWdzKSA6IHR5cGUpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG5ldyBOb2RlU2V0KG5ld1R5cGVzKTsKICAgICAgfQogIH0KICBjb25zdCBDYWNoZWROb2RlID0gbmV3IFdlYWtNYXAoKSwgQ2FjaGVkSW5uZXJOb2RlID0gbmV3IFdlYWtNYXAoKTsKICAvLy8gT3B0aW9ucyB0aGF0IGNvbnRyb2wgaXRlcmF0aW9uLiBDYW4gYmUgY29tYmluZWQgd2l0aCB0aGUgYHxgCiAgLy8vIG9wZXJhdG9yIHRvIGVuYWJsZSBtdWx0aXBsZSBvbmVzLgogIHZhciBJdGVyTW9kZTsKICAoZnVuY3Rpb24gKEl0ZXJNb2RlKSB7CiAgICAgIC8vLyBXaGVuIGVuYWJsZWQsIGl0ZXJhdGlvbiB3aWxsIG9ubHkgdmlzaXQgW2BUcmVlYF0oI2NvbW1vbi5UcmVlKQogICAgICAvLy8gb2JqZWN0cywgbm90IG5vZGVzIHBhY2tlZCBpbnRvCiAgICAgIC8vLyBbYFRyZWVCdWZmZXJgXSgjY29tbW9uLlRyZWVCdWZmZXIpcy4KICAgICAgSXRlck1vZGVbSXRlck1vZGVbIkV4Y2x1ZGVCdWZmZXJzIl0gPSAxXSA9ICJFeGNsdWRlQnVmZmVycyI7CiAgICAgIC8vLyBFbmFibGUgdGhpcyB0byBtYWtlIGl0ZXJhdGlvbiBpbmNsdWRlIGFub255bW91cyBub2RlcyAoc3VjaCBhcwogICAgICAvLy8gdGhlIG5vZGVzIHRoYXQgd3JhcCByZXBlYXRlZCBncmFtbWFyIGNvbnN0cnVjdHMgaW50byBhIGJhbGFuY2VkCiAgICAgIC8vLyB0cmVlKS4KICAgICAgSXRlck1vZGVbSXRlck1vZGVbIkluY2x1ZGVBbm9ueW1vdXMiXSA9IDJdID0gIkluY2x1ZGVBbm9ueW1vdXMiOwogICAgICAvLy8gQnkgZGVmYXVsdCwgcmVndWxhciBbbW91bnRlZF0oI2NvbW1vbi5Ob2RlUHJvcF5tb3VudGVkKSBub2RlcwogICAgICAvLy8gcmVwbGFjZSB0aGVpciBiYXNlIG5vZGUgaW4gaXRlcmF0aW9uLiBFbmFibGUgdGhpcyB0byBpZ25vcmUgdGhlbQogICAgICAvLy8gaW5zdGVhZC4KICAgICAgSXRlck1vZGVbSXRlck1vZGVbIklnbm9yZU1vdW50cyJdID0gNF0gPSAiSWdub3JlTW91bnRzIjsKICAgICAgLy8vIFRoaXMgb3B0aW9uIG9ubHkgYXBwbGllcyBpbgogICAgICAvLy8gW2BlbnRlcmBdKCNjb21tb24uU3ludGF4Tm9kZS5lbnRlciktc3R5bGUgbWV0aG9kcy4gSXQgdGVsbHMgdGhlCiAgICAgIC8vLyBsaWJyYXJ5IHRvIG5vdCBlbnRlciBtb3VudGVkIG92ZXJsYXlzIGlmIG9uZSBjb3ZlcnMgdGhlIGdpdmVuCiAgICAgIC8vLyBwb3NpdGlvbi4KICAgICAgSXRlck1vZGVbSXRlck1vZGVbIklnbm9yZU92ZXJsYXlzIl0gPSA4XSA9ICJJZ25vcmVPdmVybGF5cyI7CiAgfSkoSXRlck1vZGUgfHwgKEl0ZXJNb2RlID0ge30pKTsKICAvLy8gQSBwaWVjZSBvZiBzeW50YXggdHJlZS4gVGhlcmUgYXJlIHR3byB3YXlzIHRvIGFwcHJvYWNoIHRoZXNlCiAgLy8vIHRyZWVzOiB0aGUgd2F5IHRoZXkgYXJlIGFjdHVhbGx5IHN0b3JlZCBpbiBtZW1vcnksIGFuZCB0aGUKICAvLy8gY29udmVuaWVudCB3YXkuCiAgLy8vCiAgLy8vIFN5bnRheCB0cmVlcyBhcmUgc3RvcmVkIGFzIGEgdHJlZSBvZiBgVHJlZWAgYW5kIGBUcmVlQnVmZmVyYAogIC8vLyBvYmplY3RzLiBCeSBwYWNraW5nIGRldGFpbCBpbmZvcm1hdGlvbiBpbnRvIGBUcmVlQnVmZmVyYCBsZWFmCiAgLy8vIG5vZGVzLCB0aGUgcmVwcmVzZW50YXRpb24gaXMgbWFkZSBhIGxvdCBtb3JlIG1lbW9yeS1lZmZpY2llbnQuCiAgLy8vCiAgLy8vIEhvd2V2ZXIsIHdoZW4geW91IHdhbnQgdG8gYWN0dWFsbHkgd29yayB3aXRoIHRyZWUgbm9kZXMsIHRoaXMKICAvLy8gcmVwcmVzZW50YXRpb24gaXMgdmVyeSBhd2t3YXJkLCBzbyBtb3N0IGNsaWVudCBjb2RlIHdpbGwgd2FudCB0bwogIC8vLyB1c2UgdGhlIFtgVHJlZUN1cnNvcmBdKCNjb21tb24uVHJlZUN1cnNvcikgb3IKICAvLy8gW2BTeW50YXhOb2RlYF0oI2NvbW1vbi5TeW50YXhOb2RlKSBpbnRlcmZhY2UgaW5zdGVhZCwgd2hpY2ggcHJvdmlkZXMKICAvLy8gYSB2aWV3IG9uIHNvbWUgcGFydCBvZiB0aGlzIGRhdGEgc3RydWN0dXJlLCBhbmQgY2FuIGJlIHVzZWQgdG8KICAvLy8gbW92ZSBhcm91bmQgdG8gYWRqYWNlbnQgbm9kZXMuCiAgY2xhc3MgVHJlZSB7CiAgICAgIC8vLyBDb25zdHJ1Y3QgYSBuZXcgdHJlZS4gU2VlIGFsc28gW2BUcmVlLmJ1aWxkYF0oI2NvbW1vbi5UcmVlXmJ1aWxkKS4KICAgICAgY29uc3RydWN0b3IoCiAgICAgIC8vLyBUaGUgdHlwZSBvZiB0aGUgdG9wIG5vZGUuCiAgICAgIHR5cGUsIAogICAgICAvLy8gVGhpcyBub2RlJ3MgY2hpbGQgbm9kZXMuCiAgICAgIGNoaWxkcmVuLCAKICAgICAgLy8vIFRoZSBwb3NpdGlvbnMgKG9mZnNldHMgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoaXMgdHJlZSkgb2YKICAgICAgLy8vIHRoZSBjaGlsZHJlbi4KICAgICAgcG9zaXRpb25zLCAKICAgICAgLy8vIFRoZSB0b3RhbCBsZW5ndGggb2YgdGhpcyB0cmVlCiAgICAgIGxlbmd0aCwgCiAgICAgIC8vLyBQZXItbm9kZSBbbm9kZSBwcm9wc10oI2NvbW1vbi5Ob2RlUHJvcCkgdG8gYXNzb2NpYXRlIHdpdGggdGhpcyBub2RlLgogICAgICBwcm9wcykgewogICAgICAgICAgdGhpcy50eXBlID0gdHlwZTsKICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjsKICAgICAgICAgIHRoaXMucG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7CiAgICAgICAgICAvLy8gQGludGVybmFsCiAgICAgICAgICB0aGlzLnByb3BzID0gbnVsbDsKICAgICAgICAgIGlmIChwcm9wcyAmJiBwcm9wcy5sZW5ndGgpIHsKICAgICAgICAgICAgICB0aGlzLnByb3BzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgICAgICAgICBmb3IgKGxldCBbcHJvcCwgdmFsdWVdIG9mIHByb3BzKQogICAgICAgICAgICAgICAgICB0aGlzLnByb3BzW3R5cGVvZiBwcm9wID09ICJudW1iZXIiID8gcHJvcCA6IHByb3AuaWRdID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICB0b1N0cmluZygpIHsKICAgICAgICAgIGxldCBtb3VudGVkID0gdGhpcy5wcm9wKE5vZGVQcm9wLm1vdW50ZWQpOwogICAgICAgICAgaWYgKG1vdW50ZWQgJiYgIW1vdW50ZWQub3ZlcmxheSkKICAgICAgICAgICAgICByZXR1cm4gbW91bnRlZC50cmVlLnRvU3RyaW5nKCk7CiAgICAgICAgICBsZXQgY2hpbGRyZW4gPSAiIjsKICAgICAgICAgIGZvciAobGV0IGNoIG9mIHRoaXMuY2hpbGRyZW4pIHsKICAgICAgICAgICAgICBsZXQgc3RyID0gY2gudG9TdHJpbmcoKTsKICAgICAgICAgICAgICBpZiAoc3RyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbikKICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuICs9ICIsIjsKICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gKz0gc3RyOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiAhdGhpcy50eXBlLm5hbWUgPyBjaGlsZHJlbiA6CiAgICAgICAgICAgICAgKC9cVy8udGVzdCh0aGlzLnR5cGUubmFtZSkgJiYgIXRoaXMudHlwZS5pc0Vycm9yID8gSlNPTi5zdHJpbmdpZnkodGhpcy50eXBlLm5hbWUpIDogdGhpcy50eXBlLm5hbWUpICsKICAgICAgICAgICAgICAgICAgKGNoaWxkcmVuLmxlbmd0aCA/ICIoIiArIGNoaWxkcmVuICsgIikiIDogIiIpOwogICAgICB9CiAgICAgIC8vLyBHZXQgYSBbdHJlZSBjdXJzb3JdKCNjb21tb24uVHJlZUN1cnNvcikgcG9zaXRpb25lZCBhdCB0aGUgdG9wIG9mCiAgICAgIC8vLyB0aGUgdHJlZS4gTW9kZSBjYW4gYmUgdXNlZCB0byBbY29udHJvbF0oI2NvbW1vbi5JdGVyTW9kZSkgd2hpY2gKICAgICAgLy8vIG5vZGVzIHRoZSBjdXJzb3IgdmlzaXRzLgogICAgICBjdXJzb3IobW9kZSA9IDApIHsKICAgICAgICAgIHJldHVybiBuZXcgVHJlZUN1cnNvcih0aGlzLnRvcE5vZGUsIG1vZGUpOwogICAgICB9CiAgICAgIC8vLyBHZXQgYSBbdHJlZSBjdXJzb3JdKCNjb21tb24uVHJlZUN1cnNvcikgcG9pbnRpbmcgaW50byB0aGlzIHRyZWUKICAgICAgLy8vIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgc2lkZSAoc2VlCiAgICAgIC8vLyBbYG1vdmVUb2BdKCNjb21tb24uVHJlZUN1cnNvci5tb3ZlVG8pLgogICAgICBjdXJzb3JBdChwb3MsIHNpZGUgPSAwLCBtb2RlID0gMCkgewogICAgICAgICAgbGV0IHNjb3BlID0gQ2FjaGVkTm9kZS5nZXQodGhpcykgfHwgdGhpcy50b3BOb2RlOwogICAgICAgICAgbGV0IGN1cnNvciA9IG5ldyBUcmVlQ3Vyc29yKHNjb3BlKTsKICAgICAgICAgIGN1cnNvci5tb3ZlVG8ocG9zLCBzaWRlKTsKICAgICAgICAgIENhY2hlZE5vZGUuc2V0KHRoaXMsIGN1cnNvci5fdHJlZSk7CiAgICAgICAgICByZXR1cm4gY3Vyc29yOwogICAgICB9CiAgICAgIC8vLyBHZXQgYSBbc3ludGF4IG5vZGVdKCNjb21tb24uU3ludGF4Tm9kZSkgb2JqZWN0IGZvciB0aGUgdG9wIG9mIHRoZQogICAgICAvLy8gdHJlZS4KICAgICAgZ2V0IHRvcE5vZGUoKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFRyZWVOb2RlKHRoaXMsIDAsIDAsIG51bGwpOwogICAgICB9CiAgICAgIC8vLyBHZXQgdGhlIFtzeW50YXggbm9kZV0oI2NvbW1vbi5TeW50YXhOb2RlKSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uCiAgICAgIC8vLyBJZiBgc2lkZWAgaXMgLTEsIHRoaXMgd2lsbCBtb3ZlIGludG8gbm9kZXMgdGhhdCBlbmQgYXQgdGhlCiAgICAgIC8vLyBwb3NpdGlvbi4gSWYgMSwgaXQnbGwgbW92ZSBpbnRvIG5vZGVzIHRoYXQgc3RhcnQgYXQgdGhlCiAgICAgIC8vLyBwb3NpdGlvbi4gV2l0aCAwLCBpdCdsbCBvbmx5IGVudGVyIG5vZGVzIHRoYXQgY292ZXIgdGhlIHBvc2l0aW9uCiAgICAgIC8vLyBmcm9tIGJvdGggc2lkZXMuCiAgICAgIC8vLwogICAgICAvLy8gTm90ZSB0aGF0IHRoaXMgd2lsbCBub3QgZW50ZXIKICAgICAgLy8vIFtvdmVybGF5c10oI2NvbW1vbi5Nb3VudGVkVHJlZS5vdmVybGF5KSwgYW5kIHlvdSBvZnRlbiB3YW50CiAgICAgIC8vLyBbYHJlc29sdmVJbm5lcmBdKCNjb21tb24uVHJlZS5yZXNvbHZlSW5uZXIpIGluc3RlYWQuCiAgICAgIHJlc29sdmUocG9zLCBzaWRlID0gMCkgewogICAgICAgICAgbGV0IG5vZGUgPSByZXNvbHZlTm9kZShDYWNoZWROb2RlLmdldCh0aGlzKSB8fCB0aGlzLnRvcE5vZGUsIHBvcywgc2lkZSwgZmFsc2UpOwogICAgICAgICAgQ2FjaGVkTm9kZS5zZXQodGhpcywgbm9kZSk7CiAgICAgICAgICByZXR1cm4gbm9kZTsKICAgICAgfQogICAgICAvLy8gTGlrZSBbYHJlc29sdmVgXSgjY29tbW9uLlRyZWUucmVzb2x2ZSksIGJ1dCB3aWxsIGVudGVyCiAgICAgIC8vLyBbb3ZlcmxhaWRdKCNjb21tb24uTW91bnRlZFRyZWUub3ZlcmxheSkgbm9kZXMsIHByb2R1Y2luZyBhIHN5bnRheCBub2RlCiAgICAgIC8vLyBwb2ludGluZyBpbnRvIHRoZSBpbm5lcm1vc3Qgb3ZlcmxhaWQgdHJlZSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24KICAgICAgLy8vICh3aXRoIHBhcmVudCBsaW5rcyBnb2luZyB0aHJvdWdoIGFsbCBwYXJlbnQgc3RydWN0dXJlLCBpbmNsdWRpbmcKICAgICAgLy8vIHRoZSBob3N0IHRyZWVzKS4KICAgICAgcmVzb2x2ZUlubmVyKHBvcywgc2lkZSA9IDApIHsKICAgICAgICAgIGxldCBub2RlID0gcmVzb2x2ZU5vZGUoQ2FjaGVkSW5uZXJOb2RlLmdldCh0aGlzKSB8fCB0aGlzLnRvcE5vZGUsIHBvcywgc2lkZSwgdHJ1ZSk7CiAgICAgICAgICBDYWNoZWRJbm5lck5vZGUuc2V0KHRoaXMsIG5vZGUpOwogICAgICAgICAgcmV0dXJuIG5vZGU7CiAgICAgIH0KICAgICAgLy8vIEl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBhbmQgaXRzIGNoaWxkcmVuLCBjYWxsaW5nIGBlbnRlcmAgZm9yIGFueQogICAgICAvLy8gbm9kZSB0aGF0IHRvdWNoZXMgdGhlIGBmcm9tYC9gdG9gIHJlZ2lvbiAoaWYgZ2l2ZW4pIGJlZm9yZQogICAgICAvLy8gcnVubmluZyBvdmVyIHN1Y2ggYSBub2RlJ3MgY2hpbGRyZW4sIGFuZCBgbGVhdmVgIChpZiBnaXZlbikgd2hlbgogICAgICAvLy8gbGVhdmluZyB0aGUgbm9kZS4gV2hlbiBgZW50ZXJgIHJldHVybnMgYGZhbHNlYCwgdGhhdCBub2RlIHdpbGwKICAgICAgLy8vIG5vdCBoYXZlIGl0cyBjaGlsZHJlbiBpdGVyYXRlZCBvdmVyIChvciBgbGVhdmVgIGNhbGxlZCkuCiAgICAgIGl0ZXJhdGUoc3BlYykgewogICAgICAgICAgbGV0IHsgZW50ZXIsIGxlYXZlLCBmcm9tID0gMCwgdG8gPSB0aGlzLmxlbmd0aCB9ID0gc3BlYzsKICAgICAgICAgIGZvciAobGV0IGMgPSB0aGlzLmN1cnNvcigoc3BlYy5tb2RlIHx8IDApIHwgSXRlck1vZGUuSW5jbHVkZUFub255bW91cyk7OykgewogICAgICAgICAgICAgIGxldCBlbnRlcmVkID0gZmFsc2U7CiAgICAgICAgICAgICAgaWYgKGMuZnJvbSA8PSB0byAmJiBjLnRvID49IGZyb20gJiYgKGMudHlwZS5pc0Fub255bW91cyB8fCBlbnRlcihjKSAhPT0gZmFsc2UpKSB7CiAgICAgICAgICAgICAgICAgIGlmIChjLmZpcnN0Q2hpbGQoKSkKICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICBlbnRlcmVkID0gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9yICg7OykgewogICAgICAgICAgICAgICAgICBpZiAoZW50ZXJlZCAmJiBsZWF2ZSAmJiAhYy50eXBlLmlzQW5vbnltb3VzKQogICAgICAgICAgICAgICAgICAgICAgbGVhdmUoYyk7CiAgICAgICAgICAgICAgICAgIGlmIChjLm5leHRTaWJsaW5nKCkpCiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgaWYgKCFjLnBhcmVudCgpKQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICBlbnRlcmVkID0gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgIH0KICAgICAgLy8vIEdldCB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIFtub2RlIHByb3BdKCNjb21tb24uTm9kZVByb3ApIGZvciB0aGlzCiAgICAgIC8vLyBub2RlLiBXb3JrcyB3aXRoIGJvdGggcGVyLW5vZGUgYW5kIHBlci10eXBlIHByb3BzLgogICAgICBwcm9wKHByb3ApIHsKICAgICAgICAgIHJldHVybiAhcHJvcC5wZXJOb2RlID8gdGhpcy50eXBlLnByb3AocHJvcCkgOiB0aGlzLnByb3BzID8gdGhpcy5wcm9wc1twcm9wLmlkXSA6IHVuZGVmaW5lZDsKICAgICAgfQogICAgICAvLy8gUmV0dXJucyB0aGUgbm9kZSdzIFtwZXItbm9kZSBwcm9wc10oI2NvbW1vbi5Ob2RlUHJvcC5wZXJOb2RlKSBpbiBhCiAgICAgIC8vLyBmb3JtYXQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSBbYFRyZWVgXSgjY29tbW9uLlRyZWUpCiAgICAgIC8vLyBjb25zdHJ1Y3Rvci4KICAgICAgZ2V0IHByb3BWYWx1ZXMoKSB7CiAgICAgICAgICBsZXQgcmVzdWx0ID0gW107CiAgICAgICAgICBpZiAodGhpcy5wcm9wcykKICAgICAgICAgICAgICBmb3IgKGxldCBpZCBpbiB0aGlzLnByb3BzKQogICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChbK2lkLCB0aGlzLnByb3BzW2lkXV0pOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfQogICAgICAvLy8gQmFsYW5jZSB0aGUgZGlyZWN0IGNoaWxkcmVuIG9mIHRoaXMgdHJlZSwgcHJvZHVjaW5nIGEgY29weSBvZgogICAgICAvLy8gd2hpY2ggbWF5IGhhdmUgY2hpbGRyZW4gZ3JvdXBlZCBpbnRvIHN1YnRyZWVzIHdpdGggdHlwZQogICAgICAvLy8gW2BOb2RlVHlwZS5ub25lYF0oI2NvbW1vbi5Ob2RlVHlwZV5ub25lKS4KICAgICAgYmFsYW5jZShjb25maWcgPSB7fSkgewogICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubGVuZ3RoIDw9IDggLyogQnJhbmNoRmFjdG9yICovID8gdGhpcyA6CiAgICAgICAgICAgICAgYmFsYW5jZVJhbmdlKE5vZGVUeXBlLm5vbmUsIHRoaXMuY2hpbGRyZW4sIHRoaXMucG9zaXRpb25zLCAwLCB0aGlzLmNoaWxkcmVuLmxlbmd0aCwgMCwgdGhpcy5sZW5ndGgsIChjaGlsZHJlbiwgcG9zaXRpb25zLCBsZW5ndGgpID0+IG5ldyBUcmVlKHRoaXMudHlwZSwgY2hpbGRyZW4sIHBvc2l0aW9ucywgbGVuZ3RoLCB0aGlzLnByb3BWYWx1ZXMpLCBjb25maWcubWFrZVRyZWUgfHwgKChjaGlsZHJlbiwgcG9zaXRpb25zLCBsZW5ndGgpID0+IG5ldyBUcmVlKE5vZGVUeXBlLm5vbmUsIGNoaWxkcmVuLCBwb3NpdGlvbnMsIGxlbmd0aCkpKTsKICAgICAgfQogICAgICAvLy8gQnVpbGQgYSB0cmVlIGZyb20gYSBwb3N0Zml4LW9yZGVyZWQgYnVmZmVyIG9mIG5vZGUgaW5mb3JtYXRpb24sCiAgICAgIC8vLyBvciBhIGN1cnNvciBvdmVyIHN1Y2ggYSBidWZmZXIuCiAgICAgIHN0YXRpYyBidWlsZChkYXRhKSB7IHJldHVybiBidWlsZFRyZWUoZGF0YSk7IH0KICB9CiAgLy8vIFRoZSBlbXB0eSB0cmVlCiAgVHJlZS5lbXB0eSA9IG5ldyBUcmVlKE5vZGVUeXBlLm5vbmUsIFtdLCBbXSwgMCk7CiAgY2xhc3MgRmxhdEJ1ZmZlckN1cnNvciB7CiAgICAgIGNvbnN0cnVjdG9yKGJ1ZmZlciwgaW5kZXgpIHsKICAgICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyOwogICAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4OwogICAgICB9CiAgICAgIGdldCBpZCgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSA0XTsgfQogICAgICBnZXQgc3RhcnQoKSB7IHJldHVybiB0aGlzLmJ1ZmZlclt0aGlzLmluZGV4IC0gM107IH0KICAgICAgZ2V0IGVuZCgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSAyXTsgfQogICAgICBnZXQgc2l6ZSgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSAxXTsgfQogICAgICBnZXQgcG9zKCkgeyByZXR1cm4gdGhpcy5pbmRleDsgfQogICAgICBuZXh0KCkgeyB0aGlzLmluZGV4IC09IDQ7IH0KICAgICAgZm9yaygpIHsgcmV0dXJuIG5ldyBGbGF0QnVmZmVyQ3Vyc29yKHRoaXMuYnVmZmVyLCB0aGlzLmluZGV4KTsgfQogIH0KICAvLy8gVHJlZSBidWZmZXJzIGNvbnRhaW4gKHR5cGUsIHN0YXJ0LCBlbmQsIGVuZEluZGV4KSBxdWFkcyBmb3IgZWFjaAogIC8vLyBub2RlLiBJbiBzdWNoIGEgYnVmZmVyLCBub2RlcyBhcmUgc3RvcmVkIGluIHByZWZpeCBvcmRlciAocGFyZW50cwogIC8vLyBiZWZvcmUgY2hpbGRyZW4sIHdpdGggdGhlIGVuZEluZGV4IG9mIHRoZSBwYXJlbnQgaW5kaWNhdGluZyB3aGljaAogIC8vLyBjaGlsZHJlbiBiZWxvbmcgdG8gaXQpLgogIGNsYXNzIFRyZWVCdWZmZXIgewogICAgICAvLy8gQ3JlYXRlIGEgdHJlZSBidWZmZXIuCiAgICAgIGNvbnN0cnVjdG9yKAogICAgICAvLy8gVGhlIGJ1ZmZlcidzIGNvbnRlbnQuCiAgICAgIGJ1ZmZlciwgCiAgICAgIC8vLyBUaGUgdG90YWwgbGVuZ3RoIG9mIHRoZSBncm91cCBvZiBub2RlcyBpbiB0aGUgYnVmZmVyLgogICAgICBsZW5ndGgsIAogICAgICAvLy8gVGhlIG5vZGUgc2V0IHVzZWQgaW4gdGhpcyBidWZmZXIuCiAgICAgIHNldCkgewogICAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7CiAgICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICAgIHRoaXMuc2V0ID0gc2V0OwogICAgICB9CiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgZ2V0IHR5cGUoKSB7IHJldHVybiBOb2RlVHlwZS5ub25lOyB9CiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgdG9TdHJpbmcoKSB7CiAgICAgICAgICBsZXQgcmVzdWx0ID0gW107CiAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5idWZmZXIubGVuZ3RoOykgewogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuY2hpbGRTdHJpbmcoaW5kZXgpKTsKICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuYnVmZmVyW2luZGV4ICsgM107CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oIiwiKTsKICAgICAgfQogICAgICAvLy8gQGludGVybmFsCiAgICAgIGNoaWxkU3RyaW5nKGluZGV4KSB7CiAgICAgICAgICBsZXQgaWQgPSB0aGlzLmJ1ZmZlcltpbmRleF0sIGVuZEluZGV4ID0gdGhpcy5idWZmZXJbaW5kZXggKyAzXTsKICAgICAgICAgIGxldCB0eXBlID0gdGhpcy5zZXQudHlwZXNbaWRdLCByZXN1bHQgPSB0eXBlLm5hbWU7CiAgICAgICAgICBpZiAoL1xXLy50ZXN0KHJlc3VsdCkgJiYgIXR5cGUuaXNFcnJvcikKICAgICAgICAgICAgICByZXN1bHQgPSBKU09OLnN0cmluZ2lmeShyZXN1bHQpOwogICAgICAgICAgaW5kZXggKz0gNDsKICAgICAgICAgIGlmIChlbmRJbmRleCA9PSBpbmRleCkKICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgbGV0IGNoaWxkcmVuID0gW107CiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmRJbmRleCkgewogICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5jaGlsZFN0cmluZyhpbmRleCkpOwogICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5idWZmZXJbaW5kZXggKyAzXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXN1bHQgKyAiKCIgKyBjaGlsZHJlbi5qb2luKCIsIikgKyAiKSI7CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBmaW5kQ2hpbGQoc3RhcnRJbmRleCwgZW5kSW5kZXgsIGRpciwgcG9zLCBzaWRlKSB7CiAgICAgICAgICBsZXQgeyBidWZmZXIgfSA9IHRoaXMsIHBpY2sgPSAtMTsKICAgICAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpICE9IGVuZEluZGV4OyBpID0gYnVmZmVyW2kgKyAzXSkgewogICAgICAgICAgICAgIGlmIChjaGVja1NpZGUoc2lkZSwgcG9zLCBidWZmZXJbaSArIDFdLCBidWZmZXJbaSArIDJdKSkgewogICAgICAgICAgICAgICAgICBwaWNrID0gaTsKICAgICAgICAgICAgICAgICAgaWYgKGRpciA+IDApCiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcGljazsKICAgICAgfQogICAgICAvLy8gQGludGVybmFsCiAgICAgIHNsaWNlKHN0YXJ0SSwgZW5kSSwgZnJvbSwgdG8pIHsKICAgICAgICAgIGxldCBiID0gdGhpcy5idWZmZXI7CiAgICAgICAgICBsZXQgY29weSA9IG5ldyBVaW50MTZBcnJheShlbmRJIC0gc3RhcnRJKTsKICAgICAgICAgIGZvciAobGV0IGkgPSBzdGFydEksIGogPSAwOyBpIDwgZW5kSTspIHsKICAgICAgICAgICAgICBjb3B5W2orK10gPSBiW2krK107CiAgICAgICAgICAgICAgY29weVtqKytdID0gYltpKytdIC0gZnJvbTsKICAgICAgICAgICAgICBjb3B5W2orK10gPSBiW2krK10gLSBmcm9tOwogICAgICAgICAgICAgIGNvcHlbaisrXSA9IGJbaSsrXSAtIHN0YXJ0STsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBuZXcgVHJlZUJ1ZmZlcihjb3B5LCB0byAtIGZyb20sIHRoaXMuc2V0KTsKICAgICAgfQogIH0KICBmdW5jdGlvbiBjaGVja1NpZGUoc2lkZSwgcG9zLCBmcm9tLCB0bykgewogICAgICBzd2l0Y2ggKHNpZGUpIHsKICAgICAgICAgIGNhc2UgLTIgLyogQmVmb3JlICovOiByZXR1cm4gZnJvbSA8IHBvczsKICAgICAgICAgIGNhc2UgLTEgLyogQXRPckJlZm9yZSAqLzogcmV0dXJuIHRvID49IHBvcyAmJiBmcm9tIDwgcG9zOwogICAgICAgICAgY2FzZSAwIC8qIEFyb3VuZCAqLzogcmV0dXJuIGZyb20gPCBwb3MgJiYgdG8gPiBwb3M7CiAgICAgICAgICBjYXNlIDEgLyogQXRPckFmdGVyICovOiByZXR1cm4gZnJvbSA8PSBwb3MgJiYgdG8gPiBwb3M7CiAgICAgICAgICBjYXNlIDIgLyogQWZ0ZXIgKi86IHJldHVybiB0byA+IHBvczsKICAgICAgICAgIGNhc2UgNCAvKiBEb250Q2FyZSAqLzogcmV0dXJuIHRydWU7CiAgICAgIH0KICB9CiAgZnVuY3Rpb24gZW50ZXJVbmZpbmlzaGVkTm9kZXNCZWZvcmUobm9kZSwgcG9zKSB7CiAgICAgIGxldCBzY2FuID0gbm9kZS5jaGlsZEJlZm9yZShwb3MpOwogICAgICB3aGlsZSAoc2NhbikgewogICAgICAgICAgbGV0IGxhc3QgPSBzY2FuLmxhc3RDaGlsZDsKICAgICAgICAgIGlmICghbGFzdCB8fCBsYXN0LnRvICE9IHNjYW4udG8pCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBpZiAobGFzdC50eXBlLmlzRXJyb3IgJiYgbGFzdC5mcm9tID09IGxhc3QudG8pIHsKICAgICAgICAgICAgICBub2RlID0gc2NhbjsKICAgICAgICAgICAgICBzY2FuID0gbGFzdC5wcmV2U2libGluZzsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHNjYW4gPSBsYXN0OwogICAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBub2RlOwogIH0KICBmdW5jdGlvbiByZXNvbHZlTm9kZShub2RlLCBwb3MsIHNpZGUsIG92ZXJsYXlzKSB7CiAgICAgIHZhciBfYTsKICAgICAgLy8gTW92ZSB1cCB0byBhIG5vZGUgdGhhdCBhY3R1YWxseSBob2xkcyB0aGUgcG9zaXRpb24sIGlmIHBvc3NpYmxlCiAgICAgIHdoaWxlIChub2RlLmZyb20gPT0gbm9kZS50byB8fAogICAgICAgICAgKHNpZGUgPCAxID8gbm9kZS5mcm9tID49IHBvcyA6IG5vZGUuZnJvbSA+IHBvcykgfHwKICAgICAgICAgIChzaWRlID4gLTEgPyBub2RlLnRvIDw9IHBvcyA6IG5vZGUudG8gPCBwb3MpKSB7CiAgICAgICAgICBsZXQgcGFyZW50ID0gIW92ZXJsYXlzICYmIG5vZGUgaW5zdGFuY2VvZiBUcmVlTm9kZSAmJiBub2RlLmluZGV4IDwgMCA/IG51bGwgOiBub2RlLnBhcmVudDsKICAgICAgICAgIGlmICghcGFyZW50KQogICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgbm9kZSA9IHBhcmVudDsKICAgICAgfQogICAgICBsZXQgbW9kZSA9IG92ZXJsYXlzID8gMCA6IEl0ZXJNb2RlLklnbm9yZU92ZXJsYXlzOwogICAgICAvLyBNdXN0IGdvIHVwIG91dCBvZiBvdmVybGF5cyB3aGVuIHRob3NlIGRvIG5vdCBvdmVybGFwIHdpdGggcG9zCiAgICAgIGlmIChvdmVybGF5cykKICAgICAgICAgIGZvciAobGV0IHNjYW4gPSBub2RlLCBwYXJlbnQgPSBzY2FuLnBhcmVudDsgcGFyZW50OyBzY2FuID0gcGFyZW50LCBwYXJlbnQgPSBzY2FuLnBhcmVudCkgewogICAgICAgICAgICAgIGlmIChzY2FuIGluc3RhbmNlb2YgVHJlZU5vZGUgJiYgc2Nhbi5pbmRleCA8IDAgJiYgKChfYSA9IHBhcmVudC5lbnRlcihwb3MsIHNpZGUsIG1vZGUpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZnJvbSkgIT0gc2Nhbi5mcm9tKQogICAgICAgICAgICAgICAgICBub2RlID0gcGFyZW50OwogICAgICAgICAgfQogICAgICBmb3IgKDs7KSB7CiAgICAgICAgICBsZXQgaW5uZXIgPSBub2RlLmVudGVyKHBvcywgc2lkZSwgbW9kZSk7CiAgICAgICAgICBpZiAoIWlubmVyKQogICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgbm9kZSA9IGlubmVyOwogICAgICB9CiAgfQogIGNsYXNzIFRyZWVOb2RlIHsKICAgICAgY29uc3RydWN0b3IoX3RyZWUsIGZyb20sIAogICAgICAvLyBJbmRleCBpbiBwYXJlbnQgbm9kZSwgc2V0IHRvIC0xIGlmIHRoZSBub2RlIGlzIG5vdCBhIGRpcmVjdCBjaGlsZCBvZiBfcGFyZW50Lm5vZGUgKG92ZXJsYXkpCiAgICAgIGluZGV4LCBfcGFyZW50KSB7CiAgICAgICAgICB0aGlzLl90cmVlID0gX3RyZWU7CiAgICAgICAgICB0aGlzLmZyb20gPSBmcm9tOwogICAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4OwogICAgICAgICAgdGhpcy5fcGFyZW50ID0gX3BhcmVudDsKICAgICAgfQogICAgICBnZXQgdHlwZSgpIHsgcmV0dXJuIHRoaXMuX3RyZWUudHlwZTsgfQogICAgICBnZXQgbmFtZSgpIHsgcmV0dXJuIHRoaXMuX3RyZWUudHlwZS5uYW1lOyB9CiAgICAgIGdldCB0bygpIHsgcmV0dXJuIHRoaXMuZnJvbSArIHRoaXMuX3RyZWUubGVuZ3RoOyB9CiAgICAgIG5leHRDaGlsZChpLCBkaXIsIHBvcywgc2lkZSwgbW9kZSA9IDApIHsKICAgICAgICAgIGZvciAobGV0IHBhcmVudCA9IHRoaXM7OykgewogICAgICAgICAgICAgIGZvciAobGV0IHsgY2hpbGRyZW4sIHBvc2l0aW9ucyB9ID0gcGFyZW50Ll90cmVlLCBlID0gZGlyID4gMCA/IGNoaWxkcmVuLmxlbmd0aCA6IC0xOyBpICE9IGU7IGkgKz0gZGlyKSB7CiAgICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gY2hpbGRyZW5baV0sIHN0YXJ0ID0gcG9zaXRpb25zW2ldICsgcGFyZW50LmZyb207CiAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tTaWRlKHNpZGUsIHBvcywgc3RhcnQsIHN0YXJ0ICsgbmV4dC5sZW5ndGgpKQogICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgIGlmIChuZXh0IGluc3RhbmNlb2YgVHJlZUJ1ZmZlcikgewogICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGUgJiBJdGVyTW9kZS5FeGNsdWRlQnVmZmVycykKICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IG5leHQuZmluZENoaWxkKDAsIG5leHQuYnVmZmVyLmxlbmd0aCwgZGlyLCBwb3MgLSBzdGFydCwgc2lkZSk7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlck5vZGUobmV3IEJ1ZmZlckNvbnRleHQocGFyZW50LCBuZXh0LCBpLCBzdGFydCksIG51bGwsIGluZGV4KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBlbHNlIGlmICgobW9kZSAmIEl0ZXJNb2RlLkluY2x1ZGVBbm9ueW1vdXMpIHx8ICghbmV4dC50eXBlLmlzQW5vbnltb3VzIHx8IGhhc0NoaWxkKG5leHQpKSkgewogICAgICAgICAgICAgICAgICAgICAgbGV0IG1vdW50ZWQ7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoIShtb2RlICYgSXRlck1vZGUuSWdub3JlTW91bnRzKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQucHJvcHMgJiYgKG1vdW50ZWQgPSBuZXh0LnByb3AoTm9kZVByb3AubW91bnRlZCkpICYmICFtb3VudGVkLm92ZXJsYXkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmVlTm9kZShtb3VudGVkLnRyZWUsIHN0YXJ0LCBpLCBwYXJlbnQpOwogICAgICAgICAgICAgICAgICAgICAgbGV0IGlubmVyID0gbmV3IFRyZWVOb2RlKG5leHQsIHN0YXJ0LCBpLCBwYXJlbnQpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChtb2RlICYgSXRlck1vZGUuSW5jbHVkZUFub255bW91cykgfHwgIWlubmVyLnR5cGUuaXNBbm9ueW1vdXMgPyBpbm5lcgogICAgICAgICAgICAgICAgICAgICAgICAgIDogaW5uZXIubmV4dENoaWxkKGRpciA8IDAgPyBuZXh0LmNoaWxkcmVuLmxlbmd0aCAtIDEgOiAwLCBkaXIsIHBvcywgc2lkZSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKChtb2RlICYgSXRlck1vZGUuSW5jbHVkZUFub255bW91cykgfHwgIXBhcmVudC50eXBlLmlzQW5vbnltb3VzKQogICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICBpZiAocGFyZW50LmluZGV4ID49IDApCiAgICAgICAgICAgICAgICAgIGkgPSBwYXJlbnQuaW5kZXggKyBkaXI7CiAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICBpID0gZGlyIDwgMCA/IC0xIDogcGFyZW50Ll9wYXJlbnQuX3RyZWUuY2hpbGRyZW4ubGVuZ3RoOwogICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5fcGFyZW50OwogICAgICAgICAgICAgIGlmICghcGFyZW50KQogICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgfQogICAgICBnZXQgZmlyc3RDaGlsZCgpIHsgcmV0dXJuIHRoaXMubmV4dENoaWxkKDAsIDEsIDAsIDQgLyogRG9udENhcmUgKi8pOyB9CiAgICAgIGdldCBsYXN0Q2hpbGQoKSB7IHJldHVybiB0aGlzLm5leHRDaGlsZCh0aGlzLl90cmVlLmNoaWxkcmVuLmxlbmd0aCAtIDEsIC0xLCAwLCA0IC8qIERvbnRDYXJlICovKTsgfQogICAgICBjaGlsZEFmdGVyKHBvcykgeyByZXR1cm4gdGhpcy5uZXh0Q2hpbGQoMCwgMSwgcG9zLCAyIC8qIEFmdGVyICovKTsgfQogICAgICBjaGlsZEJlZm9yZShwb3MpIHsgcmV0dXJuIHRoaXMubmV4dENoaWxkKHRoaXMuX3RyZWUuY2hpbGRyZW4ubGVuZ3RoIC0gMSwgLTEsIHBvcywgLTIgLyogQmVmb3JlICovKTsgfQogICAgICBlbnRlcihwb3MsIHNpZGUsIG1vZGUgPSAwKSB7CiAgICAgICAgICBsZXQgbW91bnRlZDsKICAgICAgICAgIGlmICghKG1vZGUgJiBJdGVyTW9kZS5JZ25vcmVPdmVybGF5cykgJiYgKG1vdW50ZWQgPSB0aGlzLl90cmVlLnByb3AoTm9kZVByb3AubW91bnRlZCkpICYmIG1vdW50ZWQub3ZlcmxheSkgewogICAgICAgICAgICAgIGxldCByUG9zID0gcG9zIC0gdGhpcy5mcm9tOwogICAgICAgICAgICAgIGZvciAobGV0IHsgZnJvbSwgdG8gfSBvZiBtb3VudGVkLm92ZXJsYXkpIHsKICAgICAgICAgICAgICAgICAgaWYgKChzaWRlID4gMCA/IGZyb20gPD0gclBvcyA6IGZyb20gPCByUG9zKSAmJgogICAgICAgICAgICAgICAgICAgICAgKHNpZGUgPCAwID8gdG8gPj0gclBvcyA6IHRvID4gclBvcykpCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRyZWVOb2RlKG1vdW50ZWQudHJlZSwgbW91bnRlZC5vdmVybGF5WzBdLmZyb20gKyB0aGlzLmZyb20sIC0xLCB0aGlzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0Q2hpbGQoMCwgMSwgcG9zLCBzaWRlLCBtb2RlKTsKICAgICAgfQogICAgICBuZXh0U2lnbmlmaWNhbnRQYXJlbnQoKSB7CiAgICAgICAgICBsZXQgdmFsID0gdGhpczsKICAgICAgICAgIHdoaWxlICh2YWwudHlwZS5pc0Fub255bW91cyAmJiB2YWwuX3BhcmVudCkKICAgICAgICAgICAgICB2YWwgPSB2YWwuX3BhcmVudDsKICAgICAgICAgIHJldHVybiB2YWw7CiAgICAgIH0KICAgICAgZ2V0IHBhcmVudCgpIHsKICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgPyB0aGlzLl9wYXJlbnQubmV4dFNpZ25pZmljYW50UGFyZW50KCkgOiBudWxsOwogICAgICB9CiAgICAgIGdldCBuZXh0U2libGluZygpIHsKICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgJiYgdGhpcy5pbmRleCA+PSAwID8gdGhpcy5fcGFyZW50Lm5leHRDaGlsZCh0aGlzLmluZGV4ICsgMSwgMSwgMCwgNCAvKiBEb250Q2FyZSAqLykgOiBudWxsOwogICAgICB9CiAgICAgIGdldCBwcmV2U2libGluZygpIHsKICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgJiYgdGhpcy5pbmRleCA+PSAwID8gdGhpcy5fcGFyZW50Lm5leHRDaGlsZCh0aGlzLmluZGV4IC0gMSwgLTEsIDAsIDQgLyogRG9udENhcmUgKi8pIDogbnVsbDsKICAgICAgfQogICAgICBjdXJzb3IobW9kZSA9IDApIHsgcmV0dXJuIG5ldyBUcmVlQ3Vyc29yKHRoaXMsIG1vZGUpOyB9CiAgICAgIGdldCB0cmVlKCkgeyByZXR1cm4gdGhpcy5fdHJlZTsgfQogICAgICB0b1RyZWUoKSB7IHJldHVybiB0aGlzLl90cmVlOyB9CiAgICAgIHJlc29sdmUocG9zLCBzaWRlID0gMCkgewogICAgICAgICAgcmV0dXJuIHJlc29sdmVOb2RlKHRoaXMsIHBvcywgc2lkZSwgZmFsc2UpOwogICAgICB9CiAgICAgIHJlc29sdmVJbm5lcihwb3MsIHNpZGUgPSAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzb2x2ZU5vZGUodGhpcywgcG9zLCBzaWRlLCB0cnVlKTsKICAgICAgfQogICAgICBlbnRlclVuZmluaXNoZWROb2Rlc0JlZm9yZShwb3MpIHsgcmV0dXJuIGVudGVyVW5maW5pc2hlZE5vZGVzQmVmb3JlKHRoaXMsIHBvcyk7IH0KICAgICAgZ2V0Q2hpbGQodHlwZSwgYmVmb3JlID0gbnVsbCwgYWZ0ZXIgPSBudWxsKSB7CiAgICAgICAgICBsZXQgciA9IGdldENoaWxkcmVuKHRoaXMsIHR5cGUsIGJlZm9yZSwgYWZ0ZXIpOwogICAgICAgICAgcmV0dXJuIHIubGVuZ3RoID8gclswXSA6IG51bGw7CiAgICAgIH0KICAgICAgZ2V0Q2hpbGRyZW4odHlwZSwgYmVmb3JlID0gbnVsbCwgYWZ0ZXIgPSBudWxsKSB7CiAgICAgICAgICByZXR1cm4gZ2V0Q2hpbGRyZW4odGhpcywgdHlwZSwgYmVmb3JlLCBhZnRlcik7CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICB0b1N0cmluZygpIHsgcmV0dXJuIHRoaXMuX3RyZWUudG9TdHJpbmcoKTsgfQogICAgICBnZXQgbm9kZSgpIHsgcmV0dXJuIHRoaXM7IH0KICAgICAgbWF0Y2hDb250ZXh0KGNvbnRleHQpIHsgcmV0dXJuIG1hdGNoTm9kZUNvbnRleHQodGhpcywgY29udGV4dCk7IH0KICB9CiAgZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obm9kZSwgdHlwZSwgYmVmb3JlLCBhZnRlcikgewogICAgICBsZXQgY3VyID0gbm9kZS5jdXJzb3IoKSwgcmVzdWx0ID0gW107CiAgICAgIGlmICghY3VyLmZpcnN0Q2hpbGQoKSkKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIGlmIChiZWZvcmUgIT0gbnVsbCkKICAgICAgICAgIHdoaWxlICghY3VyLnR5cGUuaXMoYmVmb3JlKSkKICAgICAgICAgICAgICBpZiAoIWN1ci5uZXh0U2libGluZygpKQogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICBmb3IgKDs7KSB7CiAgICAgICAgICBpZiAoYWZ0ZXIgIT0gbnVsbCAmJiBjdXIudHlwZS5pcyhhZnRlcikpCiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgIGlmIChjdXIudHlwZS5pcyh0eXBlKSkKICAgICAgICAgICAgICByZXN1bHQucHVzaChjdXIubm9kZSk7CiAgICAgICAgICBpZiAoIWN1ci5uZXh0U2libGluZygpKQogICAgICAgICAgICAgIHJldHVybiBhZnRlciA9PSBudWxsID8gcmVzdWx0IDogW107CiAgICAgIH0KICB9CiAgZnVuY3Rpb24gbWF0Y2hOb2RlQ29udGV4dChub2RlLCBjb250ZXh0LCBpID0gY29udGV4dC5sZW5ndGggLSAxKSB7CiAgICAgIGZvciAobGV0IHAgPSBub2RlLnBhcmVudDsgaSA+PSAwOyBwID0gcC5wYXJlbnQpIHsKICAgICAgICAgIGlmICghcCkKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICBpZiAoIXAudHlwZS5pc0Fub255bW91cykgewogICAgICAgICAgICAgIGlmIChjb250ZXh0W2ldICYmIGNvbnRleHRbaV0gIT0gcC5uYW1lKQogICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgaS0tOwogICAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogIH0KICBjbGFzcyBCdWZmZXJDb250ZXh0IHsKICAgICAgY29uc3RydWN0b3IocGFyZW50LCBidWZmZXIsIGluZGV4LCBzdGFydCkgewogICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7CiAgICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjsKICAgICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDsKICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDsKICAgICAgfQogIH0KICBjbGFzcyBCdWZmZXJOb2RlIHsKICAgICAgY29uc3RydWN0b3IoY29udGV4dCwgX3BhcmVudCwgaW5kZXgpIHsKICAgICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7CiAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBfcGFyZW50OwogICAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4OwogICAgICAgICAgdGhpcy50eXBlID0gY29udGV4dC5idWZmZXIuc2V0LnR5cGVzW2NvbnRleHQuYnVmZmVyLmJ1ZmZlcltpbmRleF1dOwogICAgICB9CiAgICAgIGdldCBuYW1lKCkgeyByZXR1cm4gdGhpcy50eXBlLm5hbWU7IH0KICAgICAgZ2V0IGZyb20oKSB7IHJldHVybiB0aGlzLmNvbnRleHQuc3RhcnQgKyB0aGlzLmNvbnRleHQuYnVmZmVyLmJ1ZmZlclt0aGlzLmluZGV4ICsgMV07IH0KICAgICAgZ2V0IHRvKCkgeyByZXR1cm4gdGhpcy5jb250ZXh0LnN0YXJ0ICsgdGhpcy5jb250ZXh0LmJ1ZmZlci5idWZmZXJbdGhpcy5pbmRleCArIDJdOyB9CiAgICAgIGNoaWxkKGRpciwgcG9zLCBzaWRlKSB7CiAgICAgICAgICBsZXQgeyBidWZmZXIgfSA9IHRoaXMuY29udGV4dDsKICAgICAgICAgIGxldCBpbmRleCA9IGJ1ZmZlci5maW5kQ2hpbGQodGhpcy5pbmRleCArIDQsIGJ1ZmZlci5idWZmZXJbdGhpcy5pbmRleCArIDNdLCBkaXIsIHBvcyAtIHRoaXMuY29udGV4dC5zdGFydCwgc2lkZSk7CiAgICAgICAgICByZXR1cm4gaW5kZXggPCAwID8gbnVsbCA6IG5ldyBCdWZmZXJOb2RlKHRoaXMuY29udGV4dCwgdGhpcywgaW5kZXgpOwogICAgICB9CiAgICAgIGdldCBmaXJzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5jaGlsZCgxLCAwLCA0IC8qIERvbnRDYXJlICovKTsgfQogICAgICBnZXQgbGFzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5jaGlsZCgtMSwgMCwgNCAvKiBEb250Q2FyZSAqLyk7IH0KICAgICAgY2hpbGRBZnRlcihwb3MpIHsgcmV0dXJuIHRoaXMuY2hpbGQoMSwgcG9zLCAyIC8qIEFmdGVyICovKTsgfQogICAgICBjaGlsZEJlZm9yZShwb3MpIHsgcmV0dXJuIHRoaXMuY2hpbGQoLTEsIHBvcywgLTIgLyogQmVmb3JlICovKTsgfQogICAgICBlbnRlcihwb3MsIHNpZGUsIG1vZGUgPSAwKSB7CiAgICAgICAgICBpZiAobW9kZSAmIEl0ZXJNb2RlLkV4Y2x1ZGVCdWZmZXJzKQogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgbGV0IHsgYnVmZmVyIH0gPSB0aGlzLmNvbnRleHQ7CiAgICAgICAgICBsZXQgaW5kZXggPSBidWZmZXIuZmluZENoaWxkKHRoaXMuaW5kZXggKyA0LCBidWZmZXIuYnVmZmVyW3RoaXMuaW5kZXggKyAzXSwgc2lkZSA+IDAgPyAxIDogLTEsIHBvcyAtIHRoaXMuY29udGV4dC5zdGFydCwgc2lkZSk7CiAgICAgICAgICByZXR1cm4gaW5kZXggPCAwID8gbnVsbCA6IG5ldyBCdWZmZXJOb2RlKHRoaXMuY29udGV4dCwgdGhpcywgaW5kZXgpOwogICAgICB9CiAgICAgIGdldCBwYXJlbnQoKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50IHx8IHRoaXMuY29udGV4dC5wYXJlbnQubmV4dFNpZ25pZmljYW50UGFyZW50KCk7CiAgICAgIH0KICAgICAgZXh0ZXJuYWxTaWJsaW5nKGRpcikgewogICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudCA/IG51bGwgOiB0aGlzLmNvbnRleHQucGFyZW50Lm5leHRDaGlsZCh0aGlzLmNvbnRleHQuaW5kZXggKyBkaXIsIGRpciwgMCwgNCAvKiBEb250Q2FyZSAqLyk7CiAgICAgIH0KICAgICAgZ2V0IG5leHRTaWJsaW5nKCkgewogICAgICAgICAgbGV0IHsgYnVmZmVyIH0gPSB0aGlzLmNvbnRleHQ7CiAgICAgICAgICBsZXQgYWZ0ZXIgPSBidWZmZXIuYnVmZmVyW3RoaXMuaW5kZXggKyAzXTsKICAgICAgICAgIGlmIChhZnRlciA8ICh0aGlzLl9wYXJlbnQgPyBidWZmZXIuYnVmZmVyW3RoaXMuX3BhcmVudC5pbmRleCArIDNdIDogYnVmZmVyLmJ1ZmZlci5sZW5ndGgpKQogICAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyTm9kZSh0aGlzLmNvbnRleHQsIHRoaXMuX3BhcmVudCwgYWZ0ZXIpOwogICAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZXJuYWxTaWJsaW5nKDEpOwogICAgICB9CiAgICAgIGdldCBwcmV2U2libGluZygpIHsKICAgICAgICAgIGxldCB7IGJ1ZmZlciB9ID0gdGhpcy5jb250ZXh0OwogICAgICAgICAgbGV0IHBhcmVudFN0YXJ0ID0gdGhpcy5fcGFyZW50ID8gdGhpcy5fcGFyZW50LmluZGV4ICsgNCA6IDA7CiAgICAgICAgICBpZiAodGhpcy5pbmRleCA9PSBwYXJlbnRTdGFydCkKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5leHRlcm5hbFNpYmxpbmcoLTEpOwogICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJOb2RlKHRoaXMuY29udGV4dCwgdGhpcy5fcGFyZW50LCBidWZmZXIuZmluZENoaWxkKHBhcmVudFN0YXJ0LCB0aGlzLmluZGV4LCAtMSwgMCwgNCAvKiBEb250Q2FyZSAqLykpOwogICAgICB9CiAgICAgIGN1cnNvcihtb2RlID0gMCkgeyByZXR1cm4gbmV3IFRyZWVDdXJzb3IodGhpcywgbW9kZSk7IH0KICAgICAgZ2V0IHRyZWUoKSB7IHJldHVybiBudWxsOyB9CiAgICAgIHRvVHJlZSgpIHsKICAgICAgICAgIGxldCBjaGlsZHJlbiA9IFtdLCBwb3NpdGlvbnMgPSBbXTsKICAgICAgICAgIGxldCB7IGJ1ZmZlciB9ID0gdGhpcy5jb250ZXh0OwogICAgICAgICAgbGV0IHN0YXJ0SSA9IHRoaXMuaW5kZXggKyA0LCBlbmRJID0gYnVmZmVyLmJ1ZmZlclt0aGlzLmluZGV4ICsgM107CiAgICAgICAgICBpZiAoZW5kSSA+IHN0YXJ0SSkgewogICAgICAgICAgICAgIGxldCBmcm9tID0gYnVmZmVyLmJ1ZmZlclt0aGlzLmluZGV4ICsgMV0sIHRvID0gYnVmZmVyLmJ1ZmZlclt0aGlzLmluZGV4ICsgMl07CiAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChidWZmZXIuc2xpY2Uoc3RhcnRJLCBlbmRJLCBmcm9tLCB0bykpOwogICAgICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKDApOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG5ldyBUcmVlKHRoaXMudHlwZSwgY2hpbGRyZW4sIHBvc2l0aW9ucywgdGhpcy50byAtIHRoaXMuZnJvbSk7CiAgICAgIH0KICAgICAgcmVzb2x2ZShwb3MsIHNpZGUgPSAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzb2x2ZU5vZGUodGhpcywgcG9zLCBzaWRlLCBmYWxzZSk7CiAgICAgIH0KICAgICAgcmVzb2x2ZUlubmVyKHBvcywgc2lkZSA9IDApIHsKICAgICAgICAgIHJldHVybiByZXNvbHZlTm9kZSh0aGlzLCBwb3MsIHNpZGUsIHRydWUpOwogICAgICB9CiAgICAgIGVudGVyVW5maW5pc2hlZE5vZGVzQmVmb3JlKHBvcykgeyByZXR1cm4gZW50ZXJVbmZpbmlzaGVkTm9kZXNCZWZvcmUodGhpcywgcG9zKTsgfQogICAgICAvLy8gQGludGVybmFsCiAgICAgIHRvU3RyaW5nKCkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmJ1ZmZlci5jaGlsZFN0cmluZyh0aGlzLmluZGV4KTsgfQogICAgICBnZXRDaGlsZCh0eXBlLCBiZWZvcmUgPSBudWxsLCBhZnRlciA9IG51bGwpIHsKICAgICAgICAgIGxldCByID0gZ2V0Q2hpbGRyZW4odGhpcywgdHlwZSwgYmVmb3JlLCBhZnRlcik7CiAgICAgICAgICByZXR1cm4gci5sZW5ndGggPyByWzBdIDogbnVsbDsKICAgICAgfQogICAgICBnZXRDaGlsZHJlbih0eXBlLCBiZWZvcmUgPSBudWxsLCBhZnRlciA9IG51bGwpIHsKICAgICAgICAgIHJldHVybiBnZXRDaGlsZHJlbih0aGlzLCB0eXBlLCBiZWZvcmUsIGFmdGVyKTsKICAgICAgfQogICAgICBnZXQgbm9kZSgpIHsgcmV0dXJuIHRoaXM7IH0KICAgICAgbWF0Y2hDb250ZXh0KGNvbnRleHQpIHsgcmV0dXJuIG1hdGNoTm9kZUNvbnRleHQodGhpcywgY29udGV4dCk7IH0KICB9CiAgLy8vIEEgdHJlZSBjdXJzb3Igb2JqZWN0IGZvY3VzZXMgb24gYSBnaXZlbiBub2RlIGluIGEgc3ludGF4IHRyZWUsIGFuZAogIC8vLyBhbGxvd3MgeW91IHRvIG1vdmUgdG8gYWRqYWNlbnQgbm9kZXMuCiAgY2xhc3MgVHJlZUN1cnNvciB7CiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgY29uc3RydWN0b3Iobm9kZSwgCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgbW9kZSA9IDApIHsKICAgICAgICAgIHRoaXMubW9kZSA9IG1vZGU7CiAgICAgICAgICAvLy8gQGludGVybmFsCiAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG51bGw7CiAgICAgICAgICB0aGlzLnN0YWNrID0gW107CiAgICAgICAgICAvLy8gQGludGVybmFsCiAgICAgICAgICB0aGlzLmluZGV4ID0gMDsKICAgICAgICAgIHRoaXMuYnVmZmVyTm9kZSA9IG51bGw7CiAgICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFRyZWVOb2RlKSB7CiAgICAgICAgICAgICAgdGhpcy55aWVsZE5vZGUobm9kZSk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLl90cmVlID0gbm9kZS5jb250ZXh0LnBhcmVudDsKICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5vZGUuY29udGV4dDsKICAgICAgICAgICAgICBmb3IgKGxldCBuID0gbm9kZS5fcGFyZW50OyBuOyBuID0gbi5fcGFyZW50KQogICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnVuc2hpZnQobi5pbmRleCk7CiAgICAgICAgICAgICAgdGhpcy5idWZmZXJOb2RlID0gbm9kZTsKICAgICAgICAgICAgICB0aGlzLnlpZWxkQnVmKG5vZGUuaW5kZXgpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIC8vLyBTaG9ydGhhbmQgZm9yIGAudHlwZS5uYW1lYC4KICAgICAgZ2V0IG5hbWUoKSB7IHJldHVybiB0aGlzLnR5cGUubmFtZTsgfQogICAgICB5aWVsZE5vZGUobm9kZSkgewogICAgICAgICAgaWYgKCFub2RlKQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIHRoaXMuX3RyZWUgPSBub2RlOwogICAgICAgICAgdGhpcy50eXBlID0gbm9kZS50eXBlOwogICAgICAgICAgdGhpcy5mcm9tID0gbm9kZS5mcm9tOwogICAgICAgICAgdGhpcy50byA9IG5vZGUudG87CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICB5aWVsZEJ1ZihpbmRleCwgdHlwZSkgewogICAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4OwogICAgICAgICAgbGV0IHsgc3RhcnQsIGJ1ZmZlciB9ID0gdGhpcy5idWZmZXI7CiAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlIHx8IGJ1ZmZlci5zZXQudHlwZXNbYnVmZmVyLmJ1ZmZlcltpbmRleF1dOwogICAgICAgICAgdGhpcy5mcm9tID0gc3RhcnQgKyBidWZmZXIuYnVmZmVyW2luZGV4ICsgMV07CiAgICAgICAgICB0aGlzLnRvID0gc3RhcnQgKyBidWZmZXIuYnVmZmVyW2luZGV4ICsgMl07CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICB5aWVsZChub2RlKSB7CiAgICAgICAgICBpZiAoIW5vZGUpCiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBUcmVlTm9kZSkgewogICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy55aWVsZE5vZGUobm9kZSk7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5vZGUuY29udGV4dDsKICAgICAgICAgIHJldHVybiB0aGlzLnlpZWxkQnVmKG5vZGUuaW5kZXgsIG5vZGUudHlwZSk7CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICB0b1N0cmluZygpIHsKICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlciA/IHRoaXMuYnVmZmVyLmJ1ZmZlci5jaGlsZFN0cmluZyh0aGlzLmluZGV4KSA6IHRoaXMuX3RyZWUudG9TdHJpbmcoKTsKICAgICAgfQogICAgICAvLy8gQGludGVybmFsCiAgICAgIGVudGVyQ2hpbGQoZGlyLCBwb3MsIHNpZGUpIHsKICAgICAgICAgIGlmICghdGhpcy5idWZmZXIpCiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueWllbGQodGhpcy5fdHJlZS5uZXh0Q2hpbGQoZGlyIDwgMCA/IHRoaXMuX3RyZWUuX3RyZWUuY2hpbGRyZW4ubGVuZ3RoIC0gMSA6IDAsIGRpciwgcG9zLCBzaWRlLCB0aGlzLm1vZGUpKTsKICAgICAgICAgIGxldCB7IGJ1ZmZlciB9ID0gdGhpcy5idWZmZXI7CiAgICAgICAgICBsZXQgaW5kZXggPSBidWZmZXIuZmluZENoaWxkKHRoaXMuaW5kZXggKyA0LCBidWZmZXIuYnVmZmVyW3RoaXMuaW5kZXggKyAzXSwgZGlyLCBwb3MgLSB0aGlzLmJ1ZmZlci5zdGFydCwgc2lkZSk7CiAgICAgICAgICBpZiAoaW5kZXggPCAwKQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh0aGlzLmluZGV4KTsKICAgICAgICAgIHJldHVybiB0aGlzLnlpZWxkQnVmKGluZGV4KTsKICAgICAgfQogICAgICAvLy8gTW92ZSB0aGUgY3Vyc29yIHRvIHRoaXMgbm9kZSdzIGZpcnN0IGNoaWxkLiBXaGVuIHRoaXMgcmV0dXJucwogICAgICAvLy8gZmFsc2UsIHRoZSBub2RlIGhhcyBubyBjaGlsZCwgYW5kIHRoZSBjdXJzb3IgaGFzIG5vdCBiZWVuIG1vdmVkLgogICAgICBmaXJzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5lbnRlckNoaWxkKDEsIDAsIDQgLyogRG9udENhcmUgKi8pOyB9CiAgICAgIC8vLyBNb3ZlIHRoZSBjdXJzb3IgdG8gdGhpcyBub2RlJ3MgbGFzdCBjaGlsZC4KICAgICAgbGFzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5lbnRlckNoaWxkKC0xLCAwLCA0IC8qIERvbnRDYXJlICovKTsgfQogICAgICAvLy8gTW92ZSB0aGUgY3Vyc29yIHRvIHRoZSBmaXJzdCBjaGlsZCB0aGF0IGVuZHMgYWZ0ZXIgYHBvc2AuCiAgICAgIGNoaWxkQWZ0ZXIocG9zKSB7IHJldHVybiB0aGlzLmVudGVyQ2hpbGQoMSwgcG9zLCAyIC8qIEFmdGVyICovKTsgfQogICAgICAvLy8gTW92ZSB0byB0aGUgbGFzdCBjaGlsZCB0aGF0IHN0YXJ0cyBiZWZvcmUgYHBvc2AuCiAgICAgIGNoaWxkQmVmb3JlKHBvcykgeyByZXR1cm4gdGhpcy5lbnRlckNoaWxkKC0xLCBwb3MsIC0yIC8qIEJlZm9yZSAqLyk7IH0KICAgICAgLy8vIE1vdmUgdGhlIGN1cnNvciB0byB0aGUgY2hpbGQgYXJvdW5kIGBwb3NgLiBJZiBzaWRlIGlzIC0xIHRoZQogICAgICAvLy8gY2hpbGQgbWF5IGVuZCBhdCB0aGF0IHBvc2l0aW9uLCB3aGVuIDEgaXQgbWF5IHN0YXJ0IHRoZXJlLiBUaGlzCiAgICAgIC8vLyB3aWxsIGFsc28gZW50ZXIgW292ZXJsYWlkXSgjY29tbW9uLk1vdW50ZWRUcmVlLm92ZXJsYXkpCiAgICAgIC8vLyBbbW91bnRlZF0oI2NvbW1vbi5Ob2RlUHJvcF5tb3VudGVkKSB0cmVlcyB1bmxlc3MgYG92ZXJsYXlzYCBpcwogICAgICAvLy8gc2V0IHRvIGZhbHNlLgogICAgICBlbnRlcihwb3MsIHNpZGUsIG1vZGUgPSB0aGlzLm1vZGUpIHsKICAgICAgICAgIGlmICghdGhpcy5idWZmZXIpCiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueWllbGQodGhpcy5fdHJlZS5lbnRlcihwb3MsIHNpZGUsIG1vZGUpKTsKICAgICAgICAgIHJldHVybiBtb2RlICYgSXRlck1vZGUuRXhjbHVkZUJ1ZmZlcnMgPyBmYWxzZSA6IHRoaXMuZW50ZXJDaGlsZCgxLCBwb3MsIHNpZGUpOwogICAgICB9CiAgICAgIC8vLyBNb3ZlIHRvIHRoZSBub2RlJ3MgcGFyZW50IG5vZGUsIGlmIHRoaXMgaXNuJ3QgdGhlIHRvcCBub2RlLgogICAgICBwYXJlbnQoKSB7CiAgICAgICAgICBpZiAoIXRoaXMuYnVmZmVyKQogICAgICAgICAgICAgIHJldHVybiB0aGlzLnlpZWxkTm9kZSgodGhpcy5tb2RlICYgSXRlck1vZGUuSW5jbHVkZUFub255bW91cykgPyB0aGlzLl90cmVlLl9wYXJlbnQgOiB0aGlzLl90cmVlLnBhcmVudCk7CiAgICAgICAgICBpZiAodGhpcy5zdGFjay5sZW5ndGgpCiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueWllbGRCdWYodGhpcy5zdGFjay5wb3AoKSk7CiAgICAgICAgICBsZXQgcGFyZW50ID0gKHRoaXMubW9kZSAmIEl0ZXJNb2RlLkluY2x1ZGVBbm9ueW1vdXMpID8gdGhpcy5idWZmZXIucGFyZW50IDogdGhpcy5idWZmZXIucGFyZW50Lm5leHRTaWduaWZpY2FudFBhcmVudCgpOwogICAgICAgICAgdGhpcy5idWZmZXIgPSBudWxsOwogICAgICAgICAgcmV0dXJuIHRoaXMueWllbGROb2RlKHBhcmVudCk7CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBzaWJsaW5nKGRpcikgewogICAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcikKICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuX3RyZWUuX3BhcmVudCA/IGZhbHNlCiAgICAgICAgICAgICAgICAgIDogdGhpcy55aWVsZCh0aGlzLl90cmVlLmluZGV4IDwgMCA/IG51bGwKICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5fdHJlZS5fcGFyZW50Lm5leHRDaGlsZCh0aGlzLl90cmVlLmluZGV4ICsgZGlyLCBkaXIsIDAsIDQgLyogRG9udENhcmUgKi8sIHRoaXMubW9kZSkpOwogICAgICAgICAgbGV0IHsgYnVmZmVyIH0gPSB0aGlzLmJ1ZmZlciwgZCA9IHRoaXMuc3RhY2subGVuZ3RoIC0gMTsKICAgICAgICAgIGlmIChkaXIgPCAwKSB7CiAgICAgICAgICAgICAgbGV0IHBhcmVudFN0YXJ0ID0gZCA8IDAgPyAwIDogdGhpcy5zdGFja1tkXSArIDQ7CiAgICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggIT0gcGFyZW50U3RhcnQpCiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnlpZWxkQnVmKGJ1ZmZlci5maW5kQ2hpbGQocGFyZW50U3RhcnQsIHRoaXMuaW5kZXgsIC0xLCAwLCA0IC8qIERvbnRDYXJlICovKSk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICBsZXQgYWZ0ZXIgPSBidWZmZXIuYnVmZmVyW3RoaXMuaW5kZXggKyAzXTsKICAgICAgICAgICAgICBpZiAoYWZ0ZXIgPCAoZCA8IDAgPyBidWZmZXIuYnVmZmVyLmxlbmd0aCA6IGJ1ZmZlci5idWZmZXJbdGhpcy5zdGFja1tkXSArIDNdKSkKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueWllbGRCdWYoYWZ0ZXIpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGQgPCAwID8gdGhpcy55aWVsZCh0aGlzLmJ1ZmZlci5wYXJlbnQubmV4dENoaWxkKHRoaXMuYnVmZmVyLmluZGV4ICsgZGlyLCBkaXIsIDAsIDQgLyogRG9udENhcmUgKi8sIHRoaXMubW9kZSkpIDogZmFsc2U7CiAgICAgIH0KICAgICAgLy8vIE1vdmUgdG8gdGhpcyBub2RlJ3MgbmV4dCBzaWJsaW5nLCBpZiBhbnkuCiAgICAgIG5leHRTaWJsaW5nKCkgeyByZXR1cm4gdGhpcy5zaWJsaW5nKDEpOyB9CiAgICAgIC8vLyBNb3ZlIHRvIHRoaXMgbm9kZSdzIHByZXZpb3VzIHNpYmxpbmcsIGlmIGFueS4KICAgICAgcHJldlNpYmxpbmcoKSB7IHJldHVybiB0aGlzLnNpYmxpbmcoLTEpOyB9CiAgICAgIGF0TGFzdE5vZGUoZGlyKSB7CiAgICAgICAgICBsZXQgaW5kZXgsIHBhcmVudCwgeyBidWZmZXIgfSA9IHRoaXM7CiAgICAgICAgICBpZiAoYnVmZmVyKSB7CiAgICAgICAgICAgICAgaWYgKGRpciA+IDApIHsKICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPCBidWZmZXIuYnVmZmVyLmJ1ZmZlci5sZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW5kZXg7IGkrKykKICAgICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXIuYnVmZmVyLmJ1ZmZlcltpICsgM10gPCB0aGlzLmluZGV4KQogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgKHsgaW5kZXgsIHBhcmVudCB9ID0gYnVmZmVyKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICh7IGluZGV4LCBfcGFyZW50OiBwYXJlbnQgfSA9IHRoaXMuX3RyZWUpOwogICAgICAgICAgfQogICAgICAgICAgZm9yICg7IHBhcmVudDsgeyBpbmRleCwgX3BhcmVudDogcGFyZW50IH0gPSBwYXJlbnQpIHsKICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkKICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGluZGV4ICsgZGlyLCBlID0gZGlyIDwgMCA/IC0xIDogcGFyZW50Ll90cmVlLmNoaWxkcmVuLmxlbmd0aDsgaSAhPSBlOyBpICs9IGRpcikgewogICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gcGFyZW50Ll90cmVlLmNoaWxkcmVuW2ldOwogICAgICAgICAgICAgICAgICAgICAgaWYgKCh0aGlzLm1vZGUgJiBJdGVyTW9kZS5JbmNsdWRlQW5vbnltb3VzKSB8fAogICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkIGluc3RhbmNlb2YgVHJlZUJ1ZmZlciB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICFjaGlsZC50eXBlLmlzQW5vbnltb3VzIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2hpbGQoY2hpbGQpKQogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgbW92ZShkaXIsIGVudGVyKSB7CiAgICAgICAgICBpZiAoZW50ZXIgJiYgdGhpcy5lbnRlckNoaWxkKGRpciwgMCwgNCAvKiBEb250Q2FyZSAqLykpCiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMuc2libGluZyhkaXIpKQogICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICBpZiAodGhpcy5hdExhc3ROb2RlKGRpcikgfHwgIXRoaXMucGFyZW50KCkpCiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgfQogICAgICAvLy8gTW92ZSB0byB0aGUgbmV4dCBub2RlIGluIGEKICAgICAgLy8vIFtwcmUtb3JkZXJdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RyZWVfdHJhdmVyc2FsI1ByZS1vcmRlcl8oTkxSKSkKICAgICAgLy8vIHRyYXZlcnNhbCwgZ29pbmcgZnJvbSBhIG5vZGUgdG8gaXRzIGZpcnN0IGNoaWxkIG9yLCBpZiB0aGUKICAgICAgLy8vIGN1cnJlbnQgbm9kZSBpcyBlbXB0eSBvciBgZW50ZXJgIGlzIGZhbHNlLCBpdHMgbmV4dCBzaWJsaW5nIG9yCiAgICAgIC8vLyB0aGUgbmV4dCBzaWJsaW5nIG9mIHRoZSBmaXJzdCBwYXJlbnQgbm9kZSB0aGF0IGhhcyBvbmUuCiAgICAgIG5leHQoZW50ZXIgPSB0cnVlKSB7IHJldHVybiB0aGlzLm1vdmUoMSwgZW50ZXIpOyB9CiAgICAgIC8vLyBNb3ZlIHRvIHRoZSBuZXh0IG5vZGUgaW4gYSBsYXN0LXRvLWZpcnN0IHByZS1vcmRlciB0cmF2ZXJhbC4gQQogICAgICAvLy8gbm9kZSBpcyBmb2xsb3dlZCBieSBpdHMgbGFzdCBjaGlsZCBvciwgaWYgaXQgaGFzIG5vbmUsIGl0cwogICAgICAvLy8gcHJldmlvdXMgc2libGluZyBvciB0aGUgcHJldmlvdXMgc2libGluZyBvZiB0aGUgZmlyc3QgcGFyZW50CiAgICAgIC8vLyBub2RlIHRoYXQgaGFzIG9uZS4KICAgICAgcHJldihlbnRlciA9IHRydWUpIHsgcmV0dXJuIHRoaXMubW92ZSgtMSwgZW50ZXIpOyB9CiAgICAgIC8vLyBNb3ZlIHRoZSBjdXJzb3IgdG8gdGhlIGlubmVybW9zdCBub2RlIHRoYXQgY292ZXJzIGBwb3NgLiBJZgogICAgICAvLy8gYHNpZGVgIGlzIC0xLCBpdCB3aWxsIGVudGVyIG5vZGVzIHRoYXQgZW5kIGF0IGBwb3NgLiBJZiBpdCBpcyAxLAogICAgICAvLy8gaXQgd2lsbCBlbnRlciBub2RlcyB0aGF0IHN0YXJ0IGF0IGBwb3NgLgogICAgICBtb3ZlVG8ocG9zLCBzaWRlID0gMCkgewogICAgICAgICAgLy8gTW92ZSB1cCB0byBhIG5vZGUgdGhhdCBhY3R1YWxseSBob2xkcyB0aGUgcG9zaXRpb24sIGlmIHBvc3NpYmxlCiAgICAgICAgICB3aGlsZSAodGhpcy5mcm9tID09IHRoaXMudG8gfHwKICAgICAgICAgICAgICAoc2lkZSA8IDEgPyB0aGlzLmZyb20gPj0gcG9zIDogdGhpcy5mcm9tID4gcG9zKSB8fAogICAgICAgICAgICAgIChzaWRlID4gLTEgPyB0aGlzLnRvIDw9IHBvcyA6IHRoaXMudG8gPCBwb3MpKQogICAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQoKSkKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAvLyBUaGVuIHNjYW4gZG93biBpbnRvIGNoaWxkIG5vZGVzIGFzIGZhciBhcyBwb3NzaWJsZQogICAgICAgICAgd2hpbGUgKHRoaXMuZW50ZXJDaGlsZCgxLCBwb3MsIHNpZGUpKSB7IH0KICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CiAgICAgIC8vLyBHZXQgYSBbc3ludGF4IG5vZGVdKCNjb21tb24uU3ludGF4Tm9kZSkgYXQgdGhlIGN1cnNvcidzIGN1cnJlbnQKICAgICAgLy8vIHBvc2l0aW9uLgogICAgICBnZXQgbm9kZSgpIHsKICAgICAgICAgIGlmICghdGhpcy5idWZmZXIpCiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyZWU7CiAgICAgICAgICBsZXQgY2FjaGUgPSB0aGlzLmJ1ZmZlck5vZGUsIHJlc3VsdCA9IG51bGwsIGRlcHRoID0gMDsKICAgICAgICAgIGlmIChjYWNoZSAmJiBjYWNoZS5jb250ZXh0ID09IHRoaXMuYnVmZmVyKSB7CiAgICAgICAgICAgICAgc2NhbjogZm9yIChsZXQgaW5kZXggPSB0aGlzLmluZGV4LCBkID0gdGhpcy5zdGFjay5sZW5ndGg7IGQgPj0gMDspIHsKICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IGNhY2hlOyBjOyBjID0gYy5fcGFyZW50KQogICAgICAgICAgICAgICAgICAgICAgaWYgKGMuaW5kZXggPT0gaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gdGhpcy5pbmRleCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYzsKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXB0aCA9IGQgKyAxOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIHNjYW47CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5zdGFja1stLWRdOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZvciAobGV0IGkgPSBkZXB0aDsgaSA8IHRoaXMuc3RhY2subGVuZ3RoOyBpKyspCiAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEJ1ZmZlck5vZGUodGhpcy5idWZmZXIsIHJlc3VsdCwgdGhpcy5zdGFja1tpXSk7CiAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJOb2RlID0gbmV3IEJ1ZmZlck5vZGUodGhpcy5idWZmZXIsIHJlc3VsdCwgdGhpcy5pbmRleCk7CiAgICAgIH0KICAgICAgLy8vIEdldCB0aGUgW3RyZWVdKCNjb21tb24uVHJlZSkgdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IG5vZGUsIGlmCiAgICAgIC8vLyBhbnkuIFdpbGwgcmV0dXJuIG51bGwgd2hlbiB0aGUgbm9kZSBpcyBpbiBhIFt0cmVlCiAgICAgIC8vLyBidWZmZXJdKCNjb21tb24uVHJlZUJ1ZmZlcikuCiAgICAgIGdldCB0cmVlKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyID8gbnVsbCA6IHRoaXMuX3RyZWUuX3RyZWU7CiAgICAgIH0KICAgICAgLy8vIEl0ZXJhdGUgb3ZlciB0aGUgY3VycmVudCBub2RlIGFuZCBhbGwgaXRzIGRlc2NlbmRhbnRzLCBjYWxsaW5nCiAgICAgIC8vLyBgZW50ZXJgIHdoZW4gZW50ZXJpbmcgYSBub2RlIGFuZCBgbGVhdmVgLCBpZiBnaXZlbiwgd2hlbiBsZWF2aW5nCiAgICAgIC8vLyBvbmUuIFdoZW4gYGVudGVyYCByZXR1cm5zIGBmYWxzZWAsIGFueSBjaGlsZHJlbiBvZiB0aGF0IG5vZGUgYXJlCiAgICAgIC8vLyBza2lwcGVkLCBhbmQgYGxlYXZlYCBpc24ndCBjYWxsZWQgZm9yIGl0LgogICAgICBpdGVyYXRlKGVudGVyLCBsZWF2ZSkgewogICAgICAgICAgZm9yIChsZXQgZGVwdGggPSAwOzspIHsKICAgICAgICAgICAgICBsZXQgbXVzdExlYXZlID0gZmFsc2U7CiAgICAgICAgICAgICAgaWYgKHRoaXMudHlwZS5pc0Fub255bW91cyB8fCBlbnRlcih0aGlzKSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZmlyc3RDaGlsZCgpKSB7CiAgICAgICAgICAgICAgICAgICAgICBkZXB0aCsrOwogICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnR5cGUuaXNBbm9ueW1vdXMpCiAgICAgICAgICAgICAgICAgICAgICBtdXN0TGVhdmUgPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgICAgIGlmIChtdXN0TGVhdmUgJiYgbGVhdmUpCiAgICAgICAgICAgICAgICAgICAgICBsZWF2ZSh0aGlzKTsKICAgICAgICAgICAgICAgICAgbXVzdExlYXZlID0gdGhpcy50eXBlLmlzQW5vbnltb3VzOwogICAgICAgICAgICAgICAgICBpZiAodGhpcy5uZXh0U2libGluZygpKQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGlmICghZGVwdGgpCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50KCk7CiAgICAgICAgICAgICAgICAgIGRlcHRoLS07CiAgICAgICAgICAgICAgICAgIG11c3RMZWF2ZSA9IHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICB9CiAgICAgIC8vLyBUZXN0IHdoZXRoZXIgdGhlIGN1cnJlbnQgbm9kZSBtYXRjaGVzIGEgZ2l2ZW4gY29udGV4dOKAlGEgc2VxdWVuY2UKICAgICAgLy8vIG9mIGRpcmVjdCBwYXJlbnQgbm9kZSBuYW1lcy4gRW1wdHkgc3RyaW5ncyBpbiB0aGUgY29udGV4dCBhcnJheQogICAgICAvLy8gYXJlIHRyZWF0ZWQgYXMgd2lsZGNhcmRzLgogICAgICBtYXRjaENvbnRleHQoY29udGV4dCkgewogICAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcikKICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hOb2RlQ29udGV4dCh0aGlzLm5vZGUsIGNvbnRleHQpOwogICAgICAgICAgbGV0IHsgYnVmZmVyIH0gPSB0aGlzLmJ1ZmZlciwgeyB0eXBlcyB9ID0gYnVmZmVyLnNldDsKICAgICAgICAgIGZvciAobGV0IGkgPSBjb250ZXh0Lmxlbmd0aCAtIDEsIGQgPSB0aGlzLnN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgZC0tKSB7CiAgICAgICAgICAgICAgaWYgKGQgPCAwKQogICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hOb2RlQ29udGV4dCh0aGlzLm5vZGUsIGNvbnRleHQsIGkpOwogICAgICAgICAgICAgIGxldCB0eXBlID0gdHlwZXNbYnVmZmVyLmJ1ZmZlclt0aGlzLnN0YWNrW2RdXV07CiAgICAgICAgICAgICAgaWYgKCF0eXBlLmlzQW5vbnltb3VzKSB7CiAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0W2ldICYmIGNvbnRleHRbaV0gIT0gdHlwZS5uYW1lKQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICBpLS07CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICB9CiAgZnVuY3Rpb24gaGFzQ2hpbGQodHJlZSkgewogICAgICByZXR1cm4gdHJlZS5jaGlsZHJlbi5zb21lKGNoID0+IGNoIGluc3RhbmNlb2YgVHJlZUJ1ZmZlciB8fCAhY2gudHlwZS5pc0Fub255bW91cyB8fCBoYXNDaGlsZChjaCkpOwogIH0KICBmdW5jdGlvbiBidWlsZFRyZWUoZGF0YSkgewogICAgICB2YXIgX2E7CiAgICAgIGxldCB7IGJ1ZmZlciwgbm9kZVNldCwgbWF4QnVmZmVyTGVuZ3RoID0gRGVmYXVsdEJ1ZmZlckxlbmd0aCwgcmV1c2VkID0gW10sIG1pblJlcGVhdFR5cGUgPSBub2RlU2V0LnR5cGVzLmxlbmd0aCB9ID0gZGF0YTsKICAgICAgbGV0IGN1cnNvciA9IEFycmF5LmlzQXJyYXkoYnVmZmVyKSA/IG5ldyBGbGF0QnVmZmVyQ3Vyc29yKGJ1ZmZlciwgYnVmZmVyLmxlbmd0aCkgOiBidWZmZXI7CiAgICAgIGxldCB0eXBlcyA9IG5vZGVTZXQudHlwZXM7CiAgICAgIGxldCBjb250ZXh0SGFzaCA9IDAsIGxvb2tBaGVhZCA9IDA7CiAgICAgIGZ1bmN0aW9uIHRha2VOb2RlKHBhcmVudFN0YXJ0LCBtaW5Qb3MsIGNoaWxkcmVuLCBwb3NpdGlvbnMsIGluUmVwZWF0KSB7CiAgICAgICAgICBsZXQgeyBpZCwgc3RhcnQsIGVuZCwgc2l6ZSB9ID0gY3Vyc29yOwogICAgICAgICAgbGV0IGxvb2tBaGVhZEF0U3RhcnQgPSBsb29rQWhlYWQ7CiAgICAgICAgICB3aGlsZSAoc2l6ZSA8IDApIHsKICAgICAgICAgICAgICBjdXJzb3IubmV4dCgpOwogICAgICAgICAgICAgIGlmIChzaXplID09IC0xIC8qIFJldXNlICovKSB7CiAgICAgICAgICAgICAgICAgIGxldCBub2RlID0gcmV1c2VkW2lkXTsKICAgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChub2RlKTsKICAgICAgICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goc3RhcnQgLSBwYXJlbnRTdGFydCk7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSBpZiAoc2l6ZSA9PSAtMyAvKiBDb250ZXh0Q2hhbmdlICovKSB7IC8vIENvbnRleHQgY2hhbmdlCiAgICAgICAgICAgICAgICAgIGNvbnRleHRIYXNoID0gaWQ7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSBpZiAoc2l6ZSA9PSAtNCAvKiBMb29rQWhlYWQgKi8pIHsKICAgICAgICAgICAgICAgICAgbG9va0FoZWFkID0gaWQ7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBVbnJlY29nbml6ZWQgcmVjb3JkIHNpemU6ICR7c2l6ZX1gKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgdHlwZSA9IHR5cGVzW2lkXSwgbm9kZSwgYnVmZmVyOwogICAgICAgICAgbGV0IHN0YXJ0UG9zID0gc3RhcnQgLSBwYXJlbnRTdGFydDsKICAgICAgICAgIGlmIChlbmQgLSBzdGFydCA8PSBtYXhCdWZmZXJMZW5ndGggJiYgKGJ1ZmZlciA9IGZpbmRCdWZmZXJTaXplKGN1cnNvci5wb3MgLSBtaW5Qb3MsIGluUmVwZWF0KSkpIHsKICAgICAgICAgICAgICAvLyBTbWFsbCBlbm91Z2ggZm9yIGEgYnVmZmVyLCBhbmQgbm8gcmV1c2VkIG5vZGVzIGluc2lkZQogICAgICAgICAgICAgIGxldCBkYXRhID0gbmV3IFVpbnQxNkFycmF5KGJ1ZmZlci5zaXplIC0gYnVmZmVyLnNraXApOwogICAgICAgICAgICAgIGxldCBlbmRQb3MgPSBjdXJzb3IucG9zIC0gYnVmZmVyLnNpemUsIGluZGV4ID0gZGF0YS5sZW5ndGg7CiAgICAgICAgICAgICAgd2hpbGUgKGN1cnNvci5wb3MgPiBlbmRQb3MpCiAgICAgICAgICAgICAgICAgIGluZGV4ID0gY29weVRvQnVmZmVyKGJ1ZmZlci5zdGFydCwgZGF0YSwgaW5kZXgpOwogICAgICAgICAgICAgIG5vZGUgPSBuZXcgVHJlZUJ1ZmZlcihkYXRhLCBlbmQgLSBidWZmZXIuc3RhcnQsIG5vZGVTZXQpOwogICAgICAgICAgICAgIHN0YXJ0UG9zID0gYnVmZmVyLnN0YXJ0IC0gcGFyZW50U3RhcnQ7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsgLy8gTWFrZSBpdCBhIG5vZGUKICAgICAgICAgICAgICBsZXQgZW5kUG9zID0gY3Vyc29yLnBvcyAtIHNpemU7CiAgICAgICAgICAgICAgY3Vyc29yLm5leHQoKTsKICAgICAgICAgICAgICBsZXQgbG9jYWxDaGlsZHJlbiA9IFtdLCBsb2NhbFBvc2l0aW9ucyA9IFtdOwogICAgICAgICAgICAgIGxldCBsb2NhbEluUmVwZWF0ID0gaWQgPj0gbWluUmVwZWF0VHlwZSA/IGlkIDogLTE7CiAgICAgICAgICAgICAgbGV0IGxhc3RHcm91cCA9IDAsIGxhc3RFbmQgPSBlbmQ7CiAgICAgICAgICAgICAgd2hpbGUgKGN1cnNvci5wb3MgPiBlbmRQb3MpIHsKICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsSW5SZXBlYXQgPj0gMCAmJiBjdXJzb3IuaWQgPT0gbG9jYWxJblJlcGVhdCAmJiBjdXJzb3Iuc2l6ZSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoY3Vyc29yLmVuZCA8PSBsYXN0RW5kIC0gbWF4QnVmZmVyTGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVJlcGVhdExlYWYobG9jYWxDaGlsZHJlbiwgbG9jYWxQb3NpdGlvbnMsIHN0YXJ0LCBsYXN0R3JvdXAsIGN1cnNvci5lbmQsIGxhc3RFbmQsIGxvY2FsSW5SZXBlYXQsIGxvb2tBaGVhZEF0U3RhcnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHcm91cCA9IGxvY2FsQ2hpbGRyZW4ubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RFbmQgPSBjdXJzb3IuZW5kOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgY3Vyc29yLm5leHQoKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIHRha2VOb2RlKHN0YXJ0LCBlbmRQb3MsIGxvY2FsQ2hpbGRyZW4sIGxvY2FsUG9zaXRpb25zLCBsb2NhbEluUmVwZWF0KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAobG9jYWxJblJlcGVhdCA+PSAwICYmIGxhc3RHcm91cCA+IDAgJiYgbGFzdEdyb3VwIDwgbG9jYWxDaGlsZHJlbi5sZW5ndGgpCiAgICAgICAgICAgICAgICAgIG1ha2VSZXBlYXRMZWFmKGxvY2FsQ2hpbGRyZW4sIGxvY2FsUG9zaXRpb25zLCBzdGFydCwgbGFzdEdyb3VwLCBzdGFydCwgbGFzdEVuZCwgbG9jYWxJblJlcGVhdCwgbG9va0FoZWFkQXRTdGFydCk7CiAgICAgICAgICAgICAgbG9jYWxDaGlsZHJlbi5yZXZlcnNlKCk7CiAgICAgICAgICAgICAgbG9jYWxQb3NpdGlvbnMucmV2ZXJzZSgpOwogICAgICAgICAgICAgIGlmIChsb2NhbEluUmVwZWF0ID4gLTEgJiYgbGFzdEdyb3VwID4gMCkgewogICAgICAgICAgICAgICAgICBsZXQgbWFrZSA9IG1ha2VCYWxhbmNlZCh0eXBlKTsKICAgICAgICAgICAgICAgICAgbm9kZSA9IGJhbGFuY2VSYW5nZSh0eXBlLCBsb2NhbENoaWxkcmVuLCBsb2NhbFBvc2l0aW9ucywgMCwgbG9jYWxDaGlsZHJlbi5sZW5ndGgsIDAsIGVuZCAtIHN0YXJ0LCBtYWtlLCBtYWtlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgIG5vZGUgPSBtYWtlVHJlZSh0eXBlLCBsb2NhbENoaWxkcmVuLCBsb2NhbFBvc2l0aW9ucywgZW5kIC0gc3RhcnQsIGxvb2tBaGVhZEF0U3RhcnQgLSBlbmQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGNoaWxkcmVuLnB1c2gobm9kZSk7CiAgICAgICAgICBwb3NpdGlvbnMucHVzaChzdGFydFBvcyk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gbWFrZUJhbGFuY2VkKHR5cGUpIHsKICAgICAgICAgIHJldHVybiAoY2hpbGRyZW4sIHBvc2l0aW9ucywgbGVuZ3RoKSA9PiB7CiAgICAgICAgICAgICAgbGV0IGxvb2tBaGVhZCA9IDAsIGxhc3RJID0gY2hpbGRyZW4ubGVuZ3RoIC0gMSwgbGFzdCwgbG9va0FoZWFkUHJvcDsKICAgICAgICAgICAgICBpZiAobGFzdEkgPj0gMCAmJiAobGFzdCA9IGNoaWxkcmVuW2xhc3RJXSkgaW5zdGFuY2VvZiBUcmVlKSB7CiAgICAgICAgICAgICAgICAgIGlmICghbGFzdEkgJiYgbGFzdC50eXBlID09IHR5cGUgJiYgbGFzdC5sZW5ndGggPT0gbGVuZ3RoKQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3Q7CiAgICAgICAgICAgICAgICAgIGlmIChsb29rQWhlYWRQcm9wID0gbGFzdC5wcm9wKE5vZGVQcm9wLmxvb2tBaGVhZCkpCiAgICAgICAgICAgICAgICAgICAgICBsb29rQWhlYWQgPSBwb3NpdGlvbnNbbGFzdEldICsgbGFzdC5sZW5ndGggKyBsb29rQWhlYWRQcm9wOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gbWFrZVRyZWUodHlwZSwgY2hpbGRyZW4sIHBvc2l0aW9ucywgbGVuZ3RoLCBsb29rQWhlYWQpOwogICAgICAgICAgfTsKICAgICAgfQogICAgICBmdW5jdGlvbiBtYWtlUmVwZWF0TGVhZihjaGlsZHJlbiwgcG9zaXRpb25zLCBiYXNlLCBpLCBmcm9tLCB0bywgdHlwZSwgbG9va0FoZWFkKSB7CiAgICAgICAgICBsZXQgbG9jYWxDaGlsZHJlbiA9IFtdLCBsb2NhbFBvc2l0aW9ucyA9IFtdOwogICAgICAgICAgd2hpbGUgKGNoaWxkcmVuLmxlbmd0aCA+IGkpIHsKICAgICAgICAgICAgICBsb2NhbENoaWxkcmVuLnB1c2goY2hpbGRyZW4ucG9wKCkpOwogICAgICAgICAgICAgIGxvY2FsUG9zaXRpb25zLnB1c2gocG9zaXRpb25zLnBvcCgpICsgYmFzZSAtIGZyb20pOwogICAgICAgICAgfQogICAgICAgICAgY2hpbGRyZW4ucHVzaChtYWtlVHJlZShub2RlU2V0LnR5cGVzW3R5cGVdLCBsb2NhbENoaWxkcmVuLCBsb2NhbFBvc2l0aW9ucywgdG8gLSBmcm9tLCBsb29rQWhlYWQgLSB0bykpOwogICAgICAgICAgcG9zaXRpb25zLnB1c2goZnJvbSAtIGJhc2UpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIG1ha2VUcmVlKHR5cGUsIGNoaWxkcmVuLCBwb3NpdGlvbnMsIGxlbmd0aCwgbG9va0FoZWFkID0gMCwgcHJvcHMpIHsKICAgICAgICAgIGlmIChjb250ZXh0SGFzaCkgewogICAgICAgICAgICAgIGxldCBwYWlyID0gW05vZGVQcm9wLmNvbnRleHRIYXNoLCBjb250ZXh0SGFzaF07CiAgICAgICAgICAgICAgcHJvcHMgPSBwcm9wcyA/IFtwYWlyXS5jb25jYXQocHJvcHMpIDogW3BhaXJdOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGxvb2tBaGVhZCA+IDI1KSB7CiAgICAgICAgICAgICAgbGV0IHBhaXIgPSBbTm9kZVByb3AubG9va0FoZWFkLCBsb29rQWhlYWRdOwogICAgICAgICAgICAgIHByb3BzID0gcHJvcHMgPyBbcGFpcl0uY29uY2F0KHByb3BzKSA6IFtwYWlyXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBuZXcgVHJlZSh0eXBlLCBjaGlsZHJlbiwgcG9zaXRpb25zLCBsZW5ndGgsIHByb3BzKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBmaW5kQnVmZmVyU2l6ZShtYXhTaXplLCBpblJlcGVhdCkgewogICAgICAgICAgLy8gU2NhbiB0aHJvdWdoIHRoZSBidWZmZXIgdG8gZmluZCBwcmV2aW91cyBzaWJsaW5ncyB0aGF0IGZpdAogICAgICAgICAgLy8gdG9nZXRoZXIgaW4gYSBUcmVlQnVmZmVyLCBhbmQgZG9uJ3QgY29udGFpbiBhbnkgcmV1c2VkIG5vZGVzCiAgICAgICAgICAvLyAod2hpY2ggY2FuJ3QgYmUgc3RvcmVkIGluIGEgYnVmZmVyKS4KICAgICAgICAgIC8vIElmIGBpblJlcGVhdGAgaXMgPiAtMSwgaWdub3JlIG5vZGUgYm91bmRhcmllcyBvZiB0aGF0IHR5cGUgZm9yCiAgICAgICAgICAvLyBuZXN0aW5nLCBidXQgbWFrZSBzdXJlIHRoZSBlbmQgZmFsbHMgZWl0aGVyIGF0IHRoZSBzdGFydAogICAgICAgICAgLy8gKGBtYXhTaXplYCkgb3IgYmVmb3JlIHN1Y2ggYSBub2RlLgogICAgICAgICAgbGV0IGZvcmsgPSBjdXJzb3IuZm9yaygpOwogICAgICAgICAgbGV0IHNpemUgPSAwLCBzdGFydCA9IDAsIHNraXAgPSAwLCBtaW5TdGFydCA9IGZvcmsuZW5kIC0gbWF4QnVmZmVyTGVuZ3RoOwogICAgICAgICAgbGV0IHJlc3VsdCA9IHsgc2l6ZTogMCwgc3RhcnQ6IDAsIHNraXA6IDAgfTsKICAgICAgICAgIHNjYW46IGZvciAobGV0IG1pblBvcyA9IGZvcmsucG9zIC0gbWF4U2l6ZTsgZm9yay5wb3MgPiBtaW5Qb3M7KSB7CiAgICAgICAgICAgICAgbGV0IG5vZGVTaXplID0gZm9yay5zaXplOwogICAgICAgICAgICAgIC8vIFByZXRlbmQgbmVzdGVkIHJlcGVhdCBub2RlcyBvZiB0aGUgc2FtZSB0eXBlIGRvbid0IGV4aXN0CiAgICAgICAgICAgICAgaWYgKGZvcmsuaWQgPT0gaW5SZXBlYXQgJiYgbm9kZVNpemUgPj0gMCkgewogICAgICAgICAgICAgICAgICAvLyBFeGNlcHQgdGhhdCB3ZSBzdG9yZSB0aGUgY3VycmVudCBzdGF0ZSBhcyBhIHZhbGlkIHJldHVybgogICAgICAgICAgICAgICAgICAvLyB2YWx1ZS4KICAgICAgICAgICAgICAgICAgcmVzdWx0LnNpemUgPSBzaXplOwogICAgICAgICAgICAgICAgICByZXN1bHQuc3RhcnQgPSBzdGFydDsKICAgICAgICAgICAgICAgICAgcmVzdWx0LnNraXAgPSBza2lwOwogICAgICAgICAgICAgICAgICBza2lwICs9IDQ7CiAgICAgICAgICAgICAgICAgIHNpemUgKz0gNDsKICAgICAgICAgICAgICAgICAgZm9yay5uZXh0KCk7CiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBsZXQgc3RhcnRQb3MgPSBmb3JrLnBvcyAtIG5vZGVTaXplOwogICAgICAgICAgICAgIGlmIChub2RlU2l6ZSA8IDAgfHwgc3RhcnRQb3MgPCBtaW5Qb3MgfHwgZm9yay5zdGFydCA8IG1pblN0YXJ0KQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBsZXQgbG9jYWxTa2lwcGVkID0gZm9yay5pZCA+PSBtaW5SZXBlYXRUeXBlID8gNCA6IDA7CiAgICAgICAgICAgICAgbGV0IG5vZGVTdGFydCA9IGZvcmsuc3RhcnQ7CiAgICAgICAgICAgICAgZm9yay5uZXh0KCk7CiAgICAgICAgICAgICAgd2hpbGUgKGZvcmsucG9zID4gc3RhcnRQb3MpIHsKICAgICAgICAgICAgICAgICAgaWYgKGZvcmsuc2l6ZSA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JrLnNpemUgPT0gLTMgLyogQ29udGV4dENoYW5nZSAqLykKICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFNraXBwZWQgKz0gNDsKICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBzY2FuOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZvcmsuaWQgPj0gbWluUmVwZWF0VHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgbG9jYWxTa2lwcGVkICs9IDQ7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZm9yay5uZXh0KCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHN0YXJ0ID0gbm9kZVN0YXJ0OwogICAgICAgICAgICAgIHNpemUgKz0gbm9kZVNpemU7CiAgICAgICAgICAgICAgc2tpcCArPSBsb2NhbFNraXBwZWQ7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaW5SZXBlYXQgPCAwIHx8IHNpemUgPT0gbWF4U2l6ZSkgewogICAgICAgICAgICAgIHJlc3VsdC5zaXplID0gc2l6ZTsKICAgICAgICAgICAgICByZXN1bHQuc3RhcnQgPSBzdGFydDsKICAgICAgICAgICAgICByZXN1bHQuc2tpcCA9IHNraXA7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcmVzdWx0LnNpemUgPiA0ID8gcmVzdWx0IDogdW5kZWZpbmVkOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGNvcHlUb0J1ZmZlcihidWZmZXJTdGFydCwgYnVmZmVyLCBpbmRleCkgewogICAgICAgICAgbGV0IHsgaWQsIHN0YXJ0LCBlbmQsIHNpemUgfSA9IGN1cnNvcjsKICAgICAgICAgIGN1cnNvci5uZXh0KCk7CiAgICAgICAgICBpZiAoc2l6ZSA+PSAwICYmIGlkIDwgbWluUmVwZWF0VHlwZSkgewogICAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgICAgaWYgKHNpemUgPiA0KSB7CiAgICAgICAgICAgICAgICAgIGxldCBlbmRQb3MgPSBjdXJzb3IucG9zIC0gKHNpemUgLSA0KTsKICAgICAgICAgICAgICAgICAgd2hpbGUgKGN1cnNvci5wb3MgPiBlbmRQb3MpCiAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGNvcHlUb0J1ZmZlcihidWZmZXJTdGFydCwgYnVmZmVyLCBpbmRleCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJ1ZmZlclstLWluZGV4XSA9IHN0YXJ0SW5kZXg7CiAgICAgICAgICAgICAgYnVmZmVyWy0taW5kZXhdID0gZW5kIC0gYnVmZmVyU3RhcnQ7CiAgICAgICAgICAgICAgYnVmZmVyWy0taW5kZXhdID0gc3RhcnQgLSBidWZmZXJTdGFydDsKICAgICAgICAgICAgICBidWZmZXJbLS1pbmRleF0gPSBpZDsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKHNpemUgPT0gLTMgLyogQ29udGV4dENoYW5nZSAqLykgewogICAgICAgICAgICAgIGNvbnRleHRIYXNoID0gaWQ7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmIChzaXplID09IC00IC8qIExvb2tBaGVhZCAqLykgewogICAgICAgICAgICAgIGxvb2tBaGVhZCA9IGlkOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGluZGV4OwogICAgICB9CiAgICAgIGxldCBjaGlsZHJlbiA9IFtdLCBwb3NpdGlvbnMgPSBbXTsKICAgICAgd2hpbGUgKGN1cnNvci5wb3MgPiAwKQogICAgICAgICAgdGFrZU5vZGUoZGF0YS5zdGFydCB8fCAwLCBkYXRhLmJ1ZmZlclN0YXJ0IHx8IDAsIGNoaWxkcmVuLCBwb3NpdGlvbnMsIC0xKTsKICAgICAgbGV0IGxlbmd0aCA9IChfYSA9IGRhdGEubGVuZ3RoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoY2hpbGRyZW4ubGVuZ3RoID8gcG9zaXRpb25zWzBdICsgY2hpbGRyZW5bMF0ubGVuZ3RoIDogMCk7CiAgICAgIHJldHVybiBuZXcgVHJlZSh0eXBlc1tkYXRhLnRvcElEXSwgY2hpbGRyZW4ucmV2ZXJzZSgpLCBwb3NpdGlvbnMucmV2ZXJzZSgpLCBsZW5ndGgpOwogIH0KICBjb25zdCBub2RlU2l6ZUNhY2hlID0gbmV3IFdlYWtNYXA7CiAgZnVuY3Rpb24gbm9kZVNpemUoYmFsYW5jZVR5cGUsIG5vZGUpIHsKICAgICAgaWYgKCFiYWxhbmNlVHlwZS5pc0Fub255bW91cyB8fCBub2RlIGluc3RhbmNlb2YgVHJlZUJ1ZmZlciB8fCBub2RlLnR5cGUgIT0gYmFsYW5jZVR5cGUpCiAgICAgICAgICByZXR1cm4gMTsKICAgICAgbGV0IHNpemUgPSBub2RlU2l6ZUNhY2hlLmdldChub2RlKTsKICAgICAgaWYgKHNpemUgPT0gbnVsbCkgewogICAgICAgICAgc2l6ZSA9IDE7CiAgICAgICAgICBmb3IgKGxldCBjaGlsZCBvZiBub2RlLmNoaWxkcmVuKSB7CiAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgIT0gYmFsYW5jZVR5cGUgfHwgIShjaGlsZCBpbnN0YW5jZW9mIFRyZWUpKSB7CiAgICAgICAgICAgICAgICAgIHNpemUgPSAxOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc2l6ZSArPSBub2RlU2l6ZShiYWxhbmNlVHlwZSwgY2hpbGQpOwogICAgICAgICAgfQogICAgICAgICAgbm9kZVNpemVDYWNoZS5zZXQobm9kZSwgc2l6ZSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHNpemU7CiAgfQogIGZ1bmN0aW9uIGJhbGFuY2VSYW5nZSgKICAvLyBUaGUgdHlwZSB0aGUgYmFsYW5jZWQgdHJlZSdzIGlubmVyIG5vZGVzLgogIGJhbGFuY2VUeXBlLCAKICAvLyBUaGUgZGlyZWN0IGNoaWxkcmVuIGFuZCB0aGVpciBwb3NpdGlvbnMKICBjaGlsZHJlbiwgcG9zaXRpb25zLCAKICAvLyBUaGUgaW5kZXggcmFuZ2UgaW4gY2hpbGRyZW4vcG9zaXRpb25zIHRvIHVzZQogIGZyb20sIHRvLCAKICAvLyBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIG5vZGVzLCByZWxhdGl2ZSB0byB0aGVpciBwYXJlbnQuCiAgc3RhcnQsIAogIC8vIExlbmd0aCBvZiB0aGUgb3V0ZXIgbm9kZQogIGxlbmd0aCwgCiAgLy8gRnVuY3Rpb24gdG8gYnVpbGQgdGhlIHRvcCBub2RlIG9mIHRoZSBiYWxhbmNlZCB0cmVlCiAgbWtUb3AsIAogIC8vIEZ1bmN0aW9uIHRvIGJ1aWxkIGludGVybmFsIG5vZGVzIGZvciB0aGUgYmFsYW5jZWQgdHJlZQogIG1rVHJlZSkgewogICAgICBsZXQgdG90YWwgPSAwOwogICAgICBmb3IgKGxldCBpID0gZnJvbTsgaSA8IHRvOyBpKyspCiAgICAgICAgICB0b3RhbCArPSBub2RlU2l6ZShiYWxhbmNlVHlwZSwgY2hpbGRyZW5baV0pOwogICAgICBsZXQgbWF4Q2hpbGQgPSBNYXRoLmNlaWwoKHRvdGFsICogMS41KSAvIDggLyogQnJhbmNoRmFjdG9yICovKTsKICAgICAgbGV0IGxvY2FsQ2hpbGRyZW4gPSBbXSwgbG9jYWxQb3NpdGlvbnMgPSBbXTsKICAgICAgZnVuY3Rpb24gZGl2aWRlKGNoaWxkcmVuLCBwb3NpdGlvbnMsIGZyb20sIHRvLCBvZmZzZXQpIHsKICAgICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDwgdG87KSB7CiAgICAgICAgICAgICAgbGV0IGdyb3VwRnJvbSA9IGksIGdyb3VwU3RhcnQgPSBwb3NpdGlvbnNbaV0sIGdyb3VwU2l6ZSA9IG5vZGVTaXplKGJhbGFuY2VUeXBlLCBjaGlsZHJlbltpXSk7CiAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgIGZvciAoOyBpIDwgdG87IGkrKykgewogICAgICAgICAgICAgICAgICBsZXQgbmV4dFNpemUgPSBub2RlU2l6ZShiYWxhbmNlVHlwZSwgY2hpbGRyZW5baV0pOwogICAgICAgICAgICAgICAgICBpZiAoZ3JvdXBTaXplICsgbmV4dFNpemUgPj0gbWF4Q2hpbGQpCiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgZ3JvdXBTaXplICs9IG5leHRTaXplOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoaSA9PSBncm91cEZyb20gKyAxKSB7CiAgICAgICAgICAgICAgICAgIGlmIChncm91cFNpemUgPiBtYXhDaGlsZCkgewogICAgICAgICAgICAgICAgICAgICAgbGV0IG9ubHkgPSBjaGlsZHJlbltncm91cEZyb21dOyAvLyBPbmx5IHRyZWVzIGNhbiBoYXZlIGEgc2l6ZSA+IDEKICAgICAgICAgICAgICAgICAgICAgIGRpdmlkZShvbmx5LmNoaWxkcmVuLCBvbmx5LnBvc2l0aW9ucywgMCwgb25seS5jaGlsZHJlbi5sZW5ndGgsIHBvc2l0aW9uc1tncm91cEZyb21dICsgb2Zmc2V0KTsKICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGxvY2FsQ2hpbGRyZW4ucHVzaChjaGlsZHJlbltncm91cEZyb21dKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnNbaSAtIDFdICsgY2hpbGRyZW5baSAtIDFdLmxlbmd0aCAtIGdyb3VwU3RhcnQ7CiAgICAgICAgICAgICAgICAgIGxvY2FsQ2hpbGRyZW4ucHVzaChiYWxhbmNlUmFuZ2UoYmFsYW5jZVR5cGUsIGNoaWxkcmVuLCBwb3NpdGlvbnMsIGdyb3VwRnJvbSwgaSwgZ3JvdXBTdGFydCwgbGVuZ3RoLCBudWxsLCBta1RyZWUpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbG9jYWxQb3NpdGlvbnMucHVzaChncm91cFN0YXJ0ICsgb2Zmc2V0IC0gc3RhcnQpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGRpdmlkZShjaGlsZHJlbiwgcG9zaXRpb25zLCBmcm9tLCB0bywgMCk7CiAgICAgIHJldHVybiAobWtUb3AgfHwgbWtUcmVlKShsb2NhbENoaWxkcmVuLCBsb2NhbFBvc2l0aW9ucywgbGVuZ3RoKTsKICB9CiAgLy8vIEEgc3VwZXJjbGFzcyB0aGF0IHBhcnNlcnMgc2hvdWxkIGV4dGVuZC4KICBjbGFzcyBQYXJzZXIgewogICAgICAvLy8gU3RhcnQgYSBwYXJzZSwgcmV0dXJuaW5nIGEgW3BhcnRpYWwgcGFyc2VdKCNjb21tb24uUGFydGlhbFBhcnNlKQogICAgICAvLy8gb2JqZWN0LiBbYGZyYWdtZW50c2BdKCNjb21tb24uVHJlZUZyYWdtZW50KSBjYW4gYmUgcGFzc2VkIGluIHRvCiAgICAgIC8vLyBtYWtlIHRoZSBwYXJzZSBpbmNyZW1lbnRhbC4KICAgICAgLy8vCiAgICAgIC8vLyBCeSBkZWZhdWx0LCB0aGUgZW50aXJlIGlucHV0IGlzIHBhcnNlZC4gWW91IGNhbiBwYXNzIGByYW5nZXNgLAogICAgICAvLy8gd2hpY2ggc2hvdWxkIGJlIGEgc29ydGVkIGFycmF5IG9mIG5vbi1lbXB0eSwgbm9uLW92ZXJsYXBwaW5nCiAgICAgIC8vLyByYW5nZXMsIHRvIHBhcnNlIG9ubHkgdGhvc2UgcmFuZ2VzLiBUaGUgdHJlZSByZXR1cm5lZCBpbiB0aGF0CiAgICAgIC8vLyBjYXNlIHdpbGwgc3RhcnQgYXQgYHJhbmdlc1swXS5mcm9tYC4KICAgICAgc3RhcnRQYXJzZShpbnB1dCwgZnJhZ21lbnRzLCByYW5nZXMpIHsKICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT0gInN0cmluZyIpCiAgICAgICAgICAgICAgaW5wdXQgPSBuZXcgU3RyaW5nSW5wdXQoaW5wdXQpOwogICAgICAgICAgcmFuZ2VzID0gIXJhbmdlcyA/IFtuZXcgUmFuZ2UkMSgwLCBpbnB1dC5sZW5ndGgpXSA6IHJhbmdlcy5sZW5ndGggPyByYW5nZXMubWFwKHIgPT4gbmV3IFJhbmdlJDEoci5mcm9tLCByLnRvKSkgOiBbbmV3IFJhbmdlJDEoMCwgMCldOwogICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUGFyc2UoaW5wdXQsIGZyYWdtZW50cyB8fCBbXSwgcmFuZ2VzKTsKICAgICAgfQogICAgICAvLy8gUnVuIGEgZnVsbCBwYXJzZSwgcmV0dXJuaW5nIHRoZSByZXN1bHRpbmcgdHJlZS4KICAgICAgcGFyc2UoaW5wdXQsIGZyYWdtZW50cywgcmFuZ2VzKSB7CiAgICAgICAgICBsZXQgcGFyc2UgPSB0aGlzLnN0YXJ0UGFyc2UoaW5wdXQsIGZyYWdtZW50cywgcmFuZ2VzKTsKICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgICBsZXQgZG9uZSA9IHBhcnNlLmFkdmFuY2UoKTsKICAgICAgICAgICAgICBpZiAoZG9uZSkKICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmU7CiAgICAgICAgICB9CiAgICAgIH0KICB9CiAgY2xhc3MgU3RyaW5nSW5wdXQgewogICAgICBjb25zdHJ1Y3RvcihzdHJpbmcpIHsKICAgICAgICAgIHRoaXMuc3RyaW5nID0gc3RyaW5nOwogICAgICB9CiAgICAgIGdldCBsZW5ndGgoKSB7IHJldHVybiB0aGlzLnN0cmluZy5sZW5ndGg7IH0KICAgICAgY2h1bmsoZnJvbSkgeyByZXR1cm4gdGhpcy5zdHJpbmcuc2xpY2UoZnJvbSk7IH0KICAgICAgZ2V0IGxpbmVDaHVua3MoKSB7IHJldHVybiBmYWxzZTsgfQogICAgICByZWFkKGZyb20sIHRvKSB7IHJldHVybiB0aGlzLnN0cmluZy5zbGljZShmcm9tLCB0byk7IH0KICB9CiAgbmV3IE5vZGVQcm9wKHsgcGVyTm9kZTogdHJ1ZSB9KTsKCiAgLy8vIEEgcGFyc2Ugc3RhY2suIFRoZXNlIGFyZSB1c2VkIGludGVybmFsbHkgYnkgdGhlIHBhcnNlciB0byB0cmFjawogIC8vLyBwYXJzaW5nIHByb2dyZXNzLiBUaGV5IGFsc28gcHJvdmlkZSBzb21lIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMKICAvLy8gdGhhdCBleHRlcm5hbCBjb2RlIHN1Y2ggYXMgYSB0b2tlbml6ZXIgY2FuIHVzZSB0byBnZXQgaW5mb3JtYXRpb24KICAvLy8gYWJvdXQgdGhlIHBhcnNlIHN0YXRlLgogIGNsYXNzIFN0YWNrIHsKICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBjb25zdHJ1Y3RvcigKICAgICAgLy8vIFRoZSBwYXJzZSB0aGF0IHRoaXMgc3RhY2sgaXMgcGFydCBvZiBAaW50ZXJuYWwKICAgICAgcCwgCiAgICAgIC8vLyBIb2xkcyBzdGF0ZSwgaW5wdXQgcG9zLCBidWZmZXIgaW5kZXggdHJpcGxldHMgZm9yIGFsbCBidXQgdGhlCiAgICAgIC8vLyB0b3Agc3RhdGUgQGludGVybmFsCiAgICAgIHN0YWNrLCAKICAgICAgLy8vIFRoZSBjdXJyZW50IHBhcnNlIHN0YXRlIEBpbnRlcm5hbAogICAgICBzdGF0ZSwgCiAgICAgIC8vIFRoZSBwb3NpdGlvbiBhdCB3aGljaCB0aGUgbmV4dCByZWR1Y2Ugc2hvdWxkIHRha2UgcGxhY2UuIFRoaXMKICAgICAgLy8gY2FuIGJlIGxlc3MgdGhhbiBgdGhpcy5wb3NgIHdoZW4gc2tpcHBlZCBleHByZXNzaW9ucyBoYXZlIGJlZW4KICAgICAgLy8gYWRkZWQgdG8gdGhlIHN0YWNrICh3aGljaCBzaG91bGQgYmUgbW92ZWQgb3V0c2lkZSBvZiB0aGUgbmV4dAogICAgICAvLyByZWR1Y3Rpb24pCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgcmVkdWNlUG9zLCAKICAgICAgLy8vIFRoZSBpbnB1dCBwb3NpdGlvbiB1cCB0byB3aGljaCB0aGlzIHN0YWNrIGhhcyBwYXJzZWQuCiAgICAgIHBvcywgCiAgICAgIC8vLyBUaGUgZHluYW1pYyBzY29yZSBvZiB0aGUgc3RhY2ssIGluY2x1ZGluZyBkeW5hbWljIHByZWNlZGVuY2UKICAgICAgLy8vIGFuZCBlcnJvci1yZWNvdmVyeSBwZW5hbHRpZXMKICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBzY29yZSwgCiAgICAgIC8vIFRoZSBvdXRwdXQgYnVmZmVyLiBIb2xkcyAodHlwZSwgc3RhcnQsIGVuZCwgc2l6ZSkgcXVhZHMKICAgICAgLy8gcmVwcmVzZW50aW5nIG5vZGVzIGNyZWF0ZWQgYnkgdGhlIHBhcnNlciwgd2hlcmUgYHNpemVgIGlzCiAgICAgIC8vIGFtb3VudCBvZiBidWZmZXIgYXJyYXkgZW50cmllcyBjb3ZlcmVkIGJ5IHRoaXMgbm9kZS4KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBidWZmZXIsIAogICAgICAvLyBUaGUgYmFzZSBvZmZzZXQgb2YgdGhlIGJ1ZmZlci4gV2hlbiBzdGFja3MgYXJlIHNwbGl0LCB0aGUgc3BsaXQKICAgICAgLy8gaW5zdGFuY2Ugc2hhcmVkIHRoZSBidWZmZXIgaGlzdG9yeSB3aXRoIGl0cyBwYXJlbnQgdXAgdG8KICAgICAgLy8gYGJ1ZmZlckJhc2VgLCB3aGljaCBpcyB0aGUgYWJzb2x1dGUgb2Zmc2V0IChpbmNsdWRpbmcgdGhlCiAgICAgIC8vIG9mZnNldCBvZiBwcmV2aW91cyBzcGxpdHMpIGludG8gdGhlIGJ1ZmZlciBhdCB3aGljaCB0aGlzIHN0YWNrCiAgICAgIC8vIHN0YXJ0cyB3cml0aW5nLgogICAgICAvLy8gQGludGVybmFsCiAgICAgIGJ1ZmZlckJhc2UsIAogICAgICAvLy8gQGludGVybmFsCiAgICAgIGN1ckNvbnRleHQsIAogICAgICAvLy8gQGludGVybmFsCiAgICAgIGxvb2tBaGVhZCA9IDAsIAogICAgICAvLyBBIHBhcmVudCBzdGFjayBmcm9tIHdoaWNoIHRoaXMgd2FzIHNwbGl0IG9mZiwgaWYgYW55LiBUaGlzIGlzCiAgICAgIC8vIHNldCB1cCBzbyB0aGF0IGl0IGFsd2F5cyBwb2ludHMgdG8gYSBzdGFjayB0aGF0IGhhcyBzb21lCiAgICAgIC8vIGFkZGl0aW9uYWwgYnVmZmVyIGNvbnRlbnQsIG5ldmVyIHRvIGEgc3RhY2sgd2l0aCBhbiBlcXVhbAogICAgICAvLyBgYnVmZmVyQmFzZWAuCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgcGFyZW50KSB7CiAgICAgICAgICB0aGlzLnAgPSBwOwogICAgICAgICAgdGhpcy5zdGFjayA9IHN0YWNrOwogICAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlOwogICAgICAgICAgdGhpcy5yZWR1Y2VQb3MgPSByZWR1Y2VQb3M7CiAgICAgICAgICB0aGlzLnBvcyA9IHBvczsKICAgICAgICAgIHRoaXMuc2NvcmUgPSBzY29yZTsKICAgICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyOwogICAgICAgICAgdGhpcy5idWZmZXJCYXNlID0gYnVmZmVyQmFzZTsKICAgICAgICAgIHRoaXMuY3VyQ29udGV4dCA9IGN1ckNvbnRleHQ7CiAgICAgICAgICB0aGlzLmxvb2tBaGVhZCA9IGxvb2tBaGVhZDsKICAgICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50OwogICAgICB9CiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgdG9TdHJpbmcoKSB7CiAgICAgICAgICByZXR1cm4gYFske3RoaXMuc3RhY2suZmlsdGVyKChfLCBpKSA9PiBpICUgMyA9PSAwKS5jb25jYXQodGhpcy5zdGF0ZSl9XUAke3RoaXMucG9zfSR7dGhpcy5zY29yZSA/ICIhIiArIHRoaXMuc2NvcmUgOiAiIn1gOwogICAgICB9CiAgICAgIC8vIFN0YXJ0IGFuIGVtcHR5IHN0YWNrCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgc3RhdGljIHN0YXJ0KHAsIHN0YXRlLCBwb3MgPSAwKSB7CiAgICAgICAgICBsZXQgY3ggPSBwLnBhcnNlci5jb250ZXh0OwogICAgICAgICAgcmV0dXJuIG5ldyBTdGFjayhwLCBbXSwgc3RhdGUsIHBvcywgcG9zLCAwLCBbXSwgMCwgY3ggPyBuZXcgU3RhY2tDb250ZXh0KGN4LCBjeC5zdGFydCkgOiBudWxsLCAwLCBudWxsKTsKICAgICAgfQogICAgICAvLy8gVGhlIHN0YWNrJ3MgY3VycmVudCBbY29udGV4dF0oI2xyLkNvbnRleHRUcmFja2VyKSB2YWx1ZSwgaWYKICAgICAgLy8vIGFueS4gSXRzIHR5cGUgd2lsbCBkZXBlbmQgb24gdGhlIGNvbnRleHQgdHJhY2tlcidzIHR5cGUKICAgICAgLy8vIHBhcmFtZXRlciwgb3IgaXQgd2lsbCBiZSBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gY29udGV4dAogICAgICAvLy8gdHJhY2tlci4KICAgICAgZ2V0IGNvbnRleHQoKSB7IHJldHVybiB0aGlzLmN1ckNvbnRleHQgPyB0aGlzLmN1ckNvbnRleHQuY29udGV4dCA6IG51bGw7IH0KICAgICAgLy8gUHVzaCBhIHN0YXRlIG9udG8gdGhlIHN0YWNrLCB0cmFja2luZyBpdHMgc3RhcnQgcG9zaXRpb24gYXMgd2VsbAogICAgICAvLyBhcyB0aGUgYnVmZmVyIGJhc2UgYXQgdGhhdCBwb2ludC4KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBwdXNoU3RhdGUoc3RhdGUsIHN0YXJ0KSB7CiAgICAgICAgICB0aGlzLnN0YWNrLnB1c2godGhpcy5zdGF0ZSwgc3RhcnQsIHRoaXMuYnVmZmVyQmFzZSArIHRoaXMuYnVmZmVyLmxlbmd0aCk7CiAgICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7CiAgICAgIH0KICAgICAgLy8gQXBwbHkgYSByZWR1Y2UgYWN0aW9uCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgcmVkdWNlKGFjdGlvbikgewogICAgICAgICAgbGV0IGRlcHRoID0gYWN0aW9uID4+IDE5IC8qIFJlZHVjZURlcHRoU2hpZnQgKi8sIHR5cGUgPSBhY3Rpb24gJiA2NTUzNSAvKiBWYWx1ZU1hc2sgKi87CiAgICAgICAgICBsZXQgeyBwYXJzZXIgfSA9IHRoaXMucDsKICAgICAgICAgIGxldCBkUHJlYyA9IHBhcnNlci5keW5hbWljUHJlY2VkZW5jZSh0eXBlKTsKICAgICAgICAgIGlmIChkUHJlYykKICAgICAgICAgICAgICB0aGlzLnNjb3JlICs9IGRQcmVjOwogICAgICAgICAgaWYgKGRlcHRoID09IDApIHsKICAgICAgICAgICAgICB0aGlzLnB1c2hTdGF0ZShwYXJzZXIuZ2V0R290byh0aGlzLnN0YXRlLCB0eXBlLCB0cnVlKSwgdGhpcy5yZWR1Y2VQb3MpOwogICAgICAgICAgICAgIC8vIFplcm8tZGVwdGggcmVkdWN0aW9ucyBhcmUgYSBzcGVjaWFsIGNhc2XigJR0aGV5IGFkZCBzdHVmZiB0bwogICAgICAgICAgICAgIC8vIHRoZSBzdGFjayB3aXRob3V0IHBvcHBpbmcgYW55dGhpbmcgb2ZmLgogICAgICAgICAgICAgIGlmICh0eXBlIDwgcGFyc2VyLm1pblJlcGVhdFRlcm0pCiAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmVOb2RlKHR5cGUsIHRoaXMucmVkdWNlUG9zLCB0aGlzLnJlZHVjZVBvcywgNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgdGhpcy5yZWR1Y2VDb250ZXh0KHR5cGUsIHRoaXMucmVkdWNlUG9zKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICAvLyBGaW5kIHRoZSBiYXNlIGluZGV4IGludG8gYHRoaXMuc3RhY2tgLCBjb250ZW50IGFmdGVyIHdoaWNoIHdpbGwKICAgICAgICAgIC8vIGJlIGRyb3BwZWQuIE5vdGUgdGhhdCB3aXRoIGBTdGF5RmxhZ2AgcmVkdWN0aW9ucyB3ZSBuZWVkIHRvCiAgICAgICAgICAvLyBjb25zdW1lIHR3byBleHRyYSBmcmFtZXMgKHRoZSBkdW1teSBwYXJlbnQgbm9kZSBmb3IgdGhlIHNraXBwZWQKICAgICAgICAgIC8vIGV4cHJlc3Npb24gYW5kIHRoZSBzdGF0ZSB0aGF0IHdlJ2xsIGJlIHN0YXlpbmcgaW4sIHdoaWNoIHNob3VsZAogICAgICAgICAgLy8gYmUgbW92ZWQgdG8gYHRoaXMuc3RhdGVgKS4KICAgICAgICAgIGxldCBiYXNlID0gdGhpcy5zdGFjay5sZW5ndGggLSAoKGRlcHRoIC0gMSkgKiAzKSAtIChhY3Rpb24gJiAyNjIxNDQgLyogU3RheUZsYWcgKi8gPyA2IDogMCk7CiAgICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnN0YWNrW2Jhc2UgLSAyXTsKICAgICAgICAgIGxldCBidWZmZXJCYXNlID0gdGhpcy5zdGFja1tiYXNlIC0gMV0sIGNvdW50ID0gdGhpcy5idWZmZXJCYXNlICsgdGhpcy5idWZmZXIubGVuZ3RoIC0gYnVmZmVyQmFzZTsKICAgICAgICAgIC8vIFN0b3JlIG5vcm1hbCB0ZXJtcyBvciBgUiAtPiBSIFJgIHJlcGVhdCByZWR1Y3Rpb25zCiAgICAgICAgICBpZiAodHlwZSA8IHBhcnNlci5taW5SZXBlYXRUZXJtIHx8IChhY3Rpb24gJiAxMzEwNzIgLyogUmVwZWF0RmxhZyAqLykpIHsKICAgICAgICAgICAgICBsZXQgcG9zID0gcGFyc2VyLnN0YXRlRmxhZyh0aGlzLnN0YXRlLCAxIC8qIFNraXBwZWQgKi8pID8gdGhpcy5wb3MgOiB0aGlzLnJlZHVjZVBvczsKICAgICAgICAgICAgICB0aGlzLnN0b3JlTm9kZSh0eXBlLCBzdGFydCwgcG9zLCBjb3VudCArIDQsIHRydWUpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGFjdGlvbiAmIDI2MjE0NCAvKiBTdGF5RmxhZyAqLykgewogICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnN0YWNrW2Jhc2VdOwogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgbGV0IGJhc2VTdGF0ZUlEID0gdGhpcy5zdGFja1tiYXNlIC0gM107CiAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHBhcnNlci5nZXRHb3RvKGJhc2VTdGF0ZUlELCB0eXBlLCB0cnVlKTsKICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlICh0aGlzLnN0YWNrLmxlbmd0aCA+IGJhc2UpCiAgICAgICAgICAgICAgdGhpcy5zdGFjay5wb3AoKTsKICAgICAgICAgIHRoaXMucmVkdWNlQ29udGV4dCh0eXBlLCBzdGFydCk7CiAgICAgIH0KICAgICAgLy8gU2hpZnQgYSB2YWx1ZSBpbnRvIHRoZSBidWZmZXIKICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBzdG9yZU5vZGUodGVybSwgc3RhcnQsIGVuZCwgc2l6ZSA9IDQsIGlzUmVkdWNlID0gZmFsc2UpIHsKICAgICAgICAgIGlmICh0ZXJtID09IDAgLyogRXJyICovICYmCiAgICAgICAgICAgICAgKCF0aGlzLnN0YWNrLmxlbmd0aCB8fCB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0gPCB0aGlzLmJ1ZmZlci5sZW5ndGggKyB0aGlzLmJ1ZmZlckJhc2UpKSB7CiAgICAgICAgICAgICAgLy8gVHJ5IHRvIG9taXQvbWVyZ2UgYWRqYWNlbnQgZXJyb3Igbm9kZXMKICAgICAgICAgICAgICBsZXQgY3VyID0gdGhpcywgdG9wID0gdGhpcy5idWZmZXIubGVuZ3RoOwogICAgICAgICAgICAgIGlmICh0b3AgPT0gMCAmJiBjdXIucGFyZW50KSB7CiAgICAgICAgICAgICAgICAgIHRvcCA9IGN1ci5idWZmZXJCYXNlIC0gY3VyLnBhcmVudC5idWZmZXJCYXNlOwogICAgICAgICAgICAgICAgICBjdXIgPSBjdXIucGFyZW50OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodG9wID4gMCAmJiBjdXIuYnVmZmVyW3RvcCAtIDRdID09IDAgLyogRXJyICovICYmIGN1ci5idWZmZXJbdG9wIC0gMV0gPiAtMSkgewogICAgICAgICAgICAgICAgICBpZiAoc3RhcnQgPT0gZW5kKQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICBpZiAoY3VyLmJ1ZmZlclt0b3AgLSAyXSA+PSBzdGFydCkgewogICAgICAgICAgICAgICAgICAgICAgY3VyLmJ1ZmZlclt0b3AgLSAyXSA9IGVuZDsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghaXNSZWR1Y2UgfHwgdGhpcy5wb3MgPT0gZW5kKSB7IC8vIFNpbXBsZSBjYXNlLCBqdXN0IGFwcGVuZAogICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godGVybSwgc3RhcnQsIGVuZCwgc2l6ZSk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsgLy8gVGhlcmUgbWF5IGJlIHNraXBwZWQgbm9kZXMgdGhhdCBoYXZlIHRvIGJlIG1vdmVkIGZvcndhcmQKICAgICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmJ1ZmZlci5sZW5ndGg7CiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCAmJiB0aGlzLmJ1ZmZlcltpbmRleCAtIDRdICE9IDAgLyogRXJyICovKQogICAgICAgICAgICAgICAgICB3aGlsZSAoaW5kZXggPiAwICYmIHRoaXMuYnVmZmVyW2luZGV4IC0gMl0gPiBlbmQpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdGhpcyByZWNvcmQgZm9yd2FyZAogICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXJbaW5kZXhdID0gdGhpcy5idWZmZXJbaW5kZXggLSA0XTsKICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyW2luZGV4ICsgMV0gPSB0aGlzLmJ1ZmZlcltpbmRleCAtIDNdOwogICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXJbaW5kZXggKyAyXSA9IHRoaXMuYnVmZmVyW2luZGV4IC0gMl07CiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcltpbmRleCArIDNdID0gdGhpcy5idWZmZXJbaW5kZXggLSAxXTsKICAgICAgICAgICAgICAgICAgICAgIGluZGV4IC09IDQ7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZSA+IDQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSAtPSA0OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGhpcy5idWZmZXJbaW5kZXhdID0gdGVybTsKICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcltpbmRleCArIDFdID0gc3RhcnQ7CiAgICAgICAgICAgICAgdGhpcy5idWZmZXJbaW5kZXggKyAyXSA9IGVuZDsKICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcltpbmRleCArIDNdID0gc2l6ZTsKICAgICAgICAgIH0KICAgICAgfQogICAgICAvLyBBcHBseSBhIHNoaWZ0IGFjdGlvbgogICAgICAvLy8gQGludGVybmFsCiAgICAgIHNoaWZ0KGFjdGlvbiwgbmV4dCwgbmV4dEVuZCkgewogICAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5wb3M7CiAgICAgICAgICBpZiAoYWN0aW9uICYgMTMxMDcyIC8qIEdvdG9GbGFnICovKSB7CiAgICAgICAgICAgICAgdGhpcy5wdXNoU3RhdGUoYWN0aW9uICYgNjU1MzUgLyogVmFsdWVNYXNrICovLCB0aGlzLnBvcyk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmICgoYWN0aW9uICYgMjYyMTQ0IC8qIFN0YXlGbGFnICovKSA9PSAwKSB7IC8vIFJlZ3VsYXIgc2hpZnQKICAgICAgICAgICAgICBsZXQgbmV4dFN0YXRlID0gYWN0aW9uLCB7IHBhcnNlciB9ID0gdGhpcy5wOwogICAgICAgICAgICAgIGlmIChuZXh0RW5kID4gdGhpcy5wb3MgfHwgbmV4dCA8PSBwYXJzZXIubWF4Tm9kZSkgewogICAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IG5leHRFbmQ7CiAgICAgICAgICAgICAgICAgIGlmICghcGFyc2VyLnN0YXRlRmxhZyhuZXh0U3RhdGUsIDEgLyogU2tpcHBlZCAqLykpCiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZHVjZVBvcyA9IG5leHRFbmQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMucHVzaFN0YXRlKG5leHRTdGF0ZSwgc3RhcnQpOwogICAgICAgICAgICAgIHRoaXMuc2hpZnRDb250ZXh0KG5leHQsIHN0YXJ0KTsKICAgICAgICAgICAgICBpZiAobmV4dCA8PSBwYXJzZXIubWF4Tm9kZSkKICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaChuZXh0LCBzdGFydCwgbmV4dEVuZCwgNCk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsgLy8gU2hpZnQtYW5kLXN0YXksIHdoaWNoIG1lYW5zIHRoaXMgaXMgYSBza2lwcGVkIHRva2VuCiAgICAgICAgICAgICAgdGhpcy5wb3MgPSBuZXh0RW5kOwogICAgICAgICAgICAgIHRoaXMuc2hpZnRDb250ZXh0KG5leHQsIHN0YXJ0KTsKICAgICAgICAgICAgICBpZiAobmV4dCA8PSB0aGlzLnAucGFyc2VyLm1heE5vZGUpCiAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2gobmV4dCwgc3RhcnQsIG5leHRFbmQsIDQpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIC8vIEFwcGx5IGFuIGFjdGlvbgogICAgICAvLy8gQGludGVybmFsCiAgICAgIGFwcGx5KGFjdGlvbiwgbmV4dCwgbmV4dEVuZCkgewogICAgICAgICAgaWYgKGFjdGlvbiAmIDY1NTM2IC8qIFJlZHVjZUZsYWcgKi8pCiAgICAgICAgICAgICAgdGhpcy5yZWR1Y2UoYWN0aW9uKTsKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICB0aGlzLnNoaWZ0KGFjdGlvbiwgbmV4dCwgbmV4dEVuZCk7CiAgICAgIH0KICAgICAgLy8gQWRkIGEgcHJlYnVpbHQgKHJldXNlZCkgbm9kZSBpbnRvIHRoZSBidWZmZXIuCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgdXNlTm9kZSh2YWx1ZSwgbmV4dCkgewogICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5wLnJldXNlZC5sZW5ndGggLSAxOwogICAgICAgICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLnAucmV1c2VkW2luZGV4XSAhPSB2YWx1ZSkgewogICAgICAgICAgICAgIHRoaXMucC5yZXVzZWQucHVzaCh2YWx1ZSk7CiAgICAgICAgICAgICAgaW5kZXgrKzsKICAgICAgICAgIH0KICAgICAgICAgIGxldCBzdGFydCA9IHRoaXMucG9zOwogICAgICAgICAgdGhpcy5yZWR1Y2VQb3MgPSB0aGlzLnBvcyA9IHN0YXJ0ICsgdmFsdWUubGVuZ3RoOwogICAgICAgICAgdGhpcy5wdXNoU3RhdGUobmV4dCwgc3RhcnQpOwogICAgICAgICAgdGhpcy5idWZmZXIucHVzaChpbmRleCwgc3RhcnQsIHRoaXMucmVkdWNlUG9zLCAtMSAvKiBzaXplID09IC0xIG1lYW5zIHRoaXMgaXMgYSByZXVzZWQgdmFsdWUgKi8pOwogICAgICAgICAgaWYgKHRoaXMuY3VyQ29udGV4dCkKICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRleHQodGhpcy5jdXJDb250ZXh0LnRyYWNrZXIucmV1c2UodGhpcy5jdXJDb250ZXh0LmNvbnRleHQsIHZhbHVlLCB0aGlzLCB0aGlzLnAuc3RyZWFtLnJlc2V0KHRoaXMucG9zIC0gdmFsdWUubGVuZ3RoKSkpOwogICAgICB9CiAgICAgIC8vIFNwbGl0IHRoZSBzdGFjay4gRHVlIHRvIHRoZSBidWZmZXIgc2hhcmluZyBhbmQgdGhlIGZhY3QKICAgICAgLy8gdGhhdCBgdGhpcy5zdGFja2AgdGVuZHMgdG8gc3RheSBxdWl0ZSBzaGFsbG93LCB0aGlzIGlzbid0IHZlcnkKICAgICAgLy8gZXhwZW5zaXZlLgogICAgICAvLy8gQGludGVybmFsCiAgICAgIHNwbGl0KCkgewogICAgICAgICAgbGV0IHBhcmVudCA9IHRoaXM7CiAgICAgICAgICBsZXQgb2ZmID0gcGFyZW50LmJ1ZmZlci5sZW5ndGg7CiAgICAgICAgICAvLyBCZWNhdXNlIHRoZSB0b3Agb2YgdGhlIGJ1ZmZlciAoYWZ0ZXIgdGhpcy5wb3MpIG1heSBiZSBtdXRhdGVkCiAgICAgICAgICAvLyB0byByZW9yZGVyIHJlZHVjdGlvbnMgYW5kIHNraXBwZWQgdG9rZW5zLCBhbmQgc2hhcmVkIGJ1ZmZlcnMKICAgICAgICAgIC8vIHNob3VsZCBiZSBpbW11dGFibGUsIHRoaXMgY29waWVzIGFueSBvdXRzdGFuZGluZyBza2lwcGVkIHRva2VucwogICAgICAgICAgLy8gdG8gdGhlIG5ldyBidWZmZXIsIGFuZCBwdXRzIHRoZSBiYXNlIHBvaW50ZXIgYmVmb3JlIHRoZW0uCiAgICAgICAgICB3aGlsZSAob2ZmID4gMCAmJiBwYXJlbnQuYnVmZmVyW29mZiAtIDJdID4gcGFyZW50LnJlZHVjZVBvcykKICAgICAgICAgICAgICBvZmYgLT0gNDsKICAgICAgICAgIGxldCBidWZmZXIgPSBwYXJlbnQuYnVmZmVyLnNsaWNlKG9mZiksIGJhc2UgPSBwYXJlbnQuYnVmZmVyQmFzZSArIG9mZjsKICAgICAgICAgIC8vIE1ha2Ugc3VyZSBwYXJlbnQgcG9pbnRzIHRvIGFuIGFjdHVhbCBwYXJlbnQgd2l0aCBjb250ZW50LCBpZiB0aGVyZSBpcyBzdWNoIGEgcGFyZW50LgogICAgICAgICAgd2hpbGUgKHBhcmVudCAmJiBiYXNlID09IHBhcmVudC5idWZmZXJCYXNlKQogICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7CiAgICAgICAgICByZXR1cm4gbmV3IFN0YWNrKHRoaXMucCwgdGhpcy5zdGFjay5zbGljZSgpLCB0aGlzLnN0YXRlLCB0aGlzLnJlZHVjZVBvcywgdGhpcy5wb3MsIHRoaXMuc2NvcmUsIGJ1ZmZlciwgYmFzZSwgdGhpcy5jdXJDb250ZXh0LCB0aGlzLmxvb2tBaGVhZCwgcGFyZW50KTsKICAgICAgfQogICAgICAvLyBUcnkgdG8gcmVjb3ZlciBmcm9tIGFuIGVycm9yIGJ5ICdkZWxldGluZycgKGlnbm9yaW5nKSBvbmUgdG9rZW4uCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgcmVjb3ZlckJ5RGVsZXRlKG5leHQsIG5leHRFbmQpIHsKICAgICAgICAgIGxldCBpc05vZGUgPSBuZXh0IDw9IHRoaXMucC5wYXJzZXIubWF4Tm9kZTsKICAgICAgICAgIGlmIChpc05vZGUpCiAgICAgICAgICAgICAgdGhpcy5zdG9yZU5vZGUobmV4dCwgdGhpcy5wb3MsIG5leHRFbmQsIDQpOwogICAgICAgICAgdGhpcy5zdG9yZU5vZGUoMCAvKiBFcnIgKi8sIHRoaXMucG9zLCBuZXh0RW5kLCBpc05vZGUgPyA4IDogNCk7CiAgICAgICAgICB0aGlzLnBvcyA9IHRoaXMucmVkdWNlUG9zID0gbmV4dEVuZDsKICAgICAgICAgIHRoaXMuc2NvcmUgLT0gMTkwIC8qIERlbGV0ZSAqLzsKICAgICAgfQogICAgICAvLy8gQ2hlY2sgaWYgdGhlIGdpdmVuIHRlcm0gd291bGQgYmUgYWJsZSB0byBiZSBzaGlmdGVkIChvcHRpb25hbGx5CiAgICAgIC8vLyBhZnRlciBzb21lIHJlZHVjdGlvbnMpIG9uIHRoaXMgc3RhY2suIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IKICAgICAgLy8vIGV4dGVybmFsIHRva2VuaXplcnMgdGhhdCB3YW50IHRvIG1ha2Ugc3VyZSB0aGV5IG9ubHkgcHJvdmlkZSBhCiAgICAgIC8vLyBnaXZlbiB0b2tlbiB3aGVuIGl0IGFwcGxpZXMuCiAgICAgIGNhblNoaWZ0KHRlcm0pIHsKICAgICAgICAgIGZvciAobGV0IHNpbSA9IG5ldyBTaW11bGF0ZWRTdGFjayh0aGlzKTs7KSB7CiAgICAgICAgICAgICAgbGV0IGFjdGlvbiA9IHRoaXMucC5wYXJzZXIuc3RhdGVTbG90KHNpbS5zdGF0ZSwgNCAvKiBEZWZhdWx0UmVkdWNlICovKSB8fCB0aGlzLnAucGFyc2VyLmhhc0FjdGlvbihzaW0uc3RhdGUsIHRlcm0pOwogICAgICAgICAgICAgIGlmIChhY3Rpb24gPT0gMCkKICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgIGlmICgoYWN0aW9uICYgNjU1MzYgLyogUmVkdWNlRmxhZyAqLykgPT0gMCkKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgc2ltLnJlZHVjZShhY3Rpb24pOwogICAgICAgICAgfQogICAgICB9CiAgICAgIC8vIEFwcGx5IHVwIHRvIFJlY292ZXIuTWF4TmV4dCByZWNvdmVyeSBhY3Rpb25zIHRoYXQgY29uY2VwdHVhbGx5CiAgICAgIC8vIGluc2VydHMgc29tZSBtaXNzaW5nIHRva2VuIG9yIHJ1bGUuCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgcmVjb3ZlckJ5SW5zZXJ0KG5leHQpIHsKICAgICAgICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCA+PSAzMDAgLyogTWF4SW5zZXJ0U3RhY2tEZXB0aCAqLykKICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICBsZXQgbmV4dFN0YXRlcyA9IHRoaXMucC5wYXJzZXIubmV4dFN0YXRlcyh0aGlzLnN0YXRlKTsKICAgICAgICAgIGlmIChuZXh0U3RhdGVzLmxlbmd0aCA+IDQgLyogTWF4TmV4dCAqLyA8PCAxIHx8IHRoaXMuc3RhY2subGVuZ3RoID49IDEyMCAvKiBEYW1wZW5JbnNlcnRTdGFja0RlcHRoICovKSB7CiAgICAgICAgICAgICAgbGV0IGJlc3QgPSBbXTsKICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgczsgaSA8IG5leHRTdGF0ZXMubGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICAgICAgICAgICAgaWYgKChzID0gbmV4dFN0YXRlc1tpICsgMV0pICE9IHRoaXMuc3RhdGUgJiYgdGhpcy5wLnBhcnNlci5oYXNBY3Rpb24ocywgbmV4dCkpCiAgICAgICAgICAgICAgICAgICAgICBiZXN0LnB1c2gobmV4dFN0YXRlc1tpXSwgcyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCA8IDEyMCAvKiBEYW1wZW5JbnNlcnRTdGFja0RlcHRoICovKQogICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgYmVzdC5sZW5ndGggPCA0IC8qIE1heE5leHQgKi8gPDwgMSAmJiBpIDwgbmV4dFN0YXRlcy5sZW5ndGg7IGkgKz0gMikgewogICAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSBuZXh0U3RhdGVzW2kgKyAxXTsKICAgICAgICAgICAgICAgICAgICAgIGlmICghYmVzdC5zb21lKCh2LCBpKSA9PiAoaSAmIDEpICYmIHYgPT0gcykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgYmVzdC5wdXNoKG5leHRTdGF0ZXNbaV0sIHMpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbmV4dFN0YXRlcyA9IGJlc3Q7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgcmVzdWx0ID0gW107CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5leHRTdGF0ZXMubGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCA0IC8qIE1heE5leHQgKi87IGkgKz0gMikgewogICAgICAgICAgICAgIGxldCBzID0gbmV4dFN0YXRlc1tpICsgMV07CiAgICAgICAgICAgICAgaWYgKHMgPT0gdGhpcy5zdGF0ZSkKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgbGV0IHN0YWNrID0gdGhpcy5zcGxpdCgpOwogICAgICAgICAgICAgIHN0YWNrLnB1c2hTdGF0ZShzLCB0aGlzLnBvcyk7CiAgICAgICAgICAgICAgc3RhY2suc3RvcmVOb2RlKDAgLyogRXJyICovLCBzdGFjay5wb3MsIHN0YWNrLnBvcywgNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgc3RhY2suc2hpZnRDb250ZXh0KG5leHRTdGF0ZXNbaV0sIHRoaXMucG9zKTsKICAgICAgICAgICAgICBzdGFjay5zY29yZSAtPSAyMDAgLyogSW5zZXJ0ICovOwogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHN0YWNrKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0KICAgICAgLy8gRm9yY2UgYSByZWR1Y2UsIGlmIHBvc3NpYmxlLiBSZXR1cm4gZmFsc2UgaWYgdGhhdCBjYW4ndAogICAgICAvLyBiZSBkb25lLgogICAgICAvLy8gQGludGVybmFsCiAgICAgIGZvcmNlUmVkdWNlKCkgewogICAgICAgICAgbGV0IHJlZHVjZSA9IHRoaXMucC5wYXJzZXIuc3RhdGVTbG90KHRoaXMuc3RhdGUsIDUgLyogRm9yY2VkUmVkdWNlICovKTsKICAgICAgICAgIGlmICgocmVkdWNlICYgNjU1MzYgLyogUmVkdWNlRmxhZyAqLykgPT0gMCkKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICBsZXQgeyBwYXJzZXIgfSA9IHRoaXMucDsKICAgICAgICAgIGlmICghcGFyc2VyLnZhbGlkQWN0aW9uKHRoaXMuc3RhdGUsIHJlZHVjZSkpIHsKICAgICAgICAgICAgICBsZXQgZGVwdGggPSByZWR1Y2UgPj4gMTkgLyogUmVkdWNlRGVwdGhTaGlmdCAqLywgdGVybSA9IHJlZHVjZSAmIDY1NTM1IC8qIFZhbHVlTWFzayAqLzsKICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gdGhpcy5zdGFjay5sZW5ndGggLSBkZXB0aCAqIDM7CiAgICAgICAgICAgICAgaWYgKHRhcmdldCA8IDAgfHwgcGFyc2VyLmdldEdvdG8odGhpcy5zdGFja1t0YXJnZXRdLCB0ZXJtLCBmYWxzZSkgPCAwKQogICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgdGhpcy5zdG9yZU5vZGUoMCAvKiBFcnIgKi8sIHRoaXMucmVkdWNlUG9zLCB0aGlzLnJlZHVjZVBvcywgNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgdGhpcy5zY29yZSAtPSAxMDAgLyogUmVkdWNlICovOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5yZWR1Y2VQb3MgPSB0aGlzLnBvczsKICAgICAgICAgIHRoaXMucmVkdWNlKHJlZHVjZSk7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICAvLy8gQGludGVybmFsCiAgICAgIGZvcmNlQWxsKCkgewogICAgICAgICAgd2hpbGUgKCF0aGlzLnAucGFyc2VyLnN0YXRlRmxhZyh0aGlzLnN0YXRlLCAyIC8qIEFjY2VwdGluZyAqLykpIHsKICAgICAgICAgICAgICBpZiAoIXRoaXMuZm9yY2VSZWR1Y2UoKSkgewogICAgICAgICAgICAgICAgICB0aGlzLnN0b3JlTm9kZSgwIC8qIEVyciAqLywgdGhpcy5wb3MsIHRoaXMucG9zLCA0LCB0cnVlKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0KICAgICAgLy8vIENoZWNrIHdoZXRoZXIgdGhpcyBzdGF0ZSBoYXMgbm8gZnVydGhlciBhY3Rpb25zIChhc3N1bWVkIHRvIGJlIGEgZGlyZWN0IGRlc2NlbmRhbnQgb2YgdGhlCiAgICAgIC8vLyB0b3Agc3RhdGUsIHNpbmNlIGFueSBvdGhlciBzdGF0ZXMgbXVzdCBiZSBhYmxlIHRvIGNvbnRpbnVlCiAgICAgIC8vLyBzb21laG93KS4gQGludGVybmFsCiAgICAgIGdldCBkZWFkRW5kKCkgewogICAgICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoICE9IDMpCiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgbGV0IHsgcGFyc2VyIH0gPSB0aGlzLnA7CiAgICAgICAgICByZXR1cm4gcGFyc2VyLmRhdGFbcGFyc2VyLnN0YXRlU2xvdCh0aGlzLnN0YXRlLCAxIC8qIEFjdGlvbnMgKi8pXSA9PSA2NTUzNSAvKiBFbmQgKi8gJiYKICAgICAgICAgICAgICAhcGFyc2VyLnN0YXRlU2xvdCh0aGlzLnN0YXRlLCA0IC8qIERlZmF1bHRSZWR1Y2UgKi8pOwogICAgICB9CiAgICAgIC8vLyBSZXN0YXJ0IHRoZSBzdGFjayAocHV0IGl0IGJhY2sgaW4gaXRzIHN0YXJ0IHN0YXRlKS4gT25seSBzYWZlCiAgICAgIC8vLyB3aGVuIHRoaXMuc3RhY2subGVuZ3RoID09IDMgKHN0YXRlIGlzIGRpcmVjdGx5IGJlbG93IHRoZSB0b3AKICAgICAgLy8vIHN0YXRlKS4gQGludGVybmFsCiAgICAgIHJlc3RhcnQoKSB7CiAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGFja1swXTsKICAgICAgICAgIHRoaXMuc3RhY2subGVuZ3RoID0gMDsKICAgICAgfQogICAgICAvLy8gQGludGVybmFsCiAgICAgIHNhbWVTdGF0ZShvdGhlcikgewogICAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT0gb3RoZXIuc3RhdGUgfHwgdGhpcy5zdGFjay5sZW5ndGggIT0gb3RoZXIuc3RhY2subGVuZ3RoKQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGFjay5sZW5ndGg7IGkgKz0gMykKICAgICAgICAgICAgICBpZiAodGhpcy5zdGFja1tpXSAhPSBvdGhlci5zdGFja1tpXSkKICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgLy8vIEdldCB0aGUgcGFyc2VyIHVzZWQgYnkgdGhpcyBzdGFjay4KICAgICAgZ2V0IHBhcnNlcigpIHsgcmV0dXJuIHRoaXMucC5wYXJzZXI7IH0KICAgICAgLy8vIFRlc3Qgd2hldGhlciBhIGdpdmVuIGRpYWxlY3QgKGJ5IG51bWVyaWMgSUQsIGFzIGV4cG9ydGVkIGZyb20KICAgICAgLy8vIHRoZSB0ZXJtcyBmaWxlKSBpcyBlbmFibGVkLgogICAgICBkaWFsZWN0RW5hYmxlZChkaWFsZWN0SUQpIHsgcmV0dXJuIHRoaXMucC5wYXJzZXIuZGlhbGVjdC5mbGFnc1tkaWFsZWN0SURdOyB9CiAgICAgIHNoaWZ0Q29udGV4dCh0ZXJtLCBzdGFydCkgewogICAgICAgICAgaWYgKHRoaXMuY3VyQ29udGV4dCkKICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRleHQodGhpcy5jdXJDb250ZXh0LnRyYWNrZXIuc2hpZnQodGhpcy5jdXJDb250ZXh0LmNvbnRleHQsIHRlcm0sIHRoaXMsIHRoaXMucC5zdHJlYW0ucmVzZXQoc3RhcnQpKSk7CiAgICAgIH0KICAgICAgcmVkdWNlQ29udGV4dCh0ZXJtLCBzdGFydCkgewogICAgICAgICAgaWYgKHRoaXMuY3VyQ29udGV4dCkKICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRleHQodGhpcy5jdXJDb250ZXh0LnRyYWNrZXIucmVkdWNlKHRoaXMuY3VyQ29udGV4dC5jb250ZXh0LCB0ZXJtLCB0aGlzLCB0aGlzLnAuc3RyZWFtLnJlc2V0KHN0YXJ0KSkpOwogICAgICB9CiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgZW1pdENvbnRleHQoKSB7CiAgICAgICAgICBsZXQgbGFzdCA9IHRoaXMuYnVmZmVyLmxlbmd0aCAtIDE7CiAgICAgICAgICBpZiAobGFzdCA8IDAgfHwgdGhpcy5idWZmZXJbbGFzdF0gIT0gLTMpCiAgICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaCh0aGlzLmN1ckNvbnRleHQuaGFzaCwgdGhpcy5yZWR1Y2VQb3MsIHRoaXMucmVkdWNlUG9zLCAtMyk7CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBlbWl0TG9va0FoZWFkKCkgewogICAgICAgICAgbGV0IGxhc3QgPSB0aGlzLmJ1ZmZlci5sZW5ndGggLSAxOwogICAgICAgICAgaWYgKGxhc3QgPCAwIHx8IHRoaXMuYnVmZmVyW2xhc3RdICE9IC00KQogICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godGhpcy5sb29rQWhlYWQsIHRoaXMucmVkdWNlUG9zLCB0aGlzLnJlZHVjZVBvcywgLTQpOwogICAgICB9CiAgICAgIHVwZGF0ZUNvbnRleHQoY29udGV4dCkgewogICAgICAgICAgaWYgKGNvbnRleHQgIT0gdGhpcy5jdXJDb250ZXh0LmNvbnRleHQpIHsKICAgICAgICAgICAgICBsZXQgbmV3Q3ggPSBuZXcgU3RhY2tDb250ZXh0KHRoaXMuY3VyQ29udGV4dC50cmFja2VyLCBjb250ZXh0KTsKICAgICAgICAgICAgICBpZiAobmV3Q3guaGFzaCAhPSB0aGlzLmN1ckNvbnRleHQuaGFzaCkKICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0Q29udGV4dCgpOwogICAgICAgICAgICAgIHRoaXMuY3VyQ29udGV4dCA9IG5ld0N4OwogICAgICAgICAgfQogICAgICB9CiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgc2V0TG9va0FoZWFkKGxvb2tBaGVhZCkgewogICAgICAgICAgaWYgKGxvb2tBaGVhZCA+IHRoaXMubG9va0FoZWFkKSB7CiAgICAgICAgICAgICAgdGhpcy5lbWl0TG9va0FoZWFkKCk7CiAgICAgICAgICAgICAgdGhpcy5sb29rQWhlYWQgPSBsb29rQWhlYWQ7CiAgICAgICAgICB9CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBjbG9zZSgpIHsKICAgICAgICAgIGlmICh0aGlzLmN1ckNvbnRleHQgJiYgdGhpcy5jdXJDb250ZXh0LnRyYWNrZXIuc3RyaWN0KQogICAgICAgICAgICAgIHRoaXMuZW1pdENvbnRleHQoKTsKICAgICAgICAgIGlmICh0aGlzLmxvb2tBaGVhZCA+IDApCiAgICAgICAgICAgICAgdGhpcy5lbWl0TG9va0FoZWFkKCk7CiAgICAgIH0KICB9CiAgY2xhc3MgU3RhY2tDb250ZXh0IHsKICAgICAgY29uc3RydWN0b3IodHJhY2tlciwgY29udGV4dCkgewogICAgICAgICAgdGhpcy50cmFja2VyID0gdHJhY2tlcjsKICAgICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7CiAgICAgICAgICB0aGlzLmhhc2ggPSB0cmFja2VyLnN0cmljdCA/IHRyYWNrZXIuaGFzaChjb250ZXh0KSA6IDA7CiAgICAgIH0KICB9CiAgdmFyIFJlY292ZXI7CiAgKGZ1bmN0aW9uIChSZWNvdmVyKSB7CiAgICAgIFJlY292ZXJbUmVjb3ZlclsiSW5zZXJ0Il0gPSAyMDBdID0gIkluc2VydCI7CiAgICAgIFJlY292ZXJbUmVjb3ZlclsiRGVsZXRlIl0gPSAxOTBdID0gIkRlbGV0ZSI7CiAgICAgIFJlY292ZXJbUmVjb3ZlclsiUmVkdWNlIl0gPSAxMDBdID0gIlJlZHVjZSI7CiAgICAgIFJlY292ZXJbUmVjb3ZlclsiTWF4TmV4dCJdID0gNF0gPSAiTWF4TmV4dCI7CiAgICAgIFJlY292ZXJbUmVjb3ZlclsiTWF4SW5zZXJ0U3RhY2tEZXB0aCJdID0gMzAwXSA9ICJNYXhJbnNlcnRTdGFja0RlcHRoIjsKICAgICAgUmVjb3ZlcltSZWNvdmVyWyJEYW1wZW5JbnNlcnRTdGFja0RlcHRoIl0gPSAxMjBdID0gIkRhbXBlbkluc2VydFN0YWNrRGVwdGgiOwogIH0pKFJlY292ZXIgfHwgKFJlY292ZXIgPSB7fSkpOwogIC8vIFVzZWQgdG8gY2hlYXBseSBydW4gc29tZSByZWR1Y3Rpb25zIHRvIHNjYW4gYWhlYWQgd2l0aG91dCBtdXRhdGluZwogIC8vIGFuIGVudGlyZSBzdGFjawogIGNsYXNzIFNpbXVsYXRlZFN0YWNrIHsKICAgICAgY29uc3RydWN0b3Ioc3RhcnQpIHsKICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDsKICAgICAgICAgIHRoaXMuc3RhdGUgPSBzdGFydC5zdGF0ZTsKICAgICAgICAgIHRoaXMuc3RhY2sgPSBzdGFydC5zdGFjazsKICAgICAgICAgIHRoaXMuYmFzZSA9IHRoaXMuc3RhY2subGVuZ3RoOwogICAgICB9CiAgICAgIHJlZHVjZShhY3Rpb24pIHsKICAgICAgICAgIGxldCB0ZXJtID0gYWN0aW9uICYgNjU1MzUgLyogVmFsdWVNYXNrICovLCBkZXB0aCA9IGFjdGlvbiA+PiAxOSAvKiBSZWR1Y2VEZXB0aFNoaWZ0ICovOwogICAgICAgICAgaWYgKGRlcHRoID09IDApIHsKICAgICAgICAgICAgICBpZiAodGhpcy5zdGFjayA9PSB0aGlzLnN0YXJ0LnN0YWNrKQogICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrID0gdGhpcy5zdGFjay5zbGljZSgpOwogICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh0aGlzLnN0YXRlLCAwLCAwKTsKICAgICAgICAgICAgICB0aGlzLmJhc2UgKz0gMzsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHRoaXMuYmFzZSAtPSAoZGVwdGggLSAxKSAqIDM7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgZ290byA9IHRoaXMuc3RhcnQucC5wYXJzZXIuZ2V0R290byh0aGlzLnN0YWNrW3RoaXMuYmFzZSAtIDNdLCB0ZXJtLCB0cnVlKTsKICAgICAgICAgIHRoaXMuc3RhdGUgPSBnb3RvOwogICAgICB9CiAgfQogIC8vIFRoaXMgaXMgZ2l2ZW4gdG8gYFRyZWUuYnVpbGRgIHRvIGJ1aWxkIGEgYnVmZmVyLCBhbmQgZW5jYXBzdWxhdGVzCiAgLy8gdGhlIHBhcmVudC1zdGFjay13YWxraW5nIG5lY2Vzc2FyeSB0byByZWFkIHRoZSBub2Rlcy4KICBjbGFzcyBTdGFja0J1ZmZlckN1cnNvciB7CiAgICAgIGNvbnN0cnVjdG9yKHN0YWNrLCBwb3MsIGluZGV4KSB7CiAgICAgICAgICB0aGlzLnN0YWNrID0gc3RhY2s7CiAgICAgICAgICB0aGlzLnBvcyA9IHBvczsKICAgICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDsKICAgICAgICAgIHRoaXMuYnVmZmVyID0gc3RhY2suYnVmZmVyOwogICAgICAgICAgaWYgKHRoaXMuaW5kZXggPT0gMCkKICAgICAgICAgICAgICB0aGlzLm1heWJlTmV4dCgpOwogICAgICB9CiAgICAgIHN0YXRpYyBjcmVhdGUoc3RhY2ssIHBvcyA9IHN0YWNrLmJ1ZmZlckJhc2UgKyBzdGFjay5idWZmZXIubGVuZ3RoKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFN0YWNrQnVmZmVyQ3Vyc29yKHN0YWNrLCBwb3MsIHBvcyAtIHN0YWNrLmJ1ZmZlckJhc2UpOwogICAgICB9CiAgICAgIG1heWJlTmV4dCgpIHsKICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy5zdGFjay5wYXJlbnQ7CiAgICAgICAgICBpZiAobmV4dCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMuc3RhY2suYnVmZmVyQmFzZSAtIG5leHQuYnVmZmVyQmFzZTsKICAgICAgICAgICAgICB0aGlzLnN0YWNrID0gbmV4dDsKICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5leHQuYnVmZmVyOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGdldCBpZCgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSA0XTsgfQogICAgICBnZXQgc3RhcnQoKSB7IHJldHVybiB0aGlzLmJ1ZmZlclt0aGlzLmluZGV4IC0gM107IH0KICAgICAgZ2V0IGVuZCgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSAyXTsgfQogICAgICBnZXQgc2l6ZSgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSAxXTsgfQogICAgICBuZXh0KCkgewogICAgICAgICAgdGhpcy5pbmRleCAtPSA0OwogICAgICAgICAgdGhpcy5wb3MgLT0gNDsKICAgICAgICAgIGlmICh0aGlzLmluZGV4ID09IDApCiAgICAgICAgICAgICAgdGhpcy5tYXliZU5leHQoKTsKICAgICAgfQogICAgICBmb3JrKCkgewogICAgICAgICAgcmV0dXJuIG5ldyBTdGFja0J1ZmZlckN1cnNvcih0aGlzLnN0YWNrLCB0aGlzLnBvcywgdGhpcy5pbmRleCk7CiAgICAgIH0KICB9CgogIGNsYXNzIENhY2hlZFRva2VuIHsKICAgICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgICB0aGlzLnN0YXJ0ID0gLTE7CiAgICAgICAgICB0aGlzLnZhbHVlID0gLTE7CiAgICAgICAgICB0aGlzLmVuZCA9IC0xOwogICAgICAgICAgdGhpcy5leHRlbmRlZCA9IC0xOwogICAgICAgICAgdGhpcy5sb29rQWhlYWQgPSAwOwogICAgICAgICAgdGhpcy5tYXNrID0gMDsKICAgICAgICAgIHRoaXMuY29udGV4dCA9IDA7CiAgICAgIH0KICB9CiAgY29uc3QgbnVsbFRva2VuID0gbmV3IENhY2hlZFRva2VuOwogIC8vLyBbVG9rZW5pemVyc10oI2xyLkV4dGVybmFsVG9rZW5pemVyKSBpbnRlcmFjdCB3aXRoIHRoZSBpbnB1dAogIC8vLyB0aHJvdWdoIHRoaXMgaW50ZXJmYWNlLiBJdCBwcmVzZW50cyB0aGUgaW5wdXQgYXMgYSBzdHJlYW0gb2YKICAvLy8gY2hhcmFjdGVycywgdHJhY2tpbmcgbG9va2FoZWFkIGFuZCBoaWRpbmcgdGhlIGNvbXBsZXhpdHkgb2YKICAvLy8gW3Jhbmdlc10oI2NvbW1vbi5QYXJzZXIucGFyc2VecmFuZ2VzKSBmcm9tIHRva2VuaXplciBjb2RlLgogIGNsYXNzIElucHV0U3RyZWFtIHsKICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBjb25zdHJ1Y3RvcigKICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBpbnB1dCwgCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgcmFuZ2VzKSB7CiAgICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7CiAgICAgICAgICB0aGlzLnJhbmdlcyA9IHJhbmdlczsKICAgICAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgICAgIHRoaXMuY2h1bmsgPSAiIjsKICAgICAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgICAgIHRoaXMuY2h1bmtPZmYgPSAwOwogICAgICAgICAgLy8vIEJhY2t1cCBjaHVuawogICAgICAgICAgdGhpcy5jaHVuazIgPSAiIjsKICAgICAgICAgIHRoaXMuY2h1bmsyUG9zID0gMDsKICAgICAgICAgIC8vLyBUaGUgY2hhcmFjdGVyIGNvZGUgb2YgdGhlIG5leHQgY29kZSB1bml0IGluIHRoZSBpbnB1dCwgb3IgLTEKICAgICAgICAgIC8vLyB3aGVuIHRoZSBzdHJlYW0gaXMgYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQuCiAgICAgICAgICB0aGlzLm5leHQgPSAtMTsKICAgICAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgICAgIHRoaXMudG9rZW4gPSBudWxsVG9rZW47CiAgICAgICAgICB0aGlzLnJhbmdlSW5kZXggPSAwOwogICAgICAgICAgdGhpcy5wb3MgPSB0aGlzLmNodW5rUG9zID0gcmFuZ2VzWzBdLmZyb207CiAgICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2VzWzBdOwogICAgICAgICAgdGhpcy5lbmQgPSByYW5nZXNbcmFuZ2VzLmxlbmd0aCAtIDFdLnRvOwogICAgICAgICAgdGhpcy5yZWFkTmV4dCgpOwogICAgICB9CiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgcmVzb2x2ZU9mZnNldChvZmZzZXQsIGFzc29jKSB7CiAgICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLnJhbmdlLCBpbmRleCA9IHRoaXMucmFuZ2VJbmRleDsKICAgICAgICAgIGxldCBwb3MgPSB0aGlzLnBvcyArIG9mZnNldDsKICAgICAgICAgIHdoaWxlIChwb3MgPCByYW5nZS5mcm9tKSB7CiAgICAgICAgICAgICAgaWYgKCFpbmRleCkKICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgbGV0IG5leHQgPSB0aGlzLnJhbmdlc1stLWluZGV4XTsKICAgICAgICAgICAgICBwb3MgLT0gcmFuZ2UuZnJvbSAtIG5leHQudG87CiAgICAgICAgICAgICAgcmFuZ2UgPSBuZXh0OwogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKGFzc29jIDwgMCA/IHBvcyA+IHJhbmdlLnRvIDogcG9zID49IHJhbmdlLnRvKSB7CiAgICAgICAgICAgICAgaWYgKGluZGV4ID09IHRoaXMucmFuZ2VzLmxlbmd0aCAtIDEpCiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy5yYW5nZXNbKytpbmRleF07CiAgICAgICAgICAgICAgcG9zICs9IG5leHQuZnJvbSAtIHJhbmdlLnRvOwogICAgICAgICAgICAgIHJhbmdlID0gbmV4dDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBwb3M7CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBjbGlwUG9zKHBvcykgewogICAgICAgICAgaWYgKHBvcyA+PSB0aGlzLnJhbmdlLmZyb20gJiYgcG9zIDwgdGhpcy5yYW5nZS50bykKICAgICAgICAgICAgICByZXR1cm4gcG9zOwogICAgICAgICAgZm9yIChsZXQgcmFuZ2Ugb2YgdGhpcy5yYW5nZXMpCiAgICAgICAgICAgICAgaWYgKHJhbmdlLnRvID4gcG9zKQogICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgocG9zLCByYW5nZS5mcm9tKTsKICAgICAgICAgIHJldHVybiB0aGlzLmVuZDsKICAgICAgfQogICAgICAvLy8gTG9vayBhdCBhIGNvZGUgdW5pdCBuZWFyIHRoZSBzdHJlYW0gcG9zaXRpb24uIGAucGVlaygwKWAgZXF1YWxzCiAgICAgIC8vLyBgLm5leHRgLCBgLnBlZWsoLTEpYCBnaXZlcyB5b3UgdGhlIHByZXZpb3VzIGNoYXJhY3RlciwgYW5kIHNvCiAgICAgIC8vLyBvbi4KICAgICAgLy8vCiAgICAgIC8vLyBOb3RlIHRoYXQgbG9va2luZyBhcm91bmQgZHVyaW5nIHRva2VuaXppbmcgY3JlYXRlcyBkZXBlbmRlbmNpZXMKICAgICAgLy8vIG9uIHBvdGVudGlhbGx5IGZhci1hd2F5IGNvbnRlbnQsIHdoaWNoIG1heSByZWR1Y2UgdGhlCiAgICAgIC8vLyBlZmZlY3RpdmVuZXNzIGluY3JlbWVudGFsIHBhcnNpbmfigJR3aGVuIGxvb2tpbmcgZm9yd2FyZOKAlG9yIGV2ZW4KICAgICAgLy8vIGNhdXNlIGludmFsaWQgcmVwYXJzZXMgd2hlbiBsb29raW5nIGJhY2t3YXJkIG1vcmUgdGhhbiAyNSBjb2RlCiAgICAgIC8vLyB1bml0cywgc2luY2UgdGhlIGxpYnJhcnkgZG9lcyBub3QgdHJhY2sgbG9va2JlaGluZC4KICAgICAgcGVlayhvZmZzZXQpIHsKICAgICAgICAgIGxldCBpZHggPSB0aGlzLmNodW5rT2ZmICsgb2Zmc2V0LCBwb3MsIHJlc3VsdDsKICAgICAgICAgIGlmIChpZHggPj0gMCAmJiBpZHggPCB0aGlzLmNodW5rLmxlbmd0aCkgewogICAgICAgICAgICAgIHBvcyA9IHRoaXMucG9zICsgb2Zmc2V0OwogICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuY2h1bmsuY2hhckNvZGVBdChpZHgpOwogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgbGV0IHJlc29sdmVkID0gdGhpcy5yZXNvbHZlT2Zmc2V0KG9mZnNldCwgMSk7CiAgICAgICAgICAgICAgaWYgKHJlc29sdmVkID09IG51bGwpCiAgICAgICAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICAgICAgICBwb3MgPSByZXNvbHZlZDsKICAgICAgICAgICAgICBpZiAocG9zID49IHRoaXMuY2h1bmsyUG9zICYmIHBvcyA8IHRoaXMuY2h1bmsyUG9zICsgdGhpcy5jaHVuazIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuY2h1bmsyLmNoYXJDb2RlQXQocG9zIC0gdGhpcy5jaHVuazJQb3MpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgbGV0IGkgPSB0aGlzLnJhbmdlSW5kZXgsIHJhbmdlID0gdGhpcy5yYW5nZTsKICAgICAgICAgICAgICAgICAgd2hpbGUgKHJhbmdlLnRvIDw9IHBvcykKICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5yYW5nZXNbKytpXTsKICAgICAgICAgICAgICAgICAgdGhpcy5jaHVuazIgPSB0aGlzLmlucHV0LmNodW5rKHRoaXMuY2h1bmsyUG9zID0gcG9zKTsKICAgICAgICAgICAgICAgICAgaWYgKHBvcyArIHRoaXMuY2h1bmsyLmxlbmd0aCA+IHJhbmdlLnRvKQogICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaHVuazIgPSB0aGlzLmNodW5rMi5zbGljZSgwLCByYW5nZS50byAtIHBvcyk7CiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuY2h1bmsyLmNoYXJDb2RlQXQoMCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHBvcyA+PSB0aGlzLnRva2VuLmxvb2tBaGVhZCkKICAgICAgICAgICAgICB0aGlzLnRva2VuLmxvb2tBaGVhZCA9IHBvcyArIDE7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9CiAgICAgIC8vLyBBY2NlcHQgYSB0b2tlbi4gQnkgZGVmYXVsdCwgdGhlIGVuZCBvZiB0aGUgdG9rZW4gaXMgc2V0IHRvIHRoZQogICAgICAvLy8gY3VycmVudCBzdHJlYW0gcG9zaXRpb24sIGJ1dCB5b3UgY2FuIHBhc3MgYW4gb2Zmc2V0IChyZWxhdGl2ZSB0bwogICAgICAvLy8gdGhlIHN0cmVhbSBwb3NpdGlvbikgdG8gY2hhbmdlIHRoYXQuCiAgICAgIGFjY2VwdFRva2VuKHRva2VuLCBlbmRPZmZzZXQgPSAwKSB7CiAgICAgICAgICBsZXQgZW5kID0gZW5kT2Zmc2V0ID8gdGhpcy5yZXNvbHZlT2Zmc2V0KGVuZE9mZnNldCwgLTEpIDogdGhpcy5wb3M7CiAgICAgICAgICBpZiAoZW5kID09IG51bGwgfHwgZW5kIDwgdGhpcy50b2tlbi5zdGFydCkKICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigiVG9rZW4gZW5kIG91dCBvZiBib3VuZHMiKTsKICAgICAgICAgIHRoaXMudG9rZW4udmFsdWUgPSB0b2tlbjsKICAgICAgICAgIHRoaXMudG9rZW4uZW5kID0gZW5kOwogICAgICB9CiAgICAgIGdldENodW5rKCkgewogICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMuY2h1bmsyUG9zICYmIHRoaXMucG9zIDwgdGhpcy5jaHVuazJQb3MgKyB0aGlzLmNodW5rMi5sZW5ndGgpIHsKICAgICAgICAgICAgICBsZXQgeyBjaHVuaywgY2h1bmtQb3MgfSA9IHRoaXM7CiAgICAgICAgICAgICAgdGhpcy5jaHVuayA9IHRoaXMuY2h1bmsyOwogICAgICAgICAgICAgIHRoaXMuY2h1bmtQb3MgPSB0aGlzLmNodW5rMlBvczsKICAgICAgICAgICAgICB0aGlzLmNodW5rMiA9IGNodW5rOwogICAgICAgICAgICAgIHRoaXMuY2h1bmsyUG9zID0gY2h1bmtQb3M7CiAgICAgICAgICAgICAgdGhpcy5jaHVua09mZiA9IHRoaXMucG9zIC0gdGhpcy5jaHVua1BvczsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHRoaXMuY2h1bmsyID0gdGhpcy5jaHVuazsKICAgICAgICAgICAgICB0aGlzLmNodW5rMlBvcyA9IHRoaXMuY2h1bmtQb3M7CiAgICAgICAgICAgICAgbGV0IG5leHRDaHVuayA9IHRoaXMuaW5wdXQuY2h1bmsodGhpcy5wb3MpOwogICAgICAgICAgICAgIGxldCBlbmQgPSB0aGlzLnBvcyArIG5leHRDaHVuay5sZW5ndGg7CiAgICAgICAgICAgICAgdGhpcy5jaHVuayA9IGVuZCA+IHRoaXMucmFuZ2UudG8gPyBuZXh0Q2h1bmsuc2xpY2UoMCwgdGhpcy5yYW5nZS50byAtIHRoaXMucG9zKSA6IG5leHRDaHVuazsKICAgICAgICAgICAgICB0aGlzLmNodW5rUG9zID0gdGhpcy5wb3M7CiAgICAgICAgICAgICAgdGhpcy5jaHVua09mZiA9IDA7CiAgICAgICAgICB9CiAgICAgIH0KICAgICAgcmVhZE5leHQoKSB7CiAgICAgICAgICBpZiAodGhpcy5jaHVua09mZiA+PSB0aGlzLmNodW5rLmxlbmd0aCkgewogICAgICAgICAgICAgIHRoaXMuZ2V0Q2h1bmsoKTsKICAgICAgICAgICAgICBpZiAodGhpcy5jaHVua09mZiA9PSB0aGlzLmNodW5rLmxlbmd0aCkKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dCA9IC0xOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXMubmV4dCA9IHRoaXMuY2h1bmsuY2hhckNvZGVBdCh0aGlzLmNodW5rT2ZmKTsKICAgICAgfQogICAgICAvLy8gTW92ZSB0aGUgc3RyZWFtIGZvcndhcmQgTiAoZGVmYXVsdHMgdG8gMSkgY29kZSB1bml0cy4gUmV0dXJucwogICAgICAvLy8gdGhlIG5ldyB2YWx1ZSBvZiBbYG5leHRgXSgjbHIuSW5wdXRTdHJlYW0ubmV4dCkuCiAgICAgIGFkdmFuY2UobiA9IDEpIHsKICAgICAgICAgIHRoaXMuY2h1bmtPZmYgKz0gbjsKICAgICAgICAgIHdoaWxlICh0aGlzLnBvcyArIG4gPj0gdGhpcy5yYW5nZS50bykgewogICAgICAgICAgICAgIGlmICh0aGlzLnJhbmdlSW5kZXggPT0gdGhpcy5yYW5nZXMubGVuZ3RoIC0gMSkKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0RG9uZSgpOwogICAgICAgICAgICAgIG4gLT0gdGhpcy5yYW5nZS50byAtIHRoaXMucG9zOwogICAgICAgICAgICAgIHRoaXMucmFuZ2UgPSB0aGlzLnJhbmdlc1srK3RoaXMucmFuZ2VJbmRleF07CiAgICAgICAgICAgICAgdGhpcy5wb3MgPSB0aGlzLnJhbmdlLmZyb207CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLnBvcyArPSBuOwogICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMudG9rZW4ubG9va0FoZWFkKQogICAgICAgICAgICAgIHRoaXMudG9rZW4ubG9va0FoZWFkID0gdGhpcy5wb3MgKyAxOwogICAgICAgICAgcmV0dXJuIHRoaXMucmVhZE5leHQoKTsKICAgICAgfQogICAgICBzZXREb25lKCkgewogICAgICAgICAgdGhpcy5wb3MgPSB0aGlzLmNodW5rUG9zID0gdGhpcy5lbmQ7CiAgICAgICAgICB0aGlzLnJhbmdlID0gdGhpcy5yYW5nZXNbdGhpcy5yYW5nZUluZGV4ID0gdGhpcy5yYW5nZXMubGVuZ3RoIC0gMV07CiAgICAgICAgICB0aGlzLmNodW5rID0gIiI7CiAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0ID0gLTE7CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICByZXNldChwb3MsIHRva2VuKSB7CiAgICAgICAgICBpZiAodG9rZW4pIHsKICAgICAgICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47CiAgICAgICAgICAgICAgdG9rZW4uc3RhcnQgPSBwb3M7CiAgICAgICAgICAgICAgdG9rZW4ubG9va0FoZWFkID0gcG9zICsgMTsKICAgICAgICAgICAgICB0b2tlbi52YWx1ZSA9IHRva2VuLmV4dGVuZGVkID0gLTE7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLnRva2VuID0gbnVsbFRva2VuOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRoaXMucG9zICE9IHBvcykgewogICAgICAgICAgICAgIHRoaXMucG9zID0gcG9zOwogICAgICAgICAgICAgIGlmIChwb3MgPT0gdGhpcy5lbmQpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5zZXREb25lKCk7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB3aGlsZSAocG9zIDwgdGhpcy5yYW5nZS5mcm9tKQogICAgICAgICAgICAgICAgICB0aGlzLnJhbmdlID0gdGhpcy5yYW5nZXNbLS10aGlzLnJhbmdlSW5kZXhdOwogICAgICAgICAgICAgIHdoaWxlIChwb3MgPj0gdGhpcy5yYW5nZS50bykKICAgICAgICAgICAgICAgICAgdGhpcy5yYW5nZSA9IHRoaXMucmFuZ2VzWysrdGhpcy5yYW5nZUluZGV4XTsKICAgICAgICAgICAgICBpZiAocG9zID49IHRoaXMuY2h1bmtQb3MgJiYgcG9zIDwgdGhpcy5jaHVua1BvcyArIHRoaXMuY2h1bmsubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuY2h1bmtPZmYgPSBwb3MgLSB0aGlzLmNodW5rUG9zOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgdGhpcy5jaHVuayA9ICIiOwogICAgICAgICAgICAgICAgICB0aGlzLmNodW5rT2ZmID0gMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGhpcy5yZWFkTmV4dCgpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICByZWFkKGZyb20sIHRvKSB7CiAgICAgICAgICBpZiAoZnJvbSA+PSB0aGlzLmNodW5rUG9zICYmIHRvIDw9IHRoaXMuY2h1bmtQb3MgKyB0aGlzLmNodW5rLmxlbmd0aCkKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaHVuay5zbGljZShmcm9tIC0gdGhpcy5jaHVua1BvcywgdG8gLSB0aGlzLmNodW5rUG9zKTsKICAgICAgICAgIGlmIChmcm9tID49IHRoaXMuY2h1bmsyUG9zICYmIHRvIDw9IHRoaXMuY2h1bmsyUG9zICsgdGhpcy5jaHVuazIubGVuZ3RoKQogICAgICAgICAgICAgIHJldHVybiB0aGlzLmNodW5rMi5zbGljZShmcm9tIC0gdGhpcy5jaHVuazJQb3MsIHRvIC0gdGhpcy5jaHVuazJQb3MpOwogICAgICAgICAgaWYgKGZyb20gPj0gdGhpcy5yYW5nZS5mcm9tICYmIHRvIDw9IHRoaXMucmFuZ2UudG8pCiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXQucmVhZChmcm9tLCB0byk7CiAgICAgICAgICBsZXQgcmVzdWx0ID0gIiI7CiAgICAgICAgICBmb3IgKGxldCByIG9mIHRoaXMucmFuZ2VzKSB7CiAgICAgICAgICAgICAgaWYgKHIuZnJvbSA+PSB0bykKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgaWYgKHIudG8gPiBmcm9tKQogICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdGhpcy5pbnB1dC5yZWFkKE1hdGgubWF4KHIuZnJvbSwgZnJvbSksIE1hdGgubWluKHIudG8sIHRvKSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9CiAgfQogIC8vLyBAaW50ZXJuYWwKICBjbGFzcyBUb2tlbkdyb3VwIHsKICAgICAgY29uc3RydWN0b3IoZGF0YSwgaWQpIHsKICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7CiAgICAgICAgICB0aGlzLmlkID0gaWQ7CiAgICAgIH0KICAgICAgdG9rZW4oaW5wdXQsIHN0YWNrKSB7IHJlYWRUb2tlbih0aGlzLmRhdGEsIGlucHV0LCBzdGFjaywgdGhpcy5pZCk7IH0KICB9CiAgVG9rZW5Hcm91cC5wcm90b3R5cGUuY29udGV4dHVhbCA9IFRva2VuR3JvdXAucHJvdG90eXBlLmZhbGxiYWNrID0gVG9rZW5Hcm91cC5wcm90b3R5cGUuZXh0ZW5kID0gZmFsc2U7CiAgLy8vIGBAZXh0ZXJuYWwgdG9rZW5zYCBkZWNsYXJhdGlvbnMgaW4gdGhlIGdyYW1tYXIgc2hvdWxkIHJlc29sdmUgdG8KICAvLy8gYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy4KICBjbGFzcyBFeHRlcm5hbFRva2VuaXplciB7CiAgICAgIC8vLyBDcmVhdGUgYSB0b2tlbml6ZXIuIFRoZSBmaXJzdCBhcmd1bWVudCBpcyB0aGUgZnVuY3Rpb24gdGhhdCwKICAgICAgLy8vIGdpdmVuIGFuIGlucHV0IHN0cmVhbSwgc2NhbnMgZm9yIHRoZSB0eXBlcyBvZiB0b2tlbnMgaXQKICAgICAgLy8vIHJlY29nbml6ZXMgYXQgdGhlIHN0cmVhbSdzIHBvc2l0aW9uLCBhbmQgY2FsbHMKICAgICAgLy8vIFtgYWNjZXB0VG9rZW5gXSgjbHIuSW5wdXRTdHJlYW0uYWNjZXB0VG9rZW4pIHdoZW4gaXQgZmluZHMKICAgICAgLy8vIG9uZS4KICAgICAgY29uc3RydWN0b3IoCiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgdG9rZW4sIG9wdGlvbnMgPSB7fSkgewogICAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuOwogICAgICAgICAgdGhpcy5jb250ZXh0dWFsID0gISFvcHRpb25zLmNvbnRleHR1YWw7CiAgICAgICAgICB0aGlzLmZhbGxiYWNrID0gISFvcHRpb25zLmZhbGxiYWNrOwogICAgICAgICAgdGhpcy5leHRlbmQgPSAhIW9wdGlvbnMuZXh0ZW5kOwogICAgICB9CiAgfQogIC8vIFRva2VuaXplciBkYXRhIGlzIHN0b3JlZCBhIGJpZyB1aW50MTYgYXJyYXkgY29udGFpbmluZywgZm9yIGVhY2gKICAvLyBzdGF0ZToKICAvLwogIC8vICAtIEEgZ3JvdXAgYml0bWFzaywgaW5kaWNhdGluZyB3aGF0IHRva2VuIGdyb3VwcyBhcmUgcmVhY2hhYmxlIGZyb20KICAvLyAgICB0aGlzIHN0YXRlLCBzbyB0aGF0IHBhdGhzIHRoYXQgY2FuIG9ubHkgbGVhZCB0byB0b2tlbnMgbm90IGluCiAgLy8gICAgYW55IG9mIHRoZSBjdXJyZW50IGdyb3VwcyBjYW4gYmUgY3V0IG9mZiBlYXJseS4KICAvLwogIC8vICAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgZW5kIG9mIHRoZSBzdGF0ZSdzIHNlcXVlbmNlIG9mIGFjY2VwdGluZwogIC8vICAgIHRva2VucwogIC8vCiAgLy8gIC0gVGhlIG51bWJlciBvZiBvdXRnb2luZyBlZGdlcyBmb3IgdGhlIHN0YXRlCiAgLy8KICAvLyAgLSBUaGUgYWNjZXB0aW5nIHRva2VucywgYXMgKHRva2VuIGlkLCBncm91cCBtYXNrKSBwYWlycwogIC8vCiAgLy8gIC0gVGhlIG91dGdvaW5nIGVkZ2VzLCBhcyAoc3RhcnQgY2hhcmFjdGVyLCBlbmQgY2hhcmFjdGVyLCBzdGF0ZQogIC8vICAgIGluZGV4KSB0cmlwbGVzLCB3aXRoIGVuZCBjaGFyYWN0ZXIgYmVpbmcgZXhjbHVzaXZlCiAgLy8KICAvLyBUaGlzIGZ1bmN0aW9uIGludGVycHJldHMgdGhhdCBkYXRhLCBydW5uaW5nIHRocm91Z2ggYSBzdHJlYW0gYXMKICAvLyBsb25nIGFzIG5ldyBzdGF0ZXMgd2l0aCB0aGUgYSBtYXRjaGluZyBncm91cCBtYXNrIGNhbiBiZSByZWFjaGVkLAogIC8vIGFuZCB1cGRhdGluZyBgaW5wdXQudG9rZW5gIHdoZW4gaXQgbWF0Y2hlcyBhIHRva2VuLgogIGZ1bmN0aW9uIHJlYWRUb2tlbihkYXRhLCBpbnB1dCwgc3RhY2ssIGdyb3VwKSB7CiAgICAgIGxldCBzdGF0ZSA9IDAsIGdyb3VwTWFzayA9IDEgPDwgZ3JvdXAsIHsgcGFyc2VyIH0gPSBzdGFjay5wLCB7IGRpYWxlY3QgfSA9IHBhcnNlcjsKICAgICAgc2NhbjogZm9yICg7OykgewogICAgICAgICAgaWYgKChncm91cE1hc2sgJiBkYXRhW3N0YXRlXSkgPT0gMCkKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgIGxldCBhY2NFbmQgPSBkYXRhW3N0YXRlICsgMV07CiAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoaXMgc3RhdGUgY2FuIGxlYWQgdG8gYSB0b2tlbiBpbiB0aGUgY3VycmVudCBncm91cAogICAgICAgICAgLy8gQWNjZXB0IHRva2VucyBpbiB0aGlzIHN0YXRlLCBwb3NzaWJseSBvdmVyd3JpdGluZwogICAgICAgICAgLy8gbG93ZXItcHJlY2VkZW5jZSAvIHNob3J0ZXIgdG9rZW5zCiAgICAgICAgICBmb3IgKGxldCBpID0gc3RhdGUgKyAzOyBpIDwgYWNjRW5kOyBpICs9IDIpCiAgICAgICAgICAgICAgaWYgKChkYXRhW2kgKyAxXSAmIGdyb3VwTWFzaykgPiAwKSB7CiAgICAgICAgICAgICAgICAgIGxldCB0ZXJtID0gZGF0YVtpXTsKICAgICAgICAgICAgICAgICAgaWYgKGRpYWxlY3QuYWxsb3dzKHRlcm0pICYmCiAgICAgICAgICAgICAgICAgICAgICAoaW5wdXQudG9rZW4udmFsdWUgPT0gLTEgfHwgaW5wdXQudG9rZW4udmFsdWUgPT0gdGVybSB8fCBwYXJzZXIub3ZlcnJpZGVzKHRlcm0sIGlucHV0LnRva2VuLnZhbHVlKSkpIHsKICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmFjY2VwdFRva2VuKHRlcm0pOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICBsZXQgbmV4dCA9IGlucHV0Lm5leHQsIGxvdyA9IDAsIGhpZ2ggPSBkYXRhW3N0YXRlICsgMl07CiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIEVPRgogICAgICAgICAgaWYgKGlucHV0Lm5leHQgPCAwICYmIGhpZ2ggPiBsb3cgJiYgZGF0YVthY2NFbmQgKyBoaWdoICogMyAtIDNdID09IDY1NTM1IC8qIEVuZCAqLyAmJiBkYXRhW2FjY0VuZCArIGhpZ2ggKiAzIC0gM10gPT0gNjU1MzUgLyogRW5kICovKSB7CiAgICAgICAgICAgICAgc3RhdGUgPSBkYXRhW2FjY0VuZCArIGhpZ2ggKiAzIC0gMV07CiAgICAgICAgICAgICAgY29udGludWUgc2NhbjsKICAgICAgICAgIH0KICAgICAgICAgIC8vIERvIGEgYmluYXJ5IHNlYXJjaCBvbiB0aGUgc3RhdGUncyBlZGdlcwogICAgICAgICAgZm9yICg7IGxvdyA8IGhpZ2g7KSB7CiAgICAgICAgICAgICAgbGV0IG1pZCA9IChsb3cgKyBoaWdoKSA+PiAxOwogICAgICAgICAgICAgIGxldCBpbmRleCA9IGFjY0VuZCArIG1pZCArIChtaWQgPDwgMSk7CiAgICAgICAgICAgICAgbGV0IGZyb20gPSBkYXRhW2luZGV4XSwgdG8gPSBkYXRhW2luZGV4ICsgMV0gfHwgMHgxMDAwMDsKICAgICAgICAgICAgICBpZiAobmV4dCA8IGZyb20pCiAgICAgICAgICAgICAgICAgIGhpZ2ggPSBtaWQ7CiAgICAgICAgICAgICAgZWxzZSBpZiAobmV4dCA+PSB0bykKICAgICAgICAgICAgICAgICAgbG93ID0gbWlkICsgMTsKICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgc3RhdGUgPSBkYXRhW2luZGV4ICsgMl07CiAgICAgICAgICAgICAgICAgIGlucHV0LmFkdmFuY2UoKTsKICAgICAgICAgICAgICAgICAgY29udGludWUgc2NhbjsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgfQogIH0KCiAgLy8gU2VlIGxlemVyLWdlbmVyYXRvci9zcmMvZW5jb2RlLnRzIGZvciBjb21tZW50cyBhYm91dCB0aGUgZW5jb2RpbmcKICAvLyB1c2VkIGhlcmUKICBmdW5jdGlvbiBkZWNvZGVBcnJheShpbnB1dCwgVHlwZSA9IFVpbnQxNkFycmF5KSB7CiAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT0gInN0cmluZyIpCiAgICAgICAgICByZXR1cm4gaW5wdXQ7CiAgICAgIGxldCBhcnJheSA9IG51bGw7CiAgICAgIGZvciAobGV0IHBvcyA9IDAsIG91dCA9IDA7IHBvcyA8IGlucHV0Lmxlbmd0aDspIHsKICAgICAgICAgIGxldCB2YWx1ZSA9IDA7CiAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgbGV0IG5leHQgPSBpbnB1dC5jaGFyQ29kZUF0KHBvcysrKSwgc3RvcCA9IGZhbHNlOwogICAgICAgICAgICAgIGlmIChuZXh0ID09IDEyNiAvKiBCaWdWYWxDb2RlICovKSB7CiAgICAgICAgICAgICAgICAgIHZhbHVlID0gNjU1MzUgLyogQmlnVmFsICovOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKG5leHQgPj0gOTIgLyogR2FwMiAqLykKICAgICAgICAgICAgICAgICAgbmV4dC0tOwogICAgICAgICAgICAgIGlmIChuZXh0ID49IDM0IC8qIEdhcDEgKi8pCiAgICAgICAgICAgICAgICAgIG5leHQtLTsKICAgICAgICAgICAgICBsZXQgZGlnaXQgPSBuZXh0IC0gMzIgLyogU3RhcnQgKi87CiAgICAgICAgICAgICAgaWYgKGRpZ2l0ID49IDQ2IC8qIEJhc2UgKi8pIHsKICAgICAgICAgICAgICAgICAgZGlnaXQgLT0gNDYgLyogQmFzZSAqLzsKICAgICAgICAgICAgICAgICAgc3RvcCA9IHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhbHVlICs9IGRpZ2l0OwogICAgICAgICAgICAgIGlmIChzdG9wKQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB2YWx1ZSAqPSA0NiAvKiBCYXNlICovOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGFycmF5KQogICAgICAgICAgICAgIGFycmF5W291dCsrXSA9IHZhbHVlOwogICAgICAgICAgZWxzZQogICAgICAgICAgICAgIGFycmF5ID0gbmV3IFR5cGUodmFsdWUpOwogICAgICB9CiAgICAgIHJldHVybiBhcnJheTsKICB9CgogIC8vIEVudmlyb25tZW50IHZhcmlhYmxlIHVzZWQgdG8gY29udHJvbCBjb25zb2xlIG91dHB1dAogIGNvbnN0IHZlcmJvc2UgPSB0eXBlb2YgcHJvY2VzcyAhPSAidW5kZWZpbmVkIiAmJiBwcm9jZXNzLmVudiAmJiAvXGJwYXJzZVxiLy50ZXN0KHByb2Nlc3MuZW52LkxPRyk7CiAgbGV0IHN0YWNrSURzID0gbnVsbDsKICB2YXIgU2FmZXR5OwogIChmdW5jdGlvbiAoU2FmZXR5KSB7CiAgICAgIFNhZmV0eVtTYWZldHlbIk1hcmdpbiJdID0gMjVdID0gIk1hcmdpbiI7CiAgfSkoU2FmZXR5IHx8IChTYWZldHkgPSB7fSkpOwogIGZ1bmN0aW9uIGN1dEF0KHRyZWUsIHBvcywgc2lkZSkgewogICAgICBsZXQgY3Vyc29yID0gdHJlZS5jdXJzb3IoSXRlck1vZGUuSW5jbHVkZUFub255bW91cyk7CiAgICAgIGN1cnNvci5tb3ZlVG8ocG9zKTsKICAgICAgZm9yICg7OykgewogICAgICAgICAgaWYgKCEoc2lkZSA8IDAgPyBjdXJzb3IuY2hpbGRCZWZvcmUocG9zKSA6IGN1cnNvci5jaGlsZEFmdGVyKHBvcykpKQogICAgICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgICAgICAgaWYgKChzaWRlIDwgMCA/IGN1cnNvci50byA8IHBvcyA6IGN1cnNvci5mcm9tID4gcG9zKSAmJiAhY3Vyc29yLnR5cGUuaXNFcnJvcikKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWRlIDwgMCA/IE1hdGgubWF4KDAsIE1hdGgubWluKGN1cnNvci50byAtIDEsIHBvcyAtIDI1IC8qIE1hcmdpbiAqLykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1pbih0cmVlLmxlbmd0aCwgTWF0aC5tYXgoY3Vyc29yLmZyb20gKyAxLCBwb3MgKyAyNSAvKiBNYXJnaW4gKi8pKTsKICAgICAgICAgICAgICAgICAgaWYgKHNpZGUgPCAwID8gY3Vyc29yLnByZXZTaWJsaW5nKCkgOiBjdXJzb3IubmV4dFNpYmxpbmcoKSkKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBpZiAoIWN1cnNvci5wYXJlbnQoKSkKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWRlIDwgMCA/IDAgOiB0cmVlLmxlbmd0aDsKICAgICAgICAgICAgICB9CiAgICAgIH0KICB9CiAgY2xhc3MgRnJhZ21lbnRDdXJzb3IgewogICAgICBjb25zdHJ1Y3RvcihmcmFnbWVudHMsIG5vZGVTZXQpIHsKICAgICAgICAgIHRoaXMuZnJhZ21lbnRzID0gZnJhZ21lbnRzOwogICAgICAgICAgdGhpcy5ub2RlU2V0ID0gbm9kZVNldDsKICAgICAgICAgIHRoaXMuaSA9IDA7CiAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gbnVsbDsKICAgICAgICAgIHRoaXMuc2FmZUZyb20gPSAtMTsKICAgICAgICAgIHRoaXMuc2FmZVRvID0gLTE7CiAgICAgICAgICB0aGlzLnRyZWVzID0gW107CiAgICAgICAgICB0aGlzLnN0YXJ0ID0gW107CiAgICAgICAgICB0aGlzLmluZGV4ID0gW107CiAgICAgICAgICB0aGlzLm5leHRGcmFnbWVudCgpOwogICAgICB9CiAgICAgIG5leHRGcmFnbWVudCgpIHsKICAgICAgICAgIGxldCBmciA9IHRoaXMuZnJhZ21lbnQgPSB0aGlzLmkgPT0gdGhpcy5mcmFnbWVudHMubGVuZ3RoID8gbnVsbCA6IHRoaXMuZnJhZ21lbnRzW3RoaXMuaSsrXTsKICAgICAgICAgIGlmIChmcikgewogICAgICAgICAgICAgIHRoaXMuc2FmZUZyb20gPSBmci5vcGVuU3RhcnQgPyBjdXRBdChmci50cmVlLCBmci5mcm9tICsgZnIub2Zmc2V0LCAxKSAtIGZyLm9mZnNldCA6IGZyLmZyb207CiAgICAgICAgICAgICAgdGhpcy5zYWZlVG8gPSBmci5vcGVuRW5kID8gY3V0QXQoZnIudHJlZSwgZnIudG8gKyBmci5vZmZzZXQsIC0xKSAtIGZyLm9mZnNldCA6IGZyLnRvOwogICAgICAgICAgICAgIHdoaWxlICh0aGlzLnRyZWVzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICB0aGlzLnRyZWVzLnBvcCgpOwogICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0LnBvcCgpOwogICAgICAgICAgICAgICAgICB0aGlzLmluZGV4LnBvcCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0aGlzLnRyZWVzLnB1c2goZnIudHJlZSk7CiAgICAgICAgICAgICAgdGhpcy5zdGFydC5wdXNoKC1mci5vZmZzZXQpOwogICAgICAgICAgICAgIHRoaXMuaW5kZXgucHVzaCgwKTsKICAgICAgICAgICAgICB0aGlzLm5leHRTdGFydCA9IHRoaXMuc2FmZUZyb207CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLm5leHRTdGFydCA9IDFlOTsKICAgICAgICAgIH0KICAgICAgfQogICAgICAvLyBgcG9zYCBtdXN0IGJlID49IGFueSBwcmV2aW91c2x5IGdpdmVuIGBwb3NgIGZvciB0aGlzIGN1cnNvcgogICAgICBub2RlQXQocG9zKSB7CiAgICAgICAgICBpZiAocG9zIDwgdGhpcy5uZXh0U3RhcnQpCiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB3aGlsZSAodGhpcy5mcmFnbWVudCAmJiB0aGlzLnNhZmVUbyA8PSBwb3MpCiAgICAgICAgICAgICAgdGhpcy5uZXh0RnJhZ21lbnQoKTsKICAgICAgICAgIGlmICghdGhpcy5mcmFnbWVudCkKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgICBsZXQgbGFzdCA9IHRoaXMudHJlZXMubGVuZ3RoIC0gMTsKICAgICAgICAgICAgICBpZiAobGFzdCA8IDApIHsgLy8gRW5kIG9mIHRyZWUKICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0RnJhZ21lbnQoKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGxldCB0b3AgPSB0aGlzLnRyZWVzW2xhc3RdLCBpbmRleCA9IHRoaXMuaW5kZXhbbGFzdF07CiAgICAgICAgICAgICAgaWYgKGluZGV4ID09IHRvcC5jaGlsZHJlbi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgdGhpcy50cmVlcy5wb3AoKTsKICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydC5wb3AoKTsKICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleC5wb3AoKTsKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGxldCBuZXh0ID0gdG9wLmNoaWxkcmVuW2luZGV4XTsKICAgICAgICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnN0YXJ0W2xhc3RdICsgdG9wLnBvc2l0aW9uc1tpbmRleF07CiAgICAgICAgICAgICAgaWYgKHN0YXJ0ID4gcG9zKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFN0YXJ0ID0gc3RhcnQ7CiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAobmV4dCBpbnN0YW5jZW9mIFRyZWUpIHsKICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0ID09IHBvcykgewogICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0IDwgdGhpcy5zYWZlRnJvbSkKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmQgPSBzdGFydCArIG5leHQubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCA8PSB0aGlzLnNhZmVUbykgewogICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsb29rQWhlYWQgPSBuZXh0LnByb3AoTm9kZVByb3AubG9va0FoZWFkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvb2tBaGVhZCB8fCBlbmQgKyBsb29rQWhlYWQgPCB0aGlzLmZyYWdtZW50LnRvKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dDsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB0aGlzLmluZGV4W2xhc3RdKys7CiAgICAgICAgICAgICAgICAgIGlmIChzdGFydCArIG5leHQubGVuZ3RoID49IE1hdGgubWF4KHRoaXMuc2FmZUZyb20sIHBvcykpIHsgLy8gRW50ZXIgdGhpcyBub2RlCiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyZWVzLnB1c2gobmV4dCk7CiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0LnB1c2goc3RhcnQpOwogICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleC5wdXNoKDApOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICB0aGlzLmluZGV4W2xhc3RdKys7CiAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFN0YXJ0ID0gc3RhcnQgKyBuZXh0Lmxlbmd0aDsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgIH0KICB9CiAgY2xhc3MgVG9rZW5DYWNoZSB7CiAgICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgc3RyZWFtKSB7CiAgICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTsKICAgICAgICAgIHRoaXMudG9rZW5zID0gW107CiAgICAgICAgICB0aGlzLm1haW5Ub2tlbiA9IG51bGw7CiAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBbXTsKICAgICAgICAgIHRoaXMudG9rZW5zID0gcGFyc2VyLnRva2VuaXplcnMubWFwKF8gPT4gbmV3IENhY2hlZFRva2VuKTsKICAgICAgfQogICAgICBnZXRBY3Rpb25zKHN0YWNrKSB7CiAgICAgICAgICBsZXQgYWN0aW9uSW5kZXggPSAwOwogICAgICAgICAgbGV0IG1haW4gPSBudWxsOwogICAgICAgICAgbGV0IHsgcGFyc2VyIH0gPSBzdGFjay5wLCB7IHRva2VuaXplcnMgfSA9IHBhcnNlcjsKICAgICAgICAgIGxldCBtYXNrID0gcGFyc2VyLnN0YXRlU2xvdChzdGFjay5zdGF0ZSwgMyAvKiBUb2tlbml6ZXJNYXNrICovKTsKICAgICAgICAgIGxldCBjb250ZXh0ID0gc3RhY2suY3VyQ29udGV4dCA/IHN0YWNrLmN1ckNvbnRleHQuaGFzaCA6IDA7CiAgICAgICAgICBsZXQgbG9va0FoZWFkID0gMDsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5pemVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGlmICgoKDEgPDwgaSkgJiBtYXNrKSA9PSAwKQogICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICBsZXQgdG9rZW5pemVyID0gdG9rZW5pemVyc1tpXSwgdG9rZW4gPSB0aGlzLnRva2Vuc1tpXTsKICAgICAgICAgICAgICBpZiAobWFpbiAmJiAhdG9rZW5pemVyLmZhbGxiYWNrKQogICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICBpZiAodG9rZW5pemVyLmNvbnRleHR1YWwgfHwgdG9rZW4uc3RhcnQgIT0gc3RhY2sucG9zIHx8IHRva2VuLm1hc2sgIT0gbWFzayB8fCB0b2tlbi5jb250ZXh0ICE9IGNvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDYWNoZWRUb2tlbih0b2tlbiwgdG9rZW5pemVyLCBzdGFjayk7CiAgICAgICAgICAgICAgICAgIHRva2VuLm1hc2sgPSBtYXNrOwogICAgICAgICAgICAgICAgICB0b2tlbi5jb250ZXh0ID0gY29udGV4dDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHRva2VuLmxvb2tBaGVhZCA+IHRva2VuLmVuZCArIDI1IC8qIE1hcmdpbiAqLykKICAgICAgICAgICAgICAgICAgbG9va0FoZWFkID0gTWF0aC5tYXgodG9rZW4ubG9va0FoZWFkLCBsb29rQWhlYWQpOwogICAgICAgICAgICAgIGlmICh0b2tlbi52YWx1ZSAhPSAwIC8qIEVyciAqLykgewogICAgICAgICAgICAgICAgICBsZXQgc3RhcnRJbmRleCA9IGFjdGlvbkluZGV4OwogICAgICAgICAgICAgICAgICBpZiAodG9rZW4uZXh0ZW5kZWQgPiAtMSkKICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkluZGV4ID0gdGhpcy5hZGRBY3Rpb25zKHN0YWNrLCB0b2tlbi5leHRlbmRlZCwgdG9rZW4uZW5kLCBhY3Rpb25JbmRleCk7CiAgICAgICAgICAgICAgICAgIGFjdGlvbkluZGV4ID0gdGhpcy5hZGRBY3Rpb25zKHN0YWNrLCB0b2tlbi52YWx1ZSwgdG9rZW4uZW5kLCBhY3Rpb25JbmRleCk7CiAgICAgICAgICAgICAgICAgIGlmICghdG9rZW5pemVyLmV4dGVuZCkgewogICAgICAgICAgICAgICAgICAgICAgbWFpbiA9IHRva2VuOwogICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbkluZGV4ID4gc3RhcnRJbmRleCkKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlICh0aGlzLmFjdGlvbnMubGVuZ3RoID4gYWN0aW9uSW5kZXgpCiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zLnBvcCgpOwogICAgICAgICAgaWYgKGxvb2tBaGVhZCkKICAgICAgICAgICAgICBzdGFjay5zZXRMb29rQWhlYWQobG9va0FoZWFkKTsKICAgICAgICAgIGlmICghbWFpbiAmJiBzdGFjay5wb3MgPT0gdGhpcy5zdHJlYW0uZW5kKSB7CiAgICAgICAgICAgICAgbWFpbiA9IG5ldyBDYWNoZWRUb2tlbjsKICAgICAgICAgICAgICBtYWluLnZhbHVlID0gc3RhY2sucC5wYXJzZXIuZW9mVGVybTsKICAgICAgICAgICAgICBtYWluLnN0YXJ0ID0gbWFpbi5lbmQgPSBzdGFjay5wb3M7CiAgICAgICAgICAgICAgYWN0aW9uSW5kZXggPSB0aGlzLmFkZEFjdGlvbnMoc3RhY2ssIG1haW4udmFsdWUsIG1haW4uZW5kLCBhY3Rpb25JbmRleCk7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLm1haW5Ub2tlbiA9IG1haW47CiAgICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb25zOwogICAgICB9CiAgICAgIGdldE1haW5Ub2tlbihzdGFjaykgewogICAgICAgICAgaWYgKHRoaXMubWFpblRva2VuKQogICAgICAgICAgICAgIHJldHVybiB0aGlzLm1haW5Ub2tlbjsKICAgICAgICAgIGxldCBtYWluID0gbmV3IENhY2hlZFRva2VuLCB7IHBvcywgcCB9ID0gc3RhY2s7CiAgICAgICAgICBtYWluLnN0YXJ0ID0gcG9zOwogICAgICAgICAgbWFpbi5lbmQgPSBNYXRoLm1pbihwb3MgKyAxLCBwLnN0cmVhbS5lbmQpOwogICAgICAgICAgbWFpbi52YWx1ZSA9IHBvcyA9PSBwLnN0cmVhbS5lbmQgPyBwLnBhcnNlci5lb2ZUZXJtIDogMCAvKiBFcnIgKi87CiAgICAgICAgICByZXR1cm4gbWFpbjsKICAgICAgfQogICAgICB1cGRhdGVDYWNoZWRUb2tlbih0b2tlbiwgdG9rZW5pemVyLCBzdGFjaykgewogICAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5zdHJlYW0uY2xpcFBvcyhzdGFjay5wb3MpOwogICAgICAgICAgdG9rZW5pemVyLnRva2VuKHRoaXMuc3RyZWFtLnJlc2V0KHN0YXJ0LCB0b2tlbiksIHN0YWNrKTsKICAgICAgICAgIGlmICh0b2tlbi52YWx1ZSA+IC0xKSB7CiAgICAgICAgICAgICAgbGV0IHsgcGFyc2VyIH0gPSBzdGFjay5wOwogICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VyLnNwZWNpYWxpemVkLmxlbmd0aDsgaSsrKQogICAgICAgICAgICAgICAgICBpZiAocGFyc2VyLnNwZWNpYWxpemVkW2ldID09IHRva2VuLnZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gcGFyc2VyLnNwZWNpYWxpemVyc1tpXSh0aGlzLnN0cmVhbS5yZWFkKHRva2VuLnN0YXJ0LCB0b2tlbi5lbmQpLCBzdGFjayk7CiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID49IDAgJiYgc3RhY2sucC5wYXJzZXIuZGlhbGVjdC5hbGxvd3MocmVzdWx0ID4+IDEpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChyZXN1bHQgJiAxKSA9PSAwIC8qIFNwZWNpYWxpemUgKi8pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLnZhbHVlID0gcmVzdWx0ID4+IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5leHRlbmRlZCA9IHJlc3VsdCA+PiAxOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICB0b2tlbi52YWx1ZSA9IDAgLyogRXJyICovOwogICAgICAgICAgICAgIHRva2VuLmVuZCA9IHRoaXMuc3RyZWFtLmNsaXBQb3Moc3RhcnQgKyAxKTsKICAgICAgICAgIH0KICAgICAgfQogICAgICBwdXRBY3Rpb24oYWN0aW9uLCB0b2tlbiwgZW5kLCBpbmRleCkgewogICAgICAgICAgLy8gRG9uJ3QgYWRkIGR1cGxpY2F0ZSBhY3Rpb25zCiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyBpICs9IDMpCiAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uc1tpXSA9PSBhY3Rpb24pCiAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDsKICAgICAgICAgIHRoaXMuYWN0aW9uc1tpbmRleCsrXSA9IGFjdGlvbjsKICAgICAgICAgIHRoaXMuYWN0aW9uc1tpbmRleCsrXSA9IHRva2VuOwogICAgICAgICAgdGhpcy5hY3Rpb25zW2luZGV4KytdID0gZW5kOwogICAgICAgICAgcmV0dXJuIGluZGV4OwogICAgICB9CiAgICAgIGFkZEFjdGlvbnMoc3RhY2ssIHRva2VuLCBlbmQsIGluZGV4KSB7CiAgICAgICAgICBsZXQgeyBzdGF0ZSB9ID0gc3RhY2ssIHsgcGFyc2VyIH0gPSBzdGFjay5wLCB7IGRhdGEgfSA9IHBhcnNlcjsKICAgICAgICAgIGZvciAobGV0IHNldCA9IDA7IHNldCA8IDI7IHNldCsrKSB7CiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHBhcnNlci5zdGF0ZVNsb3Qoc3RhdGUsIHNldCA/IDIgLyogU2tpcCAqLyA6IDEgLyogQWN0aW9ucyAqLyk7OyBpICs9IDMpIHsKICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbaV0gPT0gNjU1MzUgLyogRW5kICovKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtpICsgMV0gPT0gMSAvKiBOZXh0ICovKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHBhaXIoZGF0YSwgaSArIDIpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDAgJiYgZGF0YVtpICsgMV0gPT0gMiAvKiBPdGhlciAqLykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLnB1dEFjdGlvbihwYWlyKGRhdGEsIGkgKyAyKSwgdG9rZW4sIGVuZCwgaW5kZXgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2ldID09IHRva2VuKQogICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLnB1dEFjdGlvbihwYWlyKGRhdGEsIGkgKyAxKSwgdG9rZW4sIGVuZCwgaW5kZXgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBpbmRleDsKICAgICAgfQogIH0KICB2YXIgUmVjOwogIChmdW5jdGlvbiAoUmVjKSB7CiAgICAgIFJlY1tSZWNbIkRpc3RhbmNlIl0gPSA1XSA9ICJEaXN0YW5jZSI7CiAgICAgIFJlY1tSZWNbIk1heFJlbWFpbmluZ1BlclN0ZXAiXSA9IDNdID0gIk1heFJlbWFpbmluZ1BlclN0ZXAiOwogICAgICAvLyBXaGVuIHR3byBzdGFja3MgaGF2ZSBiZWVuIHJ1bm5pbmcgaW5kZXBlbmRlbnRseSBsb25nIGVub3VnaCB0bwogICAgICAvLyBhZGQgdGhpcyBtYW55IGVsZW1lbnRzIHRvIHRoZWlyIGJ1ZmZlcnMsIHBydW5lIG9uZS4KICAgICAgUmVjW1JlY1siTWluQnVmZmVyTGVuZ3RoUHJ1bmUiXSA9IDUwMF0gPSAiTWluQnVmZmVyTGVuZ3RoUHJ1bmUiOwogICAgICBSZWNbUmVjWyJGb3JjZVJlZHVjZUxpbWl0Il0gPSAxMF0gPSAiRm9yY2VSZWR1Y2VMaW1pdCI7CiAgICAgIC8vIE9uY2UgYSBzdGFjayByZWFjaGVzIHRoaXMgZGVwdGggKGluIC5zdGFjay5sZW5ndGgpIGZvcmNlLXJlZHVjZQogICAgICAvLyBpdCBiYWNrIHRvIEN1dFRvIHRvIGF2b2lkIGNyZWF0aW5nIHRyZWVzIHRoYXQgb3ZlcmZsb3cgdGhlIHN0YWNrCiAgICAgIC8vIG9uIHJlY3Vyc2l2ZSB0cmF2ZXJzYWwuCiAgICAgIFJlY1tSZWNbIkN1dERlcHRoIl0gPSAxNTAwMF0gPSAiQ3V0RGVwdGgiOwogICAgICBSZWNbUmVjWyJDdXRUbyJdID0gOTAwMF0gPSAiQ3V0VG8iOwogIH0pKFJlYyB8fCAoUmVjID0ge30pKTsKICBjbGFzcyBQYXJzZSB7CiAgICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgaW5wdXQsIGZyYWdtZW50cywgcmFuZ2VzKSB7CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjsKICAgICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDsKICAgICAgICAgIHRoaXMucmFuZ2VzID0gcmFuZ2VzOwogICAgICAgICAgdGhpcy5yZWNvdmVyaW5nID0gMDsKICAgICAgICAgIHRoaXMubmV4dFN0YWNrSUQgPSAweDI2NTQ7IC8vIOKZlCwg4pmVLCDimZYsIOKZlywg4pmYLCDimZksIOKZoCwg4pmhLCDimaIsIOKZoywg4pmkLCDimaUsIOKZpiwg4pmnCiAgICAgICAgICB0aGlzLm1pblN0YWNrUG9zID0gMDsKICAgICAgICAgIHRoaXMucmV1c2VkID0gW107CiAgICAgICAgICB0aGlzLnN0b3BwZWRBdCA9IG51bGw7CiAgICAgICAgICB0aGlzLnN0cmVhbSA9IG5ldyBJbnB1dFN0cmVhbShpbnB1dCwgcmFuZ2VzKTsKICAgICAgICAgIHRoaXMudG9rZW5zID0gbmV3IFRva2VuQ2FjaGUocGFyc2VyLCB0aGlzLnN0cmVhbSk7CiAgICAgICAgICB0aGlzLnRvcFRlcm0gPSBwYXJzZXIudG9wWzFdOwogICAgICAgICAgbGV0IHsgZnJvbSB9ID0gcmFuZ2VzWzBdOwogICAgICAgICAgdGhpcy5zdGFja3MgPSBbU3RhY2suc3RhcnQodGhpcywgcGFyc2VyLnRvcFswXSwgZnJvbSldOwogICAgICAgICAgdGhpcy5mcmFnbWVudHMgPSBmcmFnbWVudHMubGVuZ3RoICYmIHRoaXMuc3RyZWFtLmVuZCAtIGZyb20gPiBwYXJzZXIuYnVmZmVyTGVuZ3RoICogNAogICAgICAgICAgICAgID8gbmV3IEZyYWdtZW50Q3Vyc29yKGZyYWdtZW50cywgcGFyc2VyLm5vZGVTZXQpIDogbnVsbDsKICAgICAgfQogICAgICBnZXQgcGFyc2VkUG9zKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMubWluU3RhY2tQb3M7CiAgICAgIH0KICAgICAgLy8gTW92ZSB0aGUgcGFyc2VyIGZvcndhcmQuIFRoaXMgd2lsbCBwcm9jZXNzIGFsbCBwYXJzZSBzdGFja3MgYXQKICAgICAgLy8gYHRoaXMucG9zYCBhbmQgdHJ5IHRvIGFkdmFuY2UgdGhlbSB0byBhIGZ1cnRoZXIgcG9zaXRpb24uIElmIG5vCiAgICAgIC8vIHN0YWNrIGZvciBzdWNoIGEgcG9zaXRpb24gaXMgZm91bmQsIGl0J2xsIHN0YXJ0IGVycm9yLXJlY292ZXJ5LgogICAgICAvLwogICAgICAvLyBXaGVuIHRoZSBwYXJzZSBpcyBmaW5pc2hlZCwgdGhpcyB3aWxsIHJldHVybiBhIHN5bnRheCB0cmVlLiBXaGVuCiAgICAgIC8vIG5vdCwgaXQgcmV0dXJucyBgbnVsbGAuCiAgICAgIGFkdmFuY2UoKSB7CiAgICAgICAgICBsZXQgc3RhY2tzID0gdGhpcy5zdGFja3MsIHBvcyA9IHRoaXMubWluU3RhY2tQb3M7CiAgICAgICAgICAvLyBUaGlzIHdpbGwgaG9sZCBzdGFja3MgYmV5b25kIGBwb3NgLgogICAgICAgICAgbGV0IG5ld1N0YWNrcyA9IHRoaXMuc3RhY2tzID0gW107CiAgICAgICAgICBsZXQgc3RvcHBlZCwgc3RvcHBlZFRva2VuczsKICAgICAgICAgIC8vIEtlZXAgYWR2YW5jaW5nIGFueSBzdGFja3MgYXQgYHBvc2AgdW50aWwgdGhleSBlaXRoZXIgbW92ZQogICAgICAgICAgLy8gZm9yd2FyZCBvciBjYW4ndCBiZSBhZHZhbmNlZC4gR2F0aGVyIHN0YWNrcyB0aGF0IGNhbid0IGJlCiAgICAgICAgICAvLyBhZHZhbmNlZCBmdXJ0aGVyIGluIGBzdG9wcGVkYC4KICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhY2tzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgbGV0IHN0YWNrID0gc3RhY2tzW2ldOwogICAgICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbnMubWFpblRva2VuID0gbnVsbDsKICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLnBvcyA+IHBvcykgewogICAgICAgICAgICAgICAgICAgICAgbmV3U3RhY2tzLnB1c2goc3RhY2spOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYWR2YW5jZVN0YWNrKHN0YWNrLCBuZXdTdGFja3MsIHN0YWNrcykpIHsKICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdG9wcGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcHBlZCA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BwZWRUb2tlbnMgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIHN0b3BwZWQucHVzaChzdGFjayk7CiAgICAgICAgICAgICAgICAgICAgICBsZXQgdG9rID0gdGhpcy50b2tlbnMuZ2V0TWFpblRva2VuKHN0YWNrKTsKICAgICAgICAgICAgICAgICAgICAgIHN0b3BwZWRUb2tlbnMucHVzaCh0b2sudmFsdWUsIHRvay5lbmQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghbmV3U3RhY2tzLmxlbmd0aCkgewogICAgICAgICAgICAgIGxldCBmaW5pc2hlZCA9IHN0b3BwZWQgJiYgZmluZEZpbmlzaGVkKHN0b3BwZWQpOwogICAgICAgICAgICAgIGlmIChmaW5pc2hlZCkKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tUb1RyZWUoZmluaXNoZWQpOwogICAgICAgICAgICAgIGlmICh0aGlzLnBhcnNlci5zdHJpY3QpIHsKICAgICAgICAgICAgICAgICAgaWYgKHZlcmJvc2UgJiYgc3RvcHBlZCkKICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJTdHVjayB3aXRoIHRva2VuICIgKyAodGhpcy50b2tlbnMubWFpblRva2VuID8gdGhpcy5wYXJzZXIuZ2V0TmFtZSh0aGlzLnRva2Vucy5tYWluVG9rZW4udmFsdWUpIDogIm5vbmUiKSk7CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcigiTm8gcGFyc2UgYXQgIiArIHBvcyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICghdGhpcy5yZWNvdmVyaW5nKQogICAgICAgICAgICAgICAgICB0aGlzLnJlY292ZXJpbmcgPSA1IC8qIERpc3RhbmNlICovOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRoaXMucmVjb3ZlcmluZyAmJiBzdG9wcGVkKSB7CiAgICAgICAgICAgICAgbGV0IGZpbmlzaGVkID0gdGhpcy5zdG9wcGVkQXQgIT0gbnVsbCAmJiBzdG9wcGVkWzBdLnBvcyA+IHRoaXMuc3RvcHBlZEF0ID8gc3RvcHBlZFswXQogICAgICAgICAgICAgICAgICA6IHRoaXMucnVuUmVjb3Zlcnkoc3RvcHBlZCwgc3RvcHBlZFRva2VucywgbmV3U3RhY2tzKTsKICAgICAgICAgICAgICBpZiAoZmluaXNoZWQpCiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YWNrVG9UcmVlKGZpbmlzaGVkLmZvcmNlQWxsKCkpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRoaXMucmVjb3ZlcmluZykgewogICAgICAgICAgICAgIGxldCBtYXhSZW1haW5pbmcgPSB0aGlzLnJlY292ZXJpbmcgPT0gMSA/IDEgOiB0aGlzLnJlY292ZXJpbmcgKiAzIC8qIE1heFJlbWFpbmluZ1BlclN0ZXAgKi87CiAgICAgICAgICAgICAgaWYgKG5ld1N0YWNrcy5sZW5ndGggPiBtYXhSZW1haW5pbmcpIHsKICAgICAgICAgICAgICAgICAgbmV3U3RhY2tzLnNvcnQoKGEsIGIpID0+IGIuc2NvcmUgLSBhLnNjb3JlKTsKICAgICAgICAgICAgICAgICAgd2hpbGUgKG5ld1N0YWNrcy5sZW5ndGggPiBtYXhSZW1haW5pbmcpCiAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFja3MucG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChuZXdTdGFja3Muc29tZShzID0+IHMucmVkdWNlUG9zID4gcG9zKSkKICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvdmVyaW5nLS07CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmIChuZXdTdGFja3MubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgIC8vIFBydW5lIHN0YWNrcyB0aGF0IGFyZSBpbiB0aGUgc2FtZSBzdGF0ZSwgb3IgdGhhdCBoYXZlIGJlZW4KICAgICAgICAgICAgICAvLyBydW5uaW5nIHdpdGhvdXQgc3BsaXR0aW5nIGZvciBhIHdoaWxlLCB0byBhdm9pZCBnZXR0aW5nIHN0dWNrCiAgICAgICAgICAgICAgLy8gd2l0aCBtdWx0aXBsZSBzdWNjZXNzZnVsIHN0YWNrcyBydW5uaW5nIGVuZGxlc3NseSBvbi4KICAgICAgICAgICAgICBvdXRlcjogZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdTdGFja3MubGVuZ3RoIC0gMTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgIGxldCBzdGFjayA9IG5ld1N0YWNrc1tpXTsKICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgbmV3U3RhY2tzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICBsZXQgb3RoZXIgPSBuZXdTdGFja3Nbal07CiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2suc2FtZVN0YXRlKG90aGVyKSB8fAogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLmJ1ZmZlci5sZW5ndGggPiA1MDAgLyogTWluQnVmZmVyTGVuZ3RoUHJ1bmUgKi8gJiYgb3RoZXIuYnVmZmVyLmxlbmd0aCA+IDUwMCAvKiBNaW5CdWZmZXJMZW5ndGhQcnVuZSAqLykgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoKHN0YWNrLnNjb3JlIC0gb3RoZXIuc2NvcmUpIHx8IChzdGFjay5idWZmZXIubGVuZ3RoIC0gb3RoZXIuYnVmZmVyLmxlbmd0aCkpID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFja3Muc3BsaWNlKGotLSwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFja3Muc3BsaWNlKGktLSwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHRoaXMubWluU3RhY2tQb3MgPSBuZXdTdGFja3NbMF0ucG9zOwogICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBuZXdTdGFja3MubGVuZ3RoOyBpKyspCiAgICAgICAgICAgICAgaWYgKG5ld1N0YWNrc1tpXS5wb3MgPCB0aGlzLm1pblN0YWNrUG9zKQogICAgICAgICAgICAgICAgICB0aGlzLm1pblN0YWNrUG9zID0gbmV3U3RhY2tzW2ldLnBvczsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIHN0b3BBdChwb3MpIHsKICAgICAgICAgIGlmICh0aGlzLnN0b3BwZWRBdCAhPSBudWxsICYmIHRoaXMuc3RvcHBlZEF0IDwgcG9zKQogICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCJDYW4ndCBtb3ZlIHN0b3BwZWRBdCBmb3J3YXJkIik7CiAgICAgICAgICB0aGlzLnN0b3BwZWRBdCA9IHBvczsKICAgICAgfQogICAgICAvLyBSZXR1cm5zIGFuIHVwZGF0ZWQgdmVyc2lvbiBvZiB0aGUgZ2l2ZW4gc3RhY2ssIG9yIG51bGwgaWYgdGhlCiAgICAgIC8vIHN0YWNrIGNhbid0IGFkdmFuY2Ugbm9ybWFsbHkuIFdoZW4gYHNwbGl0YCBhbmQgYHN0YWNrc2AgYXJlCiAgICAgIC8vIGdpdmVuLCBzdGFja3Mgc3BsaXQgb2ZmIGJ5IGFtYmlndW91cyBvcGVyYXRpb25zIHdpbGwgYmUgcHVzaGVkIHRvCiAgICAgIC8vIGBzcGxpdGAsIG9yIGFkZGVkIHRvIGBzdGFja3NgIGlmIHRoZXkgbW92ZSBgcG9zYCBmb3J3YXJkLgogICAgICBhZHZhbmNlU3RhY2soc3RhY2ssIHN0YWNrcywgc3BsaXQpIHsKICAgICAgICAgIGxldCBzdGFydCA9IHN0YWNrLnBvcywgeyBwYXJzZXIgfSA9IHRoaXM7CiAgICAgICAgICBsZXQgYmFzZSA9IHZlcmJvc2UgPyB0aGlzLnN0YWNrSUQoc3RhY2spICsgIiAtPiAiIDogIiI7CiAgICAgICAgICBpZiAodGhpcy5zdG9wcGVkQXQgIT0gbnVsbCAmJiBzdGFydCA+IHRoaXMuc3RvcHBlZEF0KQogICAgICAgICAgICAgIHJldHVybiBzdGFjay5mb3JjZVJlZHVjZSgpID8gc3RhY2sgOiBudWxsOwogICAgICAgICAgaWYgKHRoaXMuZnJhZ21lbnRzKSB7CiAgICAgICAgICAgICAgbGV0IHN0cmljdEN4ID0gc3RhY2suY3VyQ29udGV4dCAmJiBzdGFjay5jdXJDb250ZXh0LnRyYWNrZXIuc3RyaWN0LCBjeEhhc2ggPSBzdHJpY3RDeCA/IHN0YWNrLmN1ckNvbnRleHQuaGFzaCA6IDA7CiAgICAgICAgICAgICAgZm9yIChsZXQgY2FjaGVkID0gdGhpcy5mcmFnbWVudHMubm9kZUF0KHN0YXJ0KTsgY2FjaGVkOykgewogICAgICAgICAgICAgICAgICBsZXQgbWF0Y2ggPSB0aGlzLnBhcnNlci5ub2RlU2V0LnR5cGVzW2NhY2hlZC50eXBlLmlkXSA9PSBjYWNoZWQudHlwZSA/IHBhcnNlci5nZXRHb3RvKHN0YWNrLnN0YXRlLCBjYWNoZWQudHlwZS5pZCkgOiAtMTsKICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID4gLTEgJiYgY2FjaGVkLmxlbmd0aCAmJiAoIXN0cmljdEN4IHx8IChjYWNoZWQucHJvcChOb2RlUHJvcC5jb250ZXh0SGFzaCkgfHwgMCkgPT0gY3hIYXNoKSkgewogICAgICAgICAgICAgICAgICAgICAgc3RhY2sudXNlTm9kZShjYWNoZWQsIG1hdGNoKTsKICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZXJib3NlKQogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGJhc2UgKyB0aGlzLnN0YWNrSUQoc3RhY2spICsgYCAodmlhIHJldXNlIG9mICR7cGFyc2VyLmdldE5hbWUoY2FjaGVkLnR5cGUuaWQpfSlgKTsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICghKGNhY2hlZCBpbnN0YW5jZW9mIFRyZWUpIHx8IGNhY2hlZC5jaGlsZHJlbi5sZW5ndGggPT0gMCB8fCBjYWNoZWQucG9zaXRpb25zWzBdID4gMCkKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBsZXQgaW5uZXIgPSBjYWNoZWQuY2hpbGRyZW5bMF07CiAgICAgICAgICAgICAgICAgIGlmIChpbm5lciBpbnN0YW5jZW9mIFRyZWUgJiYgY2FjaGVkLnBvc2l0aW9uc1swXSA9PSAwKQogICAgICAgICAgICAgICAgICAgICAgY2FjaGVkID0gaW5uZXI7CiAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGxldCBkZWZhdWx0UmVkdWNlID0gcGFyc2VyLnN0YXRlU2xvdChzdGFjay5zdGF0ZSwgNCAvKiBEZWZhdWx0UmVkdWNlICovKTsKICAgICAgICAgIGlmIChkZWZhdWx0UmVkdWNlID4gMCkgewogICAgICAgICAgICAgIHN0YWNrLnJlZHVjZShkZWZhdWx0UmVkdWNlKTsKICAgICAgICAgICAgICBpZiAodmVyYm9zZSkKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYmFzZSArIHRoaXMuc3RhY2tJRChzdGFjaykgKyBgICh2aWEgYWx3YXlzLXJlZHVjZSAke3BhcnNlci5nZXROYW1lKGRlZmF1bHRSZWR1Y2UgJiA2NTUzNSAvKiBWYWx1ZU1hc2sgKi8pfSlgKTsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdGFjay5zdGFjay5sZW5ndGggPj0gMTUwMDAgLyogQ3V0RGVwdGggKi8pIHsKICAgICAgICAgICAgICB3aGlsZSAoc3RhY2suc3RhY2subGVuZ3RoID4gOTAwMCAvKiBDdXRUbyAqLyAmJiBzdGFjay5mb3JjZVJlZHVjZSgpKSB7IH0KICAgICAgICAgIH0KICAgICAgICAgIGxldCBhY3Rpb25zID0gdGhpcy50b2tlbnMuZ2V0QWN0aW9ucyhzdGFjayk7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGlvbnMubGVuZ3RoOykgewogICAgICAgICAgICAgIGxldCBhY3Rpb24gPSBhY3Rpb25zW2krK10sIHRlcm0gPSBhY3Rpb25zW2krK10sIGVuZCA9IGFjdGlvbnNbaSsrXTsKICAgICAgICAgICAgICBsZXQgbGFzdCA9IGkgPT0gYWN0aW9ucy5sZW5ndGggfHwgIXNwbGl0OwogICAgICAgICAgICAgIGxldCBsb2NhbFN0YWNrID0gbGFzdCA/IHN0YWNrIDogc3RhY2suc3BsaXQoKTsKICAgICAgICAgICAgICBsb2NhbFN0YWNrLmFwcGx5KGFjdGlvbiwgdGVybSwgZW5kKTsKICAgICAgICAgICAgICBpZiAodmVyYm9zZSkKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYmFzZSArIHRoaXMuc3RhY2tJRChsb2NhbFN0YWNrKSArIGAgKHZpYSAkeyhhY3Rpb24gJiA2NTUzNiAvKiBSZWR1Y2VGbGFnICovKSA9PSAwID8gInNoaWZ0IgogICAgICAgICAgICAgICAgICAgIDogYHJlZHVjZSBvZiAke3BhcnNlci5nZXROYW1lKGFjdGlvbiAmIDY1NTM1IC8qIFZhbHVlTWFzayAqLyl9YH0gZm9yICR7cGFyc2VyLmdldE5hbWUodGVybSl9IEAgJHtzdGFydH0ke2xvY2FsU3RhY2sgPT0gc3RhY2sgPyAiIiA6ICIsIHNwbGl0In0pYCk7CiAgICAgICAgICAgICAgaWYgKGxhc3QpCiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgIGVsc2UgaWYgKGxvY2FsU3RhY2sucG9zID4gc3RhcnQpCiAgICAgICAgICAgICAgICAgIHN0YWNrcy5wdXNoKGxvY2FsU3RhY2spOwogICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgc3BsaXQucHVzaChsb2NhbFN0YWNrKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICAvLyBBZHZhbmNlIGEgZ2l2ZW4gc3RhY2sgZm9yd2FyZCBhcyBmYXIgYXMgaXQgd2lsbCBnby4gUmV0dXJucyB0aGUKICAgICAgLy8gKHBvc3NpYmx5IHVwZGF0ZWQpIHN0YWNrIGlmIGl0IGdvdCBzdHVjaywgb3IgbnVsbCBpZiBpdCBtb3ZlZAogICAgICAvLyBmb3J3YXJkIGFuZCB3YXMgZ2l2ZW4gdG8gYHB1c2hTdGFja0RlZHVwYC4KICAgICAgYWR2YW5jZUZ1bGx5KHN0YWNrLCBuZXdTdGFja3MpIHsKICAgICAgICAgIGxldCBwb3MgPSBzdGFjay5wb3M7CiAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgICAgaWYgKCF0aGlzLmFkdmFuY2VTdGFjayhzdGFjaywgbnVsbCwgbnVsbCkpCiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICBpZiAoc3RhY2sucG9zID4gcG9zKSB7CiAgICAgICAgICAgICAgICAgIHB1c2hTdGFja0RlZHVwKHN0YWNrLCBuZXdTdGFja3MpOwogICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgIH0KICAgICAgcnVuUmVjb3Zlcnkoc3RhY2tzLCB0b2tlbnMsIG5ld1N0YWNrcykgewogICAgICAgICAgbGV0IGZpbmlzaGVkID0gbnVsbCwgcmVzdGFydGVkID0gZmFsc2U7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YWNrcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGxldCBzdGFjayA9IHN0YWNrc1tpXSwgdG9rZW4gPSB0b2tlbnNbaSA8PCAxXSwgdG9rZW5FbmQgPSB0b2tlbnNbKGkgPDwgMSkgKyAxXTsKICAgICAgICAgICAgICBsZXQgYmFzZSA9IHZlcmJvc2UgPyB0aGlzLnN0YWNrSUQoc3RhY2spICsgIiAtPiAiIDogIiI7CiAgICAgICAgICAgICAgaWYgKHN0YWNrLmRlYWRFbmQpIHsKICAgICAgICAgICAgICAgICAgaWYgKHJlc3RhcnRlZCkKICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICByZXN0YXJ0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICBzdGFjay5yZXN0YXJ0KCk7CiAgICAgICAgICAgICAgICAgIGlmICh2ZXJib3NlKQogICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYmFzZSArIHRoaXMuc3RhY2tJRChzdGFjaykgKyAiIChyZXN0YXJ0ZWQpIik7CiAgICAgICAgICAgICAgICAgIGxldCBkb25lID0gdGhpcy5hZHZhbmNlRnVsbHkoc3RhY2ssIG5ld1N0YWNrcyk7CiAgICAgICAgICAgICAgICAgIGlmIChkb25lKQogICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGxldCBmb3JjZSA9IHN0YWNrLnNwbGl0KCksIGZvcmNlQmFzZSA9IGJhc2U7CiAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGZvcmNlLmZvcmNlUmVkdWNlKCkgJiYgaiA8IDEwIC8qIEZvcmNlUmVkdWNlTGltaXQgKi87IGorKykgewogICAgICAgICAgICAgICAgICBpZiAodmVyYm9zZSkKICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZvcmNlQmFzZSArIHRoaXMuc3RhY2tJRChmb3JjZSkgKyAiICh2aWEgZm9yY2UtcmVkdWNlKSIpOwogICAgICAgICAgICAgICAgICBsZXQgZG9uZSA9IHRoaXMuYWR2YW5jZUZ1bGx5KGZvcmNlLCBuZXdTdGFja3MpOwogICAgICAgICAgICAgICAgICBpZiAoZG9uZSkKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBpZiAodmVyYm9zZSkKICAgICAgICAgICAgICAgICAgICAgIGZvcmNlQmFzZSA9IHRoaXMuc3RhY2tJRChmb3JjZSkgKyAiIC0+ICI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZvciAobGV0IGluc2VydCBvZiBzdGFjay5yZWNvdmVyQnlJbnNlcnQodG9rZW4pKSB7CiAgICAgICAgICAgICAgICAgIGlmICh2ZXJib3NlKQogICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYmFzZSArIHRoaXMuc3RhY2tJRChpbnNlcnQpICsgIiAodmlhIHJlY292ZXItaW5zZXJ0KSIpOwogICAgICAgICAgICAgICAgICB0aGlzLmFkdmFuY2VGdWxseShpbnNlcnQsIG5ld1N0YWNrcyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh0aGlzLnN0cmVhbS5lbmQgPiBzdGFjay5wb3MpIHsKICAgICAgICAgICAgICAgICAgaWYgKHRva2VuRW5kID09IHN0YWNrLnBvcykgewogICAgICAgICAgICAgICAgICAgICAgdG9rZW5FbmQrKzsKICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gMCAvKiBFcnIgKi87CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgc3RhY2sucmVjb3ZlckJ5RGVsZXRlKHRva2VuLCB0b2tlbkVuZCk7CiAgICAgICAgICAgICAgICAgIGlmICh2ZXJib3NlKQogICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYmFzZSArIHRoaXMuc3RhY2tJRChzdGFjaykgKyBgICh2aWEgcmVjb3Zlci1kZWxldGUgJHt0aGlzLnBhcnNlci5nZXROYW1lKHRva2VuKX0pYCk7CiAgICAgICAgICAgICAgICAgIHB1c2hTdGFja0RlZHVwKHN0YWNrLCBuZXdTdGFja3MpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIGlmICghZmluaXNoZWQgfHwgZmluaXNoZWQuc2NvcmUgPCBzdGFjay5zY29yZSkgewogICAgICAgICAgICAgICAgICBmaW5pc2hlZCA9IHN0YWNrOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmaW5pc2hlZDsKICAgICAgfQogICAgICAvLyBDb252ZXJ0IHRoZSBzdGFjaydzIGJ1ZmZlciB0byBhIHN5bnRheCB0cmVlLgogICAgICBzdGFja1RvVHJlZShzdGFjaykgewogICAgICAgICAgc3RhY2suY2xvc2UoKTsKICAgICAgICAgIHJldHVybiBUcmVlLmJ1aWxkKHsgYnVmZmVyOiBTdGFja0J1ZmZlckN1cnNvci5jcmVhdGUoc3RhY2spLAogICAgICAgICAgICAgIG5vZGVTZXQ6IHRoaXMucGFyc2VyLm5vZGVTZXQsCiAgICAgICAgICAgICAgdG9wSUQ6IHRoaXMudG9wVGVybSwKICAgICAgICAgICAgICBtYXhCdWZmZXJMZW5ndGg6IHRoaXMucGFyc2VyLmJ1ZmZlckxlbmd0aCwKICAgICAgICAgICAgICByZXVzZWQ6IHRoaXMucmV1c2VkLAogICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnJhbmdlc1swXS5mcm9tLAogICAgICAgICAgICAgIGxlbmd0aDogc3RhY2sucG9zIC0gdGhpcy5yYW5nZXNbMF0uZnJvbSwKICAgICAgICAgICAgICBtaW5SZXBlYXRUeXBlOiB0aGlzLnBhcnNlci5taW5SZXBlYXRUZXJtIH0pOwogICAgICB9CiAgICAgIHN0YWNrSUQoc3RhY2spIHsKICAgICAgICAgIGxldCBpZCA9IChzdGFja0lEcyB8fCAoc3RhY2tJRHMgPSBuZXcgV2Vha01hcCkpLmdldChzdGFjayk7CiAgICAgICAgICBpZiAoIWlkKQogICAgICAgICAgICAgIHN0YWNrSURzLnNldChzdGFjaywgaWQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludCh0aGlzLm5leHRTdGFja0lEKyspKTsKICAgICAgICAgIHJldHVybiBpZCArIHN0YWNrOwogICAgICB9CiAgfQogIGZ1bmN0aW9uIHB1c2hTdGFja0RlZHVwKHN0YWNrLCBuZXdTdGFja3MpIHsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdTdGFja3MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGxldCBvdGhlciA9IG5ld1N0YWNrc1tpXTsKICAgICAgICAgIGlmIChvdGhlci5wb3MgPT0gc3RhY2sucG9zICYmIG90aGVyLnNhbWVTdGF0ZShzdGFjaykpIHsKICAgICAgICAgICAgICBpZiAobmV3U3RhY2tzW2ldLnNjb3JlIDwgc3RhY2suc2NvcmUpCiAgICAgICAgICAgICAgICAgIG5ld1N0YWNrc1tpXSA9IHN0YWNrOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgfQogICAgICBuZXdTdGFja3MucHVzaChzdGFjayk7CiAgfQogIGNsYXNzIERpYWxlY3QgewogICAgICBjb25zdHJ1Y3Rvcihzb3VyY2UsIGZsYWdzLCBkaXNhYmxlZCkgewogICAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7CiAgICAgICAgICB0aGlzLmZsYWdzID0gZmxhZ3M7CiAgICAgICAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQ7CiAgICAgIH0KICAgICAgYWxsb3dzKHRlcm0pIHsgcmV0dXJuICF0aGlzLmRpc2FibGVkIHx8IHRoaXMuZGlzYWJsZWRbdGVybV0gPT0gMDsgfQogIH0KICBjb25zdCBpZCA9IHggPT4geDsKICAvLy8gQ29udGV4dCB0cmFja2VycyBhcmUgdXNlZCB0byB0cmFjayBzdGF0ZWZ1bCBjb250ZXh0IChzdWNoIGFzCiAgLy8vIGluZGVudGF0aW9uIGluIHRoZSBQeXRob24gZ3JhbW1hciwgb3IgcGFyZW50IGVsZW1lbnRzIGluIHRoZSBYTUwKICAvLy8gZ3JhbW1hcikgbmVlZGVkIGJ5IGV4dGVybmFsIHRva2VuaXplcnMuIFlvdSBkZWNsYXJlIHRoZW0gaW4gYQogIC8vLyBncmFtbWFyIGZpbGUgYXMgYEBjb250ZXh0IGV4cG9ydE5hbWUgZnJvbSAibW9kdWxlImAuCiAgLy8vCiAgLy8vIENvbnRleHQgdmFsdWVzIHNob3VsZCBiZSBpbW11dGFibGUsIGFuZCBjYW4gYmUgdXBkYXRlZCAocmVwbGFjZWQpCiAgLy8vIG9uIHNoaWZ0IG9yIHJlZHVjZSBhY3Rpb25zLgogIC8vLwogIC8vLyBUaGUgZXhwb3J0IHVzZWQgaW4gYSBgQGNvbnRleHRgIGRlY2xhcmF0aW9uIHNob3VsZCBiZSBvZiB0aGlzCiAgLy8vIHR5cGUuCiAgY2xhc3MgQ29udGV4dFRyYWNrZXIgewogICAgICAvLy8gRGVmaW5lIGEgY29udGV4dCB0cmFja2VyLgogICAgICBjb25zdHJ1Y3RvcihzcGVjKSB7CiAgICAgICAgICB0aGlzLnN0YXJ0ID0gc3BlYy5zdGFydDsKICAgICAgICAgIHRoaXMuc2hpZnQgPSBzcGVjLnNoaWZ0IHx8IGlkOwogICAgICAgICAgdGhpcy5yZWR1Y2UgPSBzcGVjLnJlZHVjZSB8fCBpZDsKICAgICAgICAgIHRoaXMucmV1c2UgPSBzcGVjLnJldXNlIHx8IGlkOwogICAgICAgICAgdGhpcy5oYXNoID0gc3BlYy5oYXNoIHx8ICgoKSA9PiAwKTsKICAgICAgICAgIHRoaXMuc3RyaWN0ID0gc3BlYy5zdHJpY3QgIT09IGZhbHNlOwogICAgICB9CiAgfQogIC8vLyBIb2xkcyB0aGUgcGFyc2UgdGFibGVzIGZvciBhIGdpdmVuIGdyYW1tYXIsIGFzIGdlbmVyYXRlZCBieQogIC8vLyBgbGV6ZXItZ2VuZXJhdG9yYCwgYW5kIHByb3ZpZGVzIFttZXRob2RzXSgjY29tbW9uLlBhcnNlcikgdG8gcGFyc2UKICAvLy8gY29udGVudCB3aXRoLgogIGNsYXNzIExSUGFyc2VyIGV4dGVuZHMgUGFyc2VyIHsKICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBjb25zdHJ1Y3RvcihzcGVjKSB7CiAgICAgICAgICBzdXBlcigpOwogICAgICAgICAgLy8vIEBpbnRlcm5hbAogICAgICAgICAgdGhpcy53cmFwcGVycyA9IFtdOwogICAgICAgICAgaWYgKHNwZWMudmVyc2lvbiAhPSAxNCAvKiBWZXJzaW9uICovKQogICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBQYXJzZXIgdmVyc2lvbiAoJHtzcGVjLnZlcnNpb259KSBkb2Vzbid0IG1hdGNoIHJ1bnRpbWUgdmVyc2lvbiAoJHsxNCAvKiBWZXJzaW9uICovfSlgKTsKICAgICAgICAgIGxldCBub2RlTmFtZXMgPSBzcGVjLm5vZGVOYW1lcy5zcGxpdCgiICIpOwogICAgICAgICAgdGhpcy5taW5SZXBlYXRUZXJtID0gbm9kZU5hbWVzLmxlbmd0aDsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BlYy5yZXBlYXROb2RlQ291bnQ7IGkrKykKICAgICAgICAgICAgICBub2RlTmFtZXMucHVzaCgiIik7CiAgICAgICAgICBsZXQgdG9wVGVybXMgPSBPYmplY3Qua2V5cyhzcGVjLnRvcFJ1bGVzKS5tYXAociA9PiBzcGVjLnRvcFJ1bGVzW3JdWzFdKTsKICAgICAgICAgIGxldCBub2RlUHJvcHMgPSBbXTsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZU5hbWVzLmxlbmd0aDsgaSsrKQogICAgICAgICAgICAgIG5vZGVQcm9wcy5wdXNoKFtdKTsKICAgICAgICAgIGZ1bmN0aW9uIHNldFByb3Aobm9kZUlELCBwcm9wLCB2YWx1ZSkgewogICAgICAgICAgICAgIG5vZGVQcm9wc1tub2RlSURdLnB1c2goW3Byb3AsIHByb3AuZGVzZXJpYWxpemUoU3RyaW5nKHZhbHVlKSldKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzcGVjLm5vZGVQcm9wcykKICAgICAgICAgICAgICBmb3IgKGxldCBwcm9wU3BlYyBvZiBzcGVjLm5vZGVQcm9wcykgewogICAgICAgICAgICAgICAgICBsZXQgcHJvcCA9IHByb3BTcGVjWzBdOwogICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT0gInN0cmluZyIpCiAgICAgICAgICAgICAgICAgICAgICBwcm9wID0gTm9kZVByb3BbcHJvcF07CiAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcHJvcFNwZWMubGVuZ3RoOykgewogICAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQgPSBwcm9wU3BlY1tpKytdOwogICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgPj0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHNldFByb3AobmV4dCwgcHJvcCwgcHJvcFNwZWNbaSsrXSk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwcm9wU3BlY1tpICsgLW5leHRdOwogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAtbmV4dDsgaiA+IDA7IGotLSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJvcChwcm9wU3BlY1tpKytdLCBwcm9wLCB2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgdGhpcy5ub2RlU2V0ID0gbmV3IE5vZGVTZXQobm9kZU5hbWVzLm1hcCgobmFtZSwgaSkgPT4gTm9kZVR5cGUuZGVmaW5lKHsKICAgICAgICAgICAgICBuYW1lOiBpID49IHRoaXMubWluUmVwZWF0VGVybSA/IHVuZGVmaW5lZCA6IG5hbWUsCiAgICAgICAgICAgICAgaWQ6IGksCiAgICAgICAgICAgICAgcHJvcHM6IG5vZGVQcm9wc1tpXSwKICAgICAgICAgICAgICB0b3A6IHRvcFRlcm1zLmluZGV4T2YoaSkgPiAtMSwKICAgICAgICAgICAgICBlcnJvcjogaSA9PSAwLAogICAgICAgICAgICAgIHNraXBwZWQ6IHNwZWMuc2tpcHBlZE5vZGVzICYmIHNwZWMuc2tpcHBlZE5vZGVzLmluZGV4T2YoaSkgPiAtMQogICAgICAgICAgfSkpKTsKICAgICAgICAgIGlmIChzcGVjLnByb3BTb3VyY2VzKQogICAgICAgICAgICAgIHRoaXMubm9kZVNldCA9IHRoaXMubm9kZVNldC5leHRlbmQoLi4uc3BlYy5wcm9wU291cmNlcyk7CiAgICAgICAgICB0aGlzLnN0cmljdCA9IGZhbHNlOwogICAgICAgICAgdGhpcy5idWZmZXJMZW5ndGggPSBEZWZhdWx0QnVmZmVyTGVuZ3RoOwogICAgICAgICAgbGV0IHRva2VuQXJyYXkgPSBkZWNvZGVBcnJheShzcGVjLnRva2VuRGF0YSk7CiAgICAgICAgICB0aGlzLmNvbnRleHQgPSBzcGVjLmNvbnRleHQ7CiAgICAgICAgICB0aGlzLnNwZWNpYWxpemVyU3BlY3MgPSBzcGVjLnNwZWNpYWxpemVkIHx8IFtdOwogICAgICAgICAgdGhpcy5zcGVjaWFsaXplZCA9IG5ldyBVaW50MTZBcnJheSh0aGlzLnNwZWNpYWxpemVyU3BlY3MubGVuZ3RoKTsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcGVjaWFsaXplclNwZWNzLmxlbmd0aDsgaSsrKQogICAgICAgICAgICAgIHRoaXMuc3BlY2lhbGl6ZWRbaV0gPSB0aGlzLnNwZWNpYWxpemVyU3BlY3NbaV0udGVybTsKICAgICAgICAgIHRoaXMuc3BlY2lhbGl6ZXJzID0gdGhpcy5zcGVjaWFsaXplclNwZWNzLm1hcChnZXRTcGVjaWFsaXplcik7CiAgICAgICAgICB0aGlzLnN0YXRlcyA9IGRlY29kZUFycmF5KHNwZWMuc3RhdGVzLCBVaW50MzJBcnJheSk7CiAgICAgICAgICB0aGlzLmRhdGEgPSBkZWNvZGVBcnJheShzcGVjLnN0YXRlRGF0YSk7CiAgICAgICAgICB0aGlzLmdvdG8gPSBkZWNvZGVBcnJheShzcGVjLmdvdG8pOwogICAgICAgICAgdGhpcy5tYXhUZXJtID0gc3BlYy5tYXhUZXJtOwogICAgICAgICAgdGhpcy50b2tlbml6ZXJzID0gc3BlYy50b2tlbml6ZXJzLm1hcCh2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT0gIm51bWJlciIgPyBuZXcgVG9rZW5Hcm91cCh0b2tlbkFycmF5LCB2YWx1ZSkgOiB2YWx1ZSk7CiAgICAgICAgICB0aGlzLnRvcFJ1bGVzID0gc3BlYy50b3BSdWxlczsKICAgICAgICAgIHRoaXMuZGlhbGVjdHMgPSBzcGVjLmRpYWxlY3RzIHx8IHt9OwogICAgICAgICAgdGhpcy5keW5hbWljUHJlY2VkZW5jZXMgPSBzcGVjLmR5bmFtaWNQcmVjZWRlbmNlcyB8fCBudWxsOwogICAgICAgICAgdGhpcy50b2tlblByZWNUYWJsZSA9IHNwZWMudG9rZW5QcmVjOwogICAgICAgICAgdGhpcy50ZXJtTmFtZXMgPSBzcGVjLnRlcm1OYW1lcyB8fCBudWxsOwogICAgICAgICAgdGhpcy5tYXhOb2RlID0gdGhpcy5ub2RlU2V0LnR5cGVzLmxlbmd0aCAtIDE7CiAgICAgICAgICB0aGlzLmRpYWxlY3QgPSB0aGlzLnBhcnNlRGlhbGVjdCgpOwogICAgICAgICAgdGhpcy50b3AgPSB0aGlzLnRvcFJ1bGVzW09iamVjdC5rZXlzKHRoaXMudG9wUnVsZXMpWzBdXTsKICAgICAgfQogICAgICBjcmVhdGVQYXJzZShpbnB1dCwgZnJhZ21lbnRzLCByYW5nZXMpIHsKICAgICAgICAgIGxldCBwYXJzZSA9IG5ldyBQYXJzZSh0aGlzLCBpbnB1dCwgZnJhZ21lbnRzLCByYW5nZXMpOwogICAgICAgICAgZm9yIChsZXQgdyBvZiB0aGlzLndyYXBwZXJzKQogICAgICAgICAgICAgIHBhcnNlID0gdyhwYXJzZSwgaW5wdXQsIGZyYWdtZW50cywgcmFuZ2VzKTsKICAgICAgICAgIHJldHVybiBwYXJzZTsKICAgICAgfQogICAgICAvLy8gR2V0IGEgZ290byB0YWJsZSBlbnRyeSBAaW50ZXJuYWwKICAgICAgZ2V0R290byhzdGF0ZSwgdGVybSwgbG9vc2UgPSBmYWxzZSkgewogICAgICAgICAgbGV0IHRhYmxlID0gdGhpcy5nb3RvOwogICAgICAgICAgaWYgKHRlcm0gPj0gdGFibGVbMF0pCiAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgZm9yIChsZXQgcG9zID0gdGFibGVbdGVybSArIDFdOzspIHsKICAgICAgICAgICAgICBsZXQgZ3JvdXBUYWcgPSB0YWJsZVtwb3MrK10sIGxhc3QgPSBncm91cFRhZyAmIDE7CiAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IHRhYmxlW3BvcysrXTsKICAgICAgICAgICAgICBpZiAobGFzdCAmJiBsb29zZSkKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDsKICAgICAgICAgICAgICBmb3IgKGxldCBlbmQgPSBwb3MgKyAoZ3JvdXBUYWcgPj4gMSk7IHBvcyA8IGVuZDsgcG9zKyspCiAgICAgICAgICAgICAgICAgIGlmICh0YWJsZVtwb3NdID09IHN0YXRlKQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDsKICAgICAgICAgICAgICBpZiAobGFzdCkKICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgfQogICAgICB9CiAgICAgIC8vLyBDaGVjayBpZiB0aGlzIHN0YXRlIGhhcyBhbiBhY3Rpb24gZm9yIGEgZ2l2ZW4gdGVybWluYWwgQGludGVybmFsCiAgICAgIGhhc0FjdGlvbihzdGF0ZSwgdGVybWluYWwpIHsKICAgICAgICAgIGxldCBkYXRhID0gdGhpcy5kYXRhOwogICAgICAgICAgZm9yIChsZXQgc2V0ID0gMDsgc2V0IDwgMjsgc2V0KyspIHsKICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGF0ZVNsb3Qoc3RhdGUsIHNldCA/IDIgLyogU2tpcCAqLyA6IDEgLyogQWN0aW9ucyAqLyksIG5leHQ7OyBpICs9IDMpIHsKICAgICAgICAgICAgICAgICAgaWYgKChuZXh0ID0gZGF0YVtpXSkgPT0gNjU1MzUgLyogRW5kICovKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtpICsgMV0gPT0gMSAvKiBOZXh0ICovKQogICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSBkYXRhW2kgPSBwYWlyKGRhdGEsIGkgKyAyKV07CiAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhW2kgKyAxXSA9PSAyIC8qIE90aGVyICovKQogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWlyKGRhdGEsIGkgKyAyKTsKICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAobmV4dCA9PSB0ZXJtaW5hbCB8fCBuZXh0ID09IDAgLyogRXJyICovKQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhaXIoZGF0YSwgaSArIDEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiAwOwogICAgICB9CiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgc3RhdGVTbG90KHN0YXRlLCBzbG90KSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZXNbKHN0YXRlICogNiAvKiBTaXplICovKSArIHNsb3RdOwogICAgICB9CiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgc3RhdGVGbGFnKHN0YXRlLCBmbGFnKSB7CiAgICAgICAgICByZXR1cm4gKHRoaXMuc3RhdGVTbG90KHN0YXRlLCAwIC8qIEZsYWdzICovKSAmIGZsYWcpID4gMDsKICAgICAgfQogICAgICAvLy8gQGludGVybmFsCiAgICAgIHZhbGlkQWN0aW9uKHN0YXRlLCBhY3Rpb24pIHsKICAgICAgICAgIGlmIChhY3Rpb24gPT0gdGhpcy5zdGF0ZVNsb3Qoc3RhdGUsIDQgLyogRGVmYXVsdFJlZHVjZSAqLykpCiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGF0ZVNsb3Qoc3RhdGUsIDEgLyogQWN0aW9ucyAqLyk7OyBpICs9IDMpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhW2ldID09IDY1NTM1IC8qIEVuZCAqLykgewogICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhW2kgKyAxXSA9PSAxIC8qIE5leHQgKi8pCiAgICAgICAgICAgICAgICAgICAgICBpID0gcGFpcih0aGlzLmRhdGEsIGkgKyAyKTsKICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoYWN0aW9uID09IHBhaXIodGhpcy5kYXRhLCBpICsgMSkpCiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICB9CiAgICAgIC8vLyBHZXQgdGhlIHN0YXRlcyB0aGF0IGNhbiBmb2xsb3cgdGhpcyBvbmUgdGhyb3VnaCBzaGlmdCBhY3Rpb25zIG9yCiAgICAgIC8vLyBnb3RvIGp1bXBzLiBAaW50ZXJuYWwKICAgICAgbmV4dFN0YXRlcyhzdGF0ZSkgewogICAgICAgICAgbGV0IHJlc3VsdCA9IFtdOwogICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc3RhdGVTbG90KHN0YXRlLCAxIC8qIEFjdGlvbnMgKi8pOzsgaSArPSAzKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YVtpXSA9PSA2NTUzNSAvKiBFbmQgKi8pIHsKICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YVtpICsgMV0gPT0gMSAvKiBOZXh0ICovKQogICAgICAgICAgICAgICAgICAgICAgaSA9IHBhaXIodGhpcy5kYXRhLCBpICsgMik7CiAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoKHRoaXMuZGF0YVtpICsgMl0gJiAoNjU1MzYgLyogUmVkdWNlRmxhZyAqLyA+PiAxNikpID09IDApIHsKICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5kYXRhW2kgKyAxXTsKICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuc29tZSgodiwgaSkgPT4gKGkgJiAxKSAmJiB2ID09IHZhbHVlKSkKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZGF0YVtpXSwgdmFsdWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBvdmVycmlkZXModG9rZW4sIHByZXYpIHsKICAgICAgICAgIGxldCBpUHJldiA9IGZpbmRPZmZzZXQodGhpcy5kYXRhLCB0aGlzLnRva2VuUHJlY1RhYmxlLCBwcmV2KTsKICAgICAgICAgIHJldHVybiBpUHJldiA8IDAgfHwgZmluZE9mZnNldCh0aGlzLmRhdGEsIHRoaXMudG9rZW5QcmVjVGFibGUsIHRva2VuKSA8IGlQcmV2OwogICAgICB9CiAgICAgIC8vLyBDb25maWd1cmUgdGhlIHBhcnNlci4gUmV0dXJucyBhIG5ldyBwYXJzZXIgaW5zdGFuY2UgdGhhdCBoYXMgdGhlCiAgICAgIC8vLyBnaXZlbiBzZXR0aW5ncyBtb2RpZmllZC4gU2V0dGluZ3Mgbm90IHByb3ZpZGVkIGluIGBjb25maWdgIGFyZQogICAgICAvLy8ga2VwdCBmcm9tIHRoZSBvcmlnaW5hbCBwYXJzZXIuCiAgICAgIGNvbmZpZ3VyZShjb25maWcpIHsKICAgICAgICAgIC8vIEhpZGVvdXMgcmVmbGVjdGlvbi1iYXNlZCBrbHVkZ2UgdG8gbWFrZSBpdCBlYXN5IHRvIGNyZWF0ZSBhCiAgICAgICAgICAvLyBzbGlnaHRseSBtb2RpZmllZCBjb3B5IG9mIGEgcGFyc2VyLgogICAgICAgICAgbGV0IGNvcHkgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTFJQYXJzZXIucHJvdG90eXBlKSwgdGhpcyk7CiAgICAgICAgICBpZiAoY29uZmlnLnByb3BzKQogICAgICAgICAgICAgIGNvcHkubm9kZVNldCA9IHRoaXMubm9kZVNldC5leHRlbmQoLi4uY29uZmlnLnByb3BzKTsKICAgICAgICAgIGlmIChjb25maWcudG9wKSB7CiAgICAgICAgICAgICAgbGV0IGluZm8gPSB0aGlzLnRvcFJ1bGVzW2NvbmZpZy50b3BdOwogICAgICAgICAgICAgIGlmICghaW5mbykKICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYEludmFsaWQgdG9wIHJ1bGUgbmFtZSAke2NvbmZpZy50b3B9YCk7CiAgICAgICAgICAgICAgY29weS50b3AgPSBpbmZvOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGNvbmZpZy50b2tlbml6ZXJzKQogICAgICAgICAgICAgIGNvcHkudG9rZW5pemVycyA9IHRoaXMudG9rZW5pemVycy5tYXAodCA9PiB7CiAgICAgICAgICAgICAgICAgIGxldCBmb3VuZCA9IGNvbmZpZy50b2tlbml6ZXJzLmZpbmQociA9PiByLmZyb20gPT0gdCk7CiAgICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZCA/IGZvdW5kLnRvIDogdDsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgIGlmIChjb25maWcuc3BlY2lhbGl6ZXJzKSB7CiAgICAgICAgICAgICAgY29weS5zcGVjaWFsaXplcnMgPSB0aGlzLnNwZWNpYWxpemVycy5zbGljZSgpOwogICAgICAgICAgICAgIGNvcHkuc3BlY2lhbGl6ZXJTcGVjcyA9IHRoaXMuc3BlY2lhbGl6ZXJTcGVjcy5tYXAoKHMsIGkpID0+IHsKICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kID0gY29uZmlnLnNwZWNpYWxpemVycy5maW5kKHIgPT4gci5mcm9tID09IHMuZXh0ZXJuYWwpOwogICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kKQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHM7CiAgICAgICAgICAgICAgICAgIGxldCBzcGVjID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzKSwgeyBleHRlcm5hbDogZm91bmQudG8gfSk7CiAgICAgICAgICAgICAgICAgIGNvcHkuc3BlY2lhbGl6ZXJzW2ldID0gZ2V0U3BlY2lhbGl6ZXIoc3BlYyk7CiAgICAgICAgICAgICAgICAgIHJldHVybiBzcGVjOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGNvbmZpZy5jb250ZXh0VHJhY2tlcikKICAgICAgICAgICAgICBjb3B5LmNvbnRleHQgPSBjb25maWcuY29udGV4dFRyYWNrZXI7CiAgICAgICAgICBpZiAoY29uZmlnLmRpYWxlY3QpCiAgICAgICAgICAgICAgY29weS5kaWFsZWN0ID0gdGhpcy5wYXJzZURpYWxlY3QoY29uZmlnLmRpYWxlY3QpOwogICAgICAgICAgaWYgKGNvbmZpZy5zdHJpY3QgIT0gbnVsbCkKICAgICAgICAgICAgICBjb3B5LnN0cmljdCA9IGNvbmZpZy5zdHJpY3Q7CiAgICAgICAgICBpZiAoY29uZmlnLndyYXApCiAgICAgICAgICAgICAgY29weS53cmFwcGVycyA9IGNvcHkud3JhcHBlcnMuY29uY2F0KGNvbmZpZy53cmFwKTsKICAgICAgICAgIGlmIChjb25maWcuYnVmZmVyTGVuZ3RoICE9IG51bGwpCiAgICAgICAgICAgICAgY29weS5idWZmZXJMZW5ndGggPSBjb25maWcuYnVmZmVyTGVuZ3RoOwogICAgICAgICAgcmV0dXJuIGNvcHk7CiAgICAgIH0KICAgICAgLy8vIFRlbGxzIHlvdSB3aGV0aGVyIGFueSBbcGFyc2Ugd3JhcHBlcnNdKCNsci5QYXJzZXJDb25maWcud3JhcCkKICAgICAgLy8vIGFyZSByZWdpc3RlcmVkIGZvciB0aGlzIHBhcnNlci4KICAgICAgaGFzV3JhcHBlcnMoKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVycy5sZW5ndGggPiAwOwogICAgICB9CiAgICAgIC8vLyBSZXR1cm5zIHRoZSBuYW1lIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIHRlcm0uIFRoaXMgd2lsbCBvbmx5CiAgICAgIC8vLyB3b3JrIGZvciBhbGwgdGVybXMgd2hlbiB0aGUgcGFyc2VyIHdhcyBnZW5lcmF0ZWQgd2l0aCB0aGUKICAgICAgLy8vIGAtLW5hbWVzYCBvcHRpb24uIEJ5IGRlZmF1bHQsIG9ubHkgdGhlIG5hbWVzIG9mIHRhZ2dlZCB0ZXJtcyBhcmUKICAgICAgLy8vIHN0b3JlZC4KICAgICAgZ2V0TmFtZSh0ZXJtKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy50ZXJtTmFtZXMgPyB0aGlzLnRlcm1OYW1lc1t0ZXJtXSA6IFN0cmluZyh0ZXJtIDw9IHRoaXMubWF4Tm9kZSAmJiB0aGlzLm5vZGVTZXQudHlwZXNbdGVybV0ubmFtZSB8fCB0ZXJtKTsKICAgICAgfQogICAgICAvLy8gVGhlIGVvZiB0ZXJtIGlkIGlzIGFsd2F5cyBhbGxvY2F0ZWQgZGlyZWN0bHkgYWZ0ZXIgdGhlIG5vZGUKICAgICAgLy8vIHR5cGVzLiBAaW50ZXJuYWwKICAgICAgZ2V0IGVvZlRlcm0oKSB7IHJldHVybiB0aGlzLm1heE5vZGUgKyAxOyB9CiAgICAgIC8vLyBUaGUgdHlwZSBvZiB0b3Agbm9kZSBwcm9kdWNlZCBieSB0aGUgcGFyc2VyLgogICAgICBnZXQgdG9wTm9kZSgpIHsgcmV0dXJuIHRoaXMubm9kZVNldC50eXBlc1t0aGlzLnRvcFsxXV07IH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBkeW5hbWljUHJlY2VkZW5jZSh0ZXJtKSB7CiAgICAgICAgICBsZXQgcHJlYyA9IHRoaXMuZHluYW1pY1ByZWNlZGVuY2VzOwogICAgICAgICAgcmV0dXJuIHByZWMgPT0gbnVsbCA/IDAgOiBwcmVjW3Rlcm1dIHx8IDA7CiAgICAgIH0KICAgICAgLy8vIEBpbnRlcm5hbAogICAgICBwYXJzZURpYWxlY3QoZGlhbGVjdCkgewogICAgICAgICAgbGV0IHZhbHVlcyA9IE9iamVjdC5rZXlzKHRoaXMuZGlhbGVjdHMpLCBmbGFncyA9IHZhbHVlcy5tYXAoKCkgPT4gZmFsc2UpOwogICAgICAgICAgaWYgKGRpYWxlY3QpCiAgICAgICAgICAgICAgZm9yIChsZXQgcGFydCBvZiBkaWFsZWN0LnNwbGl0KCIgIikpIHsKICAgICAgICAgICAgICAgICAgbGV0IGlkID0gdmFsdWVzLmluZGV4T2YocGFydCk7CiAgICAgICAgICAgICAgICAgIGlmIChpZCA+PSAwKQogICAgICAgICAgICAgICAgICAgICAgZmxhZ3NbaWRdID0gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICBsZXQgZGlzYWJsZWQgPSBudWxsOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspCiAgICAgICAgICAgICAgaWYgKCFmbGFnc1tpXSkgewogICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gdGhpcy5kaWFsZWN0c1t2YWx1ZXNbaV1dLCBpZDsgKGlkID0gdGhpcy5kYXRhW2orK10pICE9IDY1NTM1IC8qIEVuZCAqLzspCiAgICAgICAgICAgICAgICAgICAgICAoZGlzYWJsZWQgfHwgKGRpc2FibGVkID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5tYXhUZXJtICsgMSkpKVtpZF0gPSAxOwogICAgICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBuZXcgRGlhbGVjdChkaWFsZWN0LCBmbGFncywgZGlzYWJsZWQpOwogICAgICB9CiAgICAgIC8vLyBVc2VkIGJ5IHRoZSBvdXRwdXQgb2YgdGhlIHBhcnNlciBnZW5lcmF0b3IuIE5vdCBhdmFpbGFibGUgdG8KICAgICAgLy8vIHVzZXIgY29kZS4KICAgICAgc3RhdGljIGRlc2VyaWFsaXplKHNwZWMpIHsKICAgICAgICAgIHJldHVybiBuZXcgTFJQYXJzZXIoc3BlYyk7CiAgICAgIH0KICB9CiAgZnVuY3Rpb24gcGFpcihkYXRhLCBvZmYpIHsgcmV0dXJuIGRhdGFbb2ZmXSB8IChkYXRhW29mZiArIDFdIDw8IDE2KTsgfQogIGZ1bmN0aW9uIGZpbmRPZmZzZXQoZGF0YSwgc3RhcnQsIHRlcm0pIHsKICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0LCBuZXh0OyAobmV4dCA9IGRhdGFbaV0pICE9IDY1NTM1IC8qIEVuZCAqLzsgaSsrKQogICAgICAgICAgaWYgKG5leHQgPT0gdGVybSkKICAgICAgICAgICAgICByZXR1cm4gaSAtIHN0YXJ0OwogICAgICByZXR1cm4gLTE7CiAgfQogIGZ1bmN0aW9uIGZpbmRGaW5pc2hlZChzdGFja3MpIHsKICAgICAgbGV0IGJlc3QgPSBudWxsOwogICAgICBmb3IgKGxldCBzdGFjayBvZiBzdGFja3MpIHsKICAgICAgICAgIGxldCBzdG9wcGVkID0gc3RhY2sucC5zdG9wcGVkQXQ7CiAgICAgICAgICBpZiAoKHN0YWNrLnBvcyA9PSBzdGFjay5wLnN0cmVhbS5lbmQgfHwgc3RvcHBlZCAhPSBudWxsICYmIHN0YWNrLnBvcyA+IHN0b3BwZWQpICYmCiAgICAgICAgICAgICAgc3RhY2sucC5wYXJzZXIuc3RhdGVGbGFnKHN0YWNrLnN0YXRlLCAyIC8qIEFjY2VwdGluZyAqLykgJiYKICAgICAgICAgICAgICAoIWJlc3QgfHwgYmVzdC5zY29yZSA8IHN0YWNrLnNjb3JlKSkKICAgICAgICAgICAgICBiZXN0ID0gc3RhY2s7CiAgICAgIH0KICAgICAgcmV0dXJuIGJlc3Q7CiAgfQogIGZ1bmN0aW9uIGdldFNwZWNpYWxpemVyKHNwZWMpIHsKICAgICAgaWYgKHNwZWMuZXh0ZXJuYWwpIHsKICAgICAgICAgIGxldCBtYXNrID0gc3BlYy5leHRlbmQgPyAxIC8qIEV4dGVuZCAqLyA6IDAgLyogU3BlY2lhbGl6ZSAqLzsKICAgICAgICAgIHJldHVybiAodmFsdWUsIHN0YWNrKSA9PiAoc3BlYy5leHRlcm5hbCh2YWx1ZSwgc3RhY2spIDw8IDEpIHwgbWFzazsKICAgICAgfQogICAgICByZXR1cm4gc3BlYy5nZXQ7CiAgfQoKICBsZXQgbmV4dFRhZ0lEID0gMDsKICAvLy8gSGlnaGxpZ2h0aW5nIHRhZ3MgYXJlIG1hcmtlcnMgdGhhdCBkZW5vdGUgYSBoaWdobGlnaHRpbmcgY2F0ZWdvcnkuCiAgLy8vIFRoZXkgYXJlIFthc3NvY2lhdGVkXSgjaGlnaGxpZ2h0LnN0eWxlVGFncykgd2l0aCBwYXJ0cyBvZiBhIHN5bnRheAogIC8vLyB0cmVlIGJ5IGEgbGFuZ3VhZ2UgbW9kZSwgYW5kIHRoZW4gbWFwcGVkIHRvIGFuIGFjdHVhbCBDU1Mgc3R5bGUgYnkKICAvLy8gYSBbaGlnaGxpZ2h0ZXJdKCNoaWdobGlnaHQuSGlnaGxpZ2h0ZXIpLgogIC8vLwogIC8vLyBCZWNhdXNlIHN5bnRheCB0cmVlIG5vZGUgdHlwZXMgYW5kIGhpZ2hsaWdodCBzdHlsZXMgaGF2ZSB0byBiZQogIC8vLyBhYmxlIHRvIHRhbGsgdGhlIHNhbWUgbGFuZ3VhZ2UsIENvZGVNaXJyb3IgdXNlcyBhIG1vc3RseSBfY2xvc2VkXwogIC8vLyBbdm9jYWJ1bGFyeV0oI2hpZ2hsaWdodC50YWdzKSBvZiBzeW50YXggdGFncyAoYXMgb3Bwb3NlZCB0bwogIC8vLyB0cmFkaXRpb25hbCBvcGVuIHN0cmluZy1iYXNlZCBzeXN0ZW1zLCB3aGljaCBtYWtlIGl0IGhhcmQgZm9yCiAgLy8vIGhpZ2hsaWdodGluZyB0aGVtZXMgdG8gY292ZXIgYWxsIHRoZSB0b2tlbnMgcHJvZHVjZWQgYnkgdGhlCiAgLy8vIHZhcmlvdXMgbGFuZ3VhZ2VzKS4KICAvLy8KICAvLy8gSXQgX2lzXyBwb3NzaWJsZSB0byBbZGVmaW5lXSgjaGlnaGxpZ2h0LlRhZ15kZWZpbmUpIHlvdXIgb3duCiAgLy8vIGhpZ2hsaWdodGluZyB0YWdzIGZvciBzeXN0ZW0taW50ZXJuYWwgdXNlICh3aGVyZSB5b3UgY29udHJvbCBib3RoCiAgLy8vIHRoZSBsYW5ndWFnZSBwYWNrYWdlIGFuZCB0aGUgaGlnaGxpZ2h0ZXIpLCBidXQgc3VjaCB0YWdzIHdpbGwgbm90CiAgLy8vIGJlIHBpY2tlZCB1cCBieSByZWd1bGFyIGhpZ2hsaWdodGVycyAodGhvdWdoIHlvdSBjYW4gZGVyaXZlIHRoZW0KICAvLy8gZnJvbSBzdGFuZGFyZCB0YWdzIHRvIGFsbG93IGhpZ2hsaWdodGVycyB0byBmYWxsIGJhY2sgdG8gdGhvc2UpLgogIGNsYXNzIFRhZyB7CiAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgY29uc3RydWN0b3IoCiAgICAgIC8vLyBUaGUgc2V0IG9mIHRoaXMgdGFnIGFuZCBhbGwgaXRzIHBhcmVudCB0YWdzLCBzdGFydGluZyB3aXRoCiAgICAgIC8vLyB0aGlzIG9uZSBpdHNlbGYgYW5kIHNvcnRlZCBpbiBvcmRlciBvZiBkZWNyZWFzaW5nIHNwZWNpZmljaXR5LgogICAgICBzZXQsIAogICAgICAvLy8gVGhlIGJhc2UgdW5tb2RpZmllZCB0YWcgdGhhdCB0aGlzIG9uZSBpcyBiYXNlZCBvbiwgaWYgaXQncwogICAgICAvLy8gbW9kaWZpZWQgQGludGVybmFsCiAgICAgIGJhc2UsIAogICAgICAvLy8gVGhlIG1vZGlmaWVycyBhcHBsaWVkIHRvIHRoaXMuYmFzZSBAaW50ZXJuYWwKICAgICAgbW9kaWZpZWQpIHsKICAgICAgICAgIHRoaXMuc2V0ID0gc2V0OwogICAgICAgICAgdGhpcy5iYXNlID0gYmFzZTsKICAgICAgICAgIHRoaXMubW9kaWZpZWQgPSBtb2RpZmllZDsKICAgICAgICAgIC8vLyBAaW50ZXJuYWwKICAgICAgICAgIHRoaXMuaWQgPSBuZXh0VGFnSUQrKzsKICAgICAgfQogICAgICAvLy8gRGVmaW5lIGEgbmV3IHRhZy4gSWYgYHBhcmVudGAgaXMgZ2l2ZW4sIHRoZSB0YWcgaXMgdHJlYXRlZCBhcyBhCiAgICAgIC8vLyBzdWItdGFnIG9mIHRoYXQgcGFyZW50LCBhbmQKICAgICAgLy8vIFtoaWdobGlnaHRlcnNdKCNoaWdobGlnaHQudGFnSGlnaGxpZ2h0ZXIpIHRoYXQgZG9uJ3QgbWVudGlvbgogICAgICAvLy8gdGhpcyB0YWcgd2lsbCB0cnkgdG8gZmFsbCBiYWNrIHRvIHRoZSBwYXJlbnQgdGFnIChvciBncmFuZHBhcmVudAogICAgICAvLy8gdGFnLCBldGMpLgogICAgICBzdGF0aWMgZGVmaW5lKHBhcmVudCkgewogICAgICAgICAgaWYgKHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5iYXNlKQogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQ2FuIG5vdCBkZXJpdmUgZnJvbSBhIG1vZGlmaWVkIHRhZyIpOwogICAgICAgICAgbGV0IHRhZyA9IG5ldyBUYWcoW10sIG51bGwsIFtdKTsKICAgICAgICAgIHRhZy5zZXQucHVzaCh0YWcpOwogICAgICAgICAgaWYgKHBhcmVudCkKICAgICAgICAgICAgICBmb3IgKGxldCB0IG9mIHBhcmVudC5zZXQpCiAgICAgICAgICAgICAgICAgIHRhZy5zZXQucHVzaCh0KTsKICAgICAgICAgIHJldHVybiB0YWc7CiAgICAgIH0KICAgICAgLy8vIERlZmluZSBhIHRhZyBfbW9kaWZpZXJfLCB3aGljaCBpcyBhIGZ1bmN0aW9uIHRoYXQsIGdpdmVuIGEgdGFnLAogICAgICAvLy8gd2lsbCByZXR1cm4gYSB0YWcgdGhhdCBpcyBhIHN1YnRhZyBvZiB0aGUgb3JpZ2luYWwuIEFwcGx5aW5nIHRoZQogICAgICAvLy8gc2FtZSBtb2RpZmllciB0byBhIHR3aWNlIHRhZyB3aWxsIHJldHVybiB0aGUgc2FtZSB2YWx1ZSAoYG0xKHQxKQogICAgICAvLy8gPT0gbTEodDEpYCkgYW5kIGFwcGx5aW5nIG11bHRpcGxlIG1vZGlmaWVycyB3aWxsLCByZWdhcmRsZXNzIG9yCiAgICAgIC8vLyBvcmRlciwgcHJvZHVjZSB0aGUgc2FtZSB0YWcgKGBtMShtMih0MSkpID09IG0yKG0xKHQxKSlgKS4KICAgICAgLy8vCiAgICAgIC8vLyBXaGVuIG11bHRpcGxlIG1vZGlmaWVycyBhcmUgYXBwbGllZCB0byBhIGdpdmVuIGJhc2UgdGFnLCBlYWNoCiAgICAgIC8vLyBzbWFsbGVyIHNldCBvZiBtb2RpZmllcnMgaXMgcmVnaXN0ZXJlZCBhcyBhIHBhcmVudCwgc28gdGhhdCBmb3IKICAgICAgLy8vIGV4YW1wbGUgYG0xKG0yKG0zKHQxKSkpYCBpcyBhIHN1YnR5cGUgb2YgYG0xKG0yKHQxKSlgLAogICAgICAvLy8gYG0xKG0zKHQxKWAsIGFuZCBzbyBvbi4KICAgICAgc3RhdGljIGRlZmluZU1vZGlmaWVyKCkgewogICAgICAgICAgbGV0IG1vZCA9IG5ldyBNb2RpZmllcjsKICAgICAgICAgIHJldHVybiAodGFnKSA9PiB7CiAgICAgICAgICAgICAgaWYgKHRhZy5tb2RpZmllZC5pbmRleE9mKG1vZCkgPiAtMSkKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhZzsKICAgICAgICAgICAgICByZXR1cm4gTW9kaWZpZXIuZ2V0KHRhZy5iYXNlIHx8IHRhZywgdGFnLm1vZGlmaWVkLmNvbmNhdChtb2QpLnNvcnQoKGEsIGIpID0+IGEuaWQgLSBiLmlkKSk7CiAgICAgICAgICB9OwogICAgICB9CiAgfQogIGxldCBuZXh0TW9kaWZpZXJJRCA9IDA7CiAgY2xhc3MgTW9kaWZpZXIgewogICAgICBjb25zdHJ1Y3RvcigpIHsKICAgICAgICAgIHRoaXMuaW5zdGFuY2VzID0gW107CiAgICAgICAgICB0aGlzLmlkID0gbmV4dE1vZGlmaWVySUQrKzsKICAgICAgfQogICAgICBzdGF0aWMgZ2V0KGJhc2UsIG1vZHMpIHsKICAgICAgICAgIGlmICghbW9kcy5sZW5ndGgpCiAgICAgICAgICAgICAgcmV0dXJuIGJhc2U7CiAgICAgICAgICBsZXQgZXhpc3RzID0gbW9kc1swXS5pbnN0YW5jZXMuZmluZCh0ID0+IHQuYmFzZSA9PSBiYXNlICYmIHNhbWVBcnJheShtb2RzLCB0Lm1vZGlmaWVkKSk7CiAgICAgICAgICBpZiAoZXhpc3RzKQogICAgICAgICAgICAgIHJldHVybiBleGlzdHM7CiAgICAgICAgICBsZXQgc2V0ID0gW10sIHRhZyA9IG5ldyBUYWcoc2V0LCBiYXNlLCBtb2RzKTsKICAgICAgICAgIGZvciAobGV0IG0gb2YgbW9kcykKICAgICAgICAgICAgICBtLmluc3RhbmNlcy5wdXNoKHRhZyk7CiAgICAgICAgICBsZXQgY29uZmlncyA9IHBvd2VyU2V0KG1vZHMpOwogICAgICAgICAgZm9yIChsZXQgcGFyZW50IG9mIGJhc2Uuc2V0KQogICAgICAgICAgICAgIGlmICghcGFyZW50Lm1vZGlmaWVkLmxlbmd0aCkKICAgICAgICAgICAgICAgICAgZm9yIChsZXQgY29uZmlnIG9mIGNvbmZpZ3MpCiAgICAgICAgICAgICAgICAgICAgICBzZXQucHVzaChNb2RpZmllci5nZXQocGFyZW50LCBjb25maWcpKTsKICAgICAgICAgIHJldHVybiB0YWc7CiAgICAgIH0KICB9CiAgZnVuY3Rpb24gc2FtZUFycmF5KGEsIGIpIHsKICAgICAgcmV0dXJuIGEubGVuZ3RoID09IGIubGVuZ3RoICYmIGEuZXZlcnkoKHgsIGkpID0+IHggPT0gYltpXSk7CiAgfQogIGZ1bmN0aW9uIHBvd2VyU2V0KGFycmF5KSB7CiAgICAgIGxldCBzZXRzID0gW1tdXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGUgPSBzZXRzLmxlbmd0aDsgaiA8IGU7IGorKykgewogICAgICAgICAgICAgIHNldHMucHVzaChzZXRzW2pdLmNvbmNhdChhcnJheVtpXSkpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBzZXRzLnNvcnQoKGEsIGIpID0+IGIubGVuZ3RoIC0gYS5sZW5ndGgpOwogIH0KICAvLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGFkZCBhIHNldCBvZiB0YWdzIHRvIGEgbGFuZ3VhZ2Ugc3ludGF4CiAgLy8vIHZpYSBbYE5vZGVTZXQuZXh0ZW5kYF0oI2NvbW1vbi5Ob2RlU2V0LmV4dGVuZCkgb3IKICAvLy8gW2BMUlBhcnNlci5jb25maWd1cmVgXSgjbHIuTFJQYXJzZXIuY29uZmlndXJlKS4KICAvLy8KICAvLy8gVGhlIGFyZ3VtZW50IG9iamVjdCBtYXBzIG5vZGUgc2VsZWN0b3JzIHRvIFtoaWdobGlnaHRpbmcKICAvLy8gdGFnc10oI2hpZ2hsaWdodC5UYWcpIG9yIGFycmF5cyBvZiB0YWdzLgogIC8vLwogIC8vLyBOb2RlIHNlbGVjdG9ycyBtYXkgaG9sZCBvbmUgb3IgbW9yZSAoc3BhY2Utc2VwYXJhdGVkKSBub2RlIHBhdGhzLgogIC8vLyBTdWNoIGEgcGF0aCBjYW4gYmUgYSBbbm9kZSBuYW1lXSgjY29tbW9uLk5vZGVUeXBlLm5hbWUpLCBvcgogIC8vLyBtdWx0aXBsZSBub2RlIG5hbWVzIChvciBgKmAgd2lsZGNhcmRzKSBzZXBhcmF0ZWQgYnkgc2xhc2gKICAvLy8gY2hhcmFjdGVycywgYXMgaW4gYCJCbG9jay9EZWNsYXJhdGlvbi9WYXJpYWJsZU5hbWUiYC4gU3VjaCBhIHBhdGgKICAvLy8gbWF0Y2hlcyB0aGUgZmluYWwgbm9kZSBidXQgb25seSBpZiBpdHMgZGlyZWN0IHBhcmVudCBub2RlcyBhcmUgdGhlCiAgLy8vIG90aGVyIG5vZGVzIG1lbnRpb25lZC4gQSBgKmAgaW4gc3VjaCBhIHBhdGggbWF0Y2hlcyBhbnkgcGFyZW50LAogIC8vLyBidXQgb25seSBhIHNpbmdsZSBsZXZlbOKAlHdpbGRjYXJkcyB0aGF0IG1hdGNoIG11bHRpcGxlIHBhcmVudHMKICAvLy8gYXJlbid0IHN1cHBvcnRlZCwgYm90aCBmb3IgZWZmaWNpZW5jeSByZWFzb25zIGFuZCBiZWNhdXNlIExlemVyCiAgLy8vIHRyZWVzIG1ha2UgaXQgcmF0aGVyIGhhcmQgdG8gcmVhc29uIGFib3V0IHdoYXQgdGhleSB3b3VsZCBtYXRjaC4pCiAgLy8vCiAgLy8vIEEgcGF0aCBjYW4gYmUgZW5kZWQgd2l0aCBgLy4uLmAgdG8gaW5kaWNhdGUgdGhhdCB0aGUgdGFnIGFzc2lnbmVkCiAgLy8vIHRvIHRoZSBub2RlIHNob3VsZCBhbHNvIGFwcGx5IHRvIGFsbCBjaGlsZCBub2RlcywgZXZlbiBpZiB0aGV5CiAgLy8vIG1hdGNoIHRoZWlyIG93biBzdHlsZSAoYnkgZGVmYXVsdCwgb25seSB0aGUgaW5uZXJtb3N0IHN0eWxlIGlzCiAgLy8vIHVzZWQpLgogIC8vLwogIC8vLyBXaGVuIGEgcGF0aCBlbmRzIGluIGAhYCwgYXMgaW4gYEF0dHJpYnV0ZSFgLCBubyBmdXJ0aGVyIG1hdGNoaW5nCiAgLy8vIGhhcHBlbnMgZm9yIHRoZSBub2RlJ3MgY2hpbGQgbm9kZXMsIGFuZCB0aGUgZW50aXJlIG5vZGUgZ2V0cyB0aGUKICAvLy8gZ2l2ZW4gc3R5bGUuCiAgLy8vCiAgLy8vIEluIHRoaXMgbm90YXRpb24sIG5vZGUgbmFtZXMgdGhhdCBjb250YWluIGAvYCwgYCFgLCBgKmAsIG9yIGAuLi5gCiAgLy8vIG11c3QgYmUgcXVvdGVkIGFzIEpTT04gc3RyaW5ncy4KICAvLy8KICAvLy8gRm9yIGV4YW1wbGU6CiAgLy8vCiAgLy8vIGBgYGphdmFzY3JpcHQKICAvLy8gcGFyc2VyLndpdGhQcm9wcygKICAvLy8gICBzdHlsZVRhZ3MoewogIC8vLyAgICAgLy8gU3R5bGUgTnVtYmVyIGFuZCBCaWdOdW1iZXIgbm9kZXMKICAvLy8gICAgICJOdW1iZXIgQmlnTnVtYmVyIjogdGFncy5udW1iZXIsCiAgLy8vICAgICAvLyBTdHlsZSBFc2NhcGUgbm9kZXMgd2hvc2UgcGFyZW50IGlzIFN0cmluZwogIC8vLyAgICAgIlN0cmluZy9Fc2NhcGUiOiB0YWdzLmVzY2FwZSwKICAvLy8gICAgIC8vIFN0eWxlIGFueXRoaW5nIGluc2lkZSBBdHRyaWJ1dGVzIG5vZGVzCiAgLy8vICAgICAiQXR0cmlidXRlcyEiOiB0YWdzLm1ldGEsCiAgLy8vICAgICAvLyBBZGQgYSBzdHlsZSB0byBhbGwgY29udGVudCBpbnNpZGUgSXRhbGljIG5vZGVzCiAgLy8vICAgICAiSXRhbGljLy4uLiI6IHRhZ3MuZW1waGFzaXMsCiAgLy8vICAgICAvLyBTdHlsZSBJbnZhbGlkU3RyaW5nIG5vZGVzIGFzIGJvdGggYHN0cmluZ2AgYW5kIGBpbnZhbGlkYAogIC8vLyAgICAgIkludmFsaWRTdHJpbmciOiBbdGFncy5zdHJpbmcsIHRhZ3MuaW52YWxpZF0sCiAgLy8vICAgICAvLyBTdHlsZSB0aGUgbm9kZSBuYW1lZCAiLyIgYXMgcHVuY3R1YXRpb24KICAvLy8gICAgICciLyInOiB0YWdzLnB1bmN0dWF0aW9uCiAgLy8vICAgfSkKICAvLy8gKQogIC8vLyBgYGAKICBmdW5jdGlvbiBzdHlsZVRhZ3Moc3BlYykgewogICAgICBsZXQgYnlOYW1lID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgZm9yIChsZXQgcHJvcCBpbiBzcGVjKSB7CiAgICAgICAgICBsZXQgdGFncyA9IHNwZWNbcHJvcF07CiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGFncykpCiAgICAgICAgICAgICAgdGFncyA9IFt0YWdzXTsKICAgICAgICAgIGZvciAobGV0IHBhcnQgb2YgcHJvcC5zcGxpdCgiICIpKQogICAgICAgICAgICAgIGlmIChwYXJ0KSB7CiAgICAgICAgICAgICAgICAgIGxldCBwaWVjZXMgPSBbXSwgbW9kZSA9IDIgLyogTm9ybWFsICovLCByZXN0ID0gcGFydDsKICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcG9zID0gMDs7KSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdCA9PSAiLi4uIiAmJiBwb3MgPiAwICYmIHBvcyArIDMgPT0gcGFydC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlID0gMSAvKiBJbmhlcml0ICovOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgbGV0IG0gPSAvXiIoPzpbXiJcXF18XFwuKSo/InxbXlwvIV0rLy5leGVjKHJlc3QpOwogICAgICAgICAgICAgICAgICAgICAgaWYgKCFtKQogICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCJJbnZhbGlkIHBhdGg6ICIgKyBwYXJ0KTsKICAgICAgICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKG1bMF0gPT0gIioiID8gIiIgOiBtWzBdWzBdID09ICciJyA/IEpTT04ucGFyc2UobVswXSkgOiBtWzBdKTsKICAgICAgICAgICAgICAgICAgICAgIHBvcyArPSBtWzBdLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPT0gcGFydC5sZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHBhcnRbcG9zKytdOwogICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA9PSBwYXJ0Lmxlbmd0aCAmJiBuZXh0ID09ICIhIikgewogICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGUgPSAwIC8qIE9wYXF1ZSAqLzsKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9ICIvIikKICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigiSW52YWxpZCBwYXRoOiAiICsgcGFydCk7CiAgICAgICAgICAgICAgICAgICAgICByZXN0ID0gcGFydC5zbGljZShwb3MpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGxldCBsYXN0ID0gcGllY2VzLmxlbmd0aCAtIDEsIGlubmVyID0gcGllY2VzW2xhc3RdOwogICAgICAgICAgICAgICAgICBpZiAoIWlubmVyKQogICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoIkludmFsaWQgcGF0aDogIiArIHBhcnQpOwogICAgICAgICAgICAgICAgICBsZXQgcnVsZSA9IG5ldyBSdWxlKHRhZ3MsIG1vZGUsIGxhc3QgPiAwID8gcGllY2VzLnNsaWNlKDAsIGxhc3QpIDogbnVsbCk7CiAgICAgICAgICAgICAgICAgIGJ5TmFtZVtpbm5lcl0gPSBydWxlLnNvcnQoYnlOYW1lW2lubmVyXSk7CiAgICAgICAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBydWxlTm9kZVByb3AuYWRkKGJ5TmFtZSk7CiAgfQogIGNvbnN0IHJ1bGVOb2RlUHJvcCA9IG5ldyBOb2RlUHJvcCgpOwogIGNsYXNzIFJ1bGUgewogICAgICBjb25zdHJ1Y3Rvcih0YWdzLCBtb2RlLCBjb250ZXh0LCBuZXh0KSB7CiAgICAgICAgICB0aGlzLnRhZ3MgPSB0YWdzOwogICAgICAgICAgdGhpcy5tb2RlID0gbW9kZTsKICAgICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7CiAgICAgICAgICB0aGlzLm5leHQgPSBuZXh0OwogICAgICB9CiAgICAgIGdldCBvcGFxdWUoKSB7IHJldHVybiB0aGlzLm1vZGUgPT0gMCAvKiBPcGFxdWUgKi87IH0KICAgICAgZ2V0IGluaGVyaXQoKSB7IHJldHVybiB0aGlzLm1vZGUgPT0gMSAvKiBJbmhlcml0ICovOyB9CiAgICAgIHNvcnQob3RoZXIpIHsKICAgICAgICAgIGlmICghb3RoZXIgfHwgb3RoZXIuZGVwdGggPCB0aGlzLmRlcHRoKSB7CiAgICAgICAgICAgICAgdGhpcy5uZXh0ID0gb3RoZXI7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBvdGhlci5uZXh0ID0gdGhpcy5zb3J0KG90aGVyLm5leHQpOwogICAgICAgICAgcmV0dXJuIG90aGVyOwogICAgICB9CiAgICAgIGdldCBkZXB0aCgpIHsgcmV0dXJuIHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5sZW5ndGggOiAwOyB9CiAgfQogIFJ1bGUuZW1wdHkgPSBuZXcgUnVsZShbXSwgMiAvKiBOb3JtYWwgKi8sIG51bGwpOwogIC8vLyBEZWZpbmUgYSBbaGlnaGxpZ2h0ZXJdKCNoaWdobGlnaHQuSGlnaGxpZ2h0ZXIpIGZyb20gYW4gYXJyYXkgb2YKICAvLy8gdGFnL2NsYXNzIHBhaXJzLiBDbGFzc2VzIGFzc29jaWF0ZWQgd2l0aCBtb3JlIHNwZWNpZmljIHRhZ3Mgd2lsbAogIC8vLyB0YWtlIHByZWNlZGVuY2UuCiAgZnVuY3Rpb24gdGFnSGlnaGxpZ2h0ZXIodGFncywgb3B0aW9ucykgewogICAgICBsZXQgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgZm9yIChsZXQgc3R5bGUgb2YgdGFncykgewogICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHN0eWxlLnRhZykpCiAgICAgICAgICAgICAgbWFwW3N0eWxlLnRhZy5pZF0gPSBzdHlsZS5jbGFzczsKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICBmb3IgKGxldCB0YWcgb2Ygc3R5bGUudGFnKQogICAgICAgICAgICAgICAgICBtYXBbdGFnLmlkXSA9IHN0eWxlLmNsYXNzOwogICAgICB9CiAgICAgIGxldCB7IHNjb3BlLCBhbGwgPSBudWxsIH0gPSBvcHRpb25zIHx8IHt9OwogICAgICByZXR1cm4gewogICAgICAgICAgc3R5bGU6ICh0YWdzKSA9PiB7CiAgICAgICAgICAgICAgbGV0IGNscyA9IGFsbDsKICAgICAgICAgICAgICBmb3IgKGxldCB0YWcgb2YgdGFncykgewogICAgICAgICAgICAgICAgICBmb3IgKGxldCBzdWIgb2YgdGFnLnNldCkgewogICAgICAgICAgICAgICAgICAgICAgbGV0IHRhZ0NsYXNzID0gbWFwW3N1Yi5pZF07CiAgICAgICAgICAgICAgICAgICAgICBpZiAodGFnQ2xhc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbHMgPSBjbHMgPyBjbHMgKyAiICIgKyB0YWdDbGFzcyA6IHRhZ0NsYXNzOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBjbHM7CiAgICAgICAgICB9LAogICAgICAgICAgc2NvcGUKICAgICAgfTsKICB9CiAgY29uc3QgdCQzID0gVGFnLmRlZmluZTsKICBjb25zdCBjb21tZW50ID0gdCQzKCksIG5hbWUgPSB0JDMoKSwgdHlwZU5hbWUgPSB0JDMobmFtZSksIHByb3BlcnR5TmFtZSA9IHQkMyhuYW1lKSwgbGl0ZXJhbCA9IHQkMygpLCBzdHJpbmcgPSB0JDMobGl0ZXJhbCksIG51bWJlciA9IHQkMyhsaXRlcmFsKSwgY29udGVudCA9IHQkMygpLCBoZWFkaW5nID0gdCQzKGNvbnRlbnQpLCBrZXl3b3JkID0gdCQzKCksIG9wZXJhdG9yID0gdCQzKCksIHB1bmN0dWF0aW9uID0gdCQzKCksIGJyYWNrZXQgPSB0JDMocHVuY3R1YXRpb24pLCBtZXRhID0gdCQzKCk7CiAgLy8vIFRoZSBkZWZhdWx0IHNldCBvZiBoaWdobGlnaHRpbmcgW3RhZ3NdKCNoaWdobGlnaHQuVGFnKS4KICAvLy8KICAvLy8gVGhpcyBjb2xsZWN0aW9uIGlzIGhlYXZpbHkgYmlhc2VkIHRvd2FyZHMgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VzLAogIC8vLyBhbmQgbmVjZXNzYXJpbHkgaW5jb21wbGV0ZS4gQSBmdWxsIG9udG9sb2d5IG9mIHN5bnRhY3RpYwogIC8vLyBjb25zdHJ1Y3RzIHdvdWxkIGZpbGwgYSBzdGFjayBvZiBib29rcywgYW5kIGJlIGltcHJhY3RpY2FsIHRvCiAgLy8vIHdyaXRlIHRoZW1lcyBmb3IuIFNvIHRyeSB0byBtYWtlIGRvIHdpdGggdGhpcyBzZXQuIElmIGFsbCBlbHNlCiAgLy8vIGZhaWxzLCBbb3BlbiBhbgogIC8vLyBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL2NvZGVtaXJyb3IvY29kZW1pcnJvci5uZXh0KSB0byBwcm9wb3NlIGEKICAvLy8gbmV3IHRhZywgb3IgW2RlZmluZV0oI2hpZ2hsaWdodC5UYWdeZGVmaW5lKSBhIGxvY2FsIGN1c3RvbSB0YWcgZm9yCiAgLy8vIHlvdXIgdXNlIGNhc2UuCiAgLy8vCiAgLy8vIE5vdGUgdGhhdCBpdCBpcyBub3Qgb2JsaWdhdG9yeSB0byBhbHdheXMgYXR0YWNoIHRoZSBtb3N0IHNwZWNpZmljCiAgLy8vIHRhZyBwb3NzaWJsZSB0byBhbiBlbGVtZW504oCUaWYgeW91ciBncmFtbWFyIGNhbid0IGVhc2lseQogIC8vLyBkaXN0aW5ndWlzaCBhIGNlcnRhaW4gdHlwZSBvZiBlbGVtZW50IChzdWNoIGFzIGEgbG9jYWwgdmFyaWFibGUpLAogIC8vLyBpdCBpcyBva2F5IHRvIHN0eWxlIGl0IGFzIGl0cyBtb3JlIGdlbmVyYWwgdmFyaWFudCAoYSB2YXJpYWJsZSkuCiAgLy8vIAogIC8vLyBGb3IgdGFncyB0aGF0IGV4dGVuZCBzb21lIHBhcmVudCB0YWcsIHRoZSBkb2N1bWVudGF0aW9uIGxpbmtzIHRvCiAgLy8vIHRoZSBwYXJlbnQuCiAgY29uc3QgdGFncyA9IHsKICAgICAgLy8vIEEgY29tbWVudC4KICAgICAgY29tbWVudCwKICAgICAgLy8vIEEgbGluZSBbY29tbWVudF0oI2hpZ2hsaWdodC50YWdzLmNvbW1lbnQpLgogICAgICBsaW5lQ29tbWVudDogdCQzKGNvbW1lbnQpLAogICAgICAvLy8gQSBibG9jayBbY29tbWVudF0oI2hpZ2hsaWdodC50YWdzLmNvbW1lbnQpLgogICAgICBibG9ja0NvbW1lbnQ6IHQkMyhjb21tZW50KSwKICAgICAgLy8vIEEgZG9jdW1lbnRhdGlvbiBbY29tbWVudF0oI2hpZ2hsaWdodC50YWdzLmNvbW1lbnQpLgogICAgICBkb2NDb21tZW50OiB0JDMoY29tbWVudCksCiAgICAgIC8vLyBBbnkga2luZCBvZiBpZGVudGlmaWVyLgogICAgICBuYW1lLAogICAgICAvLy8gVGhlIFtuYW1lXSgjaGlnaGxpZ2h0LnRhZ3MubmFtZSkgb2YgYSB2YXJpYWJsZS4KICAgICAgdmFyaWFibGVOYW1lOiB0JDMobmFtZSksCiAgICAgIC8vLyBBIHR5cGUgW25hbWVdKCNoaWdobGlnaHQudGFncy5uYW1lKS4KICAgICAgdHlwZU5hbWU6IHR5cGVOYW1lLAogICAgICAvLy8gQSB0YWcgbmFtZSAoc3VidGFnIG9mIFtgdHlwZU5hbWVgXSgjaGlnaGxpZ2h0LnRhZ3MudHlwZU5hbWUpKS4KICAgICAgdGFnTmFtZTogdCQzKHR5cGVOYW1lKSwKICAgICAgLy8vIEEgcHJvcGVydHkgb3IgZmllbGQgW25hbWVdKCNoaWdobGlnaHQudGFncy5uYW1lKS4KICAgICAgcHJvcGVydHlOYW1lOiBwcm9wZXJ0eU5hbWUsCiAgICAgIC8vLyBBbiBhdHRyaWJ1dGUgbmFtZSAoc3VidGFnIG9mIFtgcHJvcGVydHlOYW1lYF0oI2hpZ2hsaWdodC50YWdzLnByb3BlcnR5TmFtZSkpLgogICAgICBhdHRyaWJ1dGVOYW1lOiB0JDMocHJvcGVydHlOYW1lKSwKICAgICAgLy8vIFRoZSBbbmFtZV0oI2hpZ2hsaWdodC50YWdzLm5hbWUpIG9mIGEgY2xhc3MuCiAgICAgIGNsYXNzTmFtZTogdCQzKG5hbWUpLAogICAgICAvLy8gQSBsYWJlbCBbbmFtZV0oI2hpZ2hsaWdodC50YWdzLm5hbWUpLgogICAgICBsYWJlbE5hbWU6IHQkMyhuYW1lKSwKICAgICAgLy8vIEEgbmFtZXNwYWNlIFtuYW1lXSgjaGlnaGxpZ2h0LnRhZ3MubmFtZSkuCiAgICAgIG5hbWVzcGFjZTogdCQzKG5hbWUpLAogICAgICAvLy8gVGhlIFtuYW1lXSgjaGlnaGxpZ2h0LnRhZ3MubmFtZSkgb2YgYSBtYWNyby4KICAgICAgbWFjcm9OYW1lOiB0JDMobmFtZSksCiAgICAgIC8vLyBBIGxpdGVyYWwgdmFsdWUuCiAgICAgIGxpdGVyYWwsCiAgICAgIC8vLyBBIHN0cmluZyBbbGl0ZXJhbF0oI2hpZ2hsaWdodC50YWdzLmxpdGVyYWwpLgogICAgICBzdHJpbmcsCiAgICAgIC8vLyBBIGRvY3VtZW50YXRpb24gW3N0cmluZ10oI2hpZ2hsaWdodC50YWdzLnN0cmluZykuCiAgICAgIGRvY1N0cmluZzogdCQzKHN0cmluZyksCiAgICAgIC8vLyBBIGNoYXJhY3RlciBsaXRlcmFsIChzdWJ0YWcgb2YgW3N0cmluZ10oI2hpZ2hsaWdodC50YWdzLnN0cmluZykpLgogICAgICBjaGFyYWN0ZXI6IHQkMyhzdHJpbmcpLAogICAgICAvLy8gQW4gYXR0cmlidXRlIHZhbHVlIChzdWJ0YWcgb2YgW3N0cmluZ10oI2hpZ2hsaWdodC50YWdzLnN0cmluZykpLgogICAgICBhdHRyaWJ1dGVWYWx1ZTogdCQzKHN0cmluZyksCiAgICAgIC8vLyBBIG51bWJlciBbbGl0ZXJhbF0oI2hpZ2hsaWdodC50YWdzLmxpdGVyYWwpLgogICAgICBudW1iZXIsCiAgICAgIC8vLyBBbiBpbnRlZ2VyIFtudW1iZXJdKCNoaWdobGlnaHQudGFncy5udW1iZXIpIGxpdGVyYWwuCiAgICAgIGludGVnZXI6IHQkMyhudW1iZXIpLAogICAgICAvLy8gQSBmbG9hdGluZy1wb2ludCBbbnVtYmVyXSgjaGlnaGxpZ2h0LnRhZ3MubnVtYmVyKSBsaXRlcmFsLgogICAgICBmbG9hdDogdCQzKG51bWJlciksCiAgICAgIC8vLyBBIGJvb2xlYW4gW2xpdGVyYWxdKCNoaWdobGlnaHQudGFncy5saXRlcmFsKS4KICAgICAgYm9vbDogdCQzKGxpdGVyYWwpLAogICAgICAvLy8gUmVndWxhciBleHByZXNzaW9uIFtsaXRlcmFsXSgjaGlnaGxpZ2h0LnRhZ3MubGl0ZXJhbCkuCiAgICAgIHJlZ2V4cDogdCQzKGxpdGVyYWwpLAogICAgICAvLy8gQW4gZXNjYXBlIFtsaXRlcmFsXSgjaGlnaGxpZ2h0LnRhZ3MubGl0ZXJhbCksIGZvciBleGFtcGxlIGEKICAgICAgLy8vIGJhY2tzbGFzaCBlc2NhcGUgaW4gYSBzdHJpbmcuCiAgICAgIGVzY2FwZTogdCQzKGxpdGVyYWwpLAogICAgICAvLy8gQSBjb2xvciBbbGl0ZXJhbF0oI2hpZ2hsaWdodC50YWdzLmxpdGVyYWwpLgogICAgICBjb2xvcjogdCQzKGxpdGVyYWwpLAogICAgICAvLy8gQSBVUkwgW2xpdGVyYWxdKCNoaWdobGlnaHQudGFncy5saXRlcmFsKS4KICAgICAgdXJsOiB0JDMobGl0ZXJhbCksCiAgICAgIC8vLyBBIGxhbmd1YWdlIGtleXdvcmQuCiAgICAgIGtleXdvcmQsCiAgICAgIC8vLyBUaGUgW2tleXdvcmRdKCNoaWdobGlnaHQudGFncy5rZXl3b3JkKSBmb3IgdGhlIHNlbGYgb3IgdGhpcwogICAgICAvLy8gb2JqZWN0LgogICAgICBzZWxmOiB0JDMoa2V5d29yZCksCiAgICAgIC8vLyBUaGUgW2tleXdvcmRdKCNoaWdobGlnaHQudGFncy5rZXl3b3JkKSBmb3IgbnVsbC4KICAgICAgbnVsbDogdCQzKGtleXdvcmQpLAogICAgICAvLy8gQSBba2V5d29yZF0oI2hpZ2hsaWdodC50YWdzLmtleXdvcmQpIGRlbm90aW5nIHNvbWUgYXRvbWljIHZhbHVlLgogICAgICBhdG9tOiB0JDMoa2V5d29yZCksCiAgICAgIC8vLyBBIFtrZXl3b3JkXSgjaGlnaGxpZ2h0LnRhZ3Mua2V5d29yZCkgdGhhdCByZXByZXNlbnRzIGEgdW5pdC4KICAgICAgdW5pdDogdCQzKGtleXdvcmQpLAogICAgICAvLy8gQSBtb2RpZmllciBba2V5d29yZF0oI2hpZ2hsaWdodC50YWdzLmtleXdvcmQpLgogICAgICBtb2RpZmllcjogdCQzKGtleXdvcmQpLAogICAgICAvLy8gQSBba2V5d29yZF0oI2hpZ2hsaWdodC50YWdzLmtleXdvcmQpIHRoYXQgYWN0cyBhcyBhbiBvcGVyYXRvci4KICAgICAgb3BlcmF0b3JLZXl3b3JkOiB0JDMoa2V5d29yZCksCiAgICAgIC8vLyBBIGNvbnRyb2wtZmxvdyByZWxhdGVkIFtrZXl3b3JkXSgjaGlnaGxpZ2h0LnRhZ3Mua2V5d29yZCkuCiAgICAgIGNvbnRyb2xLZXl3b3JkOiB0JDMoa2V5d29yZCksCiAgICAgIC8vLyBBIFtrZXl3b3JkXSgjaGlnaGxpZ2h0LnRhZ3Mua2V5d29yZCkgdGhhdCBkZWZpbmVzIHNvbWV0aGluZy4KICAgICAgZGVmaW5pdGlvbktleXdvcmQ6IHQkMyhrZXl3b3JkKSwKICAgICAgLy8vIEEgW2tleXdvcmRdKCNoaWdobGlnaHQudGFncy5rZXl3b3JkKSByZWxhdGVkIHRvIGRlZmluaW5nIG9yCiAgICAgIC8vLyBpbnRlcmZhY2luZyB3aXRoIG1vZHVsZXMuCiAgICAgIG1vZHVsZUtleXdvcmQ6IHQkMyhrZXl3b3JkKSwKICAgICAgLy8vIEFuIG9wZXJhdG9yLgogICAgICBvcGVyYXRvciwKICAgICAgLy8vIEFuIFtvcGVyYXRvcl0oI2hpZ2hsaWdodC50YWdzLm9wZXJhdG9yKSB0aGF0IGRlcmVmZXJlbmNlcyBzb21ldGhpbmcuCiAgICAgIGRlcmVmT3BlcmF0b3I6IHQkMyhvcGVyYXRvciksCiAgICAgIC8vLyBBcml0aG1ldGljLXJlbGF0ZWQgW29wZXJhdG9yXSgjaGlnaGxpZ2h0LnRhZ3Mub3BlcmF0b3IpLgogICAgICBhcml0aG1ldGljT3BlcmF0b3I6IHQkMyhvcGVyYXRvciksCiAgICAgIC8vLyBMb2dpY2FsIFtvcGVyYXRvcl0oI2hpZ2hsaWdodC50YWdzLm9wZXJhdG9yKS4KICAgICAgbG9naWNPcGVyYXRvcjogdCQzKG9wZXJhdG9yKSwKICAgICAgLy8vIEJpdCBbb3BlcmF0b3JdKCNoaWdobGlnaHQudGFncy5vcGVyYXRvcikuCiAgICAgIGJpdHdpc2VPcGVyYXRvcjogdCQzKG9wZXJhdG9yKSwKICAgICAgLy8vIENvbXBhcmlzb24gW29wZXJhdG9yXSgjaGlnaGxpZ2h0LnRhZ3Mub3BlcmF0b3IpLgogICAgICBjb21wYXJlT3BlcmF0b3I6IHQkMyhvcGVyYXRvciksCiAgICAgIC8vLyBbT3BlcmF0b3JdKCNoaWdobGlnaHQudGFncy5vcGVyYXRvcikgdGhhdCB1cGRhdGVzIGl0cyBvcGVyYW5kLgogICAgICB1cGRhdGVPcGVyYXRvcjogdCQzKG9wZXJhdG9yKSwKICAgICAgLy8vIFtPcGVyYXRvcl0oI2hpZ2hsaWdodC50YWdzLm9wZXJhdG9yKSB0aGF0IGRlZmluZXMgc29tZXRoaW5nLgogICAgICBkZWZpbml0aW9uT3BlcmF0b3I6IHQkMyhvcGVyYXRvciksCiAgICAgIC8vLyBUeXBlLXJlbGF0ZWQgW29wZXJhdG9yXSgjaGlnaGxpZ2h0LnRhZ3Mub3BlcmF0b3IpLgogICAgICB0eXBlT3BlcmF0b3I6IHQkMyhvcGVyYXRvciksCiAgICAgIC8vLyBDb250cm9sLWZsb3cgW29wZXJhdG9yXSgjaGlnaGxpZ2h0LnRhZ3Mub3BlcmF0b3IpLgogICAgICBjb250cm9sT3BlcmF0b3I6IHQkMyhvcGVyYXRvciksCiAgICAgIC8vLyBQcm9ncmFtIG9yIG1hcmt1cCBwdW5jdHVhdGlvbi4KICAgICAgcHVuY3R1YXRpb24sCiAgICAgIC8vLyBbUHVuY3R1YXRpb25dKCNoaWdobGlnaHQudGFncy5wdW5jdHVhdGlvbikgdGhhdCBzZXBhcmF0ZXMKICAgICAgLy8vIHRoaW5ncy4KICAgICAgc2VwYXJhdG9yOiB0JDMocHVuY3R1YXRpb24pLAogICAgICAvLy8gQnJhY2tldC1zdHlsZSBbcHVuY3R1YXRpb25dKCNoaWdobGlnaHQudGFncy5wdW5jdHVhdGlvbikuCiAgICAgIGJyYWNrZXQsCiAgICAgIC8vLyBBbmdsZSBbYnJhY2tldHNdKCNoaWdobGlnaHQudGFncy5icmFja2V0KSAodXN1YWxseSBgPGAgYW5kIGA+YAogICAgICAvLy8gdG9rZW5zKS4KICAgICAgYW5nbGVCcmFja2V0OiB0JDMoYnJhY2tldCksCiAgICAgIC8vLyBTcXVhcmUgW2JyYWNrZXRzXSgjaGlnaGxpZ2h0LnRhZ3MuYnJhY2tldCkgKHVzdWFsbHkgYFtgIGFuZCBgXWAKICAgICAgLy8vIHRva2VucykuCiAgICAgIHNxdWFyZUJyYWNrZXQ6IHQkMyhicmFja2V0KSwKICAgICAgLy8vIFBhcmVudGhlc2VzICh1c3VhbGx5IGAoYCBhbmQgYClgIHRva2VucykuIFN1YnRhZyBvZgogICAgICAvLy8gW2JyYWNrZXRdKCNoaWdobGlnaHQudGFncy5icmFja2V0KS4KICAgICAgcGFyZW46IHQkMyhicmFja2V0KSwKICAgICAgLy8vIEJyYWNlcyAodXN1YWxseSBge2AgYW5kIGB9YCB0b2tlbnMpLiBTdWJ0YWcgb2YKICAgICAgLy8vIFticmFja2V0XSgjaGlnaGxpZ2h0LnRhZ3MuYnJhY2tldCkuCiAgICAgIGJyYWNlOiB0JDMoYnJhY2tldCksCiAgICAgIC8vLyBDb250ZW50LCBmb3IgZXhhbXBsZSBwbGFpbiB0ZXh0IGluIFhNTCBvciBtYXJrdXAgZG9jdW1lbnRzLgogICAgICBjb250ZW50LAogICAgICAvLy8gW0NvbnRlbnRdKCNoaWdobGlnaHQudGFncy5jb250ZW50KSB0aGF0IHJlcHJlc2VudHMgYSBoZWFkaW5nLgogICAgICBoZWFkaW5nLAogICAgICAvLy8gQSBsZXZlbCAxIFtoZWFkaW5nXSgjaGlnaGxpZ2h0LnRhZ3MuaGVhZGluZykuCiAgICAgIGhlYWRpbmcxOiB0JDMoaGVhZGluZyksCiAgICAgIC8vLyBBIGxldmVsIDIgW2hlYWRpbmddKCNoaWdobGlnaHQudGFncy5oZWFkaW5nKS4KICAgICAgaGVhZGluZzI6IHQkMyhoZWFkaW5nKSwKICAgICAgLy8vIEEgbGV2ZWwgMyBbaGVhZGluZ10oI2hpZ2hsaWdodC50YWdzLmhlYWRpbmcpLgogICAgICBoZWFkaW5nMzogdCQzKGhlYWRpbmcpLAogICAgICAvLy8gQSBsZXZlbCA0IFtoZWFkaW5nXSgjaGlnaGxpZ2h0LnRhZ3MuaGVhZGluZykuCiAgICAgIGhlYWRpbmc0OiB0JDMoaGVhZGluZyksCiAgICAgIC8vLyBBIGxldmVsIDUgW2hlYWRpbmddKCNoaWdobGlnaHQudGFncy5oZWFkaW5nKS4KICAgICAgaGVhZGluZzU6IHQkMyhoZWFkaW5nKSwKICAgICAgLy8vIEEgbGV2ZWwgNiBbaGVhZGluZ10oI2hpZ2hsaWdodC50YWdzLmhlYWRpbmcpLgogICAgICBoZWFkaW5nNjogdCQzKGhlYWRpbmcpLAogICAgICAvLy8gQSBwcm9zZSBzZXBhcmF0b3IgKHN1Y2ggYXMgYSBob3Jpem9udGFsIHJ1bGUpLgogICAgICBjb250ZW50U2VwYXJhdG9yOiB0JDMoY29udGVudCksCiAgICAgIC8vLyBbQ29udGVudF0oI2hpZ2hsaWdodC50YWdzLmNvbnRlbnQpIHRoYXQgcmVwcmVzZW50cyBhIGxpc3QuCiAgICAgIGxpc3Q6IHQkMyhjb250ZW50KSwKICAgICAgLy8vIFtDb250ZW50XSgjaGlnaGxpZ2h0LnRhZ3MuY29udGVudCkgdGhhdCByZXByZXNlbnRzIGEgcXVvdGUuCiAgICAgIHF1b3RlOiB0JDMoY29udGVudCksCiAgICAgIC8vLyBbQ29udGVudF0oI2hpZ2hsaWdodC50YWdzLmNvbnRlbnQpIHRoYXQgaXMgZW1waGFzaXplZC4KICAgICAgZW1waGFzaXM6IHQkMyhjb250ZW50KSwKICAgICAgLy8vIFtDb250ZW50XSgjaGlnaGxpZ2h0LnRhZ3MuY29udGVudCkgdGhhdCBpcyBzdHlsZWQgc3Ryb25nLgogICAgICBzdHJvbmc6IHQkMyhjb250ZW50KSwKICAgICAgLy8vIFtDb250ZW50XSgjaGlnaGxpZ2h0LnRhZ3MuY29udGVudCkgdGhhdCBpcyBwYXJ0IG9mIGEgbGluay4KICAgICAgbGluazogdCQzKGNvbnRlbnQpLAogICAgICAvLy8gW0NvbnRlbnRdKCNoaWdobGlnaHQudGFncy5jb250ZW50KSB0aGF0IGlzIHN0eWxlZCBhcyBjb2RlIG9yCiAgICAgIC8vLyBtb25vc3BhY2UuCiAgICAgIG1vbm9zcGFjZTogdCQzKGNvbnRlbnQpLAogICAgICAvLy8gW0NvbnRlbnRdKCNoaWdobGlnaHQudGFncy5jb250ZW50KSB0aGF0IGhhcyBhIHN0cmlrZS10aHJvdWdoCiAgICAgIC8vLyBzdHlsZS4KICAgICAgc3RyaWtldGhyb3VnaDogdCQzKGNvbnRlbnQpLAogICAgICAvLy8gSW5zZXJ0ZWQgdGV4dCBpbiBhIGNoYW5nZS10cmFja2luZyBmb3JtYXQuCiAgICAgIGluc2VydGVkOiB0JDMoKSwKICAgICAgLy8vIERlbGV0ZWQgdGV4dC4KICAgICAgZGVsZXRlZDogdCQzKCksCiAgICAgIC8vLyBDaGFuZ2VkIHRleHQuCiAgICAgIGNoYW5nZWQ6IHQkMygpLAogICAgICAvLy8gQW4gaW52YWxpZCBvciB1bnN5bnRhY3RpYyBlbGVtZW50LgogICAgICBpbnZhbGlkOiB0JDMoKSwKICAgICAgLy8vIE1ldGFkYXRhIG9yIG1ldGEtaW5zdHJ1Y3Rpb24uCiAgICAgIG1ldGEsCiAgICAgIC8vLyBbTWV0YWRhdGFdKCNoaWdobGlnaHQudGFncy5tZXRhKSB0aGF0IGFwcGxpZXMgdG8gdGhlIGVudGlyZQogICAgICAvLy8gZG9jdW1lbnQuCiAgICAgIGRvY3VtZW50TWV0YTogdCQzKG1ldGEpLAogICAgICAvLy8gW01ldGFkYXRhXSgjaGlnaGxpZ2h0LnRhZ3MubWV0YSkgdGhhdCBhbm5vdGF0ZXMgb3IgYWRkcwogICAgICAvLy8gYXR0cmlidXRlcyB0byBhIGdpdmVuIHN5bnRhY3RpYyBlbGVtZW50LgogICAgICBhbm5vdGF0aW9uOiB0JDMobWV0YSksCiAgICAgIC8vLyBQcm9jZXNzaW5nIGluc3RydWN0aW9uIG9yIHByZXByb2Nlc3NvciBkaXJlY3RpdmUuIFN1YnRhZyBvZgogICAgICAvLy8gW21ldGFdKCNoaWdobGlnaHQudGFncy5tZXRhKS4KICAgICAgcHJvY2Vzc2luZ0luc3RydWN0aW9uOiB0JDMobWV0YSksCiAgICAgIC8vLyBbTW9kaWZpZXJdKCNoaWdobGlnaHQuVGFnXmRlZmluZU1vZGlmaWVyKSB0aGF0IGluZGljYXRlcyB0aGF0IGEKICAgICAgLy8vIGdpdmVuIGVsZW1lbnQgaXMgYmVpbmcgZGVmaW5lZC4gRXhwZWN0ZWQgdG8gYmUgdXNlZCB3aXRoIHRoZQogICAgICAvLy8gdmFyaW91cyBbbmFtZV0oI2hpZ2hsaWdodC50YWdzLm5hbWUpIHRhZ3MuCiAgICAgIGRlZmluaXRpb246IFRhZy5kZWZpbmVNb2RpZmllcigpLAogICAgICAvLy8gW01vZGlmaWVyXSgjaGlnaGxpZ2h0LlRhZ15kZWZpbmVNb2RpZmllcikgdGhhdCBpbmRpY2F0ZXMgdGhhdAogICAgICAvLy8gc29tZXRoaW5nIGlzIGNvbnN0YW50LiBNb3N0bHkgZXhwZWN0ZWQgdG8gYmUgdXNlZCB3aXRoCiAgICAgIC8vLyBbdmFyaWFibGUgbmFtZXNdKCNoaWdobGlnaHQudGFncy52YXJpYWJsZU5hbWUpLgogICAgICBjb25zdGFudDogVGFnLmRlZmluZU1vZGlmaWVyKCksCiAgICAgIC8vLyBbTW9kaWZpZXJdKCNoaWdobGlnaHQuVGFnXmRlZmluZU1vZGlmaWVyKSB1c2VkIHRvIGluZGljYXRlIHRoYXQKICAgICAgLy8vIGEgW3ZhcmlhYmxlXSgjaGlnaGxpZ2h0LnRhZ3MudmFyaWFibGVOYW1lKSBvciBbcHJvcGVydHkKICAgICAgLy8vIG5hbWVdKCNoaWdobGlnaHQudGFncy5wcm9wZXJ0eU5hbWUpIGlzIGJlaW5nIGNhbGxlZCBvciBkZWZpbmVkCiAgICAgIC8vLyBhcyBhIGZ1bmN0aW9uLgogICAgICBmdW5jdGlvbjogVGFnLmRlZmluZU1vZGlmaWVyKCksCiAgICAgIC8vLyBbTW9kaWZpZXJdKCNoaWdobGlnaHQuVGFnXmRlZmluZU1vZGlmaWVyKSB0aGF0IGNhbiBiZSBhcHBsaWVkIHRvCiAgICAgIC8vLyBbbmFtZXNdKCNoaWdobGlnaHQudGFncy5uYW1lKSB0byBpbmRpY2F0ZSB0aGF0IHRoZXkgYmVsb25nIHRvCiAgICAgIC8vLyB0aGUgbGFuZ3VhZ2UncyBzdGFuZGFyZCBlbnZpcm9ubWVudC4KICAgICAgc3RhbmRhcmQ6IFRhZy5kZWZpbmVNb2RpZmllcigpLAogICAgICAvLy8gW01vZGlmaWVyXSgjaGlnaGxpZ2h0LlRhZ15kZWZpbmVNb2RpZmllcikgdGhhdCBpbmRpY2F0ZXMgYSBnaXZlbgogICAgICAvLy8gW25hbWVzXSgjaGlnaGxpZ2h0LnRhZ3MubmFtZSkgaXMgbG9jYWwgdG8gc29tZSBzY29wZS4KICAgICAgbG9jYWw6IFRhZy5kZWZpbmVNb2RpZmllcigpLAogICAgICAvLy8gQSBnZW5lcmljIHZhcmlhbnQgW21vZGlmaWVyXSgjaGlnaGxpZ2h0LlRhZ15kZWZpbmVNb2RpZmllcikgdGhhdAogICAgICAvLy8gY2FuIGJlIHVzZWQgdG8gdGFnIGxhbmd1YWdlLXNwZWNpZmljIGFsdGVybmF0aXZlIHZhcmlhbnRzIG9mCiAgICAgIC8vLyBzb21lIGNvbW1vbiB0YWcuIEl0IGlzIHJlY29tbWVuZGVkIGZvciB0aGVtZXMgdG8gZGVmaW5lIHNwZWNpYWwKICAgICAgLy8vIGZvcm1zIG9mIGF0IGxlYXN0IHRoZSBbc3RyaW5nXSgjaGlnaGxpZ2h0LnRhZ3Muc3RyaW5nKSBhbmQKICAgICAgLy8vIFt2YXJpYWJsZSBuYW1lXSgjaGlnaGxpZ2h0LnRhZ3MudmFyaWFibGVOYW1lKSB0YWdzLCBzaW5jZSB0aG9zZQogICAgICAvLy8gY29tZSB1cCBhIGxvdC4KICAgICAgc3BlY2lhbDogVGFnLmRlZmluZU1vZGlmaWVyKCkKICB9OwogIC8vLyBUaGlzIGlzIGEgaGlnaGxpZ2h0ZXIgdGhhdCBhZGRzIHN0YWJsZSwgcHJlZGljdGFibGUgY2xhc3NlcyB0bwogIC8vLyB0b2tlbnMsIGZvciBzdHlsaW5nIHdpdGggZXh0ZXJuYWwgQ1NTLgogIC8vLwogIC8vLyBUaGUgZm9sbG93aW5nIHRhZ3MgYXJlIG1hcHBlZCB0byB0aGVpciBuYW1lIHByZWZpeGVkIHdpdGggYCJ0b2stImAKICAvLy8gKGZvciBleGFtcGxlIGAidG9rLWNvbW1lbnQiYCk6CiAgLy8vCiAgLy8vICogW2BsaW5rYF0oI2hpZ2hsaWdodC50YWdzLmxpbmspCiAgLy8vICogW2BoZWFkaW5nYF0oI2hpZ2hsaWdodC50YWdzLmhlYWRpbmcpCiAgLy8vICogW2BlbXBoYXNpc2BdKCNoaWdobGlnaHQudGFncy5lbXBoYXNpcykKICAvLy8gKiBbYHN0cm9uZ2BdKCNoaWdobGlnaHQudGFncy5zdHJvbmcpCiAgLy8vICogW2BrZXl3b3JkYF0oI2hpZ2hsaWdodC50YWdzLmtleXdvcmQpCiAgLy8vICogW2BhdG9tYF0oI2hpZ2hsaWdodC50YWdzLmF0b20pCiAgLy8vICogW2Bib29sYF0oI2hpZ2hsaWdodC50YWdzLmJvb2wpCiAgLy8vICogW2B1cmxgXSgjaGlnaGxpZ2h0LnRhZ3MudXJsKQogIC8vLyAqIFtgbGFiZWxOYW1lYF0oI2hpZ2hsaWdodC50YWdzLmxhYmVsTmFtZSkKICAvLy8gKiBbYGluc2VydGVkYF0oI2hpZ2hsaWdodC50YWdzLmluc2VydGVkKQogIC8vLyAqIFtgZGVsZXRlZGBdKCNoaWdobGlnaHQudGFncy5kZWxldGVkKQogIC8vLyAqIFtgbGl0ZXJhbGBdKCNoaWdobGlnaHQudGFncy5saXRlcmFsKQogIC8vLyAqIFtgc3RyaW5nYF0oI2hpZ2hsaWdodC50YWdzLnN0cmluZykKICAvLy8gKiBbYG51bWJlcmBdKCNoaWdobGlnaHQudGFncy5udW1iZXIpCiAgLy8vICogW2B2YXJpYWJsZU5hbWVgXSgjaGlnaGxpZ2h0LnRhZ3MudmFyaWFibGVOYW1lKQogIC8vLyAqIFtgdHlwZU5hbWVgXSgjaGlnaGxpZ2h0LnRhZ3MudHlwZU5hbWUpCiAgLy8vICogW2BuYW1lc3BhY2VgXSgjaGlnaGxpZ2h0LnRhZ3MubmFtZXNwYWNlKQogIC8vLyAqIFtgY2xhc3NOYW1lYF0oI2hpZ2hsaWdodC50YWdzLmNsYXNzTmFtZSkKICAvLy8gKiBbYG1hY3JvTmFtZWBdKCNoaWdobGlnaHQudGFncy5tYWNyb05hbWUpCiAgLy8vICogW2Bwcm9wZXJ0eU5hbWVgXSgjaGlnaGxpZ2h0LnRhZ3MucHJvcGVydHlOYW1lKQogIC8vLyAqIFtgb3BlcmF0b3JgXSgjaGlnaGxpZ2h0LnRhZ3Mub3BlcmF0b3IpCiAgLy8vICogW2Bjb21tZW50YF0oI2hpZ2hsaWdodC50YWdzLmNvbW1lbnQpCiAgLy8vICogW2BtZXRhYF0oI2hpZ2hsaWdodC50YWdzLm1ldGEpCiAgLy8vICogW2BwdW5jdHVhdGlvbmBdKCNoaWdobGlnaHQudGFncy5wdW5jdHVhdGlvbikKICAvLy8gKiBbYGludmFsaWRgXSgjaGlnaGxpZ2h0LnRhZ3MuaW52YWxpZCkKICAvLy8KICAvLy8gSW4gYWRkaXRpb24sIHRoZXNlIG1hcHBpbmdzIGFyZSBwcm92aWRlZDoKICAvLy8KICAvLy8gKiBbYHJlZ2V4cGBdKCNoaWdobGlnaHQudGFncy5yZWdleHApLAogIC8vLyAgIFtgZXNjYXBlYF0oI2hpZ2hsaWdodC50YWdzLmVzY2FwZSksIGFuZAogIC8vLyAgIFtgc3BlY2lhbGBdKCNoaWdobGlnaHQudGFncy5zcGVjaWFsKVtgKHN0cmluZylgXSgjaGlnaGxpZ2h0LnRhZ3Muc3RyaW5nKQogIC8vLyAgIGFyZSBtYXBwZWQgdG8gYCJ0b2stc3RyaW5nMiJgCiAgLy8vICogW2BzcGVjaWFsYF0oI2hpZ2hsaWdodC50YWdzLnNwZWNpYWwpW2AodmFyaWFibGVOYW1lKWBdKCNoaWdobGlnaHQudGFncy52YXJpYWJsZU5hbWUpCiAgLy8vICAgdG8gYCJ0b2stdmFyaWFibGVOYW1lMiJgCiAgLy8vICogW2Bsb2NhbGBdKCNoaWdobGlnaHQudGFncy5sb2NhbClbYCh2YXJpYWJsZU5hbWUpYF0oI2hpZ2hsaWdodC50YWdzLnZhcmlhYmxlTmFtZSkKICAvLy8gICB0byBgInRvay12YXJpYWJsZU5hbWUgdG9rLWxvY2FsImAKICAvLy8gKiBbYGRlZmluaXRpb25gXSgjaGlnaGxpZ2h0LnRhZ3MuZGVmaW5pdGlvbilbYCh2YXJpYWJsZU5hbWUpYF0oI2hpZ2hsaWdodC50YWdzLnZhcmlhYmxlTmFtZSkKICAvLy8gICB0byBgInRvay12YXJpYWJsZU5hbWUgdG9rLWRlZmluaXRpb24iYAogIC8vLyAqIFtgZGVmaW5pdGlvbmBdKCNoaWdobGlnaHQudGFncy5kZWZpbml0aW9uKVtgKHByb3BlcnR5TmFtZSlgXSgjaGlnaGxpZ2h0LnRhZ3MucHJvcGVydHlOYW1lKQogIC8vLyAgIHRvIGAidG9rLXByb3BlcnR5TmFtZSB0b2stZGVmaW5pdGlvbiJgCiAgdGFnSGlnaGxpZ2h0ZXIoWwogICAgICB7IHRhZzogdGFncy5saW5rLCBjbGFzczogInRvay1saW5rIiB9LAogICAgICB7IHRhZzogdGFncy5oZWFkaW5nLCBjbGFzczogInRvay1oZWFkaW5nIiB9LAogICAgICB7IHRhZzogdGFncy5lbXBoYXNpcywgY2xhc3M6ICJ0b2stZW1waGFzaXMiIH0sCiAgICAgIHsgdGFnOiB0YWdzLnN0cm9uZywgY2xhc3M6ICJ0b2stc3Ryb25nIiB9LAogICAgICB7IHRhZzogdGFncy5rZXl3b3JkLCBjbGFzczogInRvay1rZXl3b3JkIiB9LAogICAgICB7IHRhZzogdGFncy5hdG9tLCBjbGFzczogInRvay1hdG9tIiB9LAogICAgICB7IHRhZzogdGFncy5ib29sLCBjbGFzczogInRvay1ib29sIiB9LAogICAgICB7IHRhZzogdGFncy51cmwsIGNsYXNzOiAidG9rLXVybCIgfSwKICAgICAgeyB0YWc6IHRhZ3MubGFiZWxOYW1lLCBjbGFzczogInRvay1sYWJlbE5hbWUiIH0sCiAgICAgIHsgdGFnOiB0YWdzLmluc2VydGVkLCBjbGFzczogInRvay1pbnNlcnRlZCIgfSwKICAgICAgeyB0YWc6IHRhZ3MuZGVsZXRlZCwgY2xhc3M6ICJ0b2stZGVsZXRlZCIgfSwKICAgICAgeyB0YWc6IHRhZ3MubGl0ZXJhbCwgY2xhc3M6ICJ0b2stbGl0ZXJhbCIgfSwKICAgICAgeyB0YWc6IHRhZ3Muc3RyaW5nLCBjbGFzczogInRvay1zdHJpbmciIH0sCiAgICAgIHsgdGFnOiB0YWdzLm51bWJlciwgY2xhc3M6ICJ0b2stbnVtYmVyIiB9LAogICAgICB7IHRhZzogW3RhZ3MucmVnZXhwLCB0YWdzLmVzY2FwZSwgdGFncy5zcGVjaWFsKHRhZ3Muc3RyaW5nKV0sIGNsYXNzOiAidG9rLXN0cmluZzIiIH0sCiAgICAgIHsgdGFnOiB0YWdzLnZhcmlhYmxlTmFtZSwgY2xhc3M6ICJ0b2stdmFyaWFibGVOYW1lIiB9LAogICAgICB7IHRhZzogdGFncy5sb2NhbCh0YWdzLnZhcmlhYmxlTmFtZSksIGNsYXNzOiAidG9rLXZhcmlhYmxlTmFtZSB0b2stbG9jYWwiIH0sCiAgICAgIHsgdGFnOiB0YWdzLmRlZmluaXRpb24odGFncy52YXJpYWJsZU5hbWUpLCBjbGFzczogInRvay12YXJpYWJsZU5hbWUgdG9rLWRlZmluaXRpb24iIH0sCiAgICAgIHsgdGFnOiB0YWdzLnNwZWNpYWwodGFncy52YXJpYWJsZU5hbWUpLCBjbGFzczogInRvay12YXJpYWJsZU5hbWUyIiB9LAogICAgICB7IHRhZzogdGFncy5kZWZpbml0aW9uKHRhZ3MucHJvcGVydHlOYW1lKSwgY2xhc3M6ICJ0b2stcHJvcGVydHlOYW1lIHRvay1kZWZpbml0aW9uIiB9LAogICAgICB7IHRhZzogdGFncy50eXBlTmFtZSwgY2xhc3M6ICJ0b2stdHlwZU5hbWUiIH0sCiAgICAgIHsgdGFnOiB0YWdzLm5hbWVzcGFjZSwgY2xhc3M6ICJ0b2stbmFtZXNwYWNlIiB9LAogICAgICB7IHRhZzogdGFncy5jbGFzc05hbWUsIGNsYXNzOiAidG9rLWNsYXNzTmFtZSIgfSwKICAgICAgeyB0YWc6IHRhZ3MubWFjcm9OYW1lLCBjbGFzczogInRvay1tYWNyb05hbWUiIH0sCiAgICAgIHsgdGFnOiB0YWdzLnByb3BlcnR5TmFtZSwgY2xhc3M6ICJ0b2stcHJvcGVydHlOYW1lIiB9LAogICAgICB7IHRhZzogdGFncy5vcGVyYXRvciwgY2xhc3M6ICJ0b2stb3BlcmF0b3IiIH0sCiAgICAgIHsgdGFnOiB0YWdzLmNvbW1lbnQsIGNsYXNzOiAidG9rLWNvbW1lbnQiIH0sCiAgICAgIHsgdGFnOiB0YWdzLm1ldGEsIGNsYXNzOiAidG9rLW1ldGEiIH0sCiAgICAgIHsgdGFnOiB0YWdzLmludmFsaWQsIGNsYXNzOiAidG9rLWludmFsaWQiIH0sCiAgICAgIHsgdGFnOiB0YWdzLnB1bmN0dWF0aW9uLCBjbGFzczogInRvay1wdW5jdHVhdGlvbiIgfQogIF0pOwoKICAvLyBUaGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSBsZXplci1nZW5lcmF0b3IuIFlvdSBwcm9iYWJseSBzaG91bGRuJ3QgZWRpdCBpdC4KICBjb25zdCBwcm9wZXJ0eUlkZW50aWZpZXIgPSAxNDcsCiAgICBpZGVudGlmaWVyID0gMTQ4LAogICAgbmFtZUlkZW50aWZpZXIgPSAxNDksCiAgICBpbnNlcnRTZW1pID0gMTUwLAogICAgZXhwcmVzc2lvbjAgPSAxNTQsCiAgICBGb3JFeHByZXNzaW9uID0gNCwKICAgIGZvckV4cHJlc3Npb25TdGFydCA9IDE1NywKICAgIEZvckluRXhwcmVzc2lvbiA9IDcsCiAgICBOYW1lID0gOCwKICAgIElkZW50aWZpZXIgPSA5LAogICAgQWRkaXRpb25hbElkZW50aWZpZXIgPSAxMCwKICAgIGZvckV4cHJlc3Npb25Cb2R5U3RhcnQgPSAxNjUsCiAgICBJZkV4cHJlc3Npb24gPSAxOCwKICAgIGlmRXhwcmVzc2lvblN0YXJ0ID0gMTY2LAogICAgUXVhbnRpZmllZEV4cHJlc3Npb24gPSAyMiwKICAgIHF1YW50aWZpZWRFeHByZXNzaW9uU3RhcnQgPSAxNjcsCiAgICBRdWFudGlmaWVkSW5FeHByZXNzaW9uID0gMjYsCiAgICBQb3NpdGl2ZVVuYXJ5VGVzdCA9IDM2LAogICAgQXJpdGhtZXRpY0V4cHJlc3Npb24gPSA0MCwKICAgIGFyaXRobWV0aWNQbHVzU3RhcnQgPSAxNzEsCiAgICBhcml0aG1ldGljVGltZXNTdGFydCA9IDE3MiwKICAgIGFyaXRobWV0aWNFeHBTdGFydCA9IDE3MywKICAgIGFyaXRobWV0aWNVbmFyeVN0YXJ0ID0gMTc0LAogICAgVmFyaWFibGVOYW1lID0gNDcsCiAgICBQYXRoRXhwcmVzc2lvbiA9IDY3LAogICAgcGF0aEV4cHJlc3Npb25TdGFydCA9IDE3OSwKICAgIEZpbHRlckV4cHJlc3Npb24gPSA2OSwKICAgIGZpbHRlckV4cHJlc3Npb25TdGFydCA9IDE4MCwKICAgIEZ1bmN0aW9uSW52b2NhdGlvbiA9IDcxLAogICAgZnVuY3Rpb25JbnZvY2F0aW9uU3RhcnQgPSAxODEsCiAgICBQYXJhbWV0ZXJOYW1lID0gMTAzLAogICAgbmlsID0gMTg2LAogICAgTnVtZXJpY0xpdGVyYWwgPSAxMDYsCiAgICBTdHJpbmdMaXRlcmFsID0gMTA3LAogICAgQm9vbGVhbkxpdGVyYWwgPSAxMDgsCiAgICBGdW5jdGlvbkRlZmluaXRpb24gPSAxMTcsCiAgICBmdW5jdGlvbkRlZmluaXRpb25TdGFydCA9IDE5NCwKICAgIENvbnRleHQgPSAxMjQsCiAgICBjb250ZXh0U3RhcnQgPSAxOTYsCiAgICBDb250ZXh0RW50cnkgPSAxMjUsCiAgICBQcm9wZXJ0eU5hbWUgPSAxMjcsCiAgICBQcm9wZXJ0eUlkZW50aWZpZXIgPSAxMjg7CgogIGNvbnN0IExPR19QQVJTRSA9IHR5cGVvZiBwcm9jZXNzICE9ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52ICYmIC9cYmZwYXJzZSg6ZGJnKT9cYi8udGVzdChwcm9jZXNzLmVudi5MT0cpOwogIGNvbnN0IExPR19QQVJTRV9ERUJVRyA9IHR5cGVvZiBwcm9jZXNzICE9ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52ICYmIC9cZnBhcnNlOmRiZ1xiLy50ZXN0KHByb2Nlc3MuZW52LkxPRyk7CiAgY29uc3QgTE9HX1ZBUlMgPSB0eXBlb2YgcHJvY2VzcyAhPSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudiAmJiAvXGJjb250ZXh0P1xiLy50ZXN0KHByb2Nlc3MuZW52LkxPRyk7CgogIGNvbnN0IHNwYWNlQ2hhcnMgPSBbCiAgICA5LCAxMSwgMTIsIDMyLCAxMzMsIDE2MCwKICAgIDU3NjAsIDgxOTIsIDgxOTMsIDgxOTQsIDgxOTUsIDgxOTYsIDgxOTcsIDgxOTgsCiAgICA4MTk5LCA4MjAwLCA4MjAxLCA4MjAyLCA4MjMyLCA4MjMzLCA4MjM5LCA4Mjg3LCAxMjI4OAogIF07CgogIGNvbnN0IG5ld2xpbmVDaGFycyA9IGNoYXJzJDEoJ1xuXHInKTsKCiAgY29uc3QgYWRkaXRpb25hbE5hbWVDaGFycyA9IGNoYXJzJDEoIicuLy0rKiIpOwoKICAvKioKICAgKiBAcGFyYW0geyBzdHJpbmcgfSBzdHIKICAgKiBAcmV0dXJuIHsgbnVtYmVyW10gfQogICAqLwogIGZ1bmN0aW9uIGNoYXJzJDEoc3RyKSB7CiAgICByZXR1cm4gQXJyYXkuZnJvbShzdHIpLm1hcChzID0+IHMuY2hhckNvZGVBdCgwKSk7CiAgfQoKICAvKioKICAgKiBAcGFyYW0geyBudW1iZXIgfSBjaAogICAqIEByZXR1cm4geyBib29sZWFuIH0KICAgKi8KICBmdW5jdGlvbiBpc1N0YXJ0Q2hhcihjaCkgewogICAgcmV0dXJuICgKICAgICAgY2ggPT09IDYzIC8vID8KICAgICkgfHwgKAogICAgICBjaCA9PT0gOTUgLy8gXwogICAgKSB8fCAoCiAgICAgIGNoID49IDY1ICYmIGNoIDw9IDkwIC8vIEEtWgogICAgKSB8fCAoCiAgICAgIGNoID49IDk3ICYmIGNoIDw9IDEyMiAvLyBhLXoKICAgICkgfHwgKAogICAgICBjaCA+PSAxNjEgJiYgIWlzUGFydENoYXIoY2gpICYmICFpc1NwYWNlKGNoKQogICAgKTsKICB9CgogIC8qKgogICAqIEBwYXJhbSB7IG51bWJlciB9IGNoCiAgICogQHJldHVybiB7IGJvb2xlYW4gfQogICAqLwogIGZ1bmN0aW9uIGlzQWRkaXRpb25hbChjaCkgewogICAgcmV0dXJuIGFkZGl0aW9uYWxOYW1lQ2hhcnMuaW5jbHVkZXMoY2gpOwogIH0KCiAgLyoqCiAgICogQHBhcmFtIHsgbnVtYmVyIH0gY2gKICAgKiBAcmV0dXJuIHsgYm9vbGVhbiB9CiAgICovCiAgZnVuY3Rpb24gaXNQYXJ0Q2hhcihjaCkgewogICAgcmV0dXJuICgKICAgICAgY2ggPj0gNDggJiYgY2ggPD0gNTcgLy8gMC05CiAgICApIHx8ICgKICAgICAgY2ggPT09IDB4QjcKICAgICkgfHwgKAogICAgICBjaCA+PSAweDAzMDAgJiYgY2ggPD0gMHgwMzZGCiAgICApIHx8ICgKICAgICAgY2ggPj0gMHgyMDNGICYmIGNoIDw9IDB4MjA0MAogICAgKTsKICB9CgogIC8qKgogICAqIEBwYXJhbSB7IG51bWJlciB9IGNoCiAgICogQHJldHVybiB7IGJvb2xlYW4gfQogICAqLwogIGZ1bmN0aW9uIGlzU3BhY2UoY2gpIHsKICAgIHJldHVybiBzcGFjZUNoYXJzLmluY2x1ZGVzKGNoKTsKICB9CgogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogIGZ1bmN0aW9uIGluZGVudChzdHIsIHNwYWNlcykgewogICAgcmV0dXJuIHNwYWNlcy5jb25jYXQoCiAgICAgIHN0ci5zcGxpdCgvXG4vZykuam9pbignXG4nICsgc3BhY2VzKQogICAgKTsKICB9CgogIC8qKgogICAqIEBwYXJhbSB7IGltcG9ydCgnQGxlemVyL2xyJykuSW5wdXRTdHJlYW0gfSBpbnB1dAogICAqIEBwYXJhbSAgeyBudW1iZXIgfSBbb2Zmc2V0XQogICAqIEBwYXJhbSB7IGJvb2xlYW4gfSBbaW5jbHVkZU9wZXJhdG9yc10KICAgKgogICAqIEByZXR1cm4geyB7IHRva2VuOiBzdHJpbmcsIG9mZnNldDogbnVtYmVyIH0gfCBudWxsIH0KICAgKi8KICBmdW5jdGlvbiBwYXJzZUFkZGl0aW9uYWxTeW1ib2woaW5wdXQsIG9mZnNldCA9IDApIHsKCiAgICBjb25zdCBuZXh0ID0gaW5wdXQucGVlayhvZmZzZXQpOwoKICAgIGlmIChpc0FkZGl0aW9uYWwobmV4dCkpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBvZmZzZXQ6IDEsCiAgICAgICAgdG9rZW46IFN0cmluZy5mcm9tQ2hhckNvZGUobmV4dCkKICAgICAgfTsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9CgogIC8qKgogICAqIEBwYXJhbSB7IGltcG9ydCgnQGxlemVyL2xyJykuSW5wdXRTdHJlYW0gfSBpbnB1dAogICAqIEBwYXJhbSB7IG51bWJlciB9IFtvZmZzZXRdCiAgICogQHBhcmFtIHsgYm9vbGVhbiB9IFtuYW1lUGFydF0KICAgKgogICAqIEByZXR1cm4geyB7IHRva2VuOiBzdHJpbmcsIG9mZnNldDogbnVtYmVyIH0gfCBudWxsIH0KICAgKi8KICBmdW5jdGlvbiBwYXJzZUlkZW50aWZpZXIoaW5wdXQsIG9mZnNldCA9IDAsIG5hbWVQYXJ0ID0gZmFsc2UpIHsKICAgIGZvciAobGV0IGluc2lkZSA9IGZhbHNlLCBjaGFycyA9IFtdLCBpID0gMDs7IGkrKykgewogICAgICBjb25zdCBuZXh0ID0gaW5wdXQucGVlayhvZmZzZXQgKyBpKTsKCiAgICAgIGlmIChpc1N0YXJ0Q2hhcihuZXh0KSB8fCAoKGluc2lkZSB8fCBuYW1lUGFydCkgJiYgaXNQYXJ0Q2hhcihuZXh0KSkpIHsKICAgICAgICBpZiAoIWluc2lkZSkgewogICAgICAgICAgaW5zaWRlID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGNoYXJzLnB1c2gobmV4dCk7CiAgICAgIH0gZWxzZSB7CgogICAgICAgIGlmIChjaGFycy5sZW5ndGgpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHRva2VuOiBTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLmNoYXJzKSwKICAgICAgICAgICAgb2Zmc2V0OiBpCiAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0KICB9CgogIC8qKgogICAqIEBwYXJhbSB7IGltcG9ydCgnQGxlemVyL2xyJykuSW5wdXRTdHJlYW0gfSBpbnB1dAogICAqIEBwYXJhbSAgeyBudW1iZXIgfSBvZmZzZXQKICAgKgogICAqIEByZXR1cm4geyB7IHRva2VuOiBzdHJpbmcsIG9mZnNldDogbnVtYmVyIH0gfCBudWxsIH0KICAgKi8KICBmdW5jdGlvbiBwYXJzZVNwYWNlcyhpbnB1dCwgb2Zmc2V0KSB7CgogICAgZm9yIChsZXQgaW5zaWRlID0gZmFsc2UsIGkgPSAwOzsgaSsrKSB7CiAgICAgIGxldCBuZXh0ID0gaW5wdXQucGVlayhvZmZzZXQgKyBpKTsKCiAgICAgIGlmIChpc1NwYWNlKG5leHQpKSB7CiAgICAgICAgaWYgKCFpbnNpZGUpIHsKICAgICAgICAgIGluc2lkZSA9IHRydWU7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGlmIChpbnNpZGUpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHRva2VuOiAnICcsCiAgICAgICAgICAgIG9mZnNldDogaQogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICB9CiAgfQoKICAvKioKICAgKiBQYXJzZSBhIG5hbWUgZnJvbSB0aGUgaW5wdXQgYW5kIHJldHVybiB0aGUgZmlyc3QgbWF0Y2gsIGlmIGFueS4KICAgKgogICAqIEBwYXJhbSB7IGltcG9ydCgnQGxlemVyL2xyJykuSW5wdXRTdHJlYW0gfSBpbnB1dAogICAqIEBwYXJhbSB7IFZhcmlhYmxlcyB9IHZhcmlhYmxlcwogICAqCiAgICogQHJldHVybiB7IHsgdG9rZW46IHN0cmluZywgb2Zmc2V0OiBudW1iZXIsIHRlcm06IG51bWJlciB9IHwgbnVsbCB9CiAgICovCiAgZnVuY3Rpb24gcGFyc2VOYW1lKGlucHV0LCB2YXJpYWJsZXMpIHsKICAgIGNvbnN0IGNvbnRleHRLZXlzID0gdmFyaWFibGVzLmNvbnRleHRLZXlzKCk7CgogICAgY29uc3Qgc3RhcnQgPSB2YXJpYWJsZXMudG9rZW5zOwoKICAgIGZvciAobGV0IGkgPSAwLCB0b2tlbnMgPSBbXSwgbmV4dE1hdGNoID0gbnVsbDs7KSB7CgogICAgICBjb25zdCBuYW1lUGFydCA9IChzdGFydC5sZW5ndGggKyB0b2tlbnMubGVuZ3RoKSA+IDA7CiAgICAgIGNvbnN0IG1heWJlU3BhY2UgPSB0b2tlbnMubGVuZ3RoID4gMDsKCiAgICAgIGNvbnN0IG1hdGNoID0gKAogICAgICAgIHBhcnNlSWRlbnRpZmllcihpbnB1dCwgaSwgbmFtZVBhcnQpIHx8CiAgICAgICAgbmFtZVBhcnQgJiYgcGFyc2VBZGRpdGlvbmFsU3ltYm9sKGlucHV0LCBpKSB8fAogICAgICAgIG1heWJlU3BhY2UgJiYgcGFyc2VTcGFjZXMoaW5wdXQsIGkpCiAgICAgICk7CgogICAgICAvLyBtYXRjaCBpcyByZXF1aXJlZAogICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgcmV0dXJuIG5leHRNYXRjaDsKICAgICAgfQoKICAgICAgY29uc3QgewogICAgICAgIHRva2VuLAogICAgICAgIG9mZnNldAogICAgICB9ID0gbWF0Y2g7CgogICAgICBpICs9IG9mZnNldDsKCiAgICAgIGlmICh0b2tlbiA9PT0gJyAnKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIHRva2VucyA9IFsgLi4udG9rZW5zLCB0b2tlbiBdOwoKICAgICAgY29uc3QgbmFtZSA9IFsgLi4uc3RhcnQsIC4uLnRva2VucyBdLmpvaW4oJyAnKTsKCiAgICAgIGlmIChjb250ZXh0S2V5cy5zb21lKGVsID0+IGVsID09PSBuYW1lKSkgewogICAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5zWzBdOwoKICAgICAgICBuZXh0TWF0Y2ggPSB7CiAgICAgICAgICB0b2tlbiwKICAgICAgICAgIG9mZnNldDogdG9rZW4ubGVuZ3RoLAogICAgICAgICAgdGVybTogbmFtZUlkZW50aWZpZXIKICAgICAgICB9OwogICAgICB9CgogICAgICBpZiAoZGF0ZVRpbWVJZGVudGlmaWVycy5zb21lKGVsID0+IGVsID09PSBuYW1lKSkgewogICAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5zWzBdOwoKICAgICAgICAvLyBwYXJzZSBkYXRlIHRpbWUgaWRlbnRpZmllcnMgYXMgbm9ybWFsCiAgICAgICAgLy8gaWRlbnRpZmllcnMgdG8gYWxsb3cgc3BlY2lhbGl6YXRpb24gdG8ga2ljayBpbgogICAgICAgIC8vCiAgICAgICAgLy8gY2YuIGh0dHBzOi8vZ2l0aHViLmNvbS9uaWtrdS9sZXplci1mZWVsL2lzc3Vlcy84CiAgICAgICAgbmV4dE1hdGNoID0gewogICAgICAgICAgdG9rZW4sCiAgICAgICAgICBvZmZzZXQ6IHRva2VuLmxlbmd0aCwKICAgICAgICAgIHRlcm06IGlkZW50aWZpZXIKICAgICAgICB9OwogICAgICB9CgogICAgICBpZiAoCiAgICAgICAgIWNvbnRleHRLZXlzLnNvbWUoZWwgPT4gZWwuc3RhcnRzV2l0aChuYW1lKSkgJiYKICAgICAgICAhZGF0ZVRpbWVJZGVudGlmaWVycy5zb21lKGVsID0+IGVsLnN0YXJ0c1dpdGgobmFtZSkpCiAgICAgICkgewogICAgICAgIHJldHVybiBuZXh0TWF0Y2g7CiAgICAgIH0KICAgIH0KCiAgfQoKICBjb25zdCBpZGVudGlmaWVyc01hcCA9IHsKICAgIFsgaWRlbnRpZmllciBdOiAnaWRlbnRpZmllcicsCiAgICBbIG5hbWVJZGVudGlmaWVyIF06ICduYW1lSWRlbnRpZmllcicKICB9OwoKICBjb25zdCBpZGVudGlmaWVycyA9IG5ldyBFeHRlcm5hbFRva2VuaXplcigoaW5wdXQsIHN0YWNrKSA9PiB7CgogICAgTE9HX1BBUlNFX0RFQlVHICYmIGNvbnNvbGUubG9nKCclczogVCA8aWRlbnRpZmllciB8IG5hbWVJZGVudGlmaWVyPicsIGlucHV0LnBvcyk7CgogICAgY29uc3QgbmFtZU1hdGNoID0gcGFyc2VOYW1lKGlucHV0LCBzdGFjay5jb250ZXh0KTsKCiAgICBjb25zdCBzdGFydCA9IHN0YWNrLmNvbnRleHQudG9rZW5zOwoKICAgIGNvbnN0IG1hdGNoID0gbmFtZU1hdGNoIHx8IHBhcnNlSWRlbnRpZmllcihpbnB1dCwgMCwgc3RhcnQubGVuZ3RoID4gMCk7CgogICAgaWYgKG1hdGNoKSB7CiAgICAgIGlucHV0LmFkdmFuY2UobWF0Y2gub2Zmc2V0KTsKICAgICAgaW5wdXQuYWNjZXB0VG9rZW4obmFtZU1hdGNoID8gbmFtZU1hdGNoLnRlcm0gOiBpZGVudGlmaWVyKTsKCiAgICAgIExPR19QQVJTRSAmJiBjb25zb2xlLmxvZygnJXM6IE1BVENIIDwlcz4gPCVzPicsIGlucHV0LnBvcywgbmFtZU1hdGNoID8gaWRlbnRpZmllcnNNYXBbbmFtZU1hdGNoLnRlcm1dIDogJ2lkZW50aWZpZXInLCBtYXRjaC50b2tlbik7CiAgICB9CiAgfSwgeyBjb250ZXh0dWFsOiB0cnVlIH0pOwoKCiAgY29uc3QgcHJvcGVydHlJZGVudGlmaWVycyA9IG5ldyBFeHRlcm5hbFRva2VuaXplcigoaW5wdXQsIHN0YWNrKSA9PiB7CgogICAgTE9HX1BBUlNFX0RFQlVHICYmIGNvbnNvbGUubG9nKCclczogVCA8cHJvcGVydHlJZGVudGlmaWVyPicsIGlucHV0LnBvcyk7CgogICAgY29uc3Qgc3RhcnQgPSBzdGFjay5jb250ZXh0LnRva2VuczsKCiAgICBjb25zdCBtYXRjaCA9IHBhcnNlSWRlbnRpZmllcihpbnB1dCwgMCwgc3RhcnQubGVuZ3RoID4gMCk7CgogICAgaWYgKG1hdGNoKSB7CiAgICAgIGlucHV0LmFkdmFuY2UobWF0Y2gub2Zmc2V0KTsKICAgICAgaW5wdXQuYWNjZXB0VG9rZW4ocHJvcGVydHlJZGVudGlmaWVyKTsKCiAgICAgIExPR19QQVJTRSAmJiBjb25zb2xlLmxvZygnJXM6IE1BVENIIDxwcm9wZXJ0eUlkZW50aWZpZXI+IDwlcz4nLCBpbnB1dC5wb3MsIG1hdGNoLnRva2VuKTsKICAgIH0KICB9KTsKCgogIGNvbnN0IGluc2VydFNlbWljb2xvbiA9IG5ldyBFeHRlcm5hbFRva2VuaXplcigoaW5wdXQsIHN0YWNrKSA9PiB7CgogICAgTE9HX1BBUlNFX0RFQlVHICYmIGNvbnNvbGUubG9nKCclczogVCA8aW5zZXJ0U2VtaT4nLCBpbnB1dC5wb3MpOwoKICAgIGxldCBvZmZzZXQ7CiAgICBsZXQgaW5zZXJ0ID0gZmFsc2U7CgogICAgZm9yIChvZmZzZXQgPSAwOzsgb2Zmc2V0KyspIHsKICAgICAgY29uc3QgY2hhciA9IGlucHV0LnBlZWsob2Zmc2V0KTsKCiAgICAgIGlmIChzcGFjZUNoYXJzLmluY2x1ZGVzKGNoYXIpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIGlmIChuZXdsaW5lQ2hhcnMuaW5jbHVkZXMoY2hhcikpIHsKICAgICAgICBpbnNlcnQgPSB0cnVlOwogICAgICB9CgogICAgICBicmVhazsKICAgIH0KCiAgICBpZiAoaW5zZXJ0KSB7CgogICAgICBjb25zdCBpZGVudGlmaWVyID0gcGFyc2VJZGVudGlmaWVyKGlucHV0LCBvZmZzZXQgKyAxKTsKICAgICAgY29uc3Qgc3BhY2VzID0gcGFyc2VTcGFjZXMoaW5wdXQsIG9mZnNldCArIDEpOwoKICAgICAgaWYgKHNwYWNlcyB8fCBpZGVudGlmaWVyICYmIC9eKHRoZW58ZWxzZXxyZXR1cm58c2F0aXNmaWVzKSQvLnRlc3QoaWRlbnRpZmllci50b2tlbikpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIExPR19QQVJTRSAmJiBjb25zb2xlLmxvZygnJXM6IE1BVENIIDxpbnNlcnRTZW1pPicsIGlucHV0LnBvcyk7CiAgICAgIGlucHV0LmFjY2VwdFRva2VuKGluc2VydFNlbWkpOwogICAgfQogIH0pOwoKICBjb25zdCBwcmVmaXhlZENvbnRleHRTdGFydHMgPSB7CiAgICBbIGZ1bmN0aW9uSW52b2NhdGlvblN0YXJ0IF06ICdGdW5jdGlvbkludm9jYXRpb24nLAogICAgWyBmaWx0ZXJFeHByZXNzaW9uU3RhcnQgXTogJ0ZpbHRlckV4cHJlc3Npb24nLAogICAgWyBwYXRoRXhwcmVzc2lvblN0YXJ0IF06ICdQYXRoRXhwcmVzc2lvbicKICB9OwoKICBjb25zdCBjb250ZXh0U3RhcnRzID0gewogICAgWyBjb250ZXh0U3RhcnQgXTogJ0NvbnRleHQnLAogICAgWyBmdW5jdGlvbkRlZmluaXRpb25TdGFydCBdOiAnRnVuY3Rpb25EZWZpbml0aW9uJywKICAgIFsgZm9yRXhwcmVzc2lvblN0YXJ0IF06ICdGb3JFeHByZXNzaW9uJywKICAgIFsgaWZFeHByZXNzaW9uU3RhcnQgXTogJ0lmRXhwcmVzc2lvbicsCiAgICBbIHF1YW50aWZpZWRFeHByZXNzaW9uU3RhcnQgXTogJ1F1YW50aWZpZWRFeHByZXNzaW9uJwogIH07CgogIGNvbnN0IGNvbnRleHRFbmRzID0gewogICAgWyBDb250ZXh0IF06ICdDb250ZXh0JywKICAgIFsgRnVuY3Rpb25EZWZpbml0aW9uIF06ICdGdW5jdGlvbkRlZmluaXRpb24nLAogICAgWyBGb3JFeHByZXNzaW9uIF06ICdGb3JFeHByZXNzaW9uJywKICAgIFsgSWZFeHByZXNzaW9uIF06ICdJZkV4cHJlc3Npb24nLAogICAgWyBRdWFudGlmaWVkRXhwcmVzc2lvbiBdOiAnUXVhbnRpZmllZEV4cHJlc3Npb24nLAogICAgWyBQYXRoRXhwcmVzc2lvbiBdOiAnUGF0aEV4cHJlc3Npb24nLAogICAgWyBGdW5jdGlvbkludm9jYXRpb24gXTogJ0Z1bmN0aW9uSW52b2NhdGlvbicsCiAgICBbIEZpbHRlckV4cHJlc3Npb24gXTogJ0ZpbHRlckV4cHJlc3Npb24nLAogICAgWyBBcml0aG1ldGljRXhwcmVzc2lvbiBdOiAnQXJpdGhtZXRpY0V4cHJlc3Npb24nCiAgfTsKCiAgY2xhc3MgVmFsdWVQcm9kdWNlciB7CgogICAgLyoqCiAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZuCiAgICAgKi8KICAgIGNvbnN0cnVjdG9yKGZuKSB7CiAgICAgIHRoaXMuZm4gPSBmbjsKICAgIH0KCiAgICBnZXQodmFyaWFibGVzKSB7CiAgICAgIHJldHVybiB0aGlzLmZuKHZhcmlhYmxlcyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9CiAgICAgKgogICAgICogQHJldHVybiB7IFZhbHVlUHJvZHVjZXIgfQogICAgICovCiAgICBzdGF0aWMgb2YoZm4pIHsKICAgICAgcmV0dXJuIG5ldyBWYWx1ZVByb2R1Y2VyKGZuKTsKICAgIH0KCiAgfQoKICBjb25zdCBkYXRlVGltZUxpdGVyYWxzID0gewogICAgJ2RhdGUgYW5kIHRpbWUnOiAxLAogICAgJ2RhdGUnOiAxLAogICAgJ3RpbWUnOiAxLAogICAgJ2R1cmF0aW9uJzogMQogIH07CgogIGNvbnN0IGRhdGVUaW1lSWRlbnRpZmllcnMgPSBPYmplY3Qua2V5cyhkYXRlVGltZUxpdGVyYWxzKTsKCiAgY2xhc3MgVmFyaWFibGVzIHsKCiAgICBjb25zdHJ1Y3Rvcih7CiAgICAgIG5hbWUgPSAnRXhwcmVzc2lvbnMnLAogICAgICB0b2tlbnMgPSBbXSwKICAgICAgY2hpbGRyZW4gPSBbXSwKICAgICAgcGFyZW50ID0gbnVsbCwKICAgICAgY29udGV4dCA9IHsgfSwKICAgICAgdmFsdWUsCiAgICAgIHJhdwogICAgfSA9IHt9KSB7CiAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgIHRoaXMudG9rZW5zID0gdG9rZW5zOwogICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47CiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50OwogICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0OwogICAgICB0aGlzLnZhbHVlID0gdmFsdWU7CiAgICAgIHRoaXMucmF3ID0gcmF3OwogICAgfQoKICAgIGVudGVyU2NvcGUobmFtZSkgewoKICAgICAgY29uc3QgY2hpbGRTY29wZSA9IHRoaXMub2YoewogICAgICAgIG5hbWUsCiAgICAgICAgcGFyZW50OiB0aGlzCiAgICAgIH0pOwoKICAgICAgTE9HX1ZBUlMgJiYgY29uc29sZS5sb2coJ1slc10gZW50ZXInLCBjaGlsZFNjb3BlLnBhdGgsIGNoaWxkU2NvcGUuY29udGV4dCk7CgogICAgICByZXR1cm4gY2hpbGRTY29wZTsKICAgIH0KCiAgICBleGl0U2NvcGUoc3RyKSB7CgogICAgICBpZiAoIXRoaXMucGFyZW50KSB7CiAgICAgICAgTE9HX1ZBUlMgJiYgY29uc29sZS5sb2coJ1slc10gTk8gZXhpdCAlb1xuJXMnLCB0aGlzLnBhdGgsIHRoaXMuY29udGV4dCwgaW5kZW50KHN0ciwgJyAgJykpOwoKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQoKICAgICAgTE9HX1ZBUlMgJiYgY29uc29sZS5sb2coJ1slc10gZXhpdCAlb1xuJXMnLCB0aGlzLnBhdGgsIHRoaXMuY29udGV4dCwgaW5kZW50KHN0ciwgJyAgJykpOwoKICAgICAgcmV0dXJuIHRoaXMucGFyZW50LnB1c2hDaGlsZCh0aGlzKTsKICAgIH0KCiAgICB0b2tlbihwYXJ0KSB7CgogICAgICBMT0dfVkFSUyAmJiBjb25zb2xlLmxvZygnWyVzXSB0b2tlbiA8JXM+ICsgPCVzPicsIHRoaXMucGF0aCwgdGhpcy50b2tlbnMuam9pbignICcpLCBwYXJ0KTsKCiAgICAgIHJldHVybiB0aGlzLmFzc2lnbih7CiAgICAgICAgdG9rZW5zOiBbIC4uLnRoaXMudG9rZW5zLCBwYXJ0IF0KICAgICAgfSk7CiAgICB9CgogICAgbGl0ZXJhbCh2YWx1ZSkgewoKICAgICAgTE9HX1ZBUlMgJiYgY29uc29sZS5sb2coJ1slc10gbGl0ZXJhbCAlbycsIHRoaXMucGF0aCwgdmFsdWUpOwoKICAgICAgcmV0dXJuIHRoaXMucHVzaENoaWxkKHRoaXMub2YoewogICAgICAgIG5hbWU6ICdMaXRlcmFsJywKICAgICAgICB2YWx1ZQogICAgICB9KSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gY29tcHV0ZWQgc2NvcGUgdmFsdWUKICAgICAqCiAgICAgKiBAcmV0dXJuIHthbnl9CiAgICAgKi8KICAgIGNvbXB1dGVkVmFsdWUoKSB7CiAgICAgIGZvciAobGV0IHNjb3BlID0gdGhpczs7c2NvcGUgPSBzY29wZS5jaGlsZHJlbi5zbGljZSgtMSlbMF0pIHsKCiAgICAgICAgaWYgKCFzY29wZSkgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQoKICAgICAgICBpZiAoc2NvcGUudmFsdWUpIHsKICAgICAgICAgIHJldHVybiBzY29wZS52YWx1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBjb250ZXh0S2V5cygpIHsKICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuY29udGV4dCkubWFwKG5vcm1hbGl6ZUNvbnRleHRLZXkpOwogICAgfQoKICAgIGdldCBwYXRoKCkgewogICAgICByZXR1cm4gdGhpcy5wYXJlbnQ/LnBhdGg/LmNvbmNhdCgnID4gJywgdGhpcy5uYW1lKSB8fCB0aGlzLm5hbWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gdmFsdWUgb2YgdmFyaWFibGUuCiAgICAgKgogICAgICogQHBhcmFtIHsgc3RyaW5nIH0gdmFyaWFibGUKICAgICAqIEByZXR1cm4geyBhbnkgfSB2YWx1ZQogICAgICovCiAgICBnZXQodmFyaWFibGUpIHsKCiAgICAgIGNvbnN0IG5hbWVzID0gWyB2YXJpYWJsZSwgdmFyaWFibGUgJiYgbm9ybWFsaXplQ29udGV4dEtleSh2YXJpYWJsZSkgXTsKCiAgICAgIGNvbnN0IGNvbnRleHRLZXkgPSBPYmplY3Qua2V5cyh0aGlzLmNvbnRleHQpLmZpbmQoCiAgICAgICAga2V5ID0+IG5hbWVzLmluY2x1ZGVzKG5vcm1hbGl6ZUNvbnRleHRLZXkoa2V5KSkKICAgICAgKTsKCiAgICAgIGlmICh0eXBlb2YgY29udGV4dEtleSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9CgogICAgICBjb25zdCB2YWwgPSB0aGlzLmNvbnRleHRbY29udGV4dEtleV07CgogICAgICBpZiAodmFsIGluc3RhbmNlb2YgVmFsdWVQcm9kdWNlcikgewogICAgICAgIHJldHVybiB2YWwuZ2V0KHRoaXMpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB2YWw7CiAgICAgIH0KICAgIH0KCiAgICByZXNvbHZlTmFtZSgpIHsKCiAgICAgIGNvbnN0IHZhcmlhYmxlID0gdGhpcy50b2tlbnMuam9pbignICcpOwogICAgICBjb25zdCB0b2tlbnMgPSBbXTsKCiAgICAgIGNvbnN0IHBhcmVudFNjb3BlID0gdGhpcy5hc3NpZ24oewogICAgICAgIHRva2VucwogICAgICB9KTsKCiAgICAgIGNvbnN0IHZhcmlhYmxlU2NvcGUgPSB0aGlzLm9mKHsKICAgICAgICBuYW1lOiAnVmFyaWFibGVOYW1lJywKICAgICAgICBwYXJlbnQ6IHBhcmVudFNjb3BlLAogICAgICAgIHZhbHVlOiB0aGlzLmdldCh2YXJpYWJsZSksCiAgICAgICAgcmF3OiB2YXJpYWJsZQogICAgICB9KTsKCiAgICAgIExPR19WQVJTICYmIGNvbnNvbGUubG9nKCdbJXNdIHJlc29sdmUgbmFtZSA8JXM9JXM+JywgdmFyaWFibGVTY29wZS5wYXRoLCB2YXJpYWJsZSwgdGhpcy5nZXQodmFyaWFibGUpKTsKCiAgICAgIHJldHVybiBwYXJlbnRTY29wZS5wdXNoQ2hpbGQodmFyaWFibGVTY29wZSk7CiAgICB9CgogICAgcHVzaENoaWxkKGNoaWxkKSB7CgogICAgICBpZiAoIWNoaWxkKSB7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0KCiAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuYXNzaWduKHsKICAgICAgICBjaGlsZHJlbjogWyAuLi50aGlzLmNoaWxkcmVuLCBjaGlsZCBdCiAgICAgIH0pOwoKICAgICAgY2hpbGQucGFyZW50ID0gcGFyZW50OwoKICAgICAgcmV0dXJuIHBhcmVudDsKICAgIH0KCiAgICBwdXNoQ2hpbGRyZW4oY2hpbGRyZW4pIHsKCiAgICAgIGxldCBwYXJlbnQgPSB0aGlzOwoKICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikgewogICAgICAgIHBhcmVudCA9IHBhcmVudC5wdXNoQ2hpbGQoY2hpbGQpOwogICAgICB9CgogICAgICByZXR1cm4gcGFyZW50OwogICAgfQoKICAgIGRlY2xhcmVOYW1lKCkgewoKICAgICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHRocm93IEVycm9yKCdubyB0b2tlbnMgdG8gZGVjbGFyZSBuYW1lJyk7CiAgICAgIH0KCiAgICAgIGNvbnN0IHZhcmlhYmxlTmFtZSA9IHRoaXMudG9rZW5zLmpvaW4oJyAnKTsKCiAgICAgIExPR19WQVJTICYmIGNvbnNvbGUubG9nKCdbJXNdIGRlY2xhcmVOYW1lIDwlcz4nLCB0aGlzLnBhdGgsIHZhcmlhYmxlTmFtZSk7CgogICAgICByZXR1cm4gdGhpcy5hc3NpZ24oewogICAgICAgIHRva2VuczogW10KICAgICAgfSkucHVzaENoaWxkKAogICAgICAgIHRoaXMub2YoewogICAgICAgICAgbmFtZTogJ05hbWUnLAogICAgICAgICAgdmFsdWU6IHZhcmlhYmxlTmFtZQogICAgICAgIH0pCiAgICAgICk7CiAgICB9CgogICAgZGVmaW5lKG5hbWUsIHZhbHVlKSB7CgogICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgTE9HX1ZBUlMgJiYgY29uc29sZS5sb2coJ1slc10gbm8gZGVmaW5lIDwlcz0lcz4nLCB0aGlzLnBhdGgsIG5hbWUsIHZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0KCiAgICAgIExPR19WQVJTICYmIGNvbnNvbGUubG9nKCdbJXNdIGRlZmluZSA8JXM9JXM+JywgdGhpcy5wYXRoLCBuYW1lLCB2YWx1ZSk7CgogICAgICBjb25zdCBjb250ZXh0ID0gewogICAgICAgIC4uLnRoaXMuY29udGV4dCwKICAgICAgICBbbmFtZV06IHZhbHVlCiAgICAgIH07CgogICAgICByZXR1cm4gdGhpcy5hc3NpZ24oewogICAgICAgIGNvbnRleHQKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAcGFyYW0geyBSZWNvcmQ8c3RyaW5nLCBhbnk+IH0gW29wdGlvbnNdCiAgICAgKgogICAgICogQHJldHVybiB7IFZhcmlhYmxlcyB9CiAgICAgKi8KICAgIGFzc2lnbihvcHRpb25zID0ge30pIHsKCiAgICAgIHJldHVybiBWYXJpYWJsZXMub2YoewogICAgICAgIC4uLnRoaXMsCiAgICAgICAgLi4ub3B0aW9ucwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIEBwYXJhbSB7IFJlY29yZDxzdHJpbmcsIGFueT4gfSBbb3B0aW9uc10KICAgICAqCiAgICAgKiBAcmV0dXJuIHsgVmFyaWFibGVzIH0KICAgICAqLwogICAgb2Yob3B0aW9ucyA9IHt9KSB7CgogICAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHsKICAgICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsCiAgICAgICAgcGFyZW50OiB0aGlzLnBhcmVudAogICAgICB9OwoKICAgICAgcmV0dXJuIFZhcmlhYmxlcy5vZih7CiAgICAgICAgLi4uZGVmYXVsdE9wdGlvbnMsCiAgICAgICAgLi4ub3B0aW9ucwogICAgICB9KTsKICAgIH0KCiAgICBzdGF0aWMgb2Yob3B0aW9ucykgewogICAgICBjb25zdCB7CiAgICAgICAgbmFtZSwKICAgICAgICB0b2tlbnMgPSBbXSwKICAgICAgICBjaGlsZHJlbiA9IFtdLAogICAgICAgIHBhcmVudCA9IG51bGwsCiAgICAgICAgY29udGV4dCA9IHt9LAogICAgICAgIHZhbHVlLAogICAgICAgIHJhdwogICAgICB9ID0gb3B0aW9uczsKCiAgICAgIHJldHVybiBuZXcgVmFyaWFibGVzKHsKICAgICAgICBuYW1lLAogICAgICAgIHRva2VuczogWyAuLi50b2tlbnMgXSwKICAgICAgICBjaGlsZHJlbjogWyAuLi5jaGlsZHJlbiBdLAogICAgICAgIGNvbnRleHQ6IHsKICAgICAgICAgIC4uLmNvbnRleHQKICAgICAgICB9LAogICAgICAgIHBhcmVudCwKICAgICAgICB2YWx1ZSwKICAgICAgICByYXcKICAgICAgfSk7CiAgICB9CgogIH0KCiAgLyoqCiAgICogQHBhcmFtIHsgc3RyaW5nIH0gbmFtZQogICAqCiAgICogQHJldHVybiB7IHN0cmluZyB9IG5vcm1hbGl6ZWROYW1lCiAgICovCiAgZnVuY3Rpb24gbm9ybWFsaXplQ29udGV4dEtleShuYW1lKSB7CiAgICByZXR1cm4gbmFtZS5yZXBsYWNlKC9ccyooWy4vXC0nKypdKVxzKi9nLCAnICQxICcpLnJlcGxhY2UoL1xzezIsfS9nLCAnICcpLnRyaW0oKTsKICB9CgogIC8qKgogICAqIFdyYXAgY2hpbGRyZW4gb2YgdmFyaWFibGVzIHVuZGVyIHRoZSBnaXZlbiBuYW1lZCBjaGlsZC4KICAgKgogICAqIEBwYXJhbSB7IFZhcmlhYmxlcyB9IHZhcmlhYmxlcwogICAqIEBwYXJhbSB7IHN0cmluZyB9IG5hbWUKICAgKiBAcGFyYW0geyBzdHJpbmcgfSBjb2RlCiAgICogQHJldHVybiB7IFZhcmlhYmxlcyB9CiAgICovCiAgZnVuY3Rpb24gd3JhcCh2YXJpYWJsZXMsIHNjb3BlTmFtZSwgY29kZSkgewoKICAgIGNvbnN0IHBhcnRzID0gdmFyaWFibGVzLmNoaWxkcmVuLmZpbHRlcihjID0+IGMubmFtZSAhPT0gc2NvcGVOYW1lKTsKICAgIGNvbnN0IGNoaWxkcmVuID0gdmFyaWFibGVzLmNoaWxkcmVuLmZpbHRlcihjID0+IGMubmFtZSA9PT0gc2NvcGVOYW1lKTsKCiAgICBjb25zdCBuYW1lUGFydCA9IHBhcnRzWzBdOwogICAgY29uc3QgdmFsdWVQYXJ0ID0gcGFydHNbTWF0aC5tYXgoMSwgcGFydHMubGVuZ3RoIC0gMSldOwoKICAgIGNvbnN0IG5hbWUgPSBuYW1lUGFydC5jb21wdXRlZFZhbHVlKCk7CiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlUGFydD8uY29tcHV0ZWRWYWx1ZSgpIHx8IG51bGw7CgogICAgcmV0dXJuIHZhcmlhYmxlcwogICAgICAuYXNzaWduKHsKICAgICAgICBjaGlsZHJlbgogICAgICB9KQogICAgICAuZW50ZXJTY29wZShzY29wZU5hbWUpCiAgICAgIC5wdXNoQ2hpbGRyZW4ocGFydHMpCiAgICAgIC5leGl0U2NvcGUoY29kZSkKICAgICAgLmRlZmluZShuYW1lLCB2YWx1ZSk7CiAgfQoKICAvKioKICAgKiBAcGFyYW0geyBhbnkgfSBjb250ZXh0CiAgICoKICAgKiBAcmV0dXJuIHsgQ29udGV4dFRyYWNrZXI8VmFyaWFibGVzPiB9CiAgICovCiAgZnVuY3Rpb24gdHJhY2tWYXJpYWJsZXMoY29udGV4dCA9IHt9KSB7CgogICAgY29uc3Qgc3RhcnQgPSBWYXJpYWJsZXMub2YoewogICAgICBjb250ZXh0CiAgICB9KTsKCiAgICByZXR1cm4gbmV3IENvbnRleHRUcmFja2VyKHsKICAgICAgc3RhcnQsCiAgICAgIHJlZHVjZSh2YXJpYWJsZXMsIHRlcm0sIHN0YWNrLCBpbnB1dCkgewoKICAgICAgICBpZiAodGVybSA9PT0gQ29udGV4dCkgewogICAgICAgICAgdmFyaWFibGVzID0gdmFyaWFibGVzLmFzc2lnbih7CiAgICAgICAgICAgIHZhbHVlOiB2YXJpYWJsZXMuY29udGV4dAogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGVybSA9PT0gSWZFeHByZXNzaW9uKSB7CiAgICAgICAgICBjb25zdCBbIHRoZW5QYXJ0LCBlbHNlUGFydCBdID0gdmFyaWFibGVzLmNoaWxkcmVuLnNsaWNlKC0yKTsKCiAgICAgICAgICB2YXJpYWJsZXMgPSB2YXJpYWJsZXMuYXNzaWduKHsKICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAuLi50aGVuUGFydD8uY29tcHV0ZWRWYWx1ZSgpLAogICAgICAgICAgICAgIC4uLmVsc2VQYXJ0Py5jb21wdXRlZFZhbHVlKCkKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGVybSA9PT0gRmlsdGVyRXhwcmVzc2lvbikgewogICAgICAgICAgY29uc3QgWyBzb3VyY2VQYXJ0LCBfIF0gPSB2YXJpYWJsZXMuY2hpbGRyZW4uc2xpY2UoLTIpOwoKICAgICAgICAgIHZhcmlhYmxlcyA9IHZhcmlhYmxlcy5hc3NpZ24oewogICAgICAgICAgICB2YWx1ZTogc291cmNlUGFydD8uY29tcHV0ZWRWYWx1ZSgpCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGlmICh0ZXJtID09PSBGdW5jdGlvbkludm9jYXRpb24pIHsKCiAgICAgICAgICBjb25zdCBbCiAgICAgICAgICAgIG5hbWUsCiAgICAgICAgICAgIC4uLmFyZ3MKICAgICAgICAgIF0gPSB2YXJpYWJsZXMuY2hpbGRyZW47CgogICAgICAgICAgLy8gcHJlc2VydmUgdHlwZSBpbmZvcm1hdGlvbiB0aHJvdWdoIGBnZXQgdmFsdWUoY29udGV4dCwga2V5KWAgdXRpbGl0eQogICAgICAgICAgaWYgKG5hbWU/LnJhdyA9PT0gJ2dldCB2YWx1ZScpIHsKICAgICAgICAgICAgdmFyaWFibGVzID0gZ2V0Q29udGV4dFZhbHVlKHZhcmlhYmxlcywgYXJncyk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBjb25zdCBzdGFydCA9IGNvbnRleHRTdGFydHNbdGVybV07CgogICAgICAgIGlmIChzdGFydCkgewogICAgICAgICAgcmV0dXJuIHZhcmlhYmxlcy5lbnRlclNjb3BlKHN0YXJ0KTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHByZWZpeGVkU3RhcnQgPSBwcmVmaXhlZENvbnRleHRTdGFydHNbdGVybV07CgogICAgICAgIC8vIHB1bGwgPGV4cHJlc3Npb24+IGludG8gbmV3IDxwcmVmaXhlZFN0YXJ0PiBjb250ZXh0CiAgICAgICAgaWYgKHByZWZpeGVkU3RhcnQpIHsKCiAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHZhcmlhYmxlcy5jaGlsZHJlbi5zbGljZSgwLCAtMSk7CiAgICAgICAgICBjb25zdCBsYXN0Q2hpbGQgPSB2YXJpYWJsZXMuY2hpbGRyZW4uc2xpY2UoLTEpWzBdOwoKICAgICAgICAgIHJldHVybiB2YXJpYWJsZXMuYXNzaWduKHsKICAgICAgICAgICAgY2hpbGRyZW4KICAgICAgICAgIH0pLmVudGVyU2NvcGUocHJlZml4ZWRTdGFydCkucHVzaENoaWxkKGxhc3RDaGlsZCkuYXNzaWduKHsKICAgICAgICAgICAgY29udGV4dDogewogICAgICAgICAgICAgIC4uLnZhcmlhYmxlcy5jb250ZXh0LAogICAgICAgICAgICAgIC4uLmxhc3RDaGlsZD8uY29tcHV0ZWRWYWx1ZSgpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgY29kZSA9IGlucHV0LnJlYWQoaW5wdXQucG9zLCBzdGFjay5wb3MpOwoKICAgICAgICBjb25zdCBlbmQgPSBjb250ZXh0RW5kc1t0ZXJtXTsKCiAgICAgICAgaWYgKGVuZCkgewogICAgICAgICAgcmV0dXJuIHZhcmlhYmxlcy5leGl0U2NvcGUoY29kZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGVybSA9PT0gQ29udGV4dEVudHJ5KSB7CiAgICAgICAgICByZXR1cm4gd3JhcCh2YXJpYWJsZXMsICdDb250ZXh0RW50cnknLCBjb2RlKTsKICAgICAgICB9CgogICAgICAgIGlmICgKICAgICAgICAgIHRlcm0gPT09IEZvckluRXhwcmVzc2lvbiB8fAogICAgICAgICAgdGVybSA9PT0gUXVhbnRpZmllZEluRXhwcmVzc2lvbgogICAgICAgICkgewogICAgICAgICAgcmV0dXJuIHdyYXAodmFyaWFibGVzLCAnSW5FeHByZXNzaW9uJywgY29kZSk7CiAgICAgICAgfQoKICAgICAgICAvLyBkZWZpbmUgPHBhcnRpYWw+IHdpdGhpbiBGb3JFeHByZXNzaW9uIGJvZHkKICAgICAgICBpZiAodGVybSA9PT0gZm9yRXhwcmVzc2lvbkJvZHlTdGFydCkgewoKICAgICAgICAgIHJldHVybiB2YXJpYWJsZXMuZGVmaW5lKAogICAgICAgICAgICAncGFydGlhbCcsCiAgICAgICAgICAgIFZhbHVlUHJvZHVjZXIub2YodmFyaWFibGVzID0+IHsKICAgICAgICAgICAgICByZXR1cm4gdmFyaWFibGVzLmNoaWxkcmVuW3ZhcmlhYmxlcy5jaGlsZHJlbi5sZW5ndGggLSAxXT8uY29tcHV0ZWRWYWx1ZSgpOwogICAgICAgICAgICB9KQogICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgIGlmICgKICAgICAgICAgIHRlcm0gPT09IFBhcmFtZXRlck5hbWUKICAgICAgICApIHsKICAgICAgICAgIGNvbnN0IFsgbGVmdCBdID0gdmFyaWFibGVzLmNoaWxkcmVuLnNsaWNlKC0xKTsKCiAgICAgICAgICBjb25zdCBuYW1lID0gbGVmdC5jb21wdXRlZFZhbHVlKCk7CgogICAgICAgICAgLy8gVE9ETzogYXR0YWNoIHR5cGUgaW5mb3JtYXRpb24KICAgICAgICAgIHJldHVybiB2YXJpYWJsZXMuZGVmaW5lKG5hbWUsIDEpOwogICAgICAgIH0KCiAgICAgICAgLy8gcHVsbCA8ZXhwcmVzc2lvbj4gaW50byBBcml0aG1ldGljRXhwcmVzc2lvbiBjaGlsZAogICAgICAgIGlmICgKICAgICAgICAgIHRlcm0gPT09IGFyaXRobWV0aWNQbHVzU3RhcnQgfHwKICAgICAgICAgIHRlcm0gPT09IGFyaXRobWV0aWNUaW1lc1N0YXJ0IHx8CiAgICAgICAgICB0ZXJtID09PSBhcml0aG1ldGljRXhwU3RhcnQKICAgICAgICApIHsKICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdmFyaWFibGVzLmNoaWxkcmVuLnNsaWNlKDAsIC0xKTsKICAgICAgICAgIGNvbnN0IGxhc3RDaGlsZCA9IHZhcmlhYmxlcy5jaGlsZHJlbi5zbGljZSgtMSlbMF07CgogICAgICAgICAgcmV0dXJuIHZhcmlhYmxlcy5hc3NpZ24oewogICAgICAgICAgICBjaGlsZHJlbgogICAgICAgICAgfSkuZW50ZXJTY29wZSgnQXJpdGhtZXRpY0V4cHJlc3Npb24nKS5wdXNoQ2hpbGQobGFzdENoaWxkKTsKICAgICAgICB9CgogICAgICAgIGlmICh0ZXJtID09PSBhcml0aG1ldGljVW5hcnlTdGFydCkgewogICAgICAgICAgcmV0dXJuIHZhcmlhYmxlcy5lbnRlclNjb3BlKCdBcml0aG1ldGljRXhwcmVzc2lvbicpOwogICAgICAgIH0KCiAgICAgICAgaWYgKAogICAgICAgICAgdGVybSA9PT0gSWRlbnRpZmllciB8fAogICAgICAgICAgdGVybSA9PT0gQWRkaXRpb25hbElkZW50aWZpZXIgfHwKICAgICAgICAgIHRlcm0gPT09IFByb3BlcnR5SWRlbnRpZmllcgogICAgICAgICkgewogICAgICAgICAgcmV0dXJuIHZhcmlhYmxlcy50b2tlbihjb2RlKTsKICAgICAgICB9CgogICAgICAgIGlmICgKICAgICAgICAgIHRlcm0gPT09IFN0cmluZ0xpdGVyYWwKICAgICAgICApIHsKICAgICAgICAgIHJldHVybiB2YXJpYWJsZXMubGl0ZXJhbChjb2RlLnJlcGxhY2UoL14ifCIkL2csICcnKSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGVybSA9PT0gQm9vbGVhbkxpdGVyYWwpIHsKICAgICAgICAgIHJldHVybiB2YXJpYWJsZXMubGl0ZXJhbChjb2RlID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2UpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRlcm0gPT09IE51bWVyaWNMaXRlcmFsKSB7CiAgICAgICAgICByZXR1cm4gdmFyaWFibGVzLmxpdGVyYWwocGFyc2VGbG9hdChjb2RlKSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGVybSA9PT0gbmlsKSB7CiAgICAgICAgICByZXR1cm4gdmFyaWFibGVzLmxpdGVyYWwobnVsbCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoCiAgICAgICAgICB0ZXJtID09PSBWYXJpYWJsZU5hbWUKICAgICAgICApIHsKICAgICAgICAgIHJldHVybiB2YXJpYWJsZXMucmVzb2x2ZU5hbWUoKTsKICAgICAgICB9CgogICAgICAgIGlmICgKICAgICAgICAgIHRlcm0gPT09IE5hbWUgfHwKICAgICAgICAgIHRlcm0gPT09IFByb3BlcnR5TmFtZQogICAgICAgICkgewogICAgICAgICAgcmV0dXJuIHZhcmlhYmxlcy5kZWNsYXJlTmFtZSgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKAogICAgICAgICAgdGVybSA9PT0gZXhwcmVzc2lvbjAgfHwKICAgICAgICAgIHRlcm0gPT09IFBvc2l0aXZlVW5hcnlUZXN0CiAgICAgICAgKSB7CiAgICAgICAgICBpZiAodmFyaWFibGVzLnRva2Vucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5jbGVhcmVkIG5hbWUnKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICh0ZXJtID09PSBleHByZXNzaW9uMCkgewoKICAgICAgICAgIGxldCBwYXJlbnQgPSB2YXJpYWJsZXM7CgogICAgICAgICAgd2hpbGUgKHBhcmVudC5wYXJlbnQpIHsKICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LmV4aXRTY29wZShjb2RlKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gcGFyZW50OwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHZhcmlhYmxlczsKICAgICAgfQogICAgfSk7CiAgfQoKICBjb25zdCB2YXJpYWJsZVRyYWNrZXIgPSB0cmFja1ZhcmlhYmxlcyh7fSk7CgoKICAvLyBoZWxwZXJzIC8vLy8vLy8vLy8vLy8vCgogIGZ1bmN0aW9uIGdldENvbnRleHRWYWx1ZSh2YXJpYWJsZXMsIGFyZ3MpIHsKCiAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7CiAgICAgIHJldHVybiB2YXJpYWJsZXMuYXNzaWduKHsKICAgICAgICB2YWx1ZTogbnVsbAogICAgICB9KTsKICAgIH0KCiAgICBpZiAoYXJnc1swXS5uYW1lID09PSAnTmFtZScpIHsKICAgICAgYXJncyA9IGV4dHJhY3ROYW1lZEFyZ3MoYXJncywgWyAnbScsICdrZXknIF0pOwogICAgfQoKICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMikgewogICAgICByZXR1cm4gdmFyaWFibGVzLmFzc2lnbih7CiAgICAgICAgdmFsdWU6IG51bGwKICAgICAgfSk7CiAgICB9CgogICAgY29uc3QgWwogICAgICBjb250ZXh0LAogICAgICBrZXkKICAgIF0gPSBhcmdzOwoKICAgIGNvbnN0IGtleVZhbHVlID0ga2V5Py5jb21wdXRlZFZhbHVlKCk7CiAgICBjb25zdCBjb250ZXh0VmFsdWUgPSBjb250ZXh0Py5jb21wdXRlZFZhbHVlKCk7CgogICAgaWYgKAogICAgICAoIWNvbnRleHRWYWx1ZSB8fCB0eXBlb2YgY29udGV4dFZhbHVlICE9PSAnb2JqZWN0JykgfHwgdHlwZW9mIGtleVZhbHVlICE9PSAnc3RyaW5nJwogICAgKSB7CiAgICAgIHJldHVybiB2YXJpYWJsZXMuYXNzaWduKHsKICAgICAgICB2YWx1ZTogbnVsbAogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gdmFyaWFibGVzLmFzc2lnbih7CiAgICAgIHZhbHVlOiBbIG5vcm1hbGl6ZUNvbnRleHRLZXkoa2V5VmFsdWUpLCBrZXlWYWx1ZSBdLnJlZHVjZSgodmFsdWUsIGtleVZhbHVlKSA9PiB7CiAgICAgICAgaWYgKGtleVZhbHVlIGluIGNvbnRleHRWYWx1ZSkgewogICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZVtrZXlWYWx1ZV07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0sIG51bGwpCiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGV4dHJhY3ROYW1lZEFyZ3MoYXJncywgYXJnTmFtZXMpIHsKCiAgICBjb25zdCBjb250ZXh0ID0ge307CgogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgIGNvbnN0IFsgbmFtZSwgdmFsdWUgXSA9IGFyZ3Muc2xpY2UoaSwgaSArIDIpOwoKICAgICAgY29udGV4dFtuYW1lLnZhbHVlXSA9IHZhbHVlOwogICAgfQoKICAgIHJldHVybiBhcmdOYW1lcy5tYXAobmFtZSA9PiBjb250ZXh0W25hbWVdKTsKICB9CgogIGNvbnN0IGZlZWxIaWdobGlnaHRpbmcgPSBzdHlsZVRhZ3MoewogICAgJ1N0cmluZ0xpdGVyYWwnOiB0YWdzLnN0cmluZywKICAgICdOdW1lcmljTGl0ZXJhbCc6IHRhZ3MubnVtYmVyLAogICAgJ0Jvb2xlYW5MaXRlcmFsJzogdGFncy5ib29sLAogICAgJ05hbWUgUXVhbGlmaWVkTmFtZSc6IHRhZ3MubmFtZSwKICAgICdDb21wYXJlT3AnOiB0YWdzLmNvbXBhcmVPcGVyYXRvciwKICAgICdBcml0aE9wJzogdGFncy5hcml0aG1ldGljT3BlcmF0b3IsCiAgICAnUHJvcGVydHlOYW1lIFBhdGhFeHByZXNzaW9uL05hbWUgS2V5JzogdGFncy5wcm9wZXJ0eU5hbWUsCiAgICAnZm9yIGlmIHRoZW4gZWxzZSBzb21lIGV2ZXJ5IHNhdGlzZmllcyBiZXR3ZWVuJzogdGFncy5jb250cm9sS2V5d29yZCwKICAgICdpbiByZXR1cm4gaW5zdGFuY2Ugb2YgYW5kIG9yJzogdGFncy5vcGVyYXRvcktleXdvcmQsCiAgICAnZnVuY3Rpb24nOiB0YWdzLmRlZmluaXRpb25LZXl3b3JkLAogICAgJ0Zvcm1hbFBhcmFtZXRlci9UeXBlISc6IHRhZ3MudHlwZU5hbWUsCiAgICAnYXMnOiB0YWdzLmtleXdvcmQsCiAgICAnV2lsZGNhcmQnOiB0YWdzLnNwZWNpYWwsCiAgICAnbnVsbCc6IHRhZ3MubnVsbCwKICAgICcsJzogdGFncy5zZXBhcmF0b3IsCiAgICAnWyBdJzogdGFncy5zcXVhcmVCcmFja2V0LAogICAgJ3sgfSc6IHRhZ3MuYnJhY2UsCiAgICAnKCApJzogdGFncy5wYXJlbiwKICAgICdMaW5lQ29tbWVudCc6IHRhZ3MubGluZUNvbW1lbnQsCiAgICAnQmxvY2tDb21tZW50JzogdGFncy5ibG9ja0NvbW1lbnQsCiAgICAnUGFyYW1ldGVyTmFtZSBWYXJpYWJsZU5hbWUgPyc6IHRhZ3MudmFyaWFibGVOYW1lLAogICAgJ0RhdGVUaW1lQ29uc3RydWN0b3IhIFNwZWNpYWxGdW5jdGlvbk5hbWUgQnVpbHRJbkZ1bmN0aW9uTmFtZSc6IHRhZ3MuZnVuY3Rpb24odGFncy5zcGVjaWFsKHRhZ3MudmFyaWFibGVOYW1lKSksCiAgICAnRnVuY3Rpb25JbnZvY2F0aW9uL1ZhcmlhYmxlTmFtZSc6IHRhZ3MuZnVuY3Rpb24odGFncy52YXJpYWJsZU5hbWUpLAogICAgJ0xpc3QgSW50ZXJ2YWwnOiB0YWdzLmxpc3QsCiAgICAnQnVpbHRJblR5cGUgTGlzdFR5cGUgQ29udGV4dFR5cGUgRnVuY3Rpb25UeXBlJzogdGFncy5mdW5jdGlvbih0YWdzLnR5cGVOYW1lKSwKICAgICdDb250ZXh0JzogdGFncy5kZWZpbml0aW9uKHRhZ3MubGl0ZXJhbCksCiAgICAnQ29udGV4dEVudHJ5L0tleSc6IHRhZ3MudmFyaWFibGVOYW1lLAogICAgJ0luRXhwcmVzc2lvbi9OYW1lJzogdGFncy5sb2NhbCh0YWdzLnZhcmlhYmxlTmFtZSksCiAgICAnUGFyYW1ldGVyTmFtZS9OYW1lJzogdGFncy5sb2NhbCh0YWdzLnZhcmlhYmxlTmFtZSksCiAgICAnSXRlcmF0aW9uQ29udGV4dC8iLi4iIEludGVydmFsLyIuLiIgIi4iJzogdGFncy5wdW5jdHVhdGlvbgogIH0pOwoKICAvLyBUaGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSBsZXplci1nZW5lcmF0b3IuIFlvdSBwcm9iYWJseSBzaG91bGRuJ3QgZWRpdCBpdC4KICBjb25zdCBzcGVjX2lkZW50aWZpZXIgPSB7X19wcm90b19fOm51bGwsZm9yOjEwLCBpbjozMCwgcmV0dXJuOjM0LCBpZjozOCwgdGhlbjo0MCwgZWxzZTo0Miwgc29tZTo0NiwgZXZlcnk6NDgsIHNhdGlzZmllczo1NSwgb3I6NTgsIGFuZDo2MiwgYmV0d2Vlbjo3MCwgaW5zdGFuY2U6ODYsIG9mOjg5LCBkYXlzOjk5LCB0aW1lOjEwMSwgZHVyYXRpb246MTAzLCB5ZWFyczoxMDUsIG1vbnRoczoxMDcsIGRhdGU6MTA5LCBsaXN0OjExNSwgY29udGV4dDoxMjEsIGZ1bmN0aW9uOjEyOCwgc3RyaW5nOjE0NywgbGVuZ3RoOjE0OSwgdXBwZXI6MTUxLCBjYXNlOjE1MywgbG93ZXI6MTU1LCBzdWJzdHJpbmc6MTU3LCBiZWZvcmU6MTU5LCBhZnRlcjoxNjEsIHN0YXJ0czoxNjMsIHdpdGg6MTY1LCBlbmRzOjE2NywgY29udGFpbnM6MTY5LCBpbnNlcnQ6MTcxLCBpbmRleDoxNzMsIGRpc3RpbmN0OjE3NSwgdmFsdWVzOjE3NywgbWV0OjE3OSwgYnk6MTgxLCBvdmVybGFwczoxODMsIGZpbmlzaGVkOjE4NSwgc3RhcnRlZDoxODcsIGRheToxODksIHllYXI6MTkxLCB3ZWVrOjE5MywgbW9udGg6MTk1LCBnZXQ6MTk3LCB2YWx1ZToxOTksIGVudHJpZXM6MjAxLCBudWxsOjIxMCwgdHJ1ZTozODAsIGZhbHNlOjM4MCwgIj8iOjIyNCwgZXh0ZXJuYWw6MjQwLCBub3Q6MjYzfTsKICBjb25zdCBwYXJzZXIgPSBMUlBhcnNlci5kZXNlcmlhbGl6ZSh7CiAgICB2ZXJzaW9uOiAxNCwKICAgIHN0YXRlczogIiEmbk9gUVlPT08md1FZT09PT1FVJyNDZScjQ2VPJ1JRWU8nI0NgTyhbUV5PJyNGbE9PUVEnI0dRJyNHUU8qfFFZTycjR1FPYFFZTycjRFVPT1FVJyNGWicjRlpPLXJRXk8nI0RdT09RTycjR1gnI0dYTzF5UVdPJyNEdU9PUVUnI0VqJyNFak9PUVUnI0VrJyNFa09PUVUnI0VsJyNFbE8yT09XTycjRW9PMXlRV08nI0VtT09RVScjRW0nI0VtT09RVScjR18nI0dfT09RVScjR10nI0ddTzJUUVlPJyNFck9gUVlPJyNFc08ydVFZTycjRXRPMlRRWU8nI0VxT09RVScjRXEnI0VxT09RVScjRm4nI0ZuTzRaUV5PJyNGbk82dVFXTycjRXVPT1FQJyNHaCcjR2hPNnpRWE8nI0V8T09RVScjR2UnI0dlT09RVScjRm0nI0ZtT09RUScjRlUnI0ZVUWBRWU9PT09RUScjRm8nI0ZvT09RUScjRngnI0Z4T2BRWU8nI0NuT09RUScjRnknI0Z5TydSUVlPJyNDck83VlFZTycjRHZPN1tRWU8nI0R2TzdhUVlPJyNEdk83ZlFZTycjRHZPN25RWU8nI0R2TzdzUVlPJyNEdk83eFFZTycjRHZPN31RWU8nI0R2TzhTUVlPJyNEdk84WFFZTycjRHZPOF5RWU8nI0R2TzhjUVlPJyNEdk84aFFZTycjRHZPT1FVJyNHXicjR15POHBRWU8nI0VuT09RTycjRW4nI0VuT09RTycjR2YnI0dmTzpTUVlPJyNEUU86alFXTycjRnxPT1FPJyNEUycjRFNPOnVRWU8nI0dRUU9RV09PTzp8UVdPT087cFFZTycjQ2RPO31RWU8nI0ZxT09RUScjQ2MnI0NjTzxTUVlPJyNGcE9PUVEnI0NiJyNDYk88W1FZTyw1OHpPYFFZTyw1OWhPT1FRJyNGfScjRn1PT1FRJyNHTycjR09PT1FRJyNHUCcjR1BPYFFZTyw1OXBPYFFZTyw1OXBPYFFZTyw1OXBPT1FRJyNHVicjR1ZPJ1JRWU8sNTpdT09RUScjR1cnI0dXT2BRWU8sNTpfT09RUSw1PFcsNTxXT2BRWU8sNTlkT2BRWU8sNTlmT2BRWU8sNTloTzxhUVlPLDU5aE8/VlFZTyw1OXJPT1FVLDU7VSw1O1VPP1tRXk8sNTlwT09RVS1FOVgtRTlYT0NjUVlPJyNHWU9PUVUsNTphLDU6YU9PUVUsNTtaLDU7Wk9PUVUsNTtYLDU7WE9DalFeTycjRFtPR3FRV08nI0VqT09RVScjR2QnI0dkT0d2UVdPLDU7Xk9He1FZTyw1O19PSlpRXk8nI0RbT0plUVlPJyNHXU9Mc1FZTycjR1tPTVFRV08sNTtgT09RVSw1O10sNTtdT09RVSw1PFksNTxZT01WUVlPLDU7YU9PUVAnI0ZRJyNGUU9NeVFYTycjRlBPT1FPJyNGTycjRk9PTlFRV08nI0V9T05WUVdPJyNHaU9OX1FXTyw1O2hPT1FRLUU5Uy1FOVNPTmRRWU8sNTlZTzt9UVlPJyNGe09PUVEnI0N2JyNDdk9Oa1FZTycjRnpPT1FRJyNDdScjQ3VPTnNRWU8sNTleT054UVlPLDU6Yk9PUU8sNTpiLDU6Yk9OfVFZTyw1OmJPISBWUVlPLDU6Yk8hIFtRWU8sNTtZT2BRWU8nI0ZZTyEgYVFXTyw1PGhPYFFZT09PT1FSJyNDZicjQ2ZPT1FRJyNGVicjRlZPISFXUVlPLDU5T09gUVlPLDU8XU9PUVEnI0Z0JyNGdE8nUlFZTycjRldPISFoUVlPLDU8W09gUVlPMUcuZk9PUVEnI0Z3JyNGd08hIXBRXk8xRy9TTyEmX1FeTzFHL1tPISl8UV5PMUcvW08hMVlRXk8xRy9bT09RVTFHL3cxRy93TyExdlFZTzFHL3lPITVdUV5PMUcvT08hOVJRXk8xRy9RTyE6YVFZTzFHL1NPYFFZTzFHL1NPT1FVMUcvUzFHL1NPITpoUVlPMUcvXk8hO1NRXk8nI0NkT09RTycjRWcnI0VnTyE8ZlFXTycjRWZPITxrUVdPJyNHWk9PUU8nI0VlJyNFZU9PUU8nI0VoJyNFaE8hPHNRV08sNTx0TydSUVlPJyNGW08hPHhRXk8sNTl2TzJUUVlPMUcweE9PUVUxRzB5MUcweU9gUVlPJyNGYE8hQVBRV08sNTx2T09RVTFHMHoxRzB6TyFBW1FXTycjRXdPIUFnUVdPJyNHZ09PUU8nI0V2JyNFdk8hQW9RV08xRzB7T09RUCcjRmInI0ZiTyFBdFFYTyw1O2tPYFFZTyw1O2lPIUF7UVhPJyNGY08hQlRRV08sNT1UT09RVTFHMVMxRzFTT2BRWU8xRy50T2BRWU8sNTxnTydSUVlPJyNGWE8hQl1RWU8sNTxmT2BRWU8xRy54TyFCZVFZTzFHL3xPT1FPMUcvfDFHL3xPT1FPMUcwdDFHMHRPT1FPLDU7dCw1O3RPT1FPLUU5Vy1FOVdPIUJqUVdPT09PUVEtRTlULUU5VE8hQm9RWU8nI0NsT09RUTFHMXcxRzF3T09RUSw1O3IsNTtyT09RUS1FOVUtRTlVTyFCfFFeTzcrJFFPT1FVNyslZTcrJWVPYFFZTzcrJG5PIUVuUVlPLDU7X08hRXVRV083KyRuT09RVScjRFonI0RaTyFFelFZTycjRF5PIUZQUVlPJyNEXk8hRlVRWU8nI0ReTyFGWlFgTycjRGZPIUZgUWBPJyNEaU8hRmVRYE8nI0RtT09RVTcrJHg3KyR4T2BRWU8sNTtRTydSUVlPJyNGX08hRmpRV08sNTx1T09RVTFHMmAxRzJgT09RVSw1O3YsNTt2T09RVS1FOVktRTlZTyFGclFXTzcrJmRPIUZ9UVlPLDU7ek9PUU8tRTleLUU5Xk8hOmhRWU8sNTtjTydSUVlPJyNGYU8hR1tRV08sNT1STyFHZFFZTzcrJmdPT1FQLUU5YC1FOWBPIUdrUVlPMUcxVE9PUU8sNTt9LDU7fU9PUU8tRTlhLUU5YU8hS2RRXk83KyRgTyFLa1FZTzFHMlJPT1FRLDU7cyw1O3NPT1FRLUU5Vi1FOVZPIUt1UV5PNyskZE9PUU83KyVoNyslaE9gUVlPLDU5V08hTmdRXk88PEhZT09RVTw8SFk8PEhZTyMkVVFZTyw1OXhPIyRaUVlPLDU5eE8jJGBRWU8sNTl4TyMkZVFZTyw1OlFPJ1JRWU8sNTpUTyMlUFFiTyw1OlhPIyVXUVlPMUcwbE9PUU8sNTt5LDU7eU9PUU8tRTldLUU5XU9PUVU8PEpPPDxKT09PUU8xRzB9MUcwfU9PUU8sNTt7LDU7e09PUU8tRTlfLUU5X08jJWJRXk8nI0V5T09RVTw8SlI8PEpST2BRWU88PEpST2BRWU88PEd6TyMoU1FZTzFHLnJPIyheUVlPMUcvZE9PUVUxRy9kMUcvZE8jKGNRYk8nI0RdTyModFFgTycjRFtPIylQUWBPMUcvbE8jKVVRV08nI0RsTyMpWlFgTycjR1JPT1FPJyNEaycjRGtPIyljUWBPMUcvb09PUU8nI0RwJyNEcE8jKWhRYE8nI0dUT09RTycjRG8nI0RvTyMpcFFgTzFHL3NPT1FVQU4/bUFOP21PIyl1UV5PQU49Zk9PUVU3KyVPNyslT08jLGdRYE8sNTl2T09RVTcrJVc3KyVXTyMkZVFZTyw1OldPJ1JRWU8nI0ZdTyMsclFgTyw1PG1PT1FVNyslWjcrJVpPIyRlUVlPJyNGXk8jLHpRYE8sNTxvTyMtU1FgTzcrJV9PT1FPMUcvcjFHL3JPT1FPLDU7dyw1O3dPT1FPLUU5Wi1FOVpPT1FPLDU7eCw1O3hPT1FPLUU5Wy1FOVtPITpoUVlPPDxIeU9PUVVBTj5lQU4+ZU8jLVhRXk8nI0ZuT2BRWU8sNTloT2BRWU8sNTlwT2BRWU8sNTlwT2BRWU8sNTlwT2BRWU8sNTlkT2BRWU8sNTlmTzxhUVlPLDU5aE9gUVlPMUcuZk8jLXJRWU8xRy9TTyMvYFFZTzFHL1tPIzB8UVlPMUcvW08jM3dRWU8xRy9PTyM1bFFZTzFHL1FPJ1JRWU8nI0ZbT2BRWU8xRy50T2BRWU8xRy54TyM1fFFZTzcrJFFPYFFZTzcrJG5PIzZtUVlPNysmZ08jOGJRWU83KyRgTyM4aVFZTzcrJGBPIzhwUV5PNyskYE8jOHdRWU83KyRkTyM5aFFZTzw8SFlPIztVUVlPJyNFeU9gUVlPPDxKUk9gUVlPPDxHek8jO3VRWU9BTj1mTyMkZVFZTzw8SHlPYFFZTycjRFVPIzxmUV5PJyNEUU88W1FZTyw1OHpPIz9XUVlPLDU5WU8jP19RWU8sNTleTyM/ZFFZTzFHL1NPIz9rUVdPMUcwe09gUVlPMUcudE8jP3BRYE83KyVfT2BRWU8xRy50TydSUVlPJyNDYE9gUVlPJyNDbk8nUlFZTycjQ3JPYFFZTyw1OWhPTVZRWU8sNTthTyM/dVFZTyw1OVlPIz98UWBPMUcvc08jQFJRWU8sNTlZTyNAWVFXTycjRXVPYFFZTycjQ25PYFFZTyw1OWhPYFFZTyw1OXBPYFFZTyw1OXBPYFFZTyw1OXBPYFFZTyw1OWRPYFFZTyw1OWZPPGFRWU8sNTloT2BRWU8xRy5mTyNAX1FeTzFHL1NPI0BmUV5PMUcvW08jQG1RXk8xRy9bTyNAdFFeTzFHL09PI0FbUV5PMUcvUU9gUVlPMUcueE8jQnBRXk83KyRRT2BRWU83KyRuTyNFZVFZTzcrJmdPI0VsUV5PNyskZE8jSGFRXk88PEhZTyMlUFFiTyw1OlhPI0hoUV5PJyNFeU9gUVlPPDxKUlBgUVlPPDxHelAjS11RXk9BTj1mTyNMYFFeTycjRFFPYFFZTycjQ25PYFFZTycjRFVPPFtRWU8sNTh6TyQgVFFZTyw1OV5PJCBZUVlPMUcvU08kIGFRV08xRzB7TyQgZlFgTycjRG1PYFFZTyw1OWhPYFFZTyw1OXBPYFFZTyw1OXBPYFFZTyw1OXBPYFFZTyw1OWRPYFFZTyw1OWZPPGFRWU8sNTloT2BRWU8xRy5mTyQga1FZTzFHL1NPJCByUVlPMUcvW08kIHlRWU8xRy9bTyQhUVFZTzFHL09PJCFoUVlPMUcvUU9gUVlPMUcueE8kI3xRWU83KyRRT2BRWU83KyRuTyQkcFFZTzcrJmdPJCR3UVlPNyskZE8kJWtRWU88PEhZTyQlclFZTycjRXlPYFFZTzw8SlJQYFFZTzw8R3pQJCZmUVlPQU49Zk9gUVlPJyNEVU88W1FZTyw1OHpPJCdpUVlPLDU5Xk8kJ25RWU8xRy9TTyQndVFXTzFHMHtPJ1JRWU8nI0NgTydSUVlPJyNDck9gUVlPLDU5aE9NVlFZTyw1O2FPJCd6UVdPJyNFdU8nUlFZTycjQ2BPJ1JRWU8nI0NyTyQoUFFZTycjRFFPYFFZTyw1OWhPTVZRWU8sNTthTyQoalFXTycjRXUiLAogICAgc3RhdGVEYXRhOiAiJChvfk8kXk9TJF9PU1BPU1FPU35PVHJPWlVPW1RPY3NPZ3VPaHVPcmdPdWVPIVMhV08hVCFXTyFVd08hVyFWTyFafE8hYiFYTyFmZE8haGZPIWt4TyFteU8hb3lPIXB6TyFze08hdXtPIXd9TyF4IU9PIXkhUE8heyFRTyF9ek8jTyFRTyNQIVFPI1EhUk8jUyFTTyNUIVNPI1UhVE8jXSFVTyNkaU8jb2xPJFlRTyRaUU8lU1tPJVRdTyVVXk8lVl9Pfk9Uck9bVE9jc09ndU9odU9yZ091ZU8hUyFXTyFUIVdPIVV3TyFXIVZPIVp8TyFiIVhPIWZkTyFoZk8ha3hPIW15TyFveU8hcHpPIXN7TyF1e08hd31PIXghT08heSFQTyF7IVFPIX16TyNPIVFPI1AhUU8jUSFSTyNTIVNPI1QhU08jVSFUTyNdIVVPI2RpTyNvbE8kWVFPJFpRTyVTW08lVF1PJVVeTyVWX09+T1ohXU8jdyFfT35QJFVPJFlRTyRaUU9+T1ohZ09bIWdPXSFoT14haE9fIXVPbSFyT28hc09xIWZPciFmT3MhdE95IWlPeyF2TyFoIW9PJGYhbU91JHtYfk8kWyFxTyVeIXFPVCRgWGMkYFhnJGBYaCRgWCFTJGBYIVQkYFghVSRgWCFXJGBYIVokYFghYiRgWCFmJGBYIWskYFghbSRgWCFvJGBYIXAkYFghcyRgWCF1JGBYIXckYFgheCRgWCF5JGBYIXskYFghfSRgWCNPJGBYI1AkYFgjUSRgWCNTJGBYI1QkYFgjVSRgWCNdJGBYI2QkYFgjbyRgWCRXJGBYJFkkYFgkWiRgWCVTJGBYJVQkYFglVSRgWCVWJGBYflAnWk8lUyF3T1QkdFhaJHRYWyR0WGMkdFhnJHRYaCR0WHIkdFh1JHRYIVMkdFghVCR0WCFVJHRYIVckdFghWiR0WCFiJHRYIWYkdFghaCR0WCFrJHRYIW0kdFghbyR0WCFwJHRYIXMkdFghdSR0WCF3JHRYIXgkdFgheSR0WCF7JHRYIX0kdFgjTyR0WCNQJHRYI1EkdFgjUyR0WCNUJHRYI1UkdFgjXSR0WCNkJHRYI28kdFgkWSR0WCRaJHRYJVQkdFglVSR0WCVWJHRYfk8kWVFPJFpRT1QhUFhaIVBYWyFQWF0hUFheIVBYXyFQWGMhUFhnIVBYaCFQWG0hUFhvIVBYcSFQWHIhUFhzIVBYdSFQWHkhUFh7IVBYIVMhUFghVCFQWCFVIVBYIVchUFghWiFQWCFiIVBYIWYhUFghaCFQWCFrIVBYIW0hUFghbyFQWCFwIVBYIXMhUFghdSFQWCF3IVBYIXghUFgheSFQWCF7IVBYIX0hUFgjTyFQWCNQIVBYI1EhUFgjUyFQWCNUIVBYI1UhUFgjXSFQWCNkIVBYI28hUFgkVyFQWCRbIVBYJGYhUFglUyFQWCVUIVBYJVUhUFglViFQWCVeIVBYJGohUFgkaSFQWHchUFhkIVBYYSFQWCNuIVBYZSFQWGshUFh+T3Uhek9+TyVUXU9+T1ojUE8hUyFXTyFUIVdPIVchVk8kWVFPJFpRTyVTW08lVF1PJVVeTyVWX09+TyFmJU9QflBgTyRbI1lPWiRiWFskYlhdJGJYXiRiWF8kYlhtJGJYbyRiWHEkYlhyJGJYcyRiWHUkYlh5JGJYeyRiWCFmJGJYIWgkYlgkVyRiWCRmJGJYZSRiWH5PVCRiWGMkYlhnJGJYaCRiWCFTJGJYIVQkYlghVSRiWCFXJGJYIVokYlghYiRiWCFrJGJYIW0kYlghbyRiWCFwJGJYIXMkYlghdSRiWCF3JGJYIXgkYlgheSRiWCF7JGJYIX0kYlgjTyRiWCNQJGJYI1EkYlgjUyRiWCNUJGJYI1UkYlgjXSRiWCNkJGJYI28kYlgkWSRiWCRaJGJYJFskYlglUyRiWCVUJGJYJVUkYlglViRiWCVeJGJYflAyfE91I1pPfk8kWCNbTyVUXU8jbiVdUH5PbyNpT35PIWwjak9+TyFuI2pPfk8hcSNqTyFyI2pPfk8hdCNqT35PIXYjak9+TyFxI2pPfk98I2pPfk8heiNqT35PIXwjak9+T3wja09+T3wjbE9+TyNWI2pPI1cjak9+T28jbU91I2JYfk9aIWdPWyFnT10haE9eIWhPeSFpT3shdk8haCFvTyRmIW1PdSR7WCRXdFgkanRYd3RYIWZ0WGR0WGF0WCRpdFgjbnRYa3RYfk9fJ1VPbSdTT28nVE9xJ09PcidPT3Mnek9+UDh4TyRqI25PJFckcFh3JHBYfk8kVyN2WH5QKnxPdSNwT35PWiNxT1sjcU9dI3FPXiNxTyRZUU8kWlFPJGYjcU8kZyNxTyR2V1h+T19XWHdXWCRqV1h+UDtST18jdU9+TyRqI3ZPYSRkWH5PYSN5T35PVHJPWlVPW1RPY3NPZ3VPaHVPcmdPdSRUTyFTIVdPIVQhV08hVXdPIVchVk8hWnxPIWIhWE8hZmRPIWhmTyFreE8hbXlPIW95TyFwek8hc3tPIXV7TyF3fU8heCFPTyF5IVBPIXshUU8hfXpPI08hUU8jUCFRTyNRIVJPI1MhU08jVCFTTyNVIVRPI10hVU8jZGlPI29sTyRZUU8kWlFPJVNbTyVUXU8lVV5PJVZfT35PfCRWT35PeyF2TyFoIW9PJGYhbU9UeGFaeGFbeGFdeGFeeGFfeGFjeGFneGFoeGFteGFveGFxeGFyeGFzeGF1JHtYeXhhIVN4YSFUeGEhVXhhIVd4YSFaeGEhYnhhIWZ4YSFreGEhbXhhIW94YSFweGEhc3hhIXV4YSF3eGEheHhhIXl4YSF7eGEhfXhhI094YSNQeGEjUXhhI1N4YSNUeGEjVXhhI114YSNkeGEjb3hhJFd4YSRZeGEkWnhhJFt4YSVTeGElVHhhJVV4YSVWeGElXnhhJGp4YXd4YWR4YWF4YSRpeGEjbnhhZXhha3hhfk93JU9QflBgTyRmJF9PJGkhT1hUIU9YWiFPWFshT1hdIU9YXiFPWF8hT1hjIU9YZyFPWGghT1htIU9YbyFPWHEhT1hyIU9YcyFPWHUhT1h5IU9YeyFPWCFTIU9YIVQhT1ghVSFPWCFXIU9YIVohT1ghYiFPWCFmIU9YIWghT1ghayFPWCFtIU9YIW8hT1ghcCFPWCFzIU9YIXUhT1ghdyFPWCF4IU9YIXkhT1gheyFPWCF9IU9YI08hT1gjUCFPWCNRIU9YI1MhT1gjVCFPWCNVIU9YI10hT1gjZCFPWCNvIU9YJFchT1gkWSFPWCRaIU9YJFshT1glUyFPWCVUIU9YJVUhT1glViFPWCVeIU9YJGohT1h3IU9YZCFPWGEhT1gjbiFPWGUhT1hrIU9Yfk8lUyF3T35PJGkkYU9+T1ohZ09bIWdPXSFoT14haE9fJ1VPbSdTT28nVE9xJ09PcidPT3Mnek93JGJPeSFpT3shdk8haCFvTyRmIW1PdSR7WH5PJFsjWU9aJGJYWyRiWF0kYlheJGJYXyRiWG0kYlhvJGJYcSRiWHIkYlhzJGJYdSRiWHckYlh5JGJYeyRiWCFoJGJYIWYkYlgkaiRiWH5PJGYkX08kaSFPWH5QSVBPWiVQWFslUFhdJVBYXiVQWF8lUFhtJVBYbyVQWHElUFhyJVBYcyVQWHUlUFh3JVBYeSVQWHslUFghaCVQWCRmJVBYJGklV1ghZiVQWCRqJVBYfk9aIWdPWyFnT10haE9eIWhPXydVT20nU09vJ1RPcSdPT3InT09zJ3pPeSFpT3shdk8haCFvTyRmIW1PdSR7WH5PJGokY08hZiVPWHclT1h+UEtyTyFmJGVPfk8kWVFPJFpRT3clWlB+T1ojcU9bI3FPXSNxT14jcU8kWCNbTyRmI3FPJGcjcU9+TyR2I3NYflBNYk8kdiRsT35PJGokbU8jbiVdWH5PI24kb09+T2QkcE9+UEtyTyRqJHJPayRuWH5PayR0T35PIVYkdU9+TyNSJHZPI1Mkdk9+TyNSJHZPfk8hUyR3T35PJGojbk8kVyRwYXckcGF+T1ojcU9bI3FPXSNxT14jcU8kWVFPJFpRTyRmI3FPJGcjcU9+T19XYSR2V2F3V2EkaldhflAhIGxPJGojdk9hJGRhfk9aIWdPWyFnT10haE9eIWhPeSFpT3shdk8haCFvTyRmIW1PVHBpX3BpY3BpZ3BpaHBpbXBpb3BpcXBpcnBpc3BpdSR7WCFTcGkhVHBpIVVwaSFXcGkhWnBpIWJwaSFmcGkha3BpIW1waSFvcGkhcHBpIXNwaSF1cGkhd3BpIXhwaSF5cGkhe3BpIX1waSNPcGkjUHBpI1FwaSNTcGkjVHBpI1VwaSNdcGkjZHBpI29waSRXcGkkWXBpJFpwaSRbcGklU3BpJVRwaSVVcGklVnBpJV5waX5PXSFoT14haE95IWlPeyF2TyFoIW9PJGYhbU9UeGlaeGlbeGlfeGljeGlneGloeGlteGlveGlxeGlyeGlzeGl1JHtYIVN4aSFUeGkhVXhpIVd4aSFaeGkhYnhpIWZ4aSFreGkhbXhpIW94aSFweGkhc3hpIXV4aSF3eGkheHhpIXl4aSF7eGkhfXhpI094aSNQeGkjUXhpI1N4aSNUeGkjVXhpI114aSNkeGkjb3hpJFd4aSRZeGkkWnhpJFt4aSVTeGklVHhpJVV4aSVWeGklXnhpfk95IWlPeyF2TyFoIW9PJGYhbU9UeGlaeGlbeGldeGleeGlfeGljeGlneGloeGlteGlveGlxeGlyeGlzeGl1JHtYIVN4aSFUeGkhVXhpIVd4aSFaeGkhYnhpIWZ4aSFreGkhbXhpIW94aSFweGkhc3hpIXV4aSF3eGkheHhpIXl4aSF7eGkhfXhpI094aSNQeGkjUXhpI1N4aSNUeGkjVXhpI114aSNkeGkjb3hpJFd4aSRZeGkkWnhpJFt4aSVTeGklVHhpJVV4aSVWeGklXnhpfk97IXZPIWghb08kZiFtT1R4aVp4aVt4aV14aV54aV94aWN4aWd4aWh4aW14aW94aXF4aXJ4aXN4aXUke1ghU3hpIVR4aSFVeGkhV3hpIVp4aSFieGkhZnhpIWt4aSFteGkhb3hpIXB4aSFzeGkhdXhpIXd4aSF4eGkheXhpIXt4aSF9eGkjT3hpI1B4aSNReGkjU3hpI1R4aSNVeGkjXXhpI2R4aSNveGkkV3hpJFl4aSRaeGkkW3hpJVN4aSVUeGklVXhpJVZ4aSVeeGlleGl+T3l4aSRqeGl3eGlkeGlheGkkaXhpI254aWt4aX5QIS1rTyFmJVJPflBLck9aIWdPWyFnT10haE9eIWhPeSFpT3shdk8haCFvTyRmIW1PVGxpY2xpZ2xpaGxpbWxpdSR7WCFTbGkhVGxpIVVsaSFXbGkhWmxpIWJsaSFmbGkha2xpIW1saSFvbGkhcGxpIXNsaSF1bGkhd2xpIXhsaSF5bGkhe2xpIX1saSNPbGkjUGxpI1FsaSNTbGkjVGxpI1VsaSNdbGkjZGxpI29saSRXbGkkWWxpJFpsaSRbbGklU2xpJVRsaSVVbGklVmxpJV5saX5PXyF1T28hc09xIWZPciFmT3MhdE9+UCExfU9aIWdPWyFnT10haE9eIWhPeSFpT3shdk8haCFvTyRmIW1PVG5pY25pZ25paG5pbW5pb25pdSR7WCFTbmkhVG5pIVVuaSFXbmkhWm5pIWJuaSFmbmkha25pIW1uaSFvbmkhcG5pIXNuaSF1bmkhd25pIXhuaSF5bmkhe25pIX1uaSNPbmkjUG5pI1FuaSNTbmkjVG5pI1VuaSNdbmkjZG5pI29uaSRXbmkkWW5pJFpuaSRbbmklU25pJVRuaSVVbmklVm5pJV5uaX5PXyF1T3EhZk9yIWZPcyF0T35QITVwT1ohZ09bIWdPXSFoT14haE9fJ1VPbSdTT3EnT09yJ09Pcyd6T3khaU97IXZPIWghb08kZiFtT3Uke1h+T28lU09+UCE5Y08hUiVXTyFVJVhPIVclWU8hWiVaTyFeJVtPIWIlXU8kWVFPJFpRT35PWiN9WFsjfVhdI31YXiN9WF8jfVhtI31YbyN9WHEjfVhyI31YcyN9WHUjfVh3I31YeSN9WHsjfVghaCN9WCRZI31YJFojfVgkWyN9WCRmI31YJGojfVh+UDtSTyR2JV9Pfk8kaiVgT3ckfVh+T3clYk9+TyRmJF9PJGkhT2FUIU9hWiFPYVshT2FdIU9hXiFPYV8hT2FjIU9hZyFPYWghT2FtIU9hbyFPYXEhT2FyIU9hcyFPYXUhT2F5IU9heyFPYSFTIU9hIVQhT2EhVSFPYSFXIU9hIVohT2EhYiFPYSFmIU9hIWghT2EhayFPYSFtIU9hIW8hT2EhcCFPYSFzIU9hIXUhT2EhdyFPYSF4IU9hIXkhT2EheyFPYSF9IU9hI08hT2EjUCFPYSNRIU9hI1MhT2EjVCFPYSNVIU9hI10hT2EjZCFPYSNvIU9hJFchT2EkWSFPYSRaIU9hJFshT2ElUyFPYSVUIU9hJVUhT2ElViFPYSVeIU9hJGohT2F3IU9hZCFPYWEhT2EjbiFPYWUhT2FrIU9hfk8kaiRjTyFmJU9hdyVPYX5PJHYlaE93I2tYJGoja1h+TyRqJWlPdyVaWH5PdyVrT35PJHYjc2F+UE1iTyRYI1tPJVRdT35PJGokbU8jbiVdYX5PJGokck9rJG5hfk8hVCV1T35PdyFeT35PJGkldk9hYFgkamBYflBLck9UU3FjU3FnU3FoU3EhU1NxIVRTcSFVU3EhV1NxIVpTcSFiU3EhZlNxIWtTcSFtU3Ehb1NxIXBTcSFzU3EhdVNxIXdTcSF4U3EheVNxIXtTcSF9U3EjT1NxI1BTcSNRU3EjU1NxI1RTcSNVU3EjXVNxI2RTcSNvU3EkV1NxJFlTcSRaU3EkW1NxJVNTcSVUU3ElVVNxJVZTcSVeU3F+UCdaTyRqdFh+UEd7T3cleE9+T28leU9+T28lek9+T28le09+TyFbJXxPfk8hWyV9T35PIVsmT09+TyRqJWBPdyR9YX5PdyZTTyFmJlNPIWgmU09+TyFmJFNhJGokU2F3JFNhflBLck8kaiVpT3clWmF+TyNsJllPflBgTyNuI3FpJGojcWl+UEtyT1ohZ09bIWdPXSFoT14haE9fKFhPbShWT28oV09xKFJPcihST3MpaU95IWlPeyF2TyFoIW9PJGYhbU9UYnFjYnFnYnFoYnF1JHtYIVNicSFUYnEhVWJxIVdicSFaYnEhYmJxIWZicSFrYnEhbWJxIW9icSFwYnEhc2JxIXVicSF3YnEheGJxIXlicSF7YnEhfWJxI09icSNQYnEjUWJxI1NicSNUYnEjVWJxI11icSNkYnEjb2JxJFdicSRZYnEkWmJxJFticSVTYnElVGJxJVVicSVWYnElXmJxfk9lJlpPflAhR3VPayRvaSRqJG9pflBLck9UZnFjZnFnZnFoZnEhU2ZxIVRmcSFVZnEhV2ZxIVpmcSFiZnEhZmZxIWtmcSFtZnEhb2ZxIXBmcSFzZnEhdWZxIXdmcSF4ZnEheWZxIXtmcSF9ZnEjT2ZxI1BmcSNRZnEjU2ZxI1RmcSNVZnEjXWZxI2RmcSNvZnEkV2ZxJFlmcSRaZnEkW2ZxJVNmcSVUZnElVWZxJVZmcSVeZnF+UCdaT1ohZ09bIWdPXSFoT14haE95IWlPeyF2TyFoIW9PJGYhbU9UcHlfcHljcHlncHlocHltcHlvcHlxcHlycHlzcHl1JHtYIVNweSFUcHkhVXB5IVdweSFacHkhYnB5IWZweSFrcHkhbXB5IW9weSFwcHkhc3B5IXVweSF3cHkheHB5IXlweSF7cHkhfXB5I09weSNQcHkjUXB5I1NweSNUcHkjVXB5I11weSNkcHkjb3B5JFdweSRZcHkkWnB5JFtweSVTcHklVHB5JVVweSVWcHklXnB5fk8hUyZdT35PIVYmXU9+TyFTJl5Pfk8hUiVXTyFVJVhPIVclWU8hWiVaTyFeJVtPIWIock8kWVFPJFpRT35PIVgkd1B+UCMkZU93I1lpJGojWWl+UEtyT1QjbVhjI21YZyNtWGgjbVghUyNtWCFUI21YIVUjbVghVyNtWCFaI21YIWIjbVghZiNtWCFrI21YIW0jbVghbyNtWCFwI21YIXMjbVghdSNtWCF3I21YIXgjbVgheSNtWCF7I21YIX0jbVgjTyNtWCNQI21YI1EjbVgjUyNtWCNUI21YI1UjbVgjXSNtWCNkI21YI28jbVgkVyNtWCRZI21YJFojbVgkWyNtWCVTI21YJVQjbVglVSNtWCVWI21YJV4jbVh+UCdaT2FgaSRqYGl+UEtyTyFUJmxPfk8kWVFPJFpRTyFYIVBYJGYhUFgkaiFQWH5PJGYnXU8hWCFPWCRqIU9Yfk8hWCZuT35PJHYmb09+TyRqJnBPIVgkdVh+TyFYJnJPfk8kaiZzTyFYJHdYfk8hWCZ1T35PVGIhUmNiIVJnYiFSaGIhUiFTYiFSIVRiIVIhVWIhUiFXYiFSIVpiIVIhYmIhUiFmYiFSIWtiIVIhbWIhUiFvYiFSIXBiIVIhc2IhUiF1YiFSIXdiIVIheGIhUiF5YiFSIXtiIVIhfWIhUiNPYiFSI1BiIVIjUWIhUiNTYiFSI1RiIVIjVWIhUiNdYiFSI2RiIVIjb2IhUiRXYiFSJFliIVIkWmIhUiRbYiFSJVNiIVIlVGIhUiVVYiFSJVZiIVIlXmIhUn5QJ1pPJGYnXU8hWCFPYSRqIU9hfk8kaiZwTyFYJHVhfk8kaiZzTyFYJHdhfk8keCZ7T35PJGokYlhkJGJYdyRiWGEkYlgkaSRiWCNuJGJYayRiWH5QMnxPWiFnT1shZ09dIWhPXiFoT3khaU97IXZPIWghb08kZiFtT19waW1waW9waXFwaXJwaXNwaXUke1gkV3BpJGpwaXdwaSFmcGlkcGlhcGkkaXBpI25waWtwaX5PXSFoT14haE95IWlPeyF2TyFoIW9PJGYhbU9aeGlbeGlfeGlteGlveGlxeGlyeGlzeGl1JHtYJFd4aSRqeGl3eGkhZnhpZHhpYXhpJGl4aSNueGlreGl+T3khaU97IXZPIWghb08kZiFtT1p4aVt4aV14aV54aV94aW14aW94aXF4aXJ4aXN4aXUke1gkV3hpJGp4aXd4aSFmeGlkeGlheGkkaXhpI254aWt4aX5PWiFnT1shZ09dIWhPXiFoT3khaU97IXZPIWghb08kZiFtT21saXUke1gkV2xpJGpsaXdsaSFmbGlkbGlhbGkkaWxpI25saWtsaX5PXydVT28nVE9xJ09PcidPT3Mnek9+UCMyak9aIWdPWyFnT10haE9eIWhPeSFpT3shdk8haCFvTyRmIW1PbW5pb25pdSR7WCRXbmkkam5pd25pIWZuaWRuaWFuaSRpbmkjbm5pa25pfk9fJ1VPcSdPT3InT09zJ3pPflAjNFtPJFdTcSRqU3F3U3EhZlNxZFNxYVNxJGlTcSNuU3FrU3F+UEtyTyNsJ2lPflBgT1ohZ09bIWdPXSFoT14haE9fKHlPbSh3T28oeE9xKHNPcihzT3MpY095IWlPeyF2TyFoIW9PJGYhbU91JHtYJFdicSRqYnF3YnEhZmJxZGJxYWJxJGlicSNuYnFrYnF+T2Unak9+UCM2dE9lYnF+UCM2dE9lYnF+UCFHdU8kV2ZxJGpmcXdmcSFmZnFkZnFhZnEkaWZxI25mcWtmcX5QS3JPWiFnT1shZ09dIWhPXiFoT3khaU97IXZPIWghb08kZiFtT19weW1weW9weXFweXJweXNweXUke1gkV3B5JGpweXdweSFmcHlkcHlhcHkkaXB5I25weWtweX5PJFcjbVgkaiNtWHcjbVghZiNtWGQjbVhhI21YJGkjbVgjbiNtWGsjbVh+UEtyTyRXYiFSJGpiIVJ3YiFSIWZiIVJkYiFSYWIhUiRpYiFSI25iIVJrYiFSflBLck9UdFhjdFhndFhodFghU3RYIVR0WCFVdFghV3RYIVp0WCFidFghZnRYIWt0WCFtdFghb3RYIXB0WCFzdFghdXRYIXd0WCF4dFgheXRYIXt0WCF9dFgjT3RYI1B0WCNRdFgjU3RYI1R0WCNVdFgjXXRYI2R0WCNvdFgkV3RYJFl0WCRadFgkW3RYJVN0WCVUdFglVXRYJVZ0WCVedFh+UCdaT2QnXk9+UEtyT2snX09+T28nYU9+UCE5Y093J2JPfk8keCdsT35PZCd0T35QS3JPIVgndU9+T2Qndk9+UEtyT3Une09+T2VwaX5QISFwT2V4aX5QISZfT2V4aX5QISl8T18oWE9vKFdPcShST3IoUk9zKWlPZWxpflAhMX1PXyhYT3EoUk9yKFJPcylpT2VuaX5QITVwT1ohZ09bIWdPXSFoT14haE9fKFhPbShWT28oV09xKFJPcihST3MpaU95IWlPeyF2TyFoIW9PJGYhbU91JHtYfk9UU3FjU3FlU3FnU3FoU3EhU1NxIVRTcSFVU3EhV1NxIVpTcSFiU3EhZlNxIWtTcSFtU3Ehb1NxIXBTcSFzU3EhdVNxIXdTcSF4U3EheVNxIXtTcSF9U3EjT1NxI1BTcSNRU3EjU1NxI1RTcSNVU3EjXVNxI2RTcSNvU3EkV1NxJFlTcSRaU3EkW1NxJVNTcSVUU3ElVVNxJVZTcSVeU3F+UCNBb08jbChoT35QYE9UZnFjZnFlZnFnZnFoZnEhU2ZxIVRmcSFVZnEhV2ZxIVpmcSFiZnEhZmZxIWtmcSFtZnEhb2ZxIXBmcSFzZnEhdWZxIXdmcSF4ZnEheWZxIXtmcSF9ZnEjT2ZxI1BmcSNRZnEjU2ZxI1RmcSNVZnEjXWZxI2RmcSNvZnEkV2ZxJFlmcSRaZnEkW2ZxJVNmcSVUZnElVWZxJVZmcSVeZnF+UCNBb09lcHl+UCFOZ09UI21YYyNtWGUjbVhnI21YaCNtWCFTI21YIVQjbVghVSNtWCFXI21YIVojbVghYiNtWCFmI21YIWsjbVghbSNtWCFvI21YIXAjbVghcyNtWCF1I21YIXcjbVgheCNtWCF5I21YIXsjbVghfSNtWCNPI21YI1AjbVgjUSNtWCNTI21YI1QjbVgjVSNtWCNdI21YI2QjbVgjbyNtWCRXI21YJFkjbVgkWiNtWCRbI21YJVMjbVglVCNtWCVVI21YJVYjbVglXiNtWH5QI0FvT1ohZ09bIWdPXSFoT14haE9fKFhPbShWT28oV09xKFJPcihST3MpaU95IWlPeyF2TyFoIW9PJGYhbU91JHtYflFiIVJUdFhjdFhldFhndFhodFghU3RYIVR0WCFVdFghV3RYIVp0WCFidFghZnRYIWt0WCFtdFghb3RYIXB0WCFzdFghdXRYIXd0WCF4dFgheXRYIXt0WCF9dFgjT3RYI1B0WCNRdFgjU3RYI1R0WCNVdFgjXXRYI2R0WCNvdFgkV3RYJFl0WCRadFgkW3RYJVN0WCVUdFglVXRYJVZ0WCVedFh+UCNBb09rKGBPfk9vKGJPflAhOWNPdyhjT35PIVsoZk9+T2VwaX5QIy1yT2V4aX5QIy9gT2V4aX5QIzB8T18oeU9vKHhPcShzT3Ioc09zKWNPZWxpflAjMmpPXyh5T3Eoc09yKHNPcyljT2VuaX5QIzRbT1ohZ09bIWdPXSFoT14haE9fKHlPbSh3T28oeE9xKHNPcihzT3MpY095IWlPeyF2TyFoIW9PJGYhbU91JHtYfk9lU3EkV1NxJGpTcXdTcSFmU3FkU3FhU3EkaVNxI25TcWtTcX5QJCF7TyNsKVhPflBgT2VmcSRXZnEkamZxd2ZxIWZmcWRmcWFmcSRpZnEjbmZxa2ZxflAkIXtPZXB5flAjOWhPZSNtWCRXI21YJGojbVh3I21YIWYjbVhkI21YYSNtWCRpI21YI24jbVhrI21YflAkIXtPWiFnT1shZ09dIWhPXiFoT18oeU9tKHdPbyh4T3Eoc09yKHNPcyljT3khaU97IXZPIWghb08kZiFtT3Uke1h+UWIhUmspUU9+T28pU09+UCE5Y093KVRPfk91KWRPfk9fKHlPbSh3T28oeE9xKHNPcihzT3MpY09ldFh+UDh4T3Upak9+TyIsCiAgICBnb3RvOiAiITdmJV5QUFBQJV9QJ1gnZSduKForUlBQUFBQK1tQJV9QUFAlX1BQK18ra1AlX1AlX1AlX1BQUCt0UCxTUCVfUCVfUFAsXSxyLVYselBQUFBQUFAselBQLHpQL2wvbyx6UC91L3slX1AlX1AlXzBTUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUDF8MlAyVjF8UDJiNF8yYjJiNmM4YFAlXzpdJV88VjxWPlA+XVA+ZlBQPFY+cj54Nl8+fFA/VVA/WD9fP2Y/bD9yP3hCWEJkQmpCcEJ2QnxDU0NZUFBQUFBQUFBDYENkSFtKVUxVTFtQUExjUFBMaUx1TnUhIXUhIXshI1MhI1ghJG4hJlghJ3YhKXZQISl5UCEpfSEraCEtUiEueyEvUiEvVSVfIS9bITFVUFBQUCEzVkhbITNjITVjITVpITdjJG9pT1BWZWZxdCFmIWohayFsIXAhciFzIXQhdSF6I24jcCN0I3gkVCRjJGwkcCRxJHQlUyVfJWsldiZZJlonTydQJ1EnUidTJ1QnVSdWJ14nXydhJ2InaSdqJ20ndCd2J3gneihRKFIoUyhUKFUoVihXKFgoWShgKGIoYyhoKGkobChtKHModCh1KHYodyh4KHkoeilRKVMpVClYKVkpWyljKWlRIWVSUSdvJ3dRKG4pZlIpXSlhVyFjUid3KWEpZlIlTyN2WSFhUiN2J3cpYSlmWSNkdiRyJ3kpYilnXiRYIXojWiVgJWkneylkKWpUJmIlfSZwJWBXT1BWWGRlZmdxdCFmIWohayFsIW4hcCFyIXMhdCF1I24jcCN0I3gkVCRWJF8kYSRjJGwkcCRxJHQlUyVfJWglayV2JXwmTyZZJlomXyZvJnMmeydPJ1AnUSdSJ1MnVCdVJ1YnXSdeJ18nYSdiJ2knaidsJ20ndCd2J3gneihRKFIoUyhUKFUoVihXKFgoWShgKGIoYyhmKGgoaShsKG0ocyh0KHUodih3KHgoeSh6KVEpUylUKVgpWSlbKWMpaXQhYFJ2I1ojdiRyJWAlaSV9JnAndyd5J3spYSliKWQpZilnKWpVI3IhYCNzJFdSJFchelUjciFgI3MkV1QkaiNdJGtSJH0jdFEjaHZRJ3EneVEobylnUileKWJXI2Z2J3kpYilnUiVyJHJVIVpQI3AkVFckVSF1J1UoWCh5UiR4I25RIV5QUSR6I3BSJVUkVFElXiRWUSZUJWhRJmElfFUmZiZPJnMoZlEmdiZvVCZ8JnsnbFsjUWRlZmckVCRhYyVWJFYlaCV8Jk8mbyZzJnsnbChmIWJqT1ZxIWYhaiFrIWwhciFzIXUjeCRwJHQlUyVrJlkmWid0KFIoUyhUKFUoVihXKFgoWShgKGIoYyhoKGkobVsjT2RnJFYkYSVoJntVI1RlZiRUUSRPIW5TJWMkXyddWyZgJXwmTyZvJnMnbChmI1YmfVB0IXAhdCF6I24jcCN0JGMkbCRxJV8ldidPJ1AnUSdSJ1MnVCdVJ1YnXidfJ2EnYidpJ2onbSd2J3gneihRKGwocyh0KHUodih3KHgoeSh6KVEpUylUKVgpWSlbKWMpaVImZSV9USZjJX1SJncmcFEmaSZPUid9KGZTJmcmTyhmUiZ5JnMkb1lPUFZlZnF0IWYhaiFrIWwhcCFyIXMhdCF1IXojbiNwI3QjeCRUJGMkbCRwJHEkdCVTJV8layV2JlkmWidPJ1AnUSdSJ1MnVCdVJ1YnXidfJ2EnYidpJ2onbSd0J3YneCd6KFEoUihTKFQoVShWKFcoWChZKGAoYihjKGgoaShsKG0ocyh0KHUodih3KHgoeSh6KVEpUylUKVgpWSlbKWMpaVIkXiF6USRaIXpSJlElYFMkWSF6JWBaJGYjWiVpJ3spZClqJHViT1BWZGVmZ3F0IWYhaiFrIWwhcCFyIXMhdCF1IXojbiNwI3QjeCRUJGEkYyRsJHAkcSR0JVMlXyVrJXYmWSZaJ08nUCdRJ1InUydUJ1UnVideJ18nYSdiJ2knaidtJ3Qndid4J3ooUShSKFMoVChVKFYoVyhYKFkoYChiKGMoaChpKGwobShzKHQodSh2KHcoeCh5KHopUSlTKVQpWClZKVspYylpJHRiT1BWZGVmZ3F0IWYhaiFrIWwhcCFyIXMhdCF1IXojbiNwI3QjeCRUJGEkYyRsJHAkcSR0JVMlXyVrJXYmWSZaJ08nUCdRJ1InUydUJ1UnVideJ18nYSdiJ2knaidtJ3Qndid4J3ooUShSKFMoVChVKFYoVyhYKFkoYChiKGMoaChpKGwobShzKHQodSh2KHcoeCh5KHopUSlTKVQpWClZKVspYylpUSF8X1QjXm0kbSR1YE9QVmRlZmdxdCFmIWohayFsIXAhciFzIXQhdSF6I24jcCN0I3gkVCRhJGMkbCRwJHEkdCVTJV8layV2JlkmWidPJ1AnUSdSJ1MnVCdVJ1YnXidfJ2EnYidpJ2onbSd0J3YneCd6KFEoUihTKFQoVShWKFcoWChZKGAoYihjKGgoaShsKG0ocyh0KHUodih3KHgoeSh6KVEpUylUKVgpWSlbKWMpaSR1YU9QVmRlZmdxdCFmIWohayFsIXAhciFzIXQhdSF6I24jcCN0I3gkVCRhJGMkbCRwJHEkdCVTJV8layV2JlkmWidPJ1AnUSdSJ1MnVCdVJ1YnXidfJ2EnYidpJ2onbSd0J3YneCd6KFEoUihTKFQoVShWKFcoWChZKGAoYihjKGgoaShsKG0ocyh0KHUodih3KHgoeSh6KVEpUylUKVgpWSlbKWMpaSRvaE9QVmVmcXQhZiFqIWshbCFwIXIhcyF0IXUheiNuI3AjdCN4JFQkYyRsJHAkcSR0JVMlXyVrJXYmWSZaJ08nUCdRJ1InUydUJ1UnVideJ18nYSdiJ2knaidtJ3Qndid4J3ooUShSKFMoVChVKFYoVyhYKFkoYChiKGMoaChpKGwobShzKHQodSh2KHcoeCh5KHopUSlTKVQpWClZKVspYylpJG9uT1BWZWZxdCFmIWohayFsIXAhciFzIXQhdSF6I24jcCN0I3gkVCRjJGwkcCRxJHQlUyVfJWsldiZZJlonTydQJ1EnUidTJ1QnVSdWJ14nXydhJ2InaSdqJ20ndCd2J3gneihRKFIoUyhUKFUoVihXKFgoWShgKGIoYyhoKGkobChtKHModCh1KHYodyh4KHkoeilRKVMpVClYKVkpWyljKWlRJGkjWlEncyd7UShxKWpSKWApZFckZyNaJ3spZClqUiZVJWlXJlglaydiKGMpVFgmaiZZJ2koaClYUSNgbVIlbiRtVCNfbSRtUyNdbSRtVCRqI10ka1IhXlBRcU9SI2JxUyNzIWAkV1IkeyNzUSN3IWNSJVAjd1EkcyNmUiVzJHNRI28hWlIkeSNvJU9YT1BWZGVmZ3F0IWYhaiFrIWwhbiFwIXIhcyF0IXUheiNuI3AjdCN4JFQkViRfJGEkYyRsJHAkcSR0JVMlXyVoJWsldiZZJlomeydPJ1AnUSdSJ1MnVCdVJ1YnXidfJ2EnYidpJ2onbSd0J3YneCd6KFEoUihTKFQoVShWKFcoWChZKGAoYihjKGgoaShsKG0ocyh0KHUodih3KHgoeSh6KVEpUylUKVgpWSlbKWMpaVMheVgmX18mXyV8Jk8mbyZzJ10nbChmUyRgI08jVFMlZCRgJm1SJm0mYFEmcSZjUiZ4JnFRJnQmZ1ImeiZ0USVhJFpSJlIlYVEkZCNWUiVnJGRRJWokZ1ImViVqUSRrI11SJWwka1EkbiNgUiVvJG5UcE9xU1NPcVchWVAjbiNwJ1VXIXhWJ20obSlbUSNTZVMjVmYhelEjY3RRI3ohZlEjeyFqUSN8IWtXI30hbCdSKFUodlEkUCFwUSRRIXJRJFIhc1EkUyF0USR8I3RRJVEjeFElVCRUUSVmJGNRJW0kbFElcCRwUSVxJHFRJXQkdFEldyVTUSZQJV9TJlclayZZUSZbJXZRJmsmWlEnVydPUSdYJ1BRJ1knUVEnWidTUSdbJ1RRJ2AnVlEnYydeUSdkJ3ZRJ2UndFEnZidfUSdnJ2FTJ2gnYidpUSdrJ2pRJ24hdVEncCd4USdyJ3pRJ3woUVEoTyhsUShaKFJRKFsoU1EoXShUUSheKFZRKF8oV1EoYShZUShkKGBRKGUoYlMoZyhjKGhRKGooaVEoayhYUShwKWlRKHsoc1EofCh0USh9KHVRKU8od1EpUCh4USlSKHpRKVUpUVEpVilTUylXKVQpWFEpWilZUSlfKWNSKWgoeSRvb09QVmVmcXQhZiFqIWshbCFwIXIhcyF0IXUheiNuI3AjdCN4JFQkYyRsJHAkcSR0JVMlXyVrJXYmWSZaJ08nUCdRJ1InUydUJ1UnVideJ18nYSdiJ2knaidtJ3Qndid4J3ooUShSKFMoVChVKFYoVyhYKFkoYChiKGMoaChpKGwobShzKHQodSh2KHcoeCh5KHopUSlTKVQpWClZKVspYylpcFJPVnEhZiFqIWshbCFyIXMhdSN4JHQlUyVrJlkmWiFqJ3dQZWZ0IXAhdCF6I24jcCN0JFQkYyRsJHElXyV2J08nUCdRJ1InUydUJ1UnVidfJ2EnYidpJ2onbSd4J3ooUShsKWMpaXApYSdeJ3Yocyh0KHUodih3KHgoeSh6KVEpUylUKVgpWSlbcSlmJHAndChSKFMoVChVKFYoVyhYKFkoYChiKGMoaChpKG1YIWRSJ3cpYSlmWiFiUiN2J3cpYSlmUSN0IWFSJHEjZFEjeCFlUSdWJ29RKFkoblIoeildcHRPVnEhZiFqIWshbCFyIXMhdSN4JHQlUyVrJlkmWiFqJ3hQZWZ0IXAhdCF6I24jcCN0JFQkYyRsJHElXyV2J08nUCdRJ1InUydUJ1UnVidfJ2EnYidpJ2onbSd4J3ooUShsKWMpaXAoUSRwJ3QoUihTKFQoVShWKFcoWChZKGAoYihjKGgoaShtcShsJ14ndihzKHQodSh2KHcoeCh5KHopUSlTKVQpWClZKVtwdk9WcSFmIWohayFsIXIhcyF1I3gkdCVTJWsmWSZaIWoneVBlZnQhcCF0IXojbiNwI3QkVCRjJGwkcSVfJXYnTydQJ1EnUidTJ1QnVSdWJ18nYSdiJ2knaidtJ3gneihRKGwpYylpcCliJ14ndihzKHQodSh2KHcoeCh5KHopUSlTKVQpWClZKVtxKWckcCd0KFIoUyhUKFUoVihXKFgoWShgKGIoYyhoKGkobVgjZ3YneSliKWdaI2V2JHIneSliKWdWIVtQI3AkVGQhalMjeiRRJFIlUSV0JXcmVyZrJ24hVydQIVkjUyNWI2MkUCRTJHwlVCVmJW0lcSZQJlsnVydaJ1snYCdmJ2cnaCdrJ3Ancid8KE8ocClfZihTJXAnZShaKF4oXyhhKGQoZShnKGooa2codCdjJ2QoeylPKVApUilVKVYpVylaKWhmIWtTI3ojeyRRJFIlUSV0JXcmVyZrJ24hWSdRIVkjUyNWI2MkUCRTJHwlVCVmJW0lcSZQJlsnVydYJ1onWydgJ2YnZydoJ2sncCdyJ3woTyhwKV9oKFQlcCdlKFooWyheKF8oYShkKGUoZyhqKGtpKHUnYydkKHsofClPKVApUilVKVYpVylaKWhoIWxTI3ojeyN8JFEkUiVRJXQldyZXJmsnbiFbJ1IhWSNTI1YjYyRQJFMkfCVUJWYlbSVxJlAmWydXJ1gnWSdaJ1snYCdmJ2cnaCdrJ3Ancid8KE8ocClfaihVJXAnZShaKFsoXSheKF8oYShkKGUoZyhqKGtrKHYnYydkKHsofCh9KU8pUClSKVUpVilXKVopaHBWT1ZxIWYhaiFrIWwhciFzIXUjeCR0JVMlayZZJlohaidtUGVmdCFwIXQheiNuI3AjdCRUJGMkbCRxJV8ldidPJ1AnUSdSJ1MnVCdVJ1YnXydhJ2InaSdqJ20neCd6KFEobCljKWlwKG0kcCd0KFIoUyhUKFUoVihXKFgoWShgKGIoYyhoKGkobXEpWydeJ3Yocyh0KHUodih3KHgoeSh6KVEpUylUKVgpWSlbUiZkJX1UJmgmTyhmJFAhblMhWSF4I1MjViNjI3ojeyN8I30kUCRRJFIkUyR8JVElVCVmJW0lcCVxJXQldyZQJlcmWyZrJ1cnWCdZJ1onWydgJ2MnZCdlJ2YnZydoJ2snbidwJ3InfChPKFooWyhdKF4oXyhhKGQoZShnKGooayhwKHsofCh9KU8pUClSKVUpVilXKVopXyloJFAhcFMhWSF4I1MjViNjI3ojeyN8I30kUCRRJFIkUyR8JVElVCVmJW0lcCVxJXQldyZQJlcmWyZrJ1cnWCdZJ1onWydgJ2MnZCdlJ2YnZydoJ2snbidwJ3InfChPKFooWyhdKF4oXyhhKGQoZShnKGooayhwKHsofCh9KU8pUClSKVUpVilXKVopXyloJG9aT1BWZWZxdCFmIWohayFsIXAhciFzIXQhdSF6I24jcCN0I3gkVCRjJGwkcCRxJHQlUyVfJWsldiZZJlonTydQJ1EnUidTJ1QnVSdWJ14nXydhJ2InaSdqJ20ndCd2J3gneihRKFIoUyhUKFUoVihXKFgoWShgKGIoYyhoKGkobChtKHModCh1KHYodyh4KHkoeilRKVMpVClYKVkpWyljKWlRIXtaUiF9YFIkWyF6USNXZlIkXSF6JG9jT1BWZWZxdCFmIWohayFsIXAhciFzIXQhdSF6I24jcCN0I3gkVCRjJGwkcCRxJHQlUyVfJWsldiZZJlonTydQJ1EnUidTJ1QnVSdWJ14nXydhJ2InaSdqJ20ndCd2J3gneihRKFIoUyhUKFUoVihXKFgoWShgKGIoYyhoKGkobChtKHModCh1KHYodyh4KHkoeilRKVMpVClYKVkpWyljKWkkaGNPUFZxdCFmIWohayFsIXAhciFzIXQhdSF6I24jcCN0I3gkYyRsJHAkcSR0JVMlXyVrJXYmWSZaJ08nUCdRJ1InUydUJ1UnVideJ18nYSdiJ2knaidtJ3Qndid4J3ooUShSKFMoVChVKFYoVyhYKFkoYChiKGMoaChpKGwobShzKHQodSh2KHcoeCh5KHopUSlTKVQpWClZKVspYylpVSNRZGckYVYjVWVmJFRXI1JkZWYkVFEjWGdSJWUkYXBrT1ZxIWYhaiFrIWwhciFzIXUjeCR0JVMlayZZJlohaihQUGVmdCFwIXQheiNuI3AjdCRUJGMkbCRxJV8ldidPJ1AnUSdSJ1MnVCdVJ1YnXydhJ2InaSdqJ20neCd6KFEobCljKWlwKWUnXid2KHModCh1KHYodyh4KHkoeilRKVMpVClYKVkpW3EpayRwJ3QoUihTKFQoVShWKFcoWChZKGAoYihjKGgoaShtWCRoI1oneylkKWokb21PUFZlZnF0IWYhaiFrIWwhcCFyIXMhdCF1IXojbiNwI3QjeCRUJGMkbCRwJHEkdCVTJV8layV2JlkmWidPJ1AnUSdSJ1MnVCdVJ1YnXidfJ2EnYidpJ2onbSd0J3YneCd6KFEoUihTKFQoVShWKFcoWChZKGAoYihjKGgoaShsKG0ocyh0KHUodih3KHgoeSh6KVEpUylUKVgpWSlbKWMpaVIjYW0iLAogICAgbm9kZU5hbWVzOiAi4pqgIExpbmVDb21tZW50IEJsb2NrQ29tbWVudCBFeHByZXNzaW9ucyBGb3JFeHByZXNzaW9uIGZvciBJbkV4cHJlc3Npb25zIEluRXhwcmVzc2lvbiBOYW1lIElkZW50aWZpZXIgSWRlbnRpZmllciBBcml0aE9wIEFyaXRoT3AgQXJpdGhPcCBBcml0aE9wIGluIEl0ZXJhdGlvbkNvbnRleHQgcmV0dXJuIElmRXhwcmVzc2lvbiBpZiB0aGVuIGVsc2UgUXVhbnRpZmllZEV4cHJlc3Npb24gc29tZSBldmVyeSBJbkV4cHJlc3Npb25zIEluRXhwcmVzc2lvbiBzYXRpc2ZpZXMgRGlzanVuY3Rpb24gb3IgQ29uanVuY3Rpb24gYW5kIENvbXBhcmlzb24gQ29tcGFyZU9wIENvbXBhcmVPcCBiZXR3ZWVuIFBvc2l0aXZlVW5hcnlUZXN0ICggUG9zaXRpdmVVbmFyeVRlc3RzICkgQXJpdGhtZXRpY0V4cHJlc3Npb24gQXJpdGhPcCBJbnN0YW5jZU9mRXhwcmVzc2lvbiBpbnN0YW5jZSBvZiBUeXBlIFF1YWxpZmllZE5hbWUgVmFyaWFibGVOYW1lIFNwZWNpYWxUeXBlIGRheXMgdGltZSBkdXJhdGlvbiB5ZWFycyBtb250aHMgZGF0ZSA+IExpc3RUeXBlIGxpc3QgPCBDb250ZXh0VHlwZSBjb250ZXh0IENvbnRleHRFbnRyeVR5cGVzIENvbnRleHRFbnRyeVR5cGUgRnVuY3Rpb25UeXBlIGZ1bmN0aW9uIEFyZ3VtZW50VHlwZXMgQXJndW1lbnRUeXBlIFBhdGhFeHByZXNzaW9uIF0gRmlsdGVyRXhwcmVzc2lvbiBbIEZ1bmN0aW9uSW52b2NhdGlvbiBTcGVjaWFsRnVuY3Rpb25OYW1lIHN0cmluZyBsZW5ndGggdXBwZXIgY2FzZSBsb3dlciBzdWJzdHJpbmcgYmVmb3JlIGFmdGVyIHN0YXJ0cyB3aXRoIGVuZHMgY29udGFpbnMgaW5zZXJ0IGluZGV4IGRpc3RpbmN0IHZhbHVlcyBtZXQgYnkgb3ZlcmxhcHMgZmluaXNoZWQgc3RhcnRlZCBkYXkgeWVhciB3ZWVrIG1vbnRoIGdldCB2YWx1ZSBlbnRyaWVzIE5hbWVkUGFyYW1ldGVycyBOYW1lZFBhcmFtZXRlciBQYXJhbWV0ZXJOYW1lIFBvc2l0aW9uYWxQYXJhbWV0ZXJzIG51bGwgTnVtZXJpY0xpdGVyYWwgU3RyaW5nTGl0ZXJhbCBCb29sZWFuTGl0ZXJhbCBEYXRlVGltZUxpdGVyYWwgRGF0ZVRpbWVDb25zdHJ1Y3RvciBBdExpdGVyYWwgPyBTaW1wbGVQb3NpdGl2ZVVuYXJ5VGVzdCBJbnRlcnZhbCBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbiBMaXN0IEZ1bmN0aW9uRGVmaW5pdGlvbiBGb3JtYWxQYXJhbWV0ZXJzIEZvcm1hbFBhcmFtZXRlciBleHRlcm5hbCBGdW5jdGlvbkJvZHkgfSB7IENvbnRleHQgQ29udGV4dEVudHJ5IEtleSBOYW1lIElkZW50aWZpZXIgVW5hcnlUZXN0cyBXaWxkY2FyZCBub3QiLAogICAgbWF4VGVybTogMTk4LAogICAgY29udGV4dDogdmFyaWFibGVUcmFja2VyLAogICAgbm9kZVByb3BzOiBbCiAgICAgIFsiZ3JvdXAiLCAtMTcsNCwxOCwyMiwyOCwzMCwzMiw0MCw0Miw2Nyw2OSw3MSwxMTIsMTEzLDExNSwxMTYsMTE3LDEyNCwiRXhwcmVzc2lvbiIsNDcsIkV4cHJlc3Npb24gRXhwcmVzc2lvbiIsLTUsMTA1LDEwNiwxMDcsMTA4LDEwOSwiRXhwcmVzc2lvbiBMaXRlcmFsIl0sCiAgICAgIFsiY2xvc2VkQnkiLCAzNywiKSIsNzAsIl0iLDEyMywifSJdLAogICAgICBbIm9wZW5lZEJ5IiwgMzksIigiLDY4LCJbIiwxMjIsInsiXQogICAgXSwKICAgIHByb3BTb3VyY2VzOiBbZmVlbEhpZ2hsaWdodGluZ10sCiAgICBza2lwcGVkTm9kZXM6IFswLDEsMl0sCiAgICByZXBlYXROb2RlQ291bnQ6IDE0LAogICAgdG9rZW5EYXRhOiAiKXh+UnVYWSNmWVokWlpbI2ZdXiRacHEjZnFyJGBycyRrd3glX3h5JWR5eiVpenslbnt8JXt8fSZRfSFPJlYhTyFQJmQhUCFRJnwhUSFbKFghWyFdKGohXSFeKG8hXiFfKHQhXyFgJGYhYCFhKVQhYiFjKV8hfSNPKWQjUCNRKWkjUSNSJXYjbyNwKW4jcSNyKXMkZiRnI2YjQlkjQlojZiRJUyRJXyNmJEl8JEl9JFokSX0kSk8kWiRKVCRKVSNmJEtWJEtXI2YmRlUmRlYjZj9IVD9IVSNmfiNrWSReflhZI2ZaWyNmcHEjZiRmJGcjZiNCWSNCWiNmJElTJElfI2YkSlQkSlUjZiRLViRLVyNmJkZVJkZWI2Y/SFQ/SFUjZn4kYE8kX35+JGNQIV8hYCRmfiRrT3F+fiRwVSVUfk9ZJGtaciRrcnMlU3MjTyRrI08jUCVYI1B+JGt+JVhPJVR+fiVbUE9+JGt+JWRPJGd+fiVpT3V+fiVuT3d+fiVzUF5+ensldn4le095fn4mUU9bfn4mVk8kan5SJltQWlAhYCFhJl9RJmRPJHhRfiZpUSRmfiFPIVAmbyFRIVsmdH4mdE8kaX5+JnlQJVN+IVEhWyZ0fidSUV1+ensnWCFQIVEnfH4nW1JPeidYensnZXt+J1h+J2hUT3onWHp7J2V7IVAnWCFQIVEndyFRfidYfid8T1F+fihSUVB+T1knfFp+J3x+KF5RJVN+IU8hUChkIVEhWyhYfihnUCFRIVsmdH4ob08kdn5+KHRPJV5+Uih7UCFbUXJQIV8hYClPUClUT3JQUilbUCFYUXJQIV8hYClPfilkTyVWfn4paU8haH5+KW5PIWZ+filzTyNvfn4peE8jbn4iLAogICAgdG9rZW5pemVyczogW3Byb3BlcnR5SWRlbnRpZmllcnMsIGlkZW50aWZpZXJzLCBpbnNlcnRTZW1pY29sb24sIDAsIDFdLAogICAgdG9wUnVsZXM6IHsiRXhwcmVzc2lvbnMiOlswLDNdLCJVbmFyeVRlc3RzIjpbMSwxMjldfSwKICAgIGR5bmFtaWNQcmVjZWRlbmNlczogeyIzMCI6LTEsIjcxIjotMSwiMTAxIjotMSwiMTU0IjotMX0sCiAgICBzcGVjaWFsaXplZDogW3t0ZXJtOiAxNDgsIGdldDogdmFsdWUgPT4gc3BlY19pZGVudGlmaWVyW3ZhbHVlXSB8fCAtMX1dLAogICAgdG9rZW5QcmVjOiAwCiAgfSk7CgogIGZ1bmN0aW9uIHBhcnNlUGFyYW1ldGVyTmFtZXMoZm4pIHsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm4uJGFyZ3MpKSB7CiAgICAgICAgICByZXR1cm4gZm4uJGFyZ3M7CiAgICAgIH0KICAgICAgY29uc3QgY29kZSA9IGZuLnRvU3RyaW5nKCk7CiAgICAgIGNvbnN0IG1hdGNoID0gL14oPzpbXihdKlxzKik/XCgoW14pXSspP1wpLy5leGVjKGNvZGUpOwogICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBwYXJzZSBwYXJhbXM6ICcgKyBjb2RlKTsKICAgICAgfQogICAgICBjb25zdCBbXywgcGFyYW1zXSA9IG1hdGNoOwogICAgICBpZiAoIXBhcmFtcykgewogICAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICAgIHJldHVybiBwYXJhbXMuc3BsaXQoJywnKS5tYXAocCA9PiBwLnRyaW0oKSk7CiAgfQogIGZ1bmN0aW9uIG5vdEltcGxlbWVudGVkKHRoaW5nKSB7CiAgICAgIHJldHVybiBuZXcgRXJyb3IoYG5vdCBpbXBsZW1lbnRlZDogJHt0aGluZ31gKTsKICB9CiAgLyoqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUKICAgKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIGFueT59IGNvbnRleHQKICAgKgogICAqIEByZXR1cm4ge2FueX0KICAgKi8KICBmdW5jdGlvbiBnZXRGcm9tQ29udGV4dChuYW1lLCBjb250ZXh0KSB7CiAgICAgIGlmIChbJ25pbCcsICdib29sZWFuJywgJ251bWJlcicsICdzdHJpbmcnXS5pbmNsdWRlcyhnZXRUeXBlKGNvbnRleHQpKSkgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgaWYgKG5hbWUgaW4gY29udGV4dCkgewogICAgICAgICAgcmV0dXJuIGNvbnRleHRbbmFtZV07CiAgICAgIH0KICAgICAgY29uc3Qgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemVDb250ZXh0S2V5KG5hbWUpOwogICAgICBpZiAobm9ybWFsaXplZE5hbWUgaW4gY29udGV4dCkgewogICAgICAgICAgcmV0dXJuIGNvbnRleHRbbm9ybWFsaXplZE5hbWVdOwogICAgICB9CiAgICAgIGNvbnN0IGVudHJ5ID0gT2JqZWN0LmVudHJpZXMoY29udGV4dCkuZmluZCgoW2tleV0pID0+IG5vcm1hbGl6ZWROYW1lID09PSBub3JtYWxpemVDb250ZXh0S2V5KGtleSkpOwogICAgICBpZiAoZW50cnkpIHsKICAgICAgICAgIHJldHVybiBlbnRyeVsxXTsKICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICB9CgogIGZ1bmN0aW9uIGlzRGF0ZVRpbWUob2JqKSB7CiAgICAgIHJldHVybiBEYXRlVGltZS5pc0RhdGVUaW1lKG9iaik7CiAgfQogIGZ1bmN0aW9uIGlzRHVyYXRpb24ob2JqKSB7CiAgICAgIHJldHVybiBEdXJhdGlvbi5pc0R1cmF0aW9uKG9iaik7CiAgfQogIGZ1bmN0aW9uIGR1cmF0aW9uJDEob3B0cykgewogICAgICBpZiAodHlwZW9mIG9wdHMgPT09ICdudW1iZXInKSB7CiAgICAgICAgICByZXR1cm4gRHVyYXRpb24uZnJvbU1pbGxpcyhvcHRzKTsKICAgICAgfQogICAgICByZXR1cm4gRHVyYXRpb24uZnJvbUlTTyhvcHRzKTsKICB9CiAgZnVuY3Rpb24gZGF0ZShzdHIgPSBudWxsLCB0aW1lID0gbnVsbCwgem9uZSA9IG51bGwpIHsKICAgICAgaWYgKHRpbWUpIHsKICAgICAgICAgIGlmIChzdHIpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzxzdHI+IGFuZCA8dGltZT4gcHJvdmlkZWQnKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBkYXRlKGAxOTAwLTAxLTAxVCR7dGltZX1gKTsKICAgICAgfQogICAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgIGlmIChzdHIuc3RhcnRzV2l0aCgnLScpKSB7CiAgICAgICAgICAgICAgdGhyb3cgbm90SW1wbGVtZW50ZWQoJ25lZ2F0aXZlIGRhdGUnKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghc3RyLmluY2x1ZGVzKCdUJykpIHsKICAgICAgICAgICAgICAvLyByYXcgZGF0ZXMgYXJlIGluIFVUQyB0aW1lIHpvbmUKICAgICAgICAgICAgICByZXR1cm4gZGF0ZShzdHIgKyAnVDAwOjAwOjAwLjAwMFonKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdHIuaW5jbHVkZXMoJ0AnKSkgewogICAgICAgICAgICAgIGlmICh6b25lKSB7CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignPHpvbmU+IGFscmVhZHkgcHJvdmlkZWQnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgW2RhdGVQYXJ0LCB6b25lUGFydF0gPSBzdHIuc3BsaXQoJ0AnKTsKICAgICAgICAgICAgICByZXR1cm4gZGF0ZShkYXRlUGFydCwgbnVsbCwgSW5mby5ub3JtYWxpemVab25lKHpvbmVQYXJ0KSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyhzdHIudG9VcHBlckNhc2UoKSwgewogICAgICAgICAgICAgIHNldFpvbmU6IHRydWUsCiAgICAgICAgICAgICAgem9uZQogICAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIERhdGVUaW1lLm5vdygpOwogIH0KCiAgZnVuY3Rpb24gaXNDb250ZXh0KGUpIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSA9PT0gT2JqZWN0LnByb3RvdHlwZTsKICB9CiAgZnVuY3Rpb24gaXNBcnJheSQxKGUpIHsKICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZSk7CiAgfQogIGZ1bmN0aW9uIGlzQm9vbGVhbihlKSB7CiAgICAgIHJldHVybiB0eXBlb2YgZSA9PT0gJ2Jvb2xlYW4nOwogIH0KICBmdW5jdGlvbiBnZXRUeXBlKGUpIHsKICAgICAgaWYgKGUgPT09IG51bGwgfHwgZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICByZXR1cm4gJ25pbCc7CiAgICAgIH0KICAgICAgaWYgKGlzQm9vbGVhbihlKSkgewogICAgICAgICAgcmV0dXJuICdib29sZWFuJzsKICAgICAgfQogICAgICBpZiAoaXNOdW1iZXIoZSkpIHsKICAgICAgICAgIHJldHVybiAnbnVtYmVyJzsKICAgICAgfQogICAgICBpZiAoaXNTdHJpbmcoZSkpIHsKICAgICAgICAgIHJldHVybiAnc3RyaW5nJzsKICAgICAgfQogICAgICBpZiAoaXNDb250ZXh0KGUpKSB7CiAgICAgICAgICByZXR1cm4gJ2NvbnRleHQnOwogICAgICB9CiAgICAgIGlmIChpc0FycmF5JDEoZSkpIHsKICAgICAgICAgIHJldHVybiAnbGlzdCc7CiAgICAgIH0KICAgICAgaWYgKGlzRHVyYXRpb24oZSkpIHsKICAgICAgICAgIHJldHVybiAnZHVyYXRpb24nOwogICAgICB9CiAgICAgIGlmIChpc0RhdGVUaW1lKGUpKSB7CiAgICAgICAgICBpZiAoZS55ZWFyID09PSAxOTAwICYmCiAgICAgICAgICAgICAgZS5tb250aCA9PT0gMSAmJgogICAgICAgICAgICAgIGUuZGF5ID09PSAxKSB7CiAgICAgICAgICAgICAgcmV0dXJuICd0aW1lJzsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChlLmhvdXIgPT09IDAgJiYKICAgICAgICAgICAgICBlLm1pbnV0ZSA9PT0gMCAmJgogICAgICAgICAgICAgIGUuc2Vjb25kID09PSAwICYmCiAgICAgICAgICAgICAgZS5taWxsaXNlY29uZCA9PT0gMCAmJgogICAgICAgICAgICAgIGUuem9uZSA9PT0gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlKSB7CiAgICAgICAgICAgICAgcmV0dXJuICdkYXRlJzsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiAnZGF0ZSB0aW1lJzsKICAgICAgfQogICAgICBpZiAoZSBpbnN0YW5jZW9mIFJhbmdlKSB7CiAgICAgICAgICByZXR1cm4gJ3JhbmdlJzsKICAgICAgfQogICAgICBpZiAoZSBpbnN0YW5jZW9mIEZ1bmN0aW9uV3JhcHBlcikgewogICAgICAgICAgcmV0dXJuICdmdW5jdGlvbic7CiAgICAgIH0KICAgICAgcmV0dXJuICdsaXRlcmFsJzsKICB9CiAgZnVuY3Rpb24gaXNUeXBlKGVsLCB0eXBlKSB7CiAgICAgIHJldHVybiBnZXRUeXBlKGVsKSA9PT0gdHlwZTsKICB9CiAgZnVuY3Rpb24gdHlwZUNhc3Qob2JqLCB0eXBlKSB7CiAgICAgIGlmIChpc0RhdGVUaW1lKG9iaikpIHsKICAgICAgICAgIGlmICh0eXBlID09PSAndGltZScpIHsKICAgICAgICAgICAgICByZXR1cm4gb2JqLnNldCh7CiAgICAgICAgICAgICAgICAgIHllYXI6IDE5MDAsCiAgICAgICAgICAgICAgICAgIG1vbnRoOiAxLAogICAgICAgICAgICAgICAgICBkYXk6IDEKICAgICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlID09PSAnZGF0ZScpIHsKICAgICAgICAgICAgICByZXR1cm4gb2JqLnNldFpvbmUoJ3V0YycsIHsga2VlcExvY2FsVGltZTogdHJ1ZSB9KS5zdGFydE9mKCdkYXknKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlID09PSAnZGF0ZSB0aW1lJykgewogICAgICAgICAgICAgIHJldHVybiBvYmo7CiAgICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG51bGw7CiAgfQogIGNsYXNzIFJhbmdlIHsKICAgICAgY29uc3RydWN0b3IocHJvcHMpIHsKICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcHMpOwogICAgICB9CiAgfQogIGZ1bmN0aW9uIGlzTnVtYmVyKG9iaikgewogICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ251bWJlcic7CiAgfQogIGZ1bmN0aW9uIGlzU3RyaW5nKG9iaikgewogICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ3N0cmluZyc7CiAgfQogIGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7CiAgICAgIGlmIChhID09PSBudWxsICYmIGIgIT09IG51bGwgfHwKICAgICAgICAgIGEgIT09IG51bGwgJiYgYiA9PT0gbnVsbCkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGlmIChpc0FycmF5JDEoYSkgJiYgYS5sZW5ndGggPCAyKSB7CiAgICAgICAgICBhID0gYVswXTsKICAgICAgfQogICAgICBpZiAoaXNBcnJheSQxKGIpICYmIGIubGVuZ3RoIDwgMikgewogICAgICAgICAgYiA9IGJbMF07CiAgICAgIH0KICAgICAgY29uc3QgYVR5cGUgPSBnZXRUeXBlKGEpOwogICAgICBjb25zdCBiVHlwZSA9IGdldFR5cGUoYik7CiAgICAgIGlmIChhVHlwZSAhPT0gYlR5cGUpIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGlmIChhVHlwZSA9PT0gJ25pbCcpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGlmIChhVHlwZSA9PT0gJ2xpc3QnKSB7CiAgICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGEuZXZlcnkoKGVsZW1lbnQsIGlkeCkgPT4gZXF1YWxzKGVsZW1lbnQsIGJbaWR4XSkpOwogICAgICB9CiAgICAgIGlmIChhVHlwZSA9PT0gJ2RhdGUgdGltZScgfHwgYVR5cGUgPT09ICd0aW1lJyB8fCBhVHlwZSA9PT0gJ2RhdGUnKSB7CiAgICAgICAgICByZXR1cm4gKGEudG9VVEMoKS52YWx1ZU9mKCkgPT09IGIudG9VVEMoKS52YWx1ZU9mKCkpOwogICAgICB9CiAgICAgIGlmIChhVHlwZSA9PT0gJ2R1cmF0aW9uJykgewogICAgICAgICAgLy8geWVhcnMgYW5kIG1vbnRocyBkdXJhdGlvbiAtPiBtb250aHMKICAgICAgICAgIGlmIChNYXRoLmFicyhhLmFzKCdkYXlzJykpID4gMTgwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgudHJ1bmMoYS5taW51cyhiKS5hcygnbW9udGhzJykpID09PSAwOwogICAgICAgICAgfQogICAgICAgICAgLy8gZGF5cyBhbmQgdGltZSBkdXJhdGlvbiAtPiBzZWNvbmRzCiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gTWF0aC50cnVuYyhhLm1pbnVzKGIpLmFzKCdzZWNvbmRzJykpID09PSAwOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChhVHlwZSA9PT0gJ2NvbnRleHQnKSB7CiAgICAgICAgICBjb25zdCBhRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGEpOwogICAgICAgICAgY29uc3QgYkVudHJpZXMgPSBPYmplY3QuZW50cmllcyhiKTsKICAgICAgICAgIGlmIChhRW50cmllcy5sZW5ndGggIT09IGJFbnRyaWVzLmxlbmd0aCkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBhRW50cmllcy5ldmVyeSgoW2tleSwgdmFsdWVdKSA9PiBrZXkgaW4gYiAmJiBlcXVhbHModmFsdWUsIGJba2V5XSkpOwogICAgICB9CiAgICAgIGlmIChhVHlwZSA9PT0gJ3JhbmdlJykgewogICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICBbYS5zdGFydCwgYi5zdGFydF0sCiAgICAgICAgICAgICAgW2EuZW5kLCBiLmVuZF0sCiAgICAgICAgICAgICAgW2FbJ3N0YXJ0IGluY2x1ZGVkJ10sIGJbJ3N0YXJ0IGluY2x1ZGVkJ11dLAogICAgICAgICAgICAgIFthWydlbmQgaW5jbHVkZWQnXSwgYlsnZW5kIGluY2x1ZGVkJ11dCiAgICAgICAgICBdLmV2ZXJ5KChbYSwgYl0pID0+IGEgPT09IGIpOwogICAgICB9CiAgICAgIGlmIChhID09IGIpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIHJldHVybiBhVHlwZSA9PT0gYlR5cGUgPyBmYWxzZSA6IG51bGw7CiAgfQogIGNsYXNzIEZ1bmN0aW9uV3JhcHBlciB7CiAgICAgIGNvbnN0cnVjdG9yKGZuLCBwYXJhbWV0ZXJOYW1lcykgewogICAgICAgICAgdGhpcy5mbiA9IGZuOwogICAgICAgICAgdGhpcy5wYXJhbWV0ZXJOYW1lcyA9IHBhcmFtZXRlck5hbWVzOwogICAgICB9CiAgICAgIGludm9rZShjb250ZXh0T3JBcmdzKSB7CiAgICAgICAgICBsZXQgcGFyYW1zOwogICAgICAgICAgaWYgKGlzQXJyYXkkMShjb250ZXh0T3JBcmdzKSkgewogICAgICAgICAgICAgIHBhcmFtcyA9IGNvbnRleHRPckFyZ3M7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICBwYXJhbXMgPSB0aGlzLnBhcmFtZXRlck5hbWVzLm1hcChuID0+IGNvbnRleHRPckFyZ3Nbbl0pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXMuZm4uY2FsbChudWxsLCAuLi5wYXJhbXMpOwogICAgICB9CiAgfQoKICAvLyAxMC4zLjQgQnVpbHQtaW4gZnVuY3Rpb25zCiAgY29uc3QgYnVpbHRpbnMgPSB7CiAgICAgIC8vIDEwLjMuNC4xIENvbnZlcnNpb24gZnVuY3Rpb25zCiAgICAgICdudW1iZXInOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aHJvdyBub3RJbXBsZW1lbnRlZCgnbnVtYmVyJyk7CiAgICAgIH0sCiAgICAgICdzdHJpbmcnOiBmbihmdW5jdGlvbiAoZnJvbSkgewogICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDEpIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0b1N0cmluZyhmcm9tKTsKICAgICAgfSwgWydhbnknXSksCiAgICAgIC8vIGRhdGUoZnJvbSkgPT4gZGF0ZSBzdHJpbmcKICAgICAgLy8gZGF0ZShmcm9tKSA9PiBkYXRlIGFuZCB0aW1lCiAgICAgIC8vIGRhdGUoeWVhciwgbW9udGgsIGRheSkKICAgICAgJ2RhdGUnOiBmbihmdW5jdGlvbiAoeWVhciwgbW9udGgsIGRheSwgZnJvbSkgewogICAgICAgICAgaWYgKCFmcm9tICYmICFpc051bWJlcih5ZWFyKSkgewogICAgICAgICAgICAgIGZyb20gPSB5ZWFyOwogICAgICAgICAgICAgIHllYXIgPSBudWxsOwogICAgICAgICAgfQogICAgICAgICAgbGV0IGQ7CiAgICAgICAgICBpZiAoaXNTdHJpbmcoZnJvbSkpIHsKICAgICAgICAgICAgICBkID0gZGF0ZShmcm9tKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChpc0RhdGVUaW1lKGZyb20pKSB7CiAgICAgICAgICAgICAgZCA9IGZyb207CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoeWVhcikgewogICAgICAgICAgICAgIGQgPSBkYXRlKCkuc2V0Wm9uZSgndXRjJykuc2V0KHsKICAgICAgICAgICAgICAgICAgeWVhciwKICAgICAgICAgICAgICAgICAgbW9udGgsCiAgICAgICAgICAgICAgICAgIGRheQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGQgJiYgaWZWYWxpZChkLnNldFpvbmUoJ3V0YycpLnN0YXJ0T2YoJ2RheScpKSB8fCBudWxsOwogICAgICB9LCBbJ2FueT8nLCAnbnVtYmVyPycsICdudW1iZXI/JywgJ2FueT8nXSksCiAgICAgIC8vIGRhdGUgYW5kIHRpbWUoZnJvbSkgPT4gZGF0ZSB0aW1lIHN0cmluZwogICAgICAvLyBkYXRlIGFuZCB0aW1lKGRhdGUsIHRpbWUpCiAgICAgICdkYXRlIGFuZCB0aW1lJzogZm4oZnVuY3Rpb24gKGQsIHRpbWUsIGZyb20pIHsKICAgICAgICAgIGxldCBkdDsKICAgICAgICAgIGlmIChpc0RhdGVUaW1lKGQpICYmIGlzRGF0ZVRpbWUodGltZSkpIHsKICAgICAgICAgICAgICBkdCA9IHRpbWUuc2V0KHsKICAgICAgICAgICAgICAgICAgeWVhcjogZC55ZWFyLAogICAgICAgICAgICAgICAgICBtb250aDogZC5tb250aCwKICAgICAgICAgICAgICAgICAgZGF5OiBkLmRheQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGlzU3RyaW5nKGQpKSB7CiAgICAgICAgICAgICAgZnJvbSA9IGQ7CiAgICAgICAgICAgICAgZCA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaXNTdHJpbmcoZnJvbSkpIHsKICAgICAgICAgICAgICBkdCA9IGRhdGUoZnJvbSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZHQgJiYgaWZWYWxpZChkdCkgfHwgbnVsbDsKICAgICAgfSwgWydhbnk/JywgJ3RpbWU/JywgJ3N0cmluZz8nXSwgWydkYXRlJywgJ3RpbWUnLCAnZnJvbSddKSwKICAgICAgLy8gdGltZShmcm9tKSA9PiB0aW1lIHN0cmluZwogICAgICAvLyB0aW1lKGZyb20pID0+IHRpbWUsIGRhdGUgYW5kIHRpbWUKICAgICAgLy8gdGltZShob3VyLCBtaW51dGUsIHNlY29uZCwgb2Zmc2V0PykgPT4gLi4uCiAgICAgICd0aW1lJzogZm4oZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBvZmZzZXQsIGZyb20pIHsKICAgICAgICAgIGxldCB0OwogICAgICAgICAgaWYgKG9mZnNldCkgewogICAgICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCd0aW1lKC4uLiwgb2Zmc2V0KScpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGlzU3RyaW5nKGhvdXIpIHx8IGlzRGF0ZVRpbWUoaG91cikpIHsKICAgICAgICAgICAgICBmcm9tID0gaG91cjsKICAgICAgICAgICAgICBob3VyID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChpc1N0cmluZyhmcm9tKSkgewogICAgICAgICAgICAgIHQgPSBkYXRlKG51bGwsIGZyb20pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGlzRGF0ZVRpbWUoZnJvbSkpIHsKICAgICAgICAgICAgICB0ID0gZnJvbS5zZXQoewogICAgICAgICAgICAgICAgICB5ZWFyOiAxOTAwLAogICAgICAgICAgICAgICAgICBtb250aDogMSwKICAgICAgICAgICAgICAgICAgZGF5OiAxCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaXNOdW1iZXIoaG91cikpIHsKICAgICAgICAgICAgICAvLyBUT0RPOiBzdXBwb3J0IG9mZnNldCA9IGRheXMgYW5kIHRpbWUgZHVyYXRpb24KICAgICAgICAgICAgICB0ID0gZGF0ZSgpLnNldCh7CiAgICAgICAgICAgICAgICAgIGhvdXIsCiAgICAgICAgICAgICAgICAgIG1pbnV0ZSwKICAgICAgICAgICAgICAgICAgc2Vjb25kCiAgICAgICAgICAgICAgfSkuc2V0KHsKICAgICAgICAgICAgICAgICAgeWVhcjogMTkwMCwKICAgICAgICAgICAgICAgICAgbW9udGg6IDEsCiAgICAgICAgICAgICAgICAgIGRheTogMSwKICAgICAgICAgICAgICAgICAgbWlsbGlzZWNvbmQ6IDAKICAgICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0ICYmIGlmVmFsaWQodCkgfHwgbnVsbDsKICAgICAgfSwgWydhbnk/JywgJ251bWJlcj8nLCAnbnVtYmVyPycsICdhbnk/JywgJ2FueT8nXSksCiAgICAgICdkdXJhdGlvbic6IGZuKGZ1bmN0aW9uIChmcm9tKSB7CiAgICAgICAgICByZXR1cm4gaWZWYWxpZChkdXJhdGlvbiQxKGZyb20pKTsKICAgICAgfSwgWydzdHJpbmcnXSksCiAgICAgICd5ZWFycyBhbmQgbW9udGhzIGR1cmF0aW9uJzogZm4oZnVuY3Rpb24gKGZyb20sIHRvKSB7CiAgICAgICAgICByZXR1cm4gaWZWYWxpZCh0by5kaWZmKGZyb20sIFsneWVhcnMnLCAnbW9udGhzJ10pKTsKICAgICAgfSwgWydkYXRlJywgJ2RhdGUnXSksCiAgICAgICdAJzogZm4oZnVuY3Rpb24gKHN0cmluZykgewogICAgICAgICAgbGV0IHQ7CiAgICAgICAgICBpZiAoL14tP1AvLnRlc3Qoc3RyaW5nKSkgewogICAgICAgICAgICAgIHQgPSBkdXJhdGlvbiQxKHN0cmluZyk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmICgvXltcZF17MSwyfTpbXGRdezEsMn06W1xkXXsxLDJ9Ly50ZXN0KHN0cmluZykpIHsKICAgICAgICAgICAgICB0ID0gZGF0ZShudWxsLCBzdHJpbmcpOwogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgdCA9IGRhdGUoc3RyaW5nKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0ICYmIGlmVmFsaWQodCkgfHwgbnVsbDsKICAgICAgfSwgWydzdHJpbmcnXSksCiAgICAgICdub3cnOiBmbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gZGF0ZSgpOwogICAgICB9LCBbXSksCiAgICAgICd0b2RheSc6IGZuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBkYXRlKCkuc3RhcnRPZignZGF5Jyk7CiAgICAgIH0sIFtdKSwKICAgICAgLy8gMTAuMy40LjIgQm9vbGVhbiBmdW5jdGlvbgogICAgICAnbm90JzogZm4oZnVuY3Rpb24gKGJvb2wpIHsKICAgICAgICAgIHJldHVybiBpc1R5cGUoYm9vbCwgJ2Jvb2xlYW4nKSA/ICFib29sIDogbnVsbDsKICAgICAgfSwgWydhbnknXSksCiAgICAgIC8vIDEwLjMuNC4zIFN0cmluZyBmdW5jdGlvbnMKICAgICAgJ3N1YnN0cmluZyc6IGZuKGZ1bmN0aW9uIChzdHJpbmcsIHN0YXJ0LCBsZW5ndGgpIHsKICAgICAgICAgIGNvbnN0IF9zdGFydCA9IChzdGFydCA8IDAgPyBzdHJpbmcubGVuZ3RoICsgc3RhcnQgOiBzdGFydCAtIDEpOwogICAgICAgICAgY29uc3QgYXJyID0gQXJyYXkuZnJvbShzdHJpbmcpOwogICAgICAgICAgcmV0dXJuICh0eXBlb2YgbGVuZ3RoICE9PSAndW5kZWZpbmVkJwogICAgICAgICAgICAgID8gYXJyLnNsaWNlKF9zdGFydCwgX3N0YXJ0ICsgbGVuZ3RoKQogICAgICAgICAgICAgIDogYXJyLnNsaWNlKF9zdGFydCkpLmpvaW4oJycpOwogICAgICB9LCBbJ3N0cmluZycsICdudW1iZXInLCAnbnVtYmVyPyddLCBbJ3N0cmluZycsICdzdGFydCBwb3NpdGlvbicsICdsZW5ndGgnXSksCiAgICAgICdzdHJpbmcgbGVuZ3RoJzogZm4oZnVuY3Rpb24gKHN0cmluZykgewogICAgICAgICAgcmV0dXJuIGNvdW50U3ltYm9scyhzdHJpbmcpOwogICAgICB9LCBbJ3N0cmluZyddKSwKICAgICAgJ3VwcGVyIGNhc2UnOiBmbihmdW5jdGlvbiAoc3RyaW5nKSB7CiAgICAgICAgICByZXR1cm4gc3RyaW5nLnRvVXBwZXJDYXNlKCk7CiAgICAgIH0sIFsnc3RyaW5nJ10pLAogICAgICAnbG93ZXIgY2FzZSc6IGZuKGZ1bmN0aW9uIChzdHJpbmcpIHsKICAgICAgICAgIHJldHVybiBzdHJpbmcudG9Mb3dlckNhc2UoKTsKICAgICAgfSwgWydzdHJpbmcnXSksCiAgICAgICdzdWJzdHJpbmcgYmVmb3JlJzogZm4oZnVuY3Rpb24gKHN0cmluZywgbWF0Y2gpIHsKICAgICAgICAgIGNvbnN0IGluZGV4ID0gc3RyaW5nLmluZGV4T2YobWF0Y2gpOwogICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKDAsIGluZGV4KTsKICAgICAgfSwgWydzdHJpbmcnLCAnc3RyaW5nJ10pLAogICAgICAnc3Vic3RyaW5nIGFmdGVyJzogZm4oZnVuY3Rpb24gKHN0cmluZywgbWF0Y2gpIHsKICAgICAgICAgIGNvbnN0IGluZGV4ID0gc3RyaW5nLmluZGV4T2YobWF0Y2gpOwogICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKGluZGV4ICsgbWF0Y2gubGVuZ3RoKTsKICAgICAgfSwgWydzdHJpbmcnLCAnc3RyaW5nJ10pLAogICAgICAncmVwbGFjZSc6IGZuKGZ1bmN0aW9uIChpbnB1dCwgcGF0dGVybiwgcmVwbGFjZW1lbnQsIGZsYWdzKSB7CiAgICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZShuZXcgUmVnRXhwKHBhdHRlcm4sICd1ZycgKyAoZmxhZ3MgfHwgJycpLnJlcGxhY2UoL1t4XS9nLCAnJykpLCByZXBsYWNlbWVudC5yZXBsYWNlKC9cJDAvZywgJyQkJicpKTsKICAgICAgfSwgWydzdHJpbmcnLCAnc3RyaW5nJywgJ3N0cmluZycsICdzdHJpbmc/J10pLAogICAgICAnY29udGFpbnMnOiBmbihmdW5jdGlvbiAoc3RyaW5nLCBtYXRjaCkgewogICAgICAgICAgcmV0dXJuIHN0cmluZy5pbmNsdWRlcyhtYXRjaCk7CiAgICAgIH0sIFsnc3RyaW5nJywgJ3N0cmluZyddKSwKICAgICAgJ3N0YXJ0cyB3aXRoJzogZm4oZnVuY3Rpb24gKHN0cmluZywgbWF0Y2gpIHsKICAgICAgICAgIHJldHVybiBzdHJpbmcuc3RhcnRzV2l0aChtYXRjaCk7CiAgICAgIH0sIFsnc3RyaW5nJywgJ3N0cmluZyddKSwKICAgICAgJ2VuZHMgd2l0aCc6IGZuKGZ1bmN0aW9uIChzdHJpbmcsIG1hdGNoKSB7CiAgICAgICAgICByZXR1cm4gc3RyaW5nLmVuZHNXaXRoKG1hdGNoKTsKICAgICAgfSwgWydzdHJpbmcnLCAnc3RyaW5nJ10pLAogICAgICAnc3BsaXQnOiBmbihmdW5jdGlvbiAoc3RyaW5nLCBkZWxpbWl0ZXIpIHsKICAgICAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQobmV3IFJlZ0V4cChkZWxpbWl0ZXIsICd1JykpOwogICAgICB9LCBbJ3N0cmluZycsICdzdHJpbmcnXSksCiAgICAgIC8vIDEwLjMuNC40IExpc3QgZnVuY3Rpb25zCiAgICAgICdsaXN0IGNvbnRhaW5zJzogZm4oZnVuY3Rpb24gKGxpc3QsIGVsZW1lbnQpIHsKICAgICAgICAgIHJldHVybiBsaXN0LnNvbWUoZWwgPT4gbWF0Y2hlcyhlbCwgZWxlbWVudCkpOwogICAgICB9LCBbJ2xpc3QnLCAnYW55PyddKSwKICAgICAgJ2NvdW50JzogZm4oZnVuY3Rpb24gKGxpc3QpIHsKICAgICAgICAgIHJldHVybiBsaXN0Lmxlbmd0aDsKICAgICAgfSwgWydsaXN0J10pLAogICAgICAnbWluJzogbGlzdEZuKGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgICAgICByZXR1cm4gbGlzdC5yZWR1Y2UoKG1pbiwgZWwpID0+IG1pbiA9PT0gbnVsbCA/IGVsIDogTWF0aC5taW4obWluLCBlbCksIG51bGwpOwogICAgICB9LCAnbnVtYmVyJyksCiAgICAgICdtYXgnOiBsaXN0Rm4oZnVuY3Rpb24gKGxpc3QpIHsKICAgICAgICAgIHJldHVybiBsaXN0LnJlZHVjZSgobWF4LCBlbCkgPT4gbWF4ID09PSBudWxsID8gZWwgOiBNYXRoLm1heChtYXgsIGVsKSwgbnVsbCk7CiAgICAgIH0sICdudW1iZXInKSwKICAgICAgJ3N1bSc6IGxpc3RGbihmdW5jdGlvbiAobGlzdCkgewogICAgICAgICAgcmV0dXJuIHN1bShsaXN0KTsKICAgICAgfSwgJ251bWJlcicpLAogICAgICAnbWVhbic6IGxpc3RGbihmdW5jdGlvbiAobGlzdCkgewogICAgICAgICAgY29uc3QgcyA9IHN1bShsaXN0KTsKICAgICAgICAgIHJldHVybiBzID09PSBudWxsID8gcyA6IHMgLyBsaXN0Lmxlbmd0aDsKICAgICAgfSwgJ251bWJlcicpLAogICAgICAnYWxsJzogbGlzdEZuKGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgICAgICBsZXQgbm9uQm9vbCA9IGZhbHNlOwogICAgICAgICAgZm9yIChjb25zdCBvIG9mIGxpc3QpIHsKICAgICAgICAgICAgICBpZiAobyA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodHlwZW9mIG8gIT09ICdib29sZWFuJykgewogICAgICAgICAgICAgICAgICBub25Cb29sID0gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gbm9uQm9vbCA/IG51bGwgOiB0cnVlOwogICAgICB9LCAnYW55PycpLAogICAgICAnYW55JzogbGlzdEZuKGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgICAgICBsZXQgbm9uQm9vbCA9IGZhbHNlOwogICAgICAgICAgZm9yIChjb25zdCBvIG9mIGxpc3QpIHsKICAgICAgICAgICAgICBpZiAobyA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvICE9PSAnYm9vbGVhbicpIHsKICAgICAgICAgICAgICAgICAgbm9uQm9vbCA9IHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG5vbkJvb2wgPyBudWxsIDogZmFsc2U7CiAgICAgIH0sICdhbnk/JyksCiAgICAgICdzdWJsaXN0JzogZm4oZnVuY3Rpb24gKGxpc3QsIHN0YXJ0LCBsZW5ndGgpIHsKICAgICAgICAgIGNvbnN0IF9zdGFydCA9IChzdGFydCA8IDAgPyBsaXN0Lmxlbmd0aCArIHN0YXJ0IDogc3RhcnQgLSAxKTsKICAgICAgICAgIHJldHVybiAodHlwZW9mIGxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcKICAgICAgICAgICAgICA/IGxpc3Quc2xpY2UoX3N0YXJ0LCBfc3RhcnQgKyBsZW5ndGgpCiAgICAgICAgICAgICAgOiBsaXN0LnNsaWNlKF9zdGFydCkpOwogICAgICB9LCBbJ2xpc3QnLCAnbnVtYmVyJywgJ251bWJlcj8nXSksCiAgICAgICdhcHBlbmQnOiBmbihmdW5jdGlvbiAobGlzdCwgLi4uaXRlbXMpIHsKICAgICAgICAgIHJldHVybiBsaXN0LmNvbmNhdChpdGVtcyk7CiAgICAgIH0sIFsnbGlzdCcsICdhbnk/J10pLAogICAgICAnY29uY2F0ZW5hdGUnOiBmbihmdW5jdGlvbiAoLi4uYXJncykgewogICAgICAgICAgcmV0dXJuIGFyZ3MucmVkdWNlKChyZXN1bHQsIGFyZykgPT4gewogICAgICAgICAgICAgIHJldHVybiByZXN1bHQuY29uY2F0KGFyZyk7CiAgICAgICAgICB9LCBbXSk7CiAgICAgIH0sIFsnYW55J10pLAogICAgICAnaW5zZXJ0IGJlZm9yZSc6IGZuKGZ1bmN0aW9uIChsaXN0LCBwb3NpdGlvbiwgbmV3SXRlbSkgewogICAgICAgICAgcmV0dXJuIGxpc3Quc2xpY2UoMCwgcG9zaXRpb24gLSAxKS5jb25jYXQoW25ld0l0ZW1dLCBsaXN0LnNsaWNlKHBvc2l0aW9uIC0gMSkpOwogICAgICB9LCBbJ2xpc3QnLCAnbnVtYmVyJywgJ2FueT8nXSksCiAgICAgICdyZW1vdmUnOiBmbihmdW5jdGlvbiAobGlzdCwgcG9zaXRpb24pIHsKICAgICAgICAgIHJldHVybiBsaXN0LnNsaWNlKDAsIHBvc2l0aW9uIC0gMSkuY29uY2F0KGxpc3Quc2xpY2UocG9zaXRpb24pKTsKICAgICAgfSwgWydsaXN0JywgJ251bWJlciddKSwKICAgICAgJ3JldmVyc2UnOiBmbihmdW5jdGlvbiAobGlzdCkgewogICAgICAgICAgcmV0dXJuIGxpc3Quc2xpY2UoKS5yZXZlcnNlKCk7CiAgICAgIH0sIFsnbGlzdCddKSwKICAgICAgJ2luZGV4IG9mJzogZm4oZnVuY3Rpb24gKGxpc3QsIG1hdGNoKSB7CiAgICAgICAgICByZXR1cm4gbGlzdC5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgZWxlbWVudCwgaW5kZXgpIHsKICAgICAgICAgICAgICBpZiAobWF0Y2hlcyhlbGVtZW50LCBtYXRjaCkpIHsKICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5kZXggKyAxKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgIH0sIFtdKTsKICAgICAgfSwgWydsaXN0JywgJ2FueSddKSwKICAgICAgJ3VuaW9uJzogZm4oZnVuY3Rpb24gKC4uLl9saXN0cykgewogICAgICAgICAgdGhyb3cgbm90SW1wbGVtZW50ZWQoJ3VuaW9uJyk7CiAgICAgIH0sIFsnbGlzdCddKSwKICAgICAgJ2Rpc3RpbmN0IHZhbHVlcyc6IGZuKGZ1bmN0aW9uIChfbGlzdCkgewogICAgICAgICAgdGhyb3cgbm90SW1wbGVtZW50ZWQoJ2Rpc3RpbmN0IHZhbHVlcycpOwogICAgICB9LCBbJ2xpc3QnXSksCiAgICAgICdmbGF0dGVuJzogZm4oZnVuY3Rpb24gKGxpc3QpIHsKICAgICAgICAgIHJldHVybiBmbGF0dGVuKGxpc3QpOwogICAgICB9LCBbJ2xpc3QnXSksCiAgICAgICdwcm9kdWN0JzogbGlzdEZuKGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBsaXN0LnJlZHVjZSgocmVzdWx0LCBuKSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIG47CiAgICAgICAgICB9LCAxKTsKICAgICAgfSwgJ251bWJlcicpLAogICAgICAnbWVkaWFuJzogbGlzdEZuKGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBtZWRpYW4obGlzdCk7CiAgICAgIH0sICdudW1iZXInKSwKICAgICAgJ3N0ZGRldic6IGxpc3RGbihmdW5jdGlvbiAobGlzdCkgewogICAgICAgICAgaWYgKGxpc3QubGVuZ3RoIDwgMikgewogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHN0ZGRldihsaXN0KTsKICAgICAgfSwgJ251bWJlcicpLAogICAgICAnbW9kZSc6IGxpc3RGbihmdW5jdGlvbiAobGlzdCkgewogICAgICAgICAgcmV0dXJuIG1vZGUobGlzdCk7CiAgICAgIH0sICdudW1iZXInKSwKICAgICAgLy8gMTAuMy40LjUgTnVtZXJpYyBmdW5jdGlvbnMKICAgICAgJ2RlY2ltYWwnOiBmbihmdW5jdGlvbiAobiwgc2NhbGUpIHsKICAgICAgICAgIGlmICghc2NhbGUpIHsKICAgICAgICAgICAgICByZXR1cm4gcm91bmQkMShuKTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IG9mZnNldCA9IE1hdGgucG93KDEwLCBzY2FsZSk7CiAgICAgICAgICByZXR1cm4gcm91bmQkMShuICogb2Zmc2V0KSAvIChvZmZzZXQpOwogICAgICB9LCBbJ251bWJlcicsICdudW1iZXInXSksCiAgICAgICdmbG9vcic6IGZuKGZ1bmN0aW9uIChuKSB7CiAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihuKTsKICAgICAgfSwgWydudW1iZXInXSksCiAgICAgICdjZWlsaW5nJzogZm4oZnVuY3Rpb24gKG4pIHsKICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobikgKyAwOwogICAgICB9LCBbJ251bWJlciddKSwKICAgICAgJ2Ficyc6IGZuKGZ1bmN0aW9uIChuKSB7CiAgICAgICAgICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gTWF0aC5hYnMobik7CiAgICAgIH0sIFsnbnVtYmVyJ10pLAogICAgICAnbW9kdWxvJzogZm4oZnVuY3Rpb24gKGRpdmlkZW5kLCBkaXZpc29yKSB7CiAgICAgICAgICBpZiAoIWRpdmlzb3IpIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGFkanVzdCA9IDEwMDAwMDAwMDA7CiAgICAgICAgICAvLyBjZi4gaHR0cHM6Ly9kdXN0aW5wZmlzdGVyLmdpdGh1Yi5pby8yMDE3LzA5LzAyL2pzLXdoYXRzLXdyb25nLXdpdGgtbW9kdWxvLwogICAgICAgICAgLy8KICAgICAgICAgIC8vIG5lZWQgdG8gcm91bmQgaGVyZSBhcyB1c2luZyB0aGlzIGN1c3RvbSBtb2R1bG8KICAgICAgICAgIC8vIHZhcmlhbnQgaXMgcHJvbmUgdG8gcm91bmRpbmcgZXJyb3JzCiAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoZGl2aWRlbmQgJSBkaXZpc29yICsgZGl2aXNvcikgJSBkaXZpc29yICogYWRqdXN0KSAvIGFkanVzdDsKICAgICAgfSwgWydudW1iZXInLCAnbnVtYmVyJ10pLAogICAgICAnc3FydCc6IGZuKGZ1bmN0aW9uIChudW1iZXIpIHsKICAgICAgICAgIGlmIChudW1iZXIgPCAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KG51bWJlcik7CiAgICAgIH0sIFsnbnVtYmVyJ10pLAogICAgICAnbG9nJzogZm4oZnVuY3Rpb24gKG51bWJlcikgewogICAgICAgICAgaWYgKG51bWJlciA8PSAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gTWF0aC5sb2cobnVtYmVyKTsKICAgICAgfSwgWydudW1iZXInXSksCiAgICAgICdleHAnOiBmbihmdW5jdGlvbiAobnVtYmVyKSB7CiAgICAgICAgICByZXR1cm4gTWF0aC5leHAobnVtYmVyKTsKICAgICAgfSwgWydudW1iZXInXSksCiAgICAgICdvZGQnOiBmbihmdW5jdGlvbiAobnVtYmVyKSB7CiAgICAgICAgICByZXR1cm4gTWF0aC5hYnMobnVtYmVyKSAlIDIgPT09IDE7CiAgICAgIH0sIFsnbnVtYmVyJ10pLAogICAgICAnZXZlbic6IGZuKGZ1bmN0aW9uIChudW1iZXIpIHsKICAgICAgICAgIHJldHVybiBNYXRoLmFicyhudW1iZXIpICUgMiA9PT0gMDsKICAgICAgfSwgWydudW1iZXInXSksCiAgICAgIC8vIDEwLjMuNC42IERhdGUgYW5kIHRpbWUgZnVuY3Rpb25zCiAgICAgICdpcyc6IGZuKGZ1bmN0aW9uICh2YWx1ZTEsIHZhbHVlMikgewogICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZTEgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiB2YWx1ZTIgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGVxdWFscyh2YWx1ZTEsIHZhbHVlMik7CiAgICAgIH0sIFsnYW55PycsICdhbnk/J10pLAogICAgICAvLyAxMC4zLjQuNyBSYW5nZSBGdW5jdGlvbnMKICAgICAgJ2JlZm9yZSc6IGZuKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICByZXR1cm4gYmVmb3JlKGEsIGIpOwogICAgICB9LCBbJ2FueScsICdhbnknXSksCiAgICAgICdhZnRlcic6IGZuKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICByZXR1cm4gYmVmb3JlKGIsIGEpOwogICAgICB9LCBbJ2FueScsICdhbnknXSksCiAgICAgICdtZWV0cyc6IGZuKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICByZXR1cm4gbWVldHMoYSwgYik7CiAgICAgIH0sIFsncmFuZ2UnLCAncmFuZ2UnXSksCiAgICAgICdtZXQgYnknOiBmbihmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgcmV0dXJuIG1lZXRzKGIsIGEpOwogICAgICB9LCBbJ3JhbmdlJywgJ3JhbmdlJ10pLAogICAgICAnb3ZlcmxhcHMnOiBmbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aHJvdyBub3RJbXBsZW1lbnRlZCgnb3ZlcmxhcHMnKTsKICAgICAgfSwgWydhbnk/J10pLAogICAgICAnb3ZlcmxhcHMgYmVmb3JlJzogZm4oZnVuY3Rpb24gKCkgewogICAgICAgICAgdGhyb3cgbm90SW1wbGVtZW50ZWQoJ292ZXJsYXBzIGJlZm9yZScpOwogICAgICB9LCBbJ2FueT8nXSksCiAgICAgICdvdmVybGFwcyBhZnRlcic6IGZuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdvdmVybGFwcyBhZnRlcicpOwogICAgICB9LCBbJ2FueT8nXSksCiAgICAgICdmaW5pc2hlcyc6IGZuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdmaW5pc2hlcycpOwogICAgICB9LCBbJ2FueT8nXSksCiAgICAgICdmaW5pc2hlZCBieSc6IGZuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdmaW5pc2hlZCBieScpOwogICAgICB9LCBbJ2FueT8nXSksCiAgICAgICdpbmNsdWRlcyc6IGZuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdpbmNsdWRlcycpOwogICAgICB9LCBbJ2FueT8nXSksCiAgICAgICdkdXJpbmcnOiBmbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aHJvdyBub3RJbXBsZW1lbnRlZCgnZHVyaW5nJyk7CiAgICAgIH0sIFsnYW55PyddKSwKICAgICAgJ3N0YXJ0cyc6IGZuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdzdGFydHMnKTsKICAgICAgfSwgWydhbnk/J10pLAogICAgICAnc3RhcnRlZCBieSc6IGZuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdzdGFydGVkIGJ5Jyk7CiAgICAgIH0sIFsnYW55PyddKSwKICAgICAgJ2NvaW5jaWRlcyc6IGZuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdjb2luY2lkZXMnKTsKICAgICAgfSwgWydhbnk/J10pLAogICAgICAvLyAxMC4zLjQuOCBUZW1wb3JhbCBidWlsdC1pbiBmdW5jdGlvbnMKICAgICAgJ2RheSBvZiB5ZWFyJzogZm4oZnVuY3Rpb24gKCkgewogICAgICAgICAgdGhyb3cgbm90SW1wbGVtZW50ZWQoJ2RheSBvZiB5ZWFyJyk7CiAgICAgIH0sIFsnYW55PyddKSwKICAgICAgJ2RheSBvZiB3ZWVrJzogZm4oZnVuY3Rpb24gKCkgewogICAgICAgICAgdGhyb3cgbm90SW1wbGVtZW50ZWQoJ2RheSBvZiB3ZWVrJyk7CiAgICAgIH0sIFsnYW55PyddKSwKICAgICAgJ21vbnRoIG9mIHllYXInOiBmbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aHJvdyBub3RJbXBsZW1lbnRlZCgnbW9udGggb2YgeWVhcicpOwogICAgICB9LCBbJ2FueT8nXSksCiAgICAgICd3ZWVrIG9mIHllYXInOiBmbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aHJvdyBub3RJbXBsZW1lbnRlZCgnd2VlayBvZiB5ZWFyJyk7CiAgICAgIH0sIFsnYW55PyddKSwKICAgICAgLy8gMTAuMy40LjkgU29ydAogICAgICAnc29ydCc6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdzb3J0Jyk7CiAgICAgIH0sCiAgICAgIC8vIDEwLjMuNC4xMCBDb250ZXh0IGZ1bmN0aW9uCiAgICAgICdnZXQgdmFsdWUnOiBmbihmdW5jdGlvbiAobSwga2V5KSB7CiAgICAgICAgICByZXR1cm4gZ2V0RnJvbUNvbnRleHQoa2V5LCBtKTsKICAgICAgfSwgWydjb250ZXh0JywgJ3N0cmluZyddKSwKICAgICAgJ2dldCBlbnRyaWVzJzogZm4oZnVuY3Rpb24gKG0pIHsKICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtKSkgewogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG0pLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoeyBrZXksIHZhbHVlIH0pKTsKICAgICAgfSwgWydjb250ZXh0J10pLAogICAgICAnY29udGV4dCc6IGxpc3RGbihmdW5jdGlvbiAoX2NvbnRleHRzKSB7CiAgICAgICAgICB0aHJvdyBub3RJbXBsZW1lbnRlZCgnY29udGV4dCcpOwogICAgICB9LCAnY29udGV4dCcpLAogICAgICAnY29udGV4dCBtZXJnZSc6IGxpc3RGbihmdW5jdGlvbiAoX2NvbnRleHRzKSB7CiAgICAgICAgICB0aHJvdyBub3RJbXBsZW1lbnRlZCgnY29udGV4dCBtZXJnZScpOwogICAgICB9LCAnY29udGV4dCcpLAogICAgICAnY29udGV4dCBwdXQnOiBmbihmdW5jdGlvbiAoX2NvbnRleHQsIF9rZXlzLCBfdmFsdWUpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdjb250ZXh0IHB1dCcpOwogICAgICB9LCBbJ2NvbnRleHQnLCAnbGlzdCcsICdhbnknXSkKICB9OwogIGZ1bmN0aW9uIG1hdGNoZXMoYSwgYikgewogICAgICByZXR1cm4gYSA9PT0gYjsKICB9CiAgY29uc3QgRkFMU0UgPSB7fTsKICBmdW5jdGlvbiBjcmVhdGVBcmdUZXN0ZXIoYXJnKSB7CiAgICAgIGNvbnN0IG9wdGlvbmFsID0gYXJnLmVuZHNXaXRoKCc/Jyk7CiAgICAgIGNvbnN0IHR5cGUgPSBvcHRpb25hbCA/IGFyZy5zdWJzdHJpbmcoMCwgYXJnLmxlbmd0aCAtIDEpIDogYXJnOwogICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikgewogICAgICAgICAgY29uc3QgYXJyID0gQXJyYXkuaXNBcnJheShvYmopOwogICAgICAgICAgaWYgKHR5cGUgPT09ICdsaXN0JykgewogICAgICAgICAgICAgIGlmIChhcnIgfHwgb3B0aW9uYWwgJiYgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgIC8vIGltcGxpY2l0IGNvbnZlcnNpb24gb2JqID0+IFsgb2JqIF0KICAgICAgICAgICAgICAgICAgcmV0dXJuIFtvYmpdOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlICE9PSAnYW55JyAmJiBhcnIgJiYgb2JqLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgIC8vIGltcGxpY2l0IGNvbnZlcnNpb24gWyBvYmogXSA9PiBvYmoKICAgICAgICAgICAgICBvYmogPSBvYmpbMF07CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHlwZSA9PT0gJ3JhbmdlJykgewogICAgICAgICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBSYW5nZSA/IG9iaiA6IEZBTFNFOwogICAgICAgICAgfQogICAgICAgICAgY29uc3Qgb2JqVHlwZSA9IGdldFR5cGUob2JqKTsKICAgICAgICAgIGlmIChvYmpUeXBlID09PSAnbmlsJykgewogICAgICAgICAgICAgIHJldHVybiAob3B0aW9uYWwgPyBvYmogOiBGQUxTRSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2FueScgfHwgdHlwZSA9PT0gb2JqVHlwZSkgewogICAgICAgICAgICAgIHJldHVybiBvYmo7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdHlwZUNhc3Qob2JqLCB0eXBlKSB8fCBGQUxTRTsKICAgICAgfTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlQXJnc1ZhbGlkYXRvcihhcmdEZWZpbml0aW9ucykgewogICAgICBjb25zdCB0ZXN0cyA9IGFyZ0RlZmluaXRpb25zLm1hcChjcmVhdGVBcmdUZXN0ZXIpOwogICAgICByZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHsKICAgICAgICAgIHdoaWxlIChhcmdzLmxlbmd0aCA8IGFyZ0RlZmluaXRpb25zLmxlbmd0aCkgewogICAgICAgICAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGFyZ3MucmVkdWNlKChyZXN1bHQsIGFyZywgaW5kZXgpID0+IHsKICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb25zdCB0ZXN0ID0gdGVzdHNbaW5kZXhdOwogICAgICAgICAgICAgIGNvbnN0IGNvbnZlcnNpb24gPSB0ZXN0ID8gdGVzdChhcmcpIDogYXJnOwogICAgICAgICAgICAgIGlmIChjb252ZXJzaW9uID09PSBGQUxTRSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbnZlcnNpb24pOwogICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICB9LCBbXSk7CiAgICAgIH07CiAgfQogIC8qKgogICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuRGVmaW5pdGlvbgogICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlCiAgICogQHBhcmFtIHtzdHJpbmdbXX0gW3BhcmFtZXRlck5hbWVzXQogICAqCiAgICogQHJldHVybiB7RnVuY3Rpb259CiAgICovCiAgZnVuY3Rpb24gbGlzdEZuKGZuRGVmaW5pdGlvbiwgdHlwZSwgcGFyYW1ldGVyTmFtZXMgPSBudWxsKSB7CiAgICAgIGNvbnN0IHRlc3RlciA9IGNyZWF0ZUFyZ1Rlc3Rlcih0eXBlKTsKICAgICAgY29uc3Qgd3JhcHBlZEZuID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHsKICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgLy8gdW53cmFwIGZpcnN0IGFyZwogICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnc1swXSkgJiYgYXJncy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgICAgICBhcmdzID0gYXJnc1swXTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghYXJncy5ldmVyeShhcmcgPT4gdGVzdGVyKGFyZykgIT09IEZBTFNFKSkgewogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZuRGVmaW5pdGlvbihhcmdzKTsKICAgICAgfTsKICAgICAgd3JhcHBlZEZuLiRhcmdzID0gcGFyYW1ldGVyTmFtZXMgfHwgcGFyc2VQYXJhbWV0ZXJOYW1lcyhmbkRlZmluaXRpb24pOwogICAgICByZXR1cm4gd3JhcHBlZEZuOwogIH0KICAvKioKICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbkRlZmluaXRpb24KICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBhcmdEZWZpbml0aW9ucwogICAqIEBwYXJhbSB7c3RyaW5nW119IFtwYXJhbWV0ZXJOYW1lc10KICAgKgogICAqIEByZXR1cm4ge0Z1bmN0aW9ufQogICAqLwogIGZ1bmN0aW9uIGZuKGZuRGVmaW5pdGlvbiwgYXJnRGVmaW5pdGlvbnMsIHBhcmFtZXRlck5hbWVzID0gbnVsbCkgewogICAgICBjb25zdCBjaGVja0FyZ3MgPSBjcmVhdGVBcmdzVmFsaWRhdG9yKGFyZ0RlZmluaXRpb25zKTsKICAgICAgcGFyYW1ldGVyTmFtZXMgPSBwYXJhbWV0ZXJOYW1lcyB8fCBwYXJzZVBhcmFtZXRlck5hbWVzKGZuRGVmaW5pdGlvbik7CiAgICAgIGNvbnN0IHdyYXBwZWRGbiA9IGZ1bmN0aW9uICguLi5hcmdzKSB7CiAgICAgICAgICBjb25zdCBjb252ZXJ0ZWRBcmdzID0gY2hlY2tBcmdzKGFyZ3MpOwogICAgICAgICAgaWYgKCFjb252ZXJ0ZWRBcmdzKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZm5EZWZpbml0aW9uKC4uLmNvbnZlcnRlZEFyZ3MpOwogICAgICB9OwogICAgICB3cmFwcGVkRm4uJGFyZ3MgPSBwYXJhbWV0ZXJOYW1lczsKICAgICAgcmV0dXJuIHdyYXBwZWRGbjsKICB9CiAgZnVuY3Rpb24gbWVldHMoYSwgYikgewogICAgICByZXR1cm4gWwogICAgICAgICAgKGEuZW5kID09PSBiLnN0YXJ0KSwKICAgICAgICAgIChhWydlbmQgaW5jbHVkZWQnXSA9PT0gdHJ1ZSksCiAgICAgICAgICAoYlsnc3RhcnQgaW5jbHVkZWQnXSA9PT0gdHJ1ZSkKICAgICAgXS5ldmVyeSh2ID0+IHYpOwogIH0KICBmdW5jdGlvbiBiZWZvcmUoYSwgYikgewogICAgICBpZiAoYSBpbnN0YW5jZW9mIFJhbmdlICYmIGIgaW5zdGFuY2VvZiBSYW5nZSkgewogICAgICAgICAgcmV0dXJuIChhLmVuZCA8IGIuc3RhcnQgfHwgKCFhWydlbmQgaW5jbHVkZWQnXSB8fCAhYlsnc3RhcnQgaW5jbHVkZWQnXSkgJiYgYS5lbmQgPT0gYi5zdGFydCk7CiAgICAgIH0KICAgICAgaWYgKGEgaW5zdGFuY2VvZiBSYW5nZSkgewogICAgICAgICAgcmV0dXJuIChhLmVuZCA8IGIgfHwgKCFhWydlbmQgaW5jbHVkZWQnXSAmJiBhLmVuZCA9PT0gYikpOwogICAgICB9CiAgICAgIGlmIChiIGluc3RhbmNlb2YgUmFuZ2UpIHsKICAgICAgICAgIHJldHVybiAoYi5zdGFydCA+IGEgfHwgKCFiWydzdGFydCBpbmNsdWRlZCddICYmIGIuc3RhcnQgPT09IGEpKTsKICAgICAgfQogICAgICByZXR1cm4gYSA8IGI7CiAgfQogIGZ1bmN0aW9uIHN1bShsaXN0KSB7CiAgICAgIHJldHVybiBsaXN0LnJlZHVjZSgoc3VtLCBlbCkgPT4gc3VtID09PSBudWxsID8gZWwgOiBzdW0gKyBlbCwgbnVsbCk7CiAgfQogIGZ1bmN0aW9uIGZsYXR0ZW4oW3gsIC4uLnhzXSkgewogICAgICByZXR1cm4gKHggIT09IHVuZGVmaW5lZAogICAgICAgICAgPyBbLi4uQXJyYXkuaXNBcnJheSh4KSA/IGZsYXR0ZW4oeCkgOiBbeF0sIC4uLmZsYXR0ZW4oeHMpXQogICAgICAgICAgOiBbXSk7CiAgfQogIGZ1bmN0aW9uIHRvS2V5U3RyaW5nKGtleSkgewogICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgL1xXLy50ZXN0KGtleSkpIHsKICAgICAgICAgIHJldHVybiB0b1N0cmluZyhrZXksIHRydWUpOwogICAgICB9CiAgICAgIHJldHVybiBrZXk7CiAgfQogIGZ1bmN0aW9uIHRvRGVlcFN0cmluZyhvYmopIHsKICAgICAgcmV0dXJuIHRvU3RyaW5nKG9iaiwgdHJ1ZSk7CiAgfQogIGZ1bmN0aW9uIGVzY2FwZVN0cihzdHIpIHsKICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oInxcXCkvZywgJ1xcJDEnKTsKICB9CiAgZnVuY3Rpb24gdG9TdHJpbmcob2JqLCB3cmFwID0gZmFsc2UpIHsKICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kOwogICAgICBjb25zdCB0eXBlID0gZ2V0VHlwZShvYmopOwogICAgICBpZiAodHlwZSA9PT0gJ25pbCcpIHsKICAgICAgICAgIHJldHVybiAnbnVsbCc7CiAgICAgIH0KICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICByZXR1cm4gd3JhcCA/IGAiJHtlc2NhcGVTdHIob2JqKX0iYCA6IG9iajsKICAgICAgfQogICAgICBpZiAodHlwZSA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGUgPT09ICdudW1iZXInKSB7CiAgICAgICAgICByZXR1cm4gU3RyaW5nKG9iaik7CiAgICAgIH0KICAgICAgaWYgKHR5cGUgPT09ICdsaXN0JykgewogICAgICAgICAgcmV0dXJuICdbJyArIG9iai5tYXAodG9EZWVwU3RyaW5nKS5qb2luKCcsICcpICsgJ10nOwogICAgICB9CiAgICAgIGlmICh0eXBlID09PSAnY29udGV4dCcpIHsKICAgICAgICAgIHJldHVybiAneycgKyBPYmplY3QuZW50cmllcyhvYmopLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuIHRvS2V5U3RyaW5nKGtleSkgKyAnOiAnICsgdG9EZWVwU3RyaW5nKHZhbHVlKTsKICAgICAgICAgIH0pLmpvaW4oJywgJykgKyAnfSc7CiAgICAgIH0KICAgICAgaWYgKHR5cGUgPT09ICdkdXJhdGlvbicpIHsKICAgICAgICAgIHJldHVybiBvYmouc2hpZnRUbygneWVhcnMnLCAnbW9udGhzJywgJ2RheXMnLCAnaG91cnMnLCAnbWludXRlcycsICdzZWNvbmRzJykubm9ybWFsaXplKCkudG9JU08oKTsKICAgICAgfQogICAgICBpZiAodHlwZSA9PT0gJ2RhdGUgdGltZScpIHsKICAgICAgICAgIGlmICgoX2EgPSBvYmouem9uZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnpvbmVOYW1lKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG9iai50b0lTTyh7IHN1cHByZXNzTWlsbGlzZWNvbmRzOiB0cnVlLCBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSArICdAJyArICgoX2IgPSBvYmouem9uZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnpvbmVOYW1lKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBvYmoudG9JU08oeyBzdXBwcmVzc01pbGxpc2Vjb25kczogdHJ1ZSB9KTsKICAgICAgfQogICAgICBpZiAodHlwZSA9PT0gJ2RhdGUnKSB7CiAgICAgICAgICByZXR1cm4gb2JqLnRvSVNPRGF0ZSgpOwogICAgICB9CiAgICAgIGlmICh0eXBlID09PSAncmFuZ2UnKSB7CiAgICAgICAgICByZXR1cm4gJzxyYW5nZT4nOwogICAgICB9CiAgICAgIGlmICh0eXBlID09PSAndGltZScpIHsKICAgICAgICAgIGlmICgoX2MgPSBvYmouem9uZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnpvbmVOYW1lKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG9iai50b0lTT1RpbWUoeyBzdXBwcmVzc01pbGxpc2Vjb25kczogdHJ1ZSwgaW5jbHVkZU9mZnNldDogZmFsc2UgfSkgKyAnQCcgKyAoKF9kID0gb2JqLnpvbmUpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC56b25lTmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gb2JqLnRvSVNPVGltZSh7IHN1cHByZXNzTWlsbGlzZWNvbmRzOiB0cnVlIH0pOwogICAgICB9CiAgICAgIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICByZXR1cm4gJzxmdW5jdGlvbj4nOwogICAgICB9CiAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdzdHJpbmcoJyArIHR5cGUgKyAnKScpOwogIH0KICBmdW5jdGlvbiBjb3VudFN5bWJvbHMoc3RyKSB7CiAgICAgIC8vIGNmLiBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlCiAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvW1x1RDgwMC1cdURCRkZdW1x1REMwMC1cdURGRkZdL2csICdfJykubGVuZ3RoOwogIH0KICBmdW5jdGlvbiByb3VuZCQxKG4pIHsKICAgICAgY29uc3QgaW50ZWdyYWwgPSBNYXRoLnRydW5jKG4pOwogICAgICBpZiAobiAtIGludGVncmFsID4gLjUpIHsKICAgICAgICAgIHJldHVybiBpbnRlZ3JhbCArIDE7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgICByZXR1cm4gaW50ZWdyYWw7CiAgICAgIH0KICB9CiAgLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MzU3NzE1OQogIGZ1bmN0aW9uIHN0ZGRldihhcnJheSkgewogICAgICBjb25zdCBuID0gYXJyYXkubGVuZ3RoOwogICAgICBjb25zdCBtZWFuID0gYXJyYXkucmVkdWNlKChhLCBiKSA9PiBhICsgYikgLyBuOwogICAgICByZXR1cm4gTWF0aC5zcXJ0KGFycmF5Lm1hcCh4ID0+IE1hdGgucG93KHggLSBtZWFuLCAyKSkucmVkdWNlKChhLCBiKSA9PiBhICsgYikgLyAobiAtIDEpKTsKICB9CiAgZnVuY3Rpb24gbWVkaWFuKGFycmF5KSB7CiAgICAgIGNvbnN0IG4gPSBhcnJheS5sZW5ndGg7CiAgICAgIGNvbnN0IHNvcnRlZCA9IGFycmF5LnNsaWNlKCkuc29ydCgpOwogICAgICBjb25zdCBtaWQgPSBuIC8gMiAtIDE7CiAgICAgIGNvbnN0IGluZGV4ID0gTWF0aC5jZWlsKG1pZCk7CiAgICAgIC8vIGV2ZW4KICAgICAgaWYgKG1pZCA9PT0gaW5kZXgpIHsKICAgICAgICAgIHJldHVybiAoc29ydGVkW2luZGV4XSArIHNvcnRlZFtpbmRleCArIDFdKSAvIDI7CiAgICAgIH0KICAgICAgLy8gdW5ldmVuCiAgICAgIHJldHVybiBzb3J0ZWRbaW5kZXhdOwogIH0KICBmdW5jdGlvbiBtb2RlKGFycmF5KSB7CiAgICAgIGlmIChhcnJheS5sZW5ndGggPCAyKSB7CiAgICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH0KICAgICAgY29uc3QgYnVja2V0cyA9IHt9OwogICAgICBmb3IgKGNvbnN0IG4gb2YgYXJyYXkpIHsKICAgICAgICAgIGJ1Y2tldHNbbl0gPSAoYnVja2V0c1tuXSB8fCAwKSArIDE7CiAgICAgIH0KICAgICAgY29uc3Qgc29ydGVkID0gT2JqZWN0LmVudHJpZXMoYnVja2V0cykuc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pOwogICAgICByZXR1cm4gc29ydGVkLmZpbHRlcihzID0+IHNbMV0gPT09IHNvcnRlZFswXVsxXSkubWFwKGUgPT4gK2VbMF0pOwogIH0KICBmdW5jdGlvbiBpZlZhbGlkKG8pIHsKICAgICAgcmV0dXJuIG8uaXNWYWxpZCA/IG8gOiBudWxsOwogIH0KCiAgZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9ucyhleHByZXNzaW9uLCBjb250ZXh0ID0ge30pIHsKICAgICAgcmV0dXJuIHBhcnNlci5jb25maWd1cmUoewogICAgICAgICAgdG9wOiAnRXhwcmVzc2lvbnMnLAogICAgICAgICAgY29udGV4dFRyYWNrZXI6IHRyYWNrVmFyaWFibGVzKGNvbnRleHQpCiAgICAgIH0pLnBhcnNlKGV4cHJlc3Npb24pOwogIH0KICBmdW5jdGlvbiBwYXJzZVVuYXJ5VGVzdHMoZXhwcmVzc2lvbiwgY29udGV4dCA9IHt9KSB7CiAgICAgIHJldHVybiBwYXJzZXIuY29uZmlndXJlKHsKICAgICAgICAgIHRvcDogJ1VuYXJ5VGVzdHMnLAogICAgICAgICAgY29udGV4dFRyYWNrZXI6IHRyYWNrVmFyaWFibGVzKGNvbnRleHQpCiAgICAgIH0pLnBhcnNlKGV4cHJlc3Npb24pOwogIH0KCiAgY2xhc3MgSW50ZXJwcmV0ZXIgewogICAgICBfYnVpbGRFeGVjdXRpb25UcmVlKHRyZWUsIGlucHV0KSB7CiAgICAgICAgICBjb25zdCByb290ID0geyBhcmdzOiBbXSwgbm9kZUlucHV0OiBpbnB1dCB9OwogICAgICAgICAgY29uc3Qgc3RhY2sgPSBbcm9vdF07CiAgICAgICAgICB0cmVlLml0ZXJhdGUoewogICAgICAgICAgICAgIGVudGVyKG5vZGVSZWYpIHsKICAgICAgICAgICAgICAgICAgY29uc3QgeyBpc0Vycm9yLCBpc1NraXBwZWQgfSA9IG5vZGVSZWYudHlwZTsKICAgICAgICAgICAgICAgICAgY29uc3QgeyBmcm9tLCB0byB9ID0gbm9kZVJlZjsKICAgICAgICAgICAgICAgICAgaWYgKGlzRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU3RhdGVtZW50IHVucGFyc2VhYmxlIGF0IFske2Zyb219LCAke3RvfV1gKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoaXNTa2lwcGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgY29uc3Qgbm9kZUlucHV0ID0gaW5wdXQuc2xpY2UoZnJvbSwgdG8pOwogICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgIG5vZGVJbnB1dCwKICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtdCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbGVhdmUobm9kZVJlZikgewogICAgICAgICAgICAgICAgICBpZiAobm9kZVJlZi50eXBlLmlzU2tpcHBlZCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbm9kZUlucHV0LCBhcmdzIH0gPSBzdGFjay5wb3AoKTsKICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07CiAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cHIgPSBldmFsTm9kZShub2RlUmVmLCBub2RlSW5wdXQsIGFyZ3MpOwogICAgICAgICAgICAgICAgICBwYXJlbnQuYXJncy5wdXNoKGV4cHIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIHJvb3QuYXJnc1tyb290LmFyZ3MubGVuZ3RoIC0gMV07CiAgICAgIH0KICAgICAgZXZhbHVhdGUoZXhwcmVzc2lvbiwgY29udGV4dCA9IHt9KSB7CiAgICAgICAgICBjb25zdCBwYXJzZVRyZWUgPSBwYXJzZUV4cHJlc3Npb25zKGV4cHJlc3Npb24sIGNvbnRleHQpOwogICAgICAgICAgY29uc3Qgcm9vdCA9IHRoaXMuX2J1aWxkRXhlY3V0aW9uVHJlZShwYXJzZVRyZWUsIGV4cHJlc3Npb24pOwogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBwYXJzZVRyZWUsCiAgICAgICAgICAgICAgcm9vdAogICAgICAgICAgfTsKICAgICAgfQogICAgICB1bmFyeVRlc3QoZXhwcmVzc2lvbiwgY29udGV4dCA9IHt9KSB7CiAgICAgICAgICBjb25zdCBwYXJzZVRyZWUgPSBwYXJzZVVuYXJ5VGVzdHMoZXhwcmVzc2lvbiwgY29udGV4dCk7CiAgICAgICAgICBjb25zdCByb290ID0gdGhpcy5fYnVpbGRFeGVjdXRpb25UcmVlKHBhcnNlVHJlZSwgZXhwcmVzc2lvbik7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHBhcnNlVHJlZSwKICAgICAgICAgICAgICByb290CiAgICAgICAgICB9OwogICAgICB9CiAgfQogIGNvbnN0IGludGVycHJldGVyID0gbmV3IEludGVycHJldGVyKCk7CiAgZnVuY3Rpb24gdW5hcnlUZXN0KGV4cHJlc3Npb24sIGNvbnRleHQgPSB7fSkgewogICAgICBjb25zdCB2YWx1ZSA9IGNvbnRleHRbJz8nXSB8fCBudWxsOwogICAgICBjb25zdCB7IHJvb3QgfSA9IGludGVycHJldGVyLnVuYXJ5VGVzdChleHByZXNzaW9uLCBjb250ZXh0KTsKICAgICAgLy8gcm9vdCA9IGZuKGN0eCkgPT4gdGVzdCh2YWwpCiAgICAgIGNvbnN0IHRlc3QgPSByb290KGNvbnRleHQpOwogICAgICByZXR1cm4gdGVzdCh2YWx1ZSk7CiAgfQogIGZ1bmN0aW9uIGV2YWx1YXRlKGV4cHJlc3Npb24sIGNvbnRleHQgPSB7fSkgewogICAgICBjb25zdCB7IHJvb3QgfSA9IGludGVycHJldGVyLmV2YWx1YXRlKGV4cHJlc3Npb24sIGNvbnRleHQpOwogICAgICAvLyByb290ID0gWyBmbihjdHgpIF0KICAgICAgY29uc3QgcmVzdWx0cyA9IHJvb3QoY29udGV4dCk7CiAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgcmV0dXJuIHJlc3VsdHNbMF07CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgfQogIH0KICBmdW5jdGlvbiBldmFsTm9kZShub2RlLCBpbnB1dCwgYXJncykgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgICAgY2FzZSAnQXJpdGhPcCc6IHJldHVybiAoY29udGV4dCkgPT4gewogICAgICAgICAgICAgIGNvbnN0IG51bGxhYmxlID0gKG9wLCB0eXBlcyA9IFsnbnVtYmVyJ10pID0+IChhLCBiKSA9PiB7CiAgICAgICAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBhKGNvbnRleHQpOwogICAgICAgICAgICAgICAgICBjb25zdCByaWdodCA9IGIoY29udGV4dCk7CiAgICAgICAgICAgICAgICAgIGlmIChpc0FycmF5JDEobGVmdCkpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChpc0FycmF5JDEocmlnaHQpKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBjb25zdCBsZWZ0VHlwZSA9IGdldFR5cGUobGVmdCk7CiAgICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0VHlwZSA9IGdldFR5cGUocmlnaHQpOwogICAgICAgICAgICAgICAgICBpZiAobGVmdFR5cGUgIT09IHJpZ2h0VHlwZSB8fAogICAgICAgICAgICAgICAgICAgICAgIXR5cGVzLmluY2x1ZGVzKGxlZnRUeXBlKSkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wKGxlZnQsIHJpZ2h0KTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHN3aXRjaCAoaW5wdXQpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAnKyc6IHJldHVybiBudWxsYWJsZSgoYSwgYikgPT4gYSArIGIsIFsnc3RyaW5nJywgJ251bWJlciddKTsKICAgICAgICAgICAgICAgICAgY2FzZSAnLSc6IHJldHVybiBudWxsYWJsZSgoYSwgYikgPT4gYSAtIGIpOwogICAgICAgICAgICAgICAgICBjYXNlICcqJzogcmV0dXJuIG51bGxhYmxlKChhLCBiKSA9PiBhICogYik7CiAgICAgICAgICAgICAgICAgIGNhc2UgJy8nOiByZXR1cm4gbnVsbGFibGUoKGEsIGIpID0+ICFiID8gbnVsbCA6IGEgLyBiKTsKICAgICAgICAgICAgICAgICAgY2FzZSAnKionOgogICAgICAgICAgICAgICAgICBjYXNlICdeJzogcmV0dXJuIG51bGxhYmxlKChhLCBiKSA9PiBNYXRoLnBvdyhhLCBiKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICAgIGNhc2UgJ0NvbXBhcmVPcCc6IHJldHVybiB0YWcoKCkgPT4gewogICAgICAgICAgICAgIHN3aXRjaCAoaW5wdXQpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAnPic6IHJldHVybiAoYikgPT4gY3JlYXRlUmFuZ2UoYiwgbnVsbCwgZmFsc2UsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgY2FzZSAnPj0nOiByZXR1cm4gKGIpID0+IGNyZWF0ZVJhbmdlKGIsIG51bGwsIHRydWUsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgY2FzZSAnPCc6IHJldHVybiAoYikgPT4gY3JlYXRlUmFuZ2UobnVsbCwgYiwgZmFsc2UsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgY2FzZSAnPD0nOiByZXR1cm4gKGIpID0+IGNyZWF0ZVJhbmdlKG51bGwsIGIsIGZhbHNlLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgY2FzZSAnPSc6IHJldHVybiAoYikgPT4gKGEpID0+IGVxdWFscyhhLCBiKTsKICAgICAgICAgICAgICAgICAgY2FzZSAnIT0nOiByZXR1cm4gKGIpID0+IChhKSA9PiAhZXF1YWxzKGEsIGIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0sIFRlc3QoJ2Jvb2xlYW4nKSk7CiAgICAgICAgICBjYXNlICdXaWxkY2FyZCc6IHJldHVybiAoX2NvbnRleHQpID0+IHRydWU7CiAgICAgICAgICBjYXNlICdudWxsJzogcmV0dXJuIChfY29udGV4dCkgPT4gewogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfTsKICAgICAgICAgIGNhc2UgJ0Rpc2p1bmN0aW9uJzogcmV0dXJuIHRhZygoY29udGV4dCkgPT4gewogICAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBhcmdzWzBdKGNvbnRleHQpOwogICAgICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gYXJnc1syXShjb250ZXh0KTsKICAgICAgICAgICAgICBjb25zdCBtYXRyaXggPSBbCiAgICAgICAgICAgICAgICAgIFt0cnVlLCB0cnVlLCB0cnVlXSwKICAgICAgICAgICAgICAgICAgW3RydWUsIGZhbHNlLCB0cnVlXSwKICAgICAgICAgICAgICAgICAgW3RydWUsIG51bGwsIHRydWVdLAogICAgICAgICAgICAgICAgICBbZmFsc2UsIHRydWUsIHRydWVdLAogICAgICAgICAgICAgICAgICBbZmFsc2UsIGZhbHNlLCBmYWxzZV0sCiAgICAgICAgICAgICAgICAgIFtmYWxzZSwgbnVsbCwgbnVsbF0sCiAgICAgICAgICAgICAgICAgIFtudWxsLCB0cnVlLCB0cnVlXSwKICAgICAgICAgICAgICAgICAgW251bGwsIGZhbHNlLCBudWxsXSwKICAgICAgICAgICAgICAgICAgW251bGwsIG51bGwsIG51bGxdLAogICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgY29uc3QgYSA9IHR5cGVvZiBsZWZ0ID09PSAnYm9vbGVhbicgPyBsZWZ0IDogbnVsbDsKICAgICAgICAgICAgICBjb25zdCBiID0gdHlwZW9mIHJpZ2h0ID09PSAnYm9vbGVhbicgPyByaWdodCA6IG51bGw7CiAgICAgICAgICAgICAgcmV0dXJuIG1hdHJpeC5maW5kKGVsID0+IGVsWzBdID09PSBhICYmIGVsWzFdID09PSBiKVsyXTsKICAgICAgICAgIH0sIFRlc3QoJ2Jvb2xlYW4nKSk7CiAgICAgICAgICBjYXNlICdDb25qdW5jdGlvbic6IHJldHVybiB0YWcoKGNvbnRleHQpID0+IHsKICAgICAgICAgICAgICBjb25zdCBsZWZ0ID0gYXJnc1swXShjb250ZXh0KTsKICAgICAgICAgICAgICBjb25zdCByaWdodCA9IGFyZ3NbMl0oY29udGV4dCk7CiAgICAgICAgICAgICAgY29uc3QgbWF0cml4ID0gWwogICAgICAgICAgICAgICAgICBbdHJ1ZSwgdHJ1ZSwgdHJ1ZV0sCiAgICAgICAgICAgICAgICAgIFt0cnVlLCBmYWxzZSwgZmFsc2VdLAogICAgICAgICAgICAgICAgICBbdHJ1ZSwgbnVsbCwgbnVsbF0sCiAgICAgICAgICAgICAgICAgIFtmYWxzZSwgdHJ1ZSwgZmFsc2VdLAogICAgICAgICAgICAgICAgICBbZmFsc2UsIGZhbHNlLCBmYWxzZV0sCiAgICAgICAgICAgICAgICAgIFtmYWxzZSwgbnVsbCwgZmFsc2VdLAogICAgICAgICAgICAgICAgICBbbnVsbCwgdHJ1ZSwgbnVsbF0sCiAgICAgICAgICAgICAgICAgIFtudWxsLCBmYWxzZSwgZmFsc2VdLAogICAgICAgICAgICAgICAgICBbbnVsbCwgbnVsbCwgbnVsbF0sCiAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICBjb25zdCBhID0gdHlwZW9mIGxlZnQgPT09ICdib29sZWFuJyA/IGxlZnQgOiBudWxsOwogICAgICAgICAgICAgIGNvbnN0IGIgPSB0eXBlb2YgcmlnaHQgPT09ICdib29sZWFuJyA/IHJpZ2h0IDogbnVsbDsKICAgICAgICAgICAgICByZXR1cm4gbWF0cml4LmZpbmQoZWwgPT4gZWxbMF0gPT09IGEgJiYgZWxbMV0gPT09IGIpWzJdOwogICAgICAgICAgfSwgVGVzdCgnYm9vbGVhbicpKTsKICAgICAgICAgIGNhc2UgJ0NvbnRleHQnOiByZXR1cm4gKGNvbnRleHQpID0+IHsKICAgICAgICAgICAgICByZXR1cm4gYXJncy5zbGljZSgxLCAtMSkucmVkdWNlKChvYmosIGFyZykgPT4gewogICAgICAgICAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBhcmcoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0KSwgb2JqKSk7CiAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9iaiksIHsgW2tleV06IHZhbHVlIH0pOwogICAgICAgICAgICAgIH0sIHt9KTsKICAgICAgICAgIH07CiAgICAgICAgICBjYXNlICdGdW5jdGlvbkJvZHknOiByZXR1cm4gYXJnc1swXTsKICAgICAgICAgIGNhc2UgJ0Zvcm1hbFBhcmFtZXRlcnMnOiByZXR1cm4gYXJnczsKICAgICAgICAgIGNhc2UgJ0Zvcm1hbFBhcmFtZXRlcic6IHJldHVybiBhcmdzWzBdOwogICAgICAgICAgY2FzZSAnUGFyYW1ldGVyTmFtZSc6IHJldHVybiBhcmdzLmpvaW4oJyAnKTsKICAgICAgICAgIGNhc2UgJ0Z1bmN0aW9uRGVmaW5pdGlvbic6IHJldHVybiAoY29udGV4dCkgPT4gewogICAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlck5hbWVzID0gYXJnc1syXTsKICAgICAgICAgICAgICBjb25zdCBmbkJvZHkgPSBhcmdzWzRdOwogICAgICAgICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24oKC4uLmFyZ3MpID0+IHsKICAgICAgICAgICAgICAgICAgY29uc3QgZm5Db250ZXh0ID0gcGFyYW1ldGVyTmFtZXMucmVkdWNlKChjb250ZXh0LCBuYW1lLCBpZHgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgIC8vIHN1cHBvcnQgcG9zaXRpb25hbCBwYXJhbWV0ZXJzCiAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0W25hbWVdID0gYXJnc1tpZHhdOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7CiAgICAgICAgICAgICAgICAgIH0sIE9iamVjdC5hc3NpZ24oe30sIGNvbnRleHQpKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuQm9keShmbkNvbnRleHQpOwogICAgICAgICAgICAgIH0sIHBhcmFtZXRlck5hbWVzKTsKICAgICAgICAgIH07CiAgICAgICAgICBjYXNlICdDb250ZXh0RW50cnknOiByZXR1cm4gKGNvbnRleHQpID0+IHsKICAgICAgICAgICAgICBjb25zdCBrZXkgPSB0eXBlb2YgYXJnc1swXSA9PT0gJ2Z1bmN0aW9uJyA/IGFyZ3NbMF0oY29udGV4dCkgOiBhcmdzWzBdOwogICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXJnc1sxXShjb250ZXh0KTsKICAgICAgICAgICAgICByZXR1cm4gW2tleSwgdmFsdWVdOwogICAgICAgICAgfTsKICAgICAgICAgIGNhc2UgJ0tleSc6IHJldHVybiBhcmdzWzBdOwogICAgICAgICAgY2FzZSAnSWRlbnRpZmllcic6IHJldHVybiBpbnB1dDsKICAgICAgICAgIGNhc2UgJ1NwZWNpYWxGdW5jdGlvbk5hbWUnOiByZXR1cm4gKGNvbnRleHQpID0+IGdldEJ1aWx0aW4oaW5wdXQpOwogICAgICAgICAgLy8gcHJlc2VydmUgc3BhY2VzIGluIG5hbWUsIGJ1dCBjb21wYWN0IG11bHRpcGxlCiAgICAgICAgICAvLyBzcGFjZXMgaW50byBvbmUgKHRva2VuKQogICAgICAgICAgY2FzZSAnTmFtZSc6IHJldHVybiBpbnB1dC5yZXBsYWNlKC9cc3syLH0vZywgJyAnKTsKICAgICAgICAgIGNhc2UgJ1ZhcmlhYmxlTmFtZSc6IHJldHVybiAoY29udGV4dCkgPT4gewogICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBhcmdzLmpvaW4oJyAnKTsKICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbHRpbihuYW1lKSB8fCBnZXRGcm9tQ29udGV4dChuYW1lLCBjb250ZXh0KTsKICAgICAgICAgIH07CiAgICAgICAgICBjYXNlICdRdWFsaWZpZWROYW1lJzogcmV0dXJuIChjb250ZXh0KSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MucmVkdWNlKChjb250ZXh0LCBhcmcpID0+IGFyZyhjb250ZXh0KSwgY29udGV4dCk7CiAgICAgICAgICB9OwogICAgICAgICAgY2FzZSAnPyc6IHJldHVybiAoY29udGV4dCkgPT4gZ2V0RnJvbUNvbnRleHQoJz8nLCBjb250ZXh0KTsKICAgICAgICAgIC8vIGV4cHJlc3Npb24KICAgICAgICAgIC8vIGV4cHJlc3Npb24gIi4uIiBleHByZXNzaW9uCiAgICAgICAgICBjYXNlICdJdGVyYXRpb25Db250ZXh0JzogcmV0dXJuIChjb250ZXh0KSA9PiB7CiAgICAgICAgICAgICAgY29uc3QgYSA9IGFyZ3NbMF0oY29udGV4dCk7CiAgICAgICAgICAgICAgY29uc3QgYiA9IGFyZ3NbMV0gJiYgYXJnc1sxXShjb250ZXh0KTsKICAgICAgICAgICAgICByZXR1cm4gYiA/IGNyZWF0ZVJhbmdlKGEsIGIpIDogYTsKICAgICAgICAgIH07CiAgICAgICAgICBjYXNlICdUeXBlJzogcmV0dXJuIGFyZ3NbMF07CiAgICAgICAgICBjYXNlICdJbkV4cHJlc3Npb25zJzogcmV0dXJuIChjb250ZXh0KSA9PiB7CiAgICAgICAgICAgICAgY29uc3QgaXRlcmF0aW9uQ29udGV4dHMgPSBhcmdzLm1hcChjdHggPT4gY3R4KGNvbnRleHQpKTsKICAgICAgICAgICAgICBpZiAoaXRlcmF0aW9uQ29udGV4dHMuc29tZShjdHggPT4gZ2V0VHlwZShjdHgpICE9PSAnbGlzdCcpKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gY2FydGVzaWFuUHJvZHVjdChpdGVyYXRpb25Db250ZXh0cykubWFwKGN0eCA9PiB7CiAgICAgICAgICAgICAgICAgIGlmICghaXNBcnJheSQxKGN0eCkpIHsKICAgICAgICAgICAgICAgICAgICAgIGN0eCA9IFtjdHhdOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0LCAuLi5jdHgpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgfTsKICAgICAgICAgIC8vIE5hbWUga3c8ImluIj4gRXhwcgogICAgICAgICAgY2FzZSAnSW5FeHByZXNzaW9uJzogcmV0dXJuIChjb250ZXh0KSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuIGV4dHJhY3RWYWx1ZShjb250ZXh0LCBhcmdzWzBdLCBhcmdzWzJdKTsKICAgICAgICAgIH07CiAgICAgICAgICBjYXNlICdTcGVjaWFsVHlwZSc6IHRocm93IG5vdEltcGxlbWVudGVkKCdTcGVjaWFsVHlwZScpOwogICAgICAgICAgY2FzZSAnSW5zdGFuY2VPZkV4cHJlc3Npb24nOiByZXR1cm4gdGFnKChjb250ZXh0KSA9PiB7CiAgICAgICAgICAgICAgY29uc3QgYSA9IGFyZ3NbMF0oY29udGV4dCk7CiAgICAgICAgICAgICAgY29uc3QgYiA9IGFyZ3NbM10oY29udGV4dCk7CiAgICAgICAgICAgICAgcmV0dXJuIGEgaW5zdGFuY2VvZiBiOwogICAgICAgICAgfSwgVGVzdCgnYm9vbGVhbicpKTsKICAgICAgICAgIGNhc2UgJ2V2ZXJ5JzogcmV0dXJuIHRhZygoY29udGV4dCkgPT4gewogICAgICAgICAgICAgIHJldHVybiAoX2NvbnRleHRzLCBfY29uZGl0aW9uKSA9PiB7CiAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRzID0gX2NvbnRleHRzKGNvbnRleHQpOwogICAgICAgICAgICAgICAgICBpZiAoZ2V0VHlwZShjb250ZXh0cykgIT09ICdsaXN0JykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHRzOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0cy5ldmVyeShjdHggPT4gaXNUcnV0aHkoX2NvbmRpdGlvbihjdHgpKSk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgIH0sIFRlc3QoJ2Jvb2xlYW4nKSk7CiAgICAgICAgICBjYXNlICdzb21lJzogcmV0dXJuIHRhZygoY29udGV4dCkgPT4gewogICAgICAgICAgICAgIHJldHVybiAoX2NvbnRleHRzLCBfY29uZGl0aW9uKSA9PiB7CiAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRzID0gX2NvbnRleHRzKGNvbnRleHQpOwogICAgICAgICAgICAgICAgICBpZiAoZ2V0VHlwZShjb250ZXh0cykgIT09ICdsaXN0JykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHRzOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0cy5zb21lKGN0eCA9PiBpc1RydXRoeShfY29uZGl0aW9uKGN0eCkpKTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgfSwgVGVzdCgnYm9vbGVhbicpKTsKICAgICAgICAgIGNhc2UgJ051bWVyaWNMaXRlcmFsJzogcmV0dXJuIHRhZygoX2NvbnRleHQpID0+IGlucHV0LmluY2x1ZGVzKCcuJykgPyBwYXJzZUZsb2F0KGlucHV0KSA6IHBhcnNlSW50KGlucHV0KSwgJ251bWJlcicpOwogICAgICAgICAgY2FzZSAnQm9vbGVhbkxpdGVyYWwnOiByZXR1cm4gdGFnKChfY29udGV4dCkgPT4gaW5wdXQgPT09ICd0cnVlJyA/IHRydWUgOiBmYWxzZSwgJ2Jvb2xlYW4nKTsKICAgICAgICAgIGNhc2UgJ1N0cmluZ0xpdGVyYWwnOiByZXR1cm4gdGFnKChfY29udGV4dCkgPT4gcGFyc2VTdHJpbmcoaW5wdXQpLCAnc3RyaW5nJyk7CiAgICAgICAgICBjYXNlICdQb3NpdGlvbmFsUGFyYW1ldGVycyc6IHJldHVybiAoY29udGV4dCkgPT4gYXJncy5tYXAoYXJnID0+IGFyZyhjb250ZXh0KSk7CiAgICAgICAgICBjYXNlICdOYW1lZFBhcmFtZXRlcic6IHJldHVybiAoY29udGV4dCkgPT4gewogICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBhcmdzWzBdOwogICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXJnc1sxXShjb250ZXh0KTsKICAgICAgICAgICAgICByZXR1cm4gW25hbWUsIHZhbHVlXTsKICAgICAgICAgIH07CiAgICAgICAgICBjYXNlICdOYW1lZFBhcmFtZXRlcnMnOiByZXR1cm4gKGNvbnRleHQpID0+IGFyZ3MucmVkdWNlKChhcmdzLCBhcmcpID0+IHsKICAgICAgICAgICAgICBjb25zdCBbbmFtZSwgdmFsdWVdID0gYXJnKGNvbnRleHQpOwogICAgICAgICAgICAgIGFyZ3NbbmFtZV0gPSB2YWx1ZTsKICAgICAgICAgICAgICByZXR1cm4gYXJnczsKICAgICAgICAgIH0sIHt9KTsKICAgICAgICAgIGNhc2UgJ0RhdGVUaW1lQ29uc3RydWN0b3InOiByZXR1cm4gKGNvbnRleHQpID0+IHsKICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbHRpbihpbnB1dCk7CiAgICAgICAgICB9OwogICAgICAgICAgY2FzZSAnRGF0ZVRpbWVMaXRlcmFsJzogcmV0dXJuIChjb250ZXh0KSA9PiB7CiAgICAgICAgICAgICAgLy8gQXRMaXRlcmFsCiAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdzWzBdKGNvbnRleHQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvLyBGdW5jdGlvbkludm9jYXRpb24KICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgY29uc3Qgd3JhcHBlZEZuID0gd3JhcEZ1bmN0aW9uKGFyZ3NbMF0oY29udGV4dCkpOwogICAgICAgICAgICAgICAgICBpZiAoIXdyYXBwZWRGbikgewogICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZXZhbHVhdGUgJHtpbnB1dH06IFRhcmdldCBpcyBub3QgYSBmdW5jdGlvbmApOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRPckFyZ3MgPSBhcmdzWzJdKGNvbnRleHQpOwogICAgICAgICAgICAgICAgICByZXR1cm4gd3JhcHBlZEZuLmludm9rZShjb250ZXh0T3JBcmdzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgY2FzZSAnQXRMaXRlcmFsJzogcmV0dXJuIChjb250ZXh0KSA9PiB7CiAgICAgICAgICAgICAgY29uc3Qgd3JhcHBlZEZuID0gd3JhcEZ1bmN0aW9uKGdldEJ1aWx0aW4oJ0AnKSk7CiAgICAgICAgICAgICAgaWYgKCF3cmFwcGVkRm4pIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZXZhbHVhdGUgJHtpbnB1dH06IFRhcmdldCBpcyBub3QgYSBmdW5jdGlvbmApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gd3JhcHBlZEZuLmludm9rZShbYXJnc1swXShjb250ZXh0KV0pOwogICAgICAgICAgfTsKICAgICAgICAgIGNhc2UgJ0Z1bmN0aW9uSW52b2NhdGlvbic6IHJldHVybiAoY29udGV4dCkgPT4gewogICAgICAgICAgICAgIGNvbnN0IHdyYXBwZWRGbiA9IHdyYXBGdW5jdGlvbihhcmdzWzBdKGNvbnRleHQpKTsKICAgICAgICAgICAgICBpZiAoIXdyYXBwZWRGbikgewogICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBldmFsdWF0ZSAke2lucHV0fTogVGFyZ2V0IGlzIG5vdCBhIGZ1bmN0aW9uYCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRPckFyZ3MgPSBhcmdzWzJdKGNvbnRleHQpOwogICAgICAgICAgICAgIHJldHVybiB3cmFwcGVkRm4uaW52b2tlKGNvbnRleHRPckFyZ3MpOwogICAgICAgICAgfTsKICAgICAgICAgIGNhc2UgJ0lmRXhwcmVzc2lvbic6IHJldHVybiAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGNvbnN0IGlmQ29uZGl0aW9uID0gYXJnc1sxXTsKICAgICAgICAgICAgICBjb25zdCB0aGVuVmFsdWUgPSBhcmdzWzNdOwogICAgICAgICAgICAgIGNvbnN0IGVsc2VWYWx1ZSA9IGFyZ3NbNV07CiAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IGNvYWxlY2Vuc2VUeXBlcyh0aGVuVmFsdWUsIGVsc2VWYWx1ZSk7CiAgICAgICAgICAgICAgcmV0dXJuIHRhZygoY29udGV4dCkgPT4gewogICAgICAgICAgICAgICAgICBpZiAoaXNUcnV0aHkoaWZDb25kaXRpb24oY29udGV4dCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhlblZhbHVlKGNvbnRleHQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsc2VWYWx1ZSA/IGVsc2VWYWx1ZShjb250ZXh0KSA6IG51bGw7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LCB0eXBlKTsKICAgICAgICAgIH0pKCk7CiAgICAgICAgICBjYXNlICdQYXJhbWV0ZXJzJzogcmV0dXJuIGFyZ3MubGVuZ3RoID09PSAzID8gYXJnc1sxXSA6IChfY29udGV4dCkgPT4gW107CiAgICAgICAgICBjYXNlICdDb21wYXJpc29uJzogcmV0dXJuIChjb250ZXh0KSA9PiB7CiAgICAgICAgICAgICAgY29uc3Qgb3BlcmF0b3IgPSBhcmdzWzFdOwogICAgICAgICAgICAgIC8vIGV4cHJlc3Npb24gIWNvbXBhcmUga3c8ImluIj4gUG9zaXRpdmVVbmFyeVRlc3QgfAogICAgICAgICAgICAgIC8vIGV4cHJlc3Npb24gIWNvbXBhcmUga3c8ImluIj4gIXVuYXJ5VGVzdCAiKCIgUG9zaXRpdmVVbmFyeVRlc3RzICIpIgogICAgICAgICAgICAgIGlmIChvcGVyYXRvciA9PT0gJ2luJykgewogICAgICAgICAgICAgICAgICByZXR1cm4gY29tcGFyZUluKGFyZ3NbMF0oY29udGV4dCksIChhcmdzWzNdIHx8IGFyZ3NbMl0pKGNvbnRleHQpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gZXhwcmVzc2lvbiAhY29tcGFyZSBrdzwiYmV0d2VlbiI+IGV4cHJlc3Npb24ga3c8ImFuZCI+IGV4cHJlc3Npb24KICAgICAgICAgICAgICBpZiAob3BlcmF0b3IgPT09ICdiZXR3ZWVuJykgewogICAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGFyZ3NbMl0oY29udGV4dCk7CiAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IGFyZ3NbNF0oY29udGV4dCk7CiAgICAgICAgICAgICAgICAgIGlmIChzdGFydCA9PT0gbnVsbCB8fCBlbmQgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVSYW5nZShzdGFydCwgZW5kKS5pbmNsdWRlcyhhcmdzWzBdKGNvbnRleHQpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gZXhwcmVzc2lvbiAhY29tcGFyZSBDb21wYXJlT3A8Ij0iIHwgIiE9Ij4gZXhwcmVzc2lvbiB8CiAgICAgICAgICAgICAgLy8gZXhwcmVzc2lvbiAhY29tcGFyZSBDb21wYXJlT3A8R3QgfCBHdGUgfCBMdCB8IEx0ZT4gZXhwcmVzc2lvbiB8CiAgICAgICAgICAgICAgY29uc3QgbGVmdCA9IGFyZ3NbMF0oY29udGV4dCk7CiAgICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBhcmdzWzJdKGNvbnRleHQpOwogICAgICAgICAgICAgIGNvbnN0IHRlc3QgPSBvcGVyYXRvcigpKHJpZ2h0KTsKICAgICAgICAgICAgICByZXR1cm4gY29tcGFyZVZhbHVlKHRlc3QsIGxlZnQpOwogICAgICAgICAgfTsKICAgICAgICAgIGNhc2UgJ1F1YW50aWZpZWRFeHByZXNzaW9uJzogcmV0dXJuIChjb250ZXh0KSA9PiB7CiAgICAgICAgICAgICAgY29uc3QgdGVzdEZuID0gYXJnc1swXShjb250ZXh0KTsKICAgICAgICAgICAgICBjb25zdCBjb250ZXh0cyA9IGFyZ3NbMV07CiAgICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uID0gYXJnc1szXTsKICAgICAgICAgICAgICByZXR1cm4gdGVzdEZuKGNvbnRleHRzLCBjb25kaXRpb24pOwogICAgICAgICAgfTsKICAgICAgICAgIC8vIERNTiAxLjIgLSAxMC4zLjIuMTQKICAgICAgICAgIC8vIGt3PCJmb3IiPiBjb21tYVNlcDE8SW5FeHByZXNzaW9uPEl0ZXJhdGlvbkNvbnRleHQ+PiBrdzwicmV0dXJuIj4gZXhwcmVzc2lvbgogICAgICAgICAgY2FzZSAnRm9yRXhwcmVzc2lvbic6IHJldHVybiAoY29udGV4dCkgPT4gewogICAgICAgICAgICAgIGNvbnN0IGV4dHJhY3RvciA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICBjb25zdCBpdGVyYXRpb25Db250ZXh0cyA9IGFyZ3NbMV0oY29udGV4dCk7CiAgICAgICAgICAgICAgaWYgKGdldFR5cGUoaXRlcmF0aW9uQ29udGV4dHMpICE9PSAnbGlzdCcpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdGlvbkNvbnRleHRzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb25zdCBwYXJ0aWFsID0gW107CiAgICAgICAgICAgICAgZm9yIChjb25zdCBjdHggb2YgaXRlcmF0aW9uQ29udGV4dHMpIHsKICAgICAgICAgICAgICAgICAgcGFydGlhbC5wdXNoKGV4dHJhY3RvcihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGN0eCksIHsgcGFydGlhbCB9KSkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gcGFydGlhbDsKICAgICAgICAgIH07CiAgICAgICAgICBjYXNlICdBcml0aG1ldGljRXhwcmVzc2lvbic6IHJldHVybiAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIC8vIGJpbmFyeSBleHByZXNzaW9uIChhICsgYikKICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDMpIHsKICAgICAgICAgICAgICAgICAgY29uc3QgW2EsIG9wLCBiXSA9IGFyZ3M7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0YWcoKGNvbnRleHQpID0+IHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcChjb250ZXh0KShhLCBiKTsKICAgICAgICAgICAgICAgICAgfSwgY29hbGVjZW5zZVR5cGVzKGEsIGIpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gdW5hcnkgZXhwcmVzc2lvbiAoLWIpCiAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7CiAgICAgICAgICAgICAgICAgIGNvbnN0IFtvcCwgdmFsdWVdID0gYXJnczsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhZygoY29udGV4dCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wKGNvbnRleHQpKCgpID0+IDAsIHZhbHVlKTsKICAgICAgICAgICAgICAgICAgfSwgdmFsdWUudHlwZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfSkoKTsKICAgICAgICAgIGNhc2UgJ1Bvc2l0aXZlVW5hcnlUZXN0JzogcmV0dXJuIGFyZ3NbMF07CiAgICAgICAgICBjYXNlICdQYXJlbnRoZXNpemVkRXhwcmVzc2lvbic6IHJldHVybiBhcmdzWzFdOwogICAgICAgICAgY2FzZSAnUGF0aEV4cHJlc3Npb24nOiByZXR1cm4gKGNvbnRleHQpID0+IHsKICAgICAgICAgICAgICBjb25zdCBwYXRoVGFyZ2V0ID0gYXJnc1swXShjb250ZXh0KTsKICAgICAgICAgICAgICBjb25zdCBwYXRoUHJvcCA9IGFyZ3NbMV07CiAgICAgICAgICAgICAgaWYgKGlzQXJyYXkkMShwYXRoVGFyZ2V0KSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gY29lcmNlU2luZ2xldG9uKHBhdGhUYXJnZXQubWFwKHBhdGhQcm9wKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICByZXR1cm4gcGF0aFByb3AocGF0aFRhcmdldCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICAgIC8vIGV4cHJlc3Npb24gIWZpbHRlciAiWyIgZXhwcmVzc2lvbiAiXSIKICAgICAgICAgIGNhc2UgJ0ZpbHRlckV4cHJlc3Npb24nOiByZXR1cm4gKGNvbnRleHQpID0+IHsKICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBhcmdzWzBdKGNvbnRleHQpOwogICAgICAgICAgICAgIGNvbnN0IGZpbHRlckZuID0gYXJnc1syXTsKICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJUYXJnZXQgPSBpc0FycmF5JDEodGFyZ2V0KSA/IHRhcmdldCA6IFt0YXJnZXRdOwogICAgICAgICAgICAgIC8vIG51bGxbLi5dCiAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gYVsxXQogICAgICAgICAgICAgIGlmIChmaWx0ZXJGbi50eXBlID09PSAnbnVtYmVyJykgewogICAgICAgICAgICAgICAgICBjb25zdCBpZHggPSBmaWx0ZXJGbihjb250ZXh0KTsKICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBmaWx0ZXJUYXJnZXRbaWR4IDwgMCA/IGZpbHRlclRhcmdldC5sZW5ndGggKyBpZHggOiBpZHggLSAxXTsKICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIC8vIGFbdHJ1ZV0KICAgICAgICAgICAgICBpZiAoZmlsdGVyRm4udHlwZSA9PT0gJ2Jvb2xlYW4nKSB7CiAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJGbihjb250ZXh0KSkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlclRhcmdldDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoZmlsdGVyRm4udHlwZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBmaWx0ZXJGbihjb250ZXh0KTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlclRhcmdldC5maWx0ZXIoZWwgPT4gZWwgPT09IHZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gYVt0ZXN0XQogICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJUYXJnZXQubWFwKGVsID0+IHsKICAgICAgICAgICAgICAgICAgY29uc3QgaXRlcmF0aW9uQ29udGV4dCA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0KSwgeyBpdGVtOiBlbCB9KSwgZWwpOwogICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gZmlsdGVyRm4oaXRlcmF0aW9uQ29udGV4dCk7CiAgICAgICAgICAgICAgICAgIC8vIHRlc3QgaXMgZm4odmFsKSA9PiBib29sZWFuIFNpbXBsZVVuYXJ5VGVzdAogICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0KGVsKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmFuZ2UpIHsKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5pbmNsdWRlcyhlbCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgICAgfSkuZmlsdGVyKGlzVHJ1dGh5KTsKICAgICAgICAgIH07CiAgICAgICAgICBjYXNlICdTaW1wbGVQb3NpdGl2ZVVuYXJ5VGVzdCc6IHJldHVybiB0YWcoKGNvbnRleHQpID0+IHsKICAgICAgICAgICAgICAvLyA8SW50ZXJ2YWw+CiAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdzWzBdKGNvbnRleHQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvLyA8Q29tcGFyZU9wPiA8RXhwcj4KICAgICAgICAgICAgICByZXR1cm4gYXJnc1swXShjb250ZXh0KShhcmdzWzFdKGNvbnRleHQpKTsKICAgICAgICAgIH0sICd0ZXN0Jyk7CiAgICAgICAgICBjYXNlICdMaXN0JzogcmV0dXJuIChjb250ZXh0KSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuIGFyZ3Muc2xpY2UoMSwgLTEpLm1hcChhcmcgPT4gYXJnKGNvbnRleHQpKTsKICAgICAgICAgIH07CiAgICAgICAgICBjYXNlICdJbnRlcnZhbCc6IHJldHVybiB0YWcoKGNvbnRleHQpID0+IHsKICAgICAgICAgICAgICBjb25zdCBsZWZ0ID0gYXJnc1sxXShjb250ZXh0KTsKICAgICAgICAgICAgICBjb25zdCByaWdodCA9IGFyZ3NbMl0oY29udGV4dCk7CiAgICAgICAgICAgICAgY29uc3Qgc3RhcnRJbmNsdWRlZCA9IGxlZnQgIT09IG51bGwgJiYgYXJnc1swXSA9PT0gJ1snOwogICAgICAgICAgICAgIGNvbnN0IGVuZEluY2x1ZGVkID0gcmlnaHQgIT09IG51bGwgJiYgYXJnc1szXSA9PT0gJ10nOwogICAgICAgICAgICAgIHJldHVybiBjcmVhdGVSYW5nZShsZWZ0LCByaWdodCwgc3RhcnRJbmNsdWRlZCwgZW5kSW5jbHVkZWQpOwogICAgICAgICAgfSwgVGVzdCgnYm9vbGVhbicpKTsKICAgICAgICAgIGNhc2UgJ1Bvc2l0aXZlVW5hcnlUZXN0cyc6CiAgICAgICAgICBjYXNlICdFeHByZXNzaW9ucyc6IHJldHVybiAoY29udGV4dCkgPT4gewogICAgICAgICAgICAgIHJldHVybiBhcmdzLm1hcChhID0+IGEoY29udGV4dCkpOwogICAgICAgICAgfTsKICAgICAgICAgIGNhc2UgJ1VuYXJ5VGVzdHMnOiByZXR1cm4gKGNvbnRleHQpID0+IHsKICAgICAgICAgICAgICByZXR1cm4gKHZhbHVlID0gbnVsbCkgPT4gewogICAgICAgICAgICAgICAgICBjb25zdCBuZWdhdGUgPSBhcmdzWzBdID09PSAnbm90JzsKICAgICAgICAgICAgICAgICAgY29uc3QgdGVzdHMgPSBuZWdhdGUgPyBhcmdzLnNsaWNlKDIsIC0xKSA6IGFyZ3M7CiAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSB0ZXN0cy5tYXAodGVzdCA9PiB0ZXN0KGNvbnRleHQpKS5mbGF0KDEpLm1hcCh0ZXN0ID0+IHsKICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FycmF5JDEodGVzdCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdC5pbmNsdWRlcyh2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdCA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnYm9vbGVhbicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdDsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wYXJlVmFsdWUodGVzdCwgdmFsdWUpOwogICAgICAgICAgICAgICAgICB9KS5yZWR1Y2UoY29tYmluZVJlc3VsdCwgdW5kZWZpbmVkKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXMgPT09IG51bGwgPyBudWxsIDogKG5lZ2F0ZSA/ICFtYXRjaGVzIDogbWF0Y2hlcyk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgIH07CiAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gbm9kZS5uYW1lOwogICAgICB9CiAgfQogIGZ1bmN0aW9uIGdldEJ1aWx0aW4obmFtZSwgX2NvbnRleHQpIHsKICAgICAgcmV0dXJuIGdldEZyb21Db250ZXh0KG5hbWUsIGJ1aWx0aW5zKTsKICB9CiAgZnVuY3Rpb24gZXh0cmFjdFZhbHVlKGNvbnRleHQsIHByb3AsIF90YXJnZXQpIHsKICAgICAgY29uc3QgdGFyZ2V0ID0gX3RhcmdldChjb250ZXh0KTsKICAgICAgaWYgKFsnbGlzdCcsICdyYW5nZSddLmluY2x1ZGVzKGdldFR5cGUodGFyZ2V0KSkpIHsKICAgICAgICAgIHJldHVybiB0YXJnZXQubWFwKHQgPT4gKHsgW3Byb3BdOiB0IH0pKTsKICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICB9CiAgZnVuY3Rpb24gY29tcGFyZUluKHZhbHVlLCB0ZXN0cykgewogICAgICBpZiAoIWlzQXJyYXkkMSh0ZXN0cykpIHsKICAgICAgICAgIGlmIChnZXRUeXBlKHRlc3RzKSA9PT0gJ25pbCcpIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIHRlc3RzID0gW3Rlc3RzXTsKICAgICAgfQogICAgICByZXR1cm4gdGVzdHMuc29tZSh0ZXN0ID0+IGNvbXBhcmVWYWx1ZSh0ZXN0LCB2YWx1ZSkpOwogIH0KICBmdW5jdGlvbiBjb21wYXJlVmFsdWUodGVzdCwgdmFsdWUpIHsKICAgICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICByZXR1cm4gdGVzdCh2YWx1ZSk7CiAgICAgIH0KICAgICAgaWYgKHRlc3QgaW5zdGFuY2VvZiBSYW5nZSkgewogICAgICAgICAgcmV0dXJuIHRlc3QuaW5jbHVkZXModmFsdWUpOwogICAgICB9CiAgICAgIHJldHVybiBlcXVhbHModGVzdCwgdmFsdWUpOwogIH0KICBjb25zdCBjaGFycyA9IEFycmF5LmZyb20oJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonKTsKICBmdW5jdGlvbiBpc1R5cGVkKHR5cGUsIHZhbHVlcykgewogICAgICByZXR1cm4gKHZhbHVlcy5zb21lKGUgPT4gZ2V0VHlwZShlKSA9PT0gdHlwZSkgJiYKICAgICAgICAgIHZhbHVlcy5ldmVyeShlID0+IGUgPT09IG51bGwgfHwgZ2V0VHlwZShlKSA9PT0gdHlwZSkpOwogIH0KICBmdW5jdGlvbiBjcmVhdGVSYW5nZShzdGFydCwgZW5kLCBzdGFydEluY2x1ZGVkID0gdHJ1ZSwgZW5kSW5jbHVkZWQgPSB0cnVlKSB7CiAgICAgIGlmIChpc1R5cGVkKCdzdHJpbmcnLCBbc3RhcnQsIGVuZF0pKSB7CiAgICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nUmFuZ2Uoc3RhcnQsIGVuZCwgc3RhcnRJbmNsdWRlZCwgZW5kSW5jbHVkZWQpOwogICAgICB9CiAgICAgIGlmIChpc1R5cGVkKCdudW1iZXInLCBbc3RhcnQsIGVuZF0pKSB7CiAgICAgICAgICByZXR1cm4gY3JlYXRlTnVtYmVyUmFuZ2Uoc3RhcnQsIGVuZCwgc3RhcnRJbmNsdWRlZCwgZW5kSW5jbHVkZWQpOwogICAgICB9CiAgICAgIGlmIChpc1R5cGVkKCdkdXJhdGlvbicsIFtzdGFydCwgZW5kXSkpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdyYW5nZTxkdXJhdGlvbj4nKTsKICAgICAgfQogICAgICBpZiAoaXNUeXBlZCgndGltZScsIFtzdGFydCwgZW5kXSkpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdyYW5nZTx0aW1lPicpOwogICAgICB9CiAgICAgIGlmIChpc1R5cGVkKCdkYXRlIHRpbWUnLCBbc3RhcnQsIGVuZF0pKSB7CiAgICAgICAgICB0aHJvdyBub3RJbXBsZW1lbnRlZCgncmFuZ2U8ZGF0ZSBhbmQgdGltZT4nKTsKICAgICAgfQogICAgICBpZiAoaXNUeXBlZCgnZGF0ZScsIFtzdGFydCwgZW5kXSkpIHsKICAgICAgICAgIHRocm93IG5vdEltcGxlbWVudGVkKCdyYW5nZTxkYXRlPicpOwogICAgICB9CiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgcmFuZ2U6ICR7c3RhcnR9Li4ke2VuZH1gKTsKICB9CiAgZnVuY3Rpb24gbm9vcE1hcCgpIHsKICAgICAgcmV0dXJuICgpID0+IHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgcmFuZ2Ugb3BlcmF0aW9uOiBtYXAnKTsKICAgICAgfTsKICB9CiAgZnVuY3Rpb24gdmFsdWVzTWFwKHZhbHVlcykgewogICAgICByZXR1cm4gKGZuKSA9PiB2YWx1ZXMubWFwKGZuKTsKICB9CiAgZnVuY3Rpb24gdmFsdWVzSW5jbHVkZXModmFsdWVzKSB7CiAgICAgIHJldHVybiAodmFsdWUpID0+IHZhbHVlcy5pbmNsdWRlcyh2YWx1ZSk7CiAgfQogIGZ1bmN0aW9uIG51bWJlck1hcChzdGFydCwgZW5kLCBzdGFydEluY2x1ZGVkLCBlbmRJbmNsdWRlZCkgewogICAgICBjb25zdCBkaXJlY3Rpb24gPSBzdGFydCA+IGVuZCA/IC0xIDogMTsKICAgICAgcmV0dXJuIChmbikgPT4gewogICAgICAgICAgY29uc3QgcmVzdWx0ID0gW107CiAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7OyBpICs9IGRpcmVjdGlvbikgewogICAgICAgICAgICAgIGlmIChpID09PSAwICYmICFzdGFydEluY2x1ZGVkKSB7CiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoaSA9PT0gZW5kICYmICFlbmRJbmNsdWRlZCkgewogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZm4oaSkpOwogICAgICAgICAgICAgIGlmIChpID09PSBlbmQpIHsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICB9CiAgZnVuY3Rpb24gaW5jbHVkZXNTdGFydChuLCBpbmNsdXNpdmUpIHsKICAgICAgaWYgKGluY2x1c2l2ZSkgewogICAgICAgICAgcmV0dXJuICh2YWx1ZSkgPT4gbiA8PSB2YWx1ZTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICAgIHJldHVybiAodmFsdWUpID0+IG4gPCB2YWx1ZTsKICAgICAgfQogIH0KICBmdW5jdGlvbiBpbmNsdWRlc0VuZChuLCBpbmNsdXNpdmUpIHsKICAgICAgaWYgKGluY2x1c2l2ZSkgewogICAgICAgICAgcmV0dXJuICh2YWx1ZSkgPT4gbiA+PSB2YWx1ZTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICAgIHJldHVybiAodmFsdWUpID0+IG4gPiB2YWx1ZTsKICAgICAgfQogIH0KICBmdW5jdGlvbiBhbnlJbmNsdWRlcyhzdGFydCwgZW5kLCBzdGFydEluY2x1ZGVkLCBlbmRJbmNsdWRlZCkgewogICAgICBsZXQgdGVzdHMgPSBbXTsKICAgICAgaWYgKHN0YXJ0ICE9PSBudWxsICYmIGVuZCAhPT0gbnVsbCkgewogICAgICAgICAgaWYgKHN0YXJ0ID4gZW5kKSB7CiAgICAgICAgICAgICAgdGVzdHMgPSBbCiAgICAgICAgICAgICAgICAgIGluY2x1ZGVzU3RhcnQoZW5kLCBlbmRJbmNsdWRlZCksCiAgICAgICAgICAgICAgICAgIGluY2x1ZGVzRW5kKHN0YXJ0LCBzdGFydEluY2x1ZGVkKQogICAgICAgICAgICAgIF07CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICB0ZXN0cyA9IFsKICAgICAgICAgICAgICAgICAgaW5jbHVkZXNTdGFydChzdGFydCwgc3RhcnRJbmNsdWRlZCksCiAgICAgICAgICAgICAgICAgIGluY2x1ZGVzRW5kKGVuZCwgZW5kSW5jbHVkZWQpCiAgICAgICAgICAgICAgXTsKICAgICAgICAgIH0KICAgICAgfQogICAgICBlbHNlIGlmIChlbmQgIT09IG51bGwpIHsKICAgICAgICAgIHRlc3RzID0gWwogICAgICAgICAgICAgIGluY2x1ZGVzRW5kKGVuZCwgZW5kSW5jbHVkZWQpCiAgICAgICAgICBdOwogICAgICB9CiAgICAgIGVsc2UgaWYgKHN0YXJ0ICE9PSBudWxsKSB7CiAgICAgICAgICB0ZXN0cyA9IFsKICAgICAgICAgICAgICBpbmNsdWRlc1N0YXJ0KHN0YXJ0LCBzdGFydEluY2x1ZGVkKQogICAgICAgICAgXTsKICAgICAgfQogICAgICByZXR1cm4gKHZhbHVlKSA9PiB0ZXN0cy5ldmVyeSh0ID0+IHQodmFsdWUpKTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlU3RyaW5nUmFuZ2Uoc3RhcnQsIGVuZCwgc3RhcnRJbmNsdWRlZCA9IHRydWUsIGVuZEluY2x1ZGVkID0gdHJ1ZSkgewogICAgICBpZiAoc3RhcnQgIT09IG51bGwgJiYgIWNoYXJzLmluY2x1ZGVzKHN0YXJ0KSkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbGxlZ2FsIHJhbmdlIHN0YXJ0OiAnICsgc3RhcnQpOwogICAgICB9CiAgICAgIGlmIChlbmQgIT09IG51bGwgJiYgIWNoYXJzLmluY2x1ZGVzKGVuZCkpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaWxsZWdhbCByYW5nZSBlbmQ6ICcgKyBlbmQpOwogICAgICB9CiAgICAgIGxldCB2YWx1ZXM7CiAgICAgIGlmIChzdGFydCAhPT0gbnVsbCAmJiBlbmQgIT09IG51bGwpIHsKICAgICAgICAgIGxldCBzdGFydElkeCA9IGNoYXJzLmluZGV4T2Yoc3RhcnQpOwogICAgICAgICAgbGV0IGVuZElkeCA9IGNoYXJzLmluZGV4T2YoZW5kKTsKICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHN0YXJ0SWR4ID4gZW5kSWR4ID8gLTEgOiAxOwogICAgICAgICAgaWYgKHN0YXJ0SW5jbHVkZWQgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgc3RhcnRJZHggKz0gZGlyZWN0aW9uOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGVuZEluY2x1ZGVkID09PSBmYWxzZSkgewogICAgICAgICAgICAgIGVuZElkeCAtPSBkaXJlY3Rpb247CiAgICAgICAgICB9CiAgICAgICAgICB2YWx1ZXMgPSBjaGFycy5zbGljZShzdGFydElkeCwgZW5kSWR4ICsgMSk7CiAgICAgIH0KICAgICAgY29uc3QgbWFwID0gdmFsdWVzID8gdmFsdWVzTWFwKHZhbHVlcykgOiBub29wTWFwKCk7CiAgICAgIGNvbnN0IGluY2x1ZGVzID0gdmFsdWVzID8gdmFsdWVzSW5jbHVkZXModmFsdWVzKSA6IGFueUluY2x1ZGVzKHN0YXJ0LCBlbmQsIHN0YXJ0SW5jbHVkZWQsIGVuZEluY2x1ZGVkKTsKICAgICAgcmV0dXJuIG5ldyBSYW5nZSh7CiAgICAgICAgICBzdGFydCwKICAgICAgICAgIGVuZCwKICAgICAgICAgICdzdGFydCBpbmNsdWRlZCc6IHN0YXJ0SW5jbHVkZWQsCiAgICAgICAgICAnZW5kIGluY2x1ZGVkJzogZW5kSW5jbHVkZWQsCiAgICAgICAgICBtYXAsCiAgICAgICAgICBpbmNsdWRlcwogICAgICB9KTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlTnVtYmVyUmFuZ2Uoc3RhcnQsIGVuZCwgc3RhcnRJbmNsdWRlZCwgZW5kSW5jbHVkZWQpIHsKICAgICAgY29uc3QgbWFwID0gc3RhcnQgIT09IG51bGwgJiYgZW5kICE9PSBudWxsID8gbnVtYmVyTWFwKHN0YXJ0LCBlbmQsIHN0YXJ0SW5jbHVkZWQsIGVuZEluY2x1ZGVkKSA6IG5vb3BNYXAoKTsKICAgICAgY29uc3QgaW5jbHVkZXMgPSBhbnlJbmNsdWRlcyhzdGFydCwgZW5kLCBzdGFydEluY2x1ZGVkLCBlbmRJbmNsdWRlZCk7CiAgICAgIHJldHVybiBuZXcgUmFuZ2UoewogICAgICAgICAgc3RhcnQsCiAgICAgICAgICBlbmQsCiAgICAgICAgICAnc3RhcnQgaW5jbHVkZWQnOiBzdGFydEluY2x1ZGVkLAogICAgICAgICAgJ2VuZCBpbmNsdWRlZCc6IGVuZEluY2x1ZGVkLAogICAgICAgICAgbWFwLAogICAgICAgICAgaW5jbHVkZXMKICAgICAgfSk7CiAgfQogIGZ1bmN0aW9uIGNhcnRlc2lhblByb2R1Y3QoYXJyYXlzKSB7CiAgICAgIGlmIChhcnJheXMuc29tZShhcnIgPT4gZ2V0VHlwZShhcnIpID09PSAnbmlsJykpIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIGNvbnN0IGYgPSAoYSwgYikgPT4gW10uY29uY2F0KC4uLmEubWFwKGQgPT4gYi5tYXAoZSA9PiBbXS5jb25jYXQoZCwgZSkpKSk7CiAgICAgIGNvbnN0IGNhcnRlc2lhbiA9IChhLCBiLCAuLi5jKSA9PiAoYiA/IGNhcnRlc2lhbihmKGEsIGIpLCAuLi5jKSA6IGEgfHwgW10pOwogICAgICByZXR1cm4gY2FydGVzaWFuKC4uLmFycmF5cyk7CiAgfQogIGZ1bmN0aW9uIGNvYWxlY2Vuc2VUeXBlcyhhLCBiKSB7CiAgICAgIGlmICghYikgewogICAgICAgICAgcmV0dXJuIGEudHlwZTsKICAgICAgfQogICAgICBpZiAoYS50eXBlID09PSBiLnR5cGUpIHsKICAgICAgICAgIHJldHVybiBhLnR5cGU7CiAgICAgIH0KICAgICAgcmV0dXJuICdhbnknOwogIH0KICBmdW5jdGlvbiB0YWcoZm4sIHR5cGUpIHsKICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZm4sIHsKICAgICAgICAgIHR5cGUsCiAgICAgICAgICB0b1N0cmluZygpIHsKICAgICAgICAgICAgICByZXR1cm4gYFRhZ2dlZEZ1bmN0aW9uWyR7dHlwZX1dICR7RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZm4pfWA7CiAgICAgICAgICB9CiAgICAgIH0pOwogIH0KICBmdW5jdGlvbiBjb21iaW5lUmVzdWx0KHJlc3VsdCwgbWF0Y2gpIHsKICAgICAgaWYgKCFyZXN1bHQpIHsKICAgICAgICAgIHJldHVybiBtYXRjaDsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiBpc1RydXRoeShvYmopIHsKICAgICAgcmV0dXJuIG9iaiAhPT0gZmFsc2UgJiYgb2JqICE9PSBudWxsOwogIH0KICBmdW5jdGlvbiBUZXN0KHR5cGUpIHsKICAgICAgcmV0dXJuIGBUZXN0PCR7dHlwZX0+YDsKICB9CiAgLyoqCiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4KICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbcGFyYW1ldGVyTmFtZXNdCiAgICoKICAgKiBAcmV0dXJuIHtGdW5jdGlvbldyYXBwZXJ9CiAgICovCiAgZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKGZuLCBwYXJhbWV0ZXJOYW1lcyA9IG51bGwpIHsKICAgICAgaWYgKCFmbikgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgaWYgKGZuIGluc3RhbmNlb2YgRnVuY3Rpb25XcmFwcGVyKSB7CiAgICAgICAgICByZXR1cm4gZm47CiAgICAgIH0KICAgICAgaWYgKGZuIGluc3RhbmNlb2YgUmFuZ2UpIHsKICAgICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb25XcmFwcGVyKCh2YWx1ZSkgPT4gZm4uaW5jbHVkZXModmFsdWUpLCBbJ3ZhbHVlJ10pOwogICAgICB9CiAgICAgIHJldHVybiBuZXcgRnVuY3Rpb25XcmFwcGVyKGZuLCBwYXJhbWV0ZXJOYW1lcyB8fCBwYXJzZVBhcmFtZXRlck5hbWVzKGZuKSk7CiAgfQogIGZ1bmN0aW9uIGNvZXJjZVNpbmdsZXRvbih2YWx1ZXMpIHsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSAmJiB2YWx1ZXMubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICByZXR1cm4gdmFsdWVzWzBdOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgICAgcmV0dXJuIHZhbHVlczsKICAgICAgfQogIH0KICBmdW5jdGlvbiBwYXJzZVN0cmluZyhzdHIpIHsKICAgICAgaWYgKHN0ci5zdGFydHNXaXRoKCciJykpIHsKICAgICAgICAgIHN0ciA9IHN0ci5zbGljZSgxKTsKICAgICAgfQogICAgICBpZiAoc3RyLmVuZHNXaXRoKCciJykpIHsKICAgICAgICAgIHN0ciA9IHN0ci5zbGljZSgwLCAtMSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oXFwiKXwoXFxcXCl8KFxcdVthLWZBLUYwLTldezUsNn0pfCgoPzpcXHVbYS1mQS1GMC05XXsxLDR9KSspL2lnLCBmdW5jdGlvbiAoc3Vic3RyaW5nLCAuLi5ncm91cHMpIHsKICAgICAgICAgIGNvbnN0IFtxdW90ZXMsIGVzY2FwZSwgY29kZVBvaW50LCBjaGFyQ29kZXNdID0gZ3JvdXBzOwogICAgICAgICAgaWYgKHF1b3RlcykgewogICAgICAgICAgICAgIHJldHVybiAnIic7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZXNjYXBlKSB7CiAgICAgICAgICAgICAgcmV0dXJuICdcXCc7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBlc2NhcGVQYXR0ZXJuID0gL1xcdShbYS1mQS1GMC05XSspL2lnOwogICAgICAgICAgaWYgKGNvZGVQb2ludCkgewogICAgICAgICAgICAgIGNvbnN0IGNvZGVQb2ludE1hdGNoID0gZXNjYXBlUGF0dGVybi5leGVjKGNvZGVQb2ludCk7CiAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KHBhcnNlSW50KGNvZGVQb2ludE1hdGNoWzFdLCAxNikpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGNoYXJDb2RlcykgewogICAgICAgICAgICAgIGNvbnN0IGNoYXJzID0gW107CiAgICAgICAgICAgICAgbGV0IGNoYXJDb2RlTWF0Y2g7CiAgICAgICAgICAgICAgd2hpbGUgKChjaGFyQ29kZU1hdGNoID0gZXNjYXBlUGF0dGVybi5leGVjKHN1YnN0cmluZykpICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIGNoYXJzLnB1c2gocGFyc2VJbnQoY2hhckNvZGVNYXRjaFsxXSwgMTYpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uY2hhcnMpOwogICAgICAgICAgfQogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbGxlZ2FsIG1hdGNoJyk7CiAgICAgIH0pOwogIH0KCiAgLyoNCiAgICogIGJpZy5qcyB2Ni4yLjENCiAgICogIEEgc21hbGwsIGZhc3QsIGVhc3ktdG8tdXNlIGxpYnJhcnkgZm9yIGFyYml0cmFyeS1wcmVjaXNpb24gZGVjaW1hbCBhcml0aG1ldGljLg0KICAgKiAgQ29weXJpZ2h0IChjKSAyMDIyIE1pY2hhZWwgTWNsYXVnaGxpbg0KICAgKiAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvYmlnLmpzL0xJQ0VOQ0UubWQNCiAgICovDQoNCg0KICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRURJVEFCTEUgREVGQVVMVFMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoNCg0KICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlcyBiZWxvdyBtdXN0IGJlIGludGVnZXJzIHdpdGhpbiB0aGUgc3RhdGVkIHJhbmdlcy4NCg0KICAgIC8qDQogICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIChEUCkgb2YgdGhlIHJlc3VsdHMgb2Ygb3BlcmF0aW9ucyBpbnZvbHZpbmcgZGl2aXNpb246DQogICAgICogZGl2IGFuZCBzcXJ0LCBhbmQgcG93IHdpdGggbmVnYXRpdmUgZXhwb25lbnRzLg0KICAgICAqLw0KICB2YXIgRFAgPSAyMCwgICAgICAgICAgLy8gMCB0byBNQVhfRFANCg0KICAgIC8qDQogICAgICogVGhlIHJvdW5kaW5nIG1vZGUgKFJNKSB1c2VkIHdoZW4gcm91bmRpbmcgdG8gdGhlIGFib3ZlIGRlY2ltYWwgcGxhY2VzLg0KICAgICAqDQogICAgICogIDAgIFRvd2FyZHMgemVybyAoaS5lLiB0cnVuY2F0ZSwgbm8gcm91bmRpbmcpLiAgICAgICAoUk9VTkRfRE9XTikNCiAgICAgKiAgMSAgVG8gbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCByb3VuZCB1cC4gIChST1VORF9IQUxGX1VQKQ0KICAgICAqICAyICBUbyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvIGV2ZW4uICAgKFJPVU5EX0hBTEZfRVZFTikNCiAgICAgKiAgMyAgQXdheSBmcm9tIHplcm8uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChST1VORF9VUCkNCiAgICAgKi8NCiAgICBSTSA9IDEsICAgICAgICAgICAgIC8vIDAsIDEsIDIgb3IgMw0KDQogICAgLy8gVGhlIG1heGltdW0gdmFsdWUgb2YgRFAgYW5kIEJpZy5EUC4NCiAgICBNQVhfRFAgPSAxRTYsICAgICAgIC8vIDAgdG8gMTAwMDAwMA0KDQogICAgLy8gVGhlIG1heGltdW0gbWFnbml0dWRlIG9mIHRoZSBleHBvbmVudCBhcmd1bWVudCB0byB0aGUgcG93IG1ldGhvZC4NCiAgICBNQVhfUE9XRVIgPSAxRTYsICAgIC8vIDEgdG8gMTAwMDAwMA0KDQogICAgLyoNCiAgICAgKiBUaGUgbmVnYXRpdmUgZXhwb25lbnQgKE5FKSBhdCBhbmQgYmVuZWF0aCB3aGljaCB0b1N0cmluZyByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uLg0KICAgICAqIChKYXZhU2NyaXB0IG51bWJlcnM6IC03KQ0KICAgICAqIC0xMDAwMDAwIGlzIHRoZSBtaW5pbXVtIHJlY29tbWVuZGVkIGV4cG9uZW50IHZhbHVlIG9mIGEgQmlnLg0KICAgICAqLw0KICAgIE5FID0gLTcsICAgICAgICAgICAgLy8gMCB0byAtMTAwMDAwMA0KDQogICAgLyoNCiAgICAgKiBUaGUgcG9zaXRpdmUgZXhwb25lbnQgKFBFKSBhdCBhbmQgYWJvdmUgd2hpY2ggdG9TdHJpbmcgcmV0dXJucyBleHBvbmVudGlhbCBub3RhdGlvbi4NCiAgICAgKiAoSmF2YVNjcmlwdCBudW1iZXJzOiAyMSkNCiAgICAgKiAxMDAwMDAwIGlzIHRoZSBtYXhpbXVtIHJlY29tbWVuZGVkIGV4cG9uZW50IHZhbHVlIG9mIGEgQmlnLCBidXQgdGhpcyBsaW1pdCBpcyBub3QgZW5mb3JjZWQuDQogICAgICovDQogICAgUEUgPSAyMSwgICAgICAgICAgICAvLyAwIHRvIDEwMDAwMDANCg0KICAgIC8qDQogICAgICogV2hlbiB0cnVlLCBhbiBlcnJvciB3aWxsIGJlIHRocm93biBpZiBhIHByaW1pdGl2ZSBudW1iZXIgaXMgcGFzc2VkIHRvIHRoZSBCaWcgY29uc3RydWN0b3IsDQogICAgICogb3IgaWYgdmFsdWVPZiBpcyBjYWxsZWQsIG9yIGlmIHRvTnVtYmVyIGlzIGNhbGxlZCBvbiBhIEJpZyB3aGljaCBjYW5ub3QgYmUgY29udmVydGVkIHRvIGENCiAgICAgKiBwcmltaXRpdmUgbnVtYmVyIHdpdGhvdXQgYSBsb3NzIG9mIHByZWNpc2lvbi4NCiAgICAgKi8NCiAgICBTVFJJQ1QgPSBmYWxzZSwgICAgIC8vIHRydWUgb3IgZmFsc2UNCg0KDQogIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCg0KDQogICAgLy8gRXJyb3IgbWVzc2FnZXMuDQogICAgTkFNRSA9ICdbYmlnLmpzXSAnLA0KICAgIElOVkFMSUQgPSBOQU1FICsgJ0ludmFsaWQgJywNCiAgICBJTlZBTElEX0RQID0gSU5WQUxJRCArICdkZWNpbWFsIHBsYWNlcycsDQogICAgSU5WQUxJRF9STSA9IElOVkFMSUQgKyAncm91bmRpbmcgbW9kZScsDQogICAgRElWX0JZX1pFUk8gPSBOQU1FICsgJ0RpdmlzaW9uIGJ5IHplcm8nLA0KDQogICAgLy8gVGhlIHNoYXJlZCBwcm90b3R5cGUgb2JqZWN0Lg0KICAgIFAkMiA9IHt9LA0KICAgIFVOREVGSU5FRCA9IHZvaWQgMCwNCiAgICBOVU1FUklDID0gL14tPyhcZCsoXC5cZCopP3xcLlxkKykoZVsrLV0/XGQrKT8kL2k7DQoNCg0KICAvKg0KICAgKiBDcmVhdGUgYW5kIHJldHVybiBhIEJpZyBjb25zdHJ1Y3Rvci4NCiAgICovDQogIGZ1bmN0aW9uIF9CaWdfKCkgew0KDQogICAgLyoNCiAgICAgKiBUaGUgQmlnIGNvbnN0cnVjdG9yIGFuZCBleHBvcnRlZCBmdW5jdGlvbi4NCiAgICAgKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIEJpZyBudW1iZXIgb2JqZWN0Lg0KICAgICAqDQogICAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWd9IEEgbnVtZXJpYyB2YWx1ZS4NCiAgICAgKi8NCiAgICBmdW5jdGlvbiBCaWcobikgew0KICAgICAgdmFyIHggPSB0aGlzOw0KDQogICAgICAvLyBFbmFibGUgY29uc3RydWN0b3IgdXNhZ2Ugd2l0aG91dCBuZXcuDQogICAgICBpZiAoISh4IGluc3RhbmNlb2YgQmlnKSkgcmV0dXJuIG4gPT09IFVOREVGSU5FRCA/IF9CaWdfKCkgOiBuZXcgQmlnKG4pOw0KDQogICAgICAvLyBEdXBsaWNhdGUuDQogICAgICBpZiAobiBpbnN0YW5jZW9mIEJpZykgew0KICAgICAgICB4LnMgPSBuLnM7DQogICAgICAgIHguZSA9IG4uZTsNCiAgICAgICAgeC5jID0gbi5jLnNsaWNlKCk7DQogICAgICB9IGVsc2Ugew0KICAgICAgICBpZiAodHlwZW9mIG4gIT09ICdzdHJpbmcnKSB7DQogICAgICAgICAgaWYgKEJpZy5zdHJpY3QgPT09IHRydWUgJiYgdHlwZW9mIG4gIT09ICdiaWdpbnQnKSB7DQogICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoSU5WQUxJRCArICd2YWx1ZScpOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIC8vIE1pbnVzIHplcm8/DQogICAgICAgICAgbiA9IG4gPT09IDAgJiYgMSAvIG4gPCAwID8gJy0wJyA6IFN0cmluZyhuKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHBhcnNlKHgsIG4pOw0KICAgICAgfQ0KDQogICAgICAvLyBSZXRhaW4gYSByZWZlcmVuY2UgdG8gdGhpcyBCaWcgY29uc3RydWN0b3IuDQogICAgICAvLyBTaGFkb3cgQmlnLnByb3RvdHlwZS5jb25zdHJ1Y3RvciB3aGljaCBwb2ludHMgdG8gT2JqZWN0Lg0KICAgICAgeC5jb25zdHJ1Y3RvciA9IEJpZzsNCiAgICB9DQoNCiAgICBCaWcucHJvdG90eXBlID0gUCQyOw0KICAgIEJpZy5EUCA9IERQOw0KICAgIEJpZy5STSA9IFJNOw0KICAgIEJpZy5ORSA9IE5FOw0KICAgIEJpZy5QRSA9IFBFOw0KICAgIEJpZy5zdHJpY3QgPSBTVFJJQ1Q7DQogICAgQmlnLnJvdW5kRG93biA9IDA7DQogICAgQmlnLnJvdW5kSGFsZlVwID0gMTsNCiAgICBCaWcucm91bmRIYWxmRXZlbiA9IDI7DQogICAgQmlnLnJvdW5kVXAgPSAzOw0KDQogICAgcmV0dXJuIEJpZzsNCiAgfQ0KDQoNCiAgLyoNCiAgICogUGFyc2UgdGhlIG51bWJlciBvciBzdHJpbmcgdmFsdWUgcGFzc2VkIHRvIGEgQmlnIGNvbnN0cnVjdG9yLg0KICAgKg0KICAgKiB4IHtCaWd9IEEgQmlnIG51bWJlciBpbnN0YW5jZS4NCiAgICogbiB7bnVtYmVyfHN0cmluZ30gQSBudW1lcmljIHZhbHVlLg0KICAgKi8NCiAgZnVuY3Rpb24gcGFyc2UoeCwgbikgew0KICAgIHZhciBlLCBpLCBubDsNCg0KICAgIGlmICghTlVNRVJJQy50ZXN0KG4pKSB7DQogICAgICB0aHJvdyBFcnJvcihJTlZBTElEICsgJ251bWJlcicpOw0KICAgIH0NCg0KICAgIC8vIERldGVybWluZSBzaWduLg0KICAgIHgucyA9IG4uY2hhckF0KDApID09ICctJyA/IChuID0gbi5zbGljZSgxKSwgLTEpIDogMTsNCg0KICAgIC8vIERlY2ltYWwgcG9pbnQ/DQogICAgaWYgKChlID0gbi5pbmRleE9mKCcuJykpID4gLTEpIG4gPSBuLnJlcGxhY2UoJy4nLCAnJyk7DQoNCiAgICAvLyBFeHBvbmVudGlhbCBmb3JtPw0KICAgIGlmICgoaSA9IG4uc2VhcmNoKC9lL2kpKSA+IDApIHsNCg0KICAgICAgLy8gRGV0ZXJtaW5lIGV4cG9uZW50Lg0KICAgICAgaWYgKGUgPCAwKSBlID0gaTsNCiAgICAgIGUgKz0gK24uc2xpY2UoaSArIDEpOw0KICAgICAgbiA9IG4uc3Vic3RyaW5nKDAsIGkpOw0KICAgIH0gZWxzZSBpZiAoZSA8IDApIHsNCg0KICAgICAgLy8gSW50ZWdlci4NCiAgICAgIGUgPSBuLmxlbmd0aDsNCiAgICB9DQoNCiAgICBubCA9IG4ubGVuZ3RoOw0KDQogICAgLy8gRGV0ZXJtaW5lIGxlYWRpbmcgemVyb3MuDQogICAgZm9yIChpID0gMDsgaSA8IG5sICYmIG4uY2hhckF0KGkpID09ICcwJzspICsraTsNCg0KICAgIGlmIChpID09IG5sKSB7DQoNCiAgICAgIC8vIFplcm8uDQogICAgICB4LmMgPSBbeC5lID0gMF07DQogICAgfSBlbHNlIHsNCg0KICAgICAgLy8gRGV0ZXJtaW5lIHRyYWlsaW5nIHplcm9zLg0KICAgICAgZm9yICg7IG5sID4gMCAmJiBuLmNoYXJBdCgtLW5sKSA9PSAnMCc7KTsNCiAgICAgIHguZSA9IGUgLSBpIC0gMTsNCiAgICAgIHguYyA9IFtdOw0KDQogICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBhcnJheSBvZiBkaWdpdHMgd2l0aG91dCBsZWFkaW5nL3RyYWlsaW5nIHplcm9zLg0KICAgICAgZm9yIChlID0gMDsgaSA8PSBubDspIHguY1tlKytdID0gK24uY2hhckF0KGkrKyk7DQogICAgfQ0KDQogICAgcmV0dXJuIHg7DQogIH0NCg0KDQogIC8qDQogICAqIFJvdW5kIEJpZyB4IHRvIGEgbWF4aW11bSBvZiBzZCBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBybS4NCiAgICoNCiAgICogeCB7QmlnfSBUaGUgQmlnIHRvIHJvdW5kLg0KICAgKiBzZCB7bnVtYmVyfSBTaWduaWZpY2FudCBkaWdpdHM6IGludGVnZXIsIDAgdG8gTUFYX0RQIGluY2x1c2l2ZS4NCiAgICogcm0ge251bWJlcn0gUm91bmRpbmcgbW9kZTogMCAoZG93biksIDEgKGhhbGYtdXApLCAyIChoYWxmLWV2ZW4pIG9yIDMgKHVwKS4NCiAgICogW21vcmVdIHtib29sZWFufSBXaGV0aGVyIHRoZSByZXN1bHQgb2YgZGl2aXNpb24gd2FzIHRydW5jYXRlZC4NCiAgICovDQogIGZ1bmN0aW9uIHJvdW5kKHgsIHNkLCBybSwgbW9yZSkgew0KICAgIHZhciB4YyA9IHguYzsNCg0KICAgIGlmIChybSA9PT0gVU5ERUZJTkVEKSBybSA9IHguY29uc3RydWN0b3IuUk07DQogICAgaWYgKHJtICE9PSAwICYmIHJtICE9PSAxICYmIHJtICE9PSAyICYmIHJtICE9PSAzKSB7DQogICAgICB0aHJvdyBFcnJvcihJTlZBTElEX1JNKTsNCiAgICB9DQoNCiAgICBpZiAoc2QgPCAxKSB7DQogICAgICBtb3JlID0NCiAgICAgICAgcm0gPT09IDMgJiYgKG1vcmUgfHwgISF4Y1swXSkgfHwgc2QgPT09IDAgJiYgKA0KICAgICAgICBybSA9PT0gMSAmJiB4Y1swXSA+PSA1IHx8DQogICAgICAgIHJtID09PSAyICYmICh4Y1swXSA+IDUgfHwgeGNbMF0gPT09IDUgJiYgKG1vcmUgfHwgeGNbMV0gIT09IFVOREVGSU5FRCkpDQogICAgICApOw0KDQogICAgICB4Yy5sZW5ndGggPSAxOw0KDQogICAgICBpZiAobW9yZSkgew0KDQogICAgICAgIC8vIDEsIDAuMSwgMC4wMSwgMC4wMDEsIDAuMDAwMSBldGMuDQogICAgICAgIHguZSA9IHguZSAtIHNkICsgMTsNCiAgICAgICAgeGNbMF0gPSAxOw0KICAgICAgfSBlbHNlIHsNCg0KICAgICAgICAvLyBaZXJvLg0KICAgICAgICB4Y1swXSA9IHguZSA9IDA7DQogICAgICB9DQogICAgfSBlbHNlIGlmIChzZCA8IHhjLmxlbmd0aCkgew0KDQogICAgICAvLyB4Y1tzZF0gaXMgdGhlIGRpZ2l0IGFmdGVyIHRoZSBkaWdpdCB0aGF0IG1heSBiZSByb3VuZGVkIHVwLg0KICAgICAgbW9yZSA9DQogICAgICAgIHJtID09PSAxICYmIHhjW3NkXSA+PSA1IHx8DQogICAgICAgIHJtID09PSAyICYmICh4Y1tzZF0gPiA1IHx8IHhjW3NkXSA9PT0gNSAmJg0KICAgICAgICAgIChtb3JlIHx8IHhjW3NkICsgMV0gIT09IFVOREVGSU5FRCB8fCB4Y1tzZCAtIDFdICYgMSkpIHx8DQogICAgICAgIHJtID09PSAzICYmIChtb3JlIHx8ICEheGNbMF0pOw0KDQogICAgICAvLyBSZW1vdmUgYW55IGRpZ2l0cyBhZnRlciB0aGUgcmVxdWlyZWQgcHJlY2lzaW9uLg0KICAgICAgeGMubGVuZ3RoID0gc2Q7DQoNCiAgICAgIC8vIFJvdW5kIHVwPw0KICAgICAgaWYgKG1vcmUpIHsNCg0KICAgICAgICAvLyBSb3VuZGluZyB1cCBtYXkgbWVhbiB0aGUgcHJldmlvdXMgZGlnaXQgaGFzIHRvIGJlIHJvdW5kZWQgdXAuDQogICAgICAgIGZvciAoOyArK3hjWy0tc2RdID4gOTspIHsNCiAgICAgICAgICB4Y1tzZF0gPSAwOw0KICAgICAgICAgIGlmIChzZCA9PT0gMCkgew0KICAgICAgICAgICAgKyt4LmU7DQogICAgICAgICAgICB4Yy51bnNoaWZ0KDEpOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9DQoNCiAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy4NCiAgICAgIGZvciAoc2QgPSB4Yy5sZW5ndGg7ICF4Y1stLXNkXTspIHhjLnBvcCgpOw0KICAgIH0NCg0KICAgIHJldHVybiB4Ow0KICB9DQoNCg0KICAvKg0KICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiBCaWcgeCBpbiBub3JtYWwgb3IgZXhwb25lbnRpYWwgbm90YXRpb24uDQogICAqIEhhbmRsZXMgUC50b0V4cG9uZW50aWFsLCBQLnRvRml4ZWQsIFAudG9KU09OLCBQLnRvUHJlY2lzaW9uLCBQLnRvU3RyaW5nIGFuZCBQLnZhbHVlT2YuDQogICAqLw0KICBmdW5jdGlvbiBzdHJpbmdpZnkoeCwgZG9FeHBvbmVudGlhbCwgaXNOb256ZXJvKSB7DQogICAgdmFyIGUgPSB4LmUsDQogICAgICBzID0geC5jLmpvaW4oJycpLA0KICAgICAgbiA9IHMubGVuZ3RoOw0KDQogICAgLy8gRXhwb25lbnRpYWwgbm90YXRpb24/DQogICAgaWYgKGRvRXhwb25lbnRpYWwpIHsNCiAgICAgIHMgPSBzLmNoYXJBdCgwKSArIChuID4gMSA/ICcuJyArIHMuc2xpY2UoMSkgOiAnJykgKyAoZSA8IDAgPyAnZScgOiAnZSsnKSArIGU7DQoNCiAgICAvLyBOb3JtYWwgbm90YXRpb24uDQogICAgfSBlbHNlIGlmIChlIDwgMCkgew0KICAgICAgZm9yICg7ICsrZTspIHMgPSAnMCcgKyBzOw0KICAgICAgcyA9ICcwLicgKyBzOw0KICAgIH0gZWxzZSBpZiAoZSA+IDApIHsNCiAgICAgIGlmICgrK2UgPiBuKSB7DQogICAgICAgIGZvciAoZSAtPSBuOyBlLS07KSBzICs9ICcwJzsNCiAgICAgIH0gZWxzZSBpZiAoZSA8IG4pIHsNCiAgICAgICAgcyA9IHMuc2xpY2UoMCwgZSkgKyAnLicgKyBzLnNsaWNlKGUpOw0KICAgICAgfQ0KICAgIH0gZWxzZSBpZiAobiA+IDEpIHsNCiAgICAgIHMgPSBzLmNoYXJBdCgwKSArICcuJyArIHMuc2xpY2UoMSk7DQogICAgfQ0KDQogICAgcmV0dXJuIHgucyA8IDAgJiYgaXNOb256ZXJvID8gJy0nICsgcyA6IHM7DQogIH0NCg0KDQogIC8vIFByb3RvdHlwZS9pbnN0YW5jZSBtZXRob2RzDQoNCg0KICAvKg0KICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGlzIEJpZy4NCiAgICovDQogIFAkMi5hYnMgPSBmdW5jdGlvbiAoKSB7DQogICAgdmFyIHggPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKTsNCiAgICB4LnMgPSAxOw0KICAgIHJldHVybiB4Ow0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIDEgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUgb2YgQmlnIHksDQogICAqICAgICAgIC0xIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZyB5LCBvcg0KICAgKiAgICAgICAgMCBpZiB0aGV5IGhhdmUgdGhlIHNhbWUgdmFsdWUuDQogICAqLw0KICBQJDIuY21wID0gZnVuY3Rpb24gKHkpIHsNCiAgICB2YXIgaXNuZWcsDQogICAgICB4ID0gdGhpcywNCiAgICAgIHhjID0geC5jLA0KICAgICAgeWMgPSAoeSA9IG5ldyB4LmNvbnN0cnVjdG9yKHkpKS5jLA0KICAgICAgaSA9IHgucywNCiAgICAgIGogPSB5LnMsDQogICAgICBrID0geC5lLA0KICAgICAgbCA9IHkuZTsNCg0KICAgIC8vIEVpdGhlciB6ZXJvPw0KICAgIGlmICgheGNbMF0gfHwgIXljWzBdKSByZXR1cm4gIXhjWzBdID8gIXljWzBdID8gMCA6IC1qIDogaTsNCg0KICAgIC8vIFNpZ25zIGRpZmZlcj8NCiAgICBpZiAoaSAhPSBqKSByZXR1cm4gaTsNCg0KICAgIGlzbmVnID0gaSA8IDA7DQoNCiAgICAvLyBDb21wYXJlIGV4cG9uZW50cy4NCiAgICBpZiAoayAhPSBsKSByZXR1cm4gayA+IGwgXiBpc25lZyA/IDEgOiAtMTsNCg0KICAgIGogPSAoayA9IHhjLmxlbmd0aCkgPCAobCA9IHljLmxlbmd0aCkgPyBrIDogbDsNCg0KICAgIC8vIENvbXBhcmUgZGlnaXQgYnkgZGlnaXQuDQogICAgZm9yIChpID0gLTE7ICsraSA8IGo7KSB7DQogICAgICBpZiAoeGNbaV0gIT0geWNbaV0pIHJldHVybiB4Y1tpXSA+IHljW2ldIF4gaXNuZWcgPyAxIDogLTE7DQogICAgfQ0KDQogICAgLy8gQ29tcGFyZSBsZW5ndGhzLg0KICAgIHJldHVybiBrID09IGwgPyAwIDogayA+IGwgXiBpc25lZyA/IDEgOiAtMTsNCiAgfTsNCg0KDQogIC8qDQogICAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGRpdmlkZWQgYnkgdGhlIHZhbHVlIG9mIEJpZyB5LCByb3VuZGVkLA0KICAgKiBpZiBuZWNlc3NhcnksIHRvIGEgbWF4aW11bSBvZiBCaWcuRFAgZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBCaWcuUk0uDQogICAqLw0KICBQJDIuZGl2ID0gZnVuY3Rpb24gKHkpIHsNCiAgICB2YXIgeCA9IHRoaXMsDQogICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLA0KICAgICAgYSA9IHguYywgICAgICAgICAgICAgICAgICAvLyBkaXZpZGVuZA0KICAgICAgYiA9ICh5ID0gbmV3IEJpZyh5KSkuYywgICAvLyBkaXZpc29yDQogICAgICBrID0geC5zID09IHkucyA/IDEgOiAtMSwNCiAgICAgIGRwID0gQmlnLkRQOw0KDQogICAgaWYgKGRwICE9PSB+fmRwIHx8IGRwIDwgMCB8fCBkcCA+IE1BWF9EUCkgew0KICAgICAgdGhyb3cgRXJyb3IoSU5WQUxJRF9EUCk7DQogICAgfQ0KDQogICAgLy8gRGl2aXNvciBpcyB6ZXJvPw0KICAgIGlmICghYlswXSkgew0KICAgICAgdGhyb3cgRXJyb3IoRElWX0JZX1pFUk8pOw0KICAgIH0NCg0KICAgIC8vIERpdmlkZW5kIGlzIDA/IFJldHVybiArLTAuDQogICAgaWYgKCFhWzBdKSB7DQogICAgICB5LnMgPSBrOw0KICAgICAgeS5jID0gW3kuZSA9IDBdOw0KICAgICAgcmV0dXJuIHk7DQogICAgfQ0KDQogICAgdmFyIGJsLCBidCwgbiwgY21wLCByaSwNCiAgICAgIGJ6ID0gYi5zbGljZSgpLA0KICAgICAgYWkgPSBibCA9IGIubGVuZ3RoLA0KICAgICAgYWwgPSBhLmxlbmd0aCwNCiAgICAgIHIgPSBhLnNsaWNlKDAsIGJsKSwgICAvLyByZW1haW5kZXINCiAgICAgIHJsID0gci5sZW5ndGgsDQogICAgICBxID0geSwgICAgICAgICAgICAgICAgLy8gcXVvdGllbnQNCiAgICAgIHFjID0gcS5jID0gW10sDQogICAgICBxaSA9IDAsDQogICAgICBwID0gZHAgKyAocS5lID0geC5lIC0geS5lKSArIDE7ICAgIC8vIHByZWNpc2lvbiBvZiB0aGUgcmVzdWx0DQoNCiAgICBxLnMgPSBrOw0KICAgIGsgPSBwIDwgMCA/IDAgOiBwOw0KDQogICAgLy8gQ3JlYXRlIHZlcnNpb24gb2YgZGl2aXNvciB3aXRoIGxlYWRpbmcgemVyby4NCiAgICBiei51bnNoaWZ0KDApOw0KDQogICAgLy8gQWRkIHplcm9zIHRvIG1ha2UgcmVtYWluZGVyIGFzIGxvbmcgYXMgZGl2aXNvci4NCiAgICBmb3IgKDsgcmwrKyA8IGJsOykgci5wdXNoKDApOw0KDQogICAgZG8gew0KDQogICAgICAvLyBuIGlzIGhvdyBtYW55IHRpbWVzIHRoZSBkaXZpc29yIGdvZXMgaW50byBjdXJyZW50IHJlbWFpbmRlci4NCiAgICAgIGZvciAobiA9IDA7IG4gPCAxMDsgbisrKSB7DQoNCiAgICAgICAgLy8gQ29tcGFyZSBkaXZpc29yIGFuZCByZW1haW5kZXIuDQogICAgICAgIGlmIChibCAhPSAocmwgPSByLmxlbmd0aCkpIHsNCiAgICAgICAgICBjbXAgPSBibCA+IHJsID8gMSA6IC0xOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGZvciAocmkgPSAtMSwgY21wID0gMDsgKytyaSA8IGJsOykgew0KICAgICAgICAgICAgaWYgKGJbcmldICE9IHJbcmldKSB7DQogICAgICAgICAgICAgIGNtcCA9IGJbcmldID4gcltyaV0gPyAxIDogLTE7DQogICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIElmIGRpdmlzb3IgPCByZW1haW5kZXIsIHN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuDQogICAgICAgIGlmIChjbXAgPCAwKSB7DQoNCiAgICAgICAgICAvLyBSZW1haW5kZXIgY2FuJ3QgYmUgbW9yZSB0aGFuIDEgZGlnaXQgbG9uZ2VyIHRoYW4gZGl2aXNvci4NCiAgICAgICAgICAvLyBFcXVhbGlzZSBsZW5ndGhzIHVzaW5nIGRpdmlzb3Igd2l0aCBleHRyYSBsZWFkaW5nIHplcm8/DQogICAgICAgICAgZm9yIChidCA9IHJsID09IGJsID8gYiA6IGJ6OyBybDspIHsNCiAgICAgICAgICAgIGlmIChyWy0tcmxdIDwgYnRbcmxdKSB7DQogICAgICAgICAgICAgIHJpID0gcmw7DQogICAgICAgICAgICAgIGZvciAoOyByaSAmJiAhclstLXJpXTspIHJbcmldID0gOTsNCiAgICAgICAgICAgICAgLS1yW3JpXTsNCiAgICAgICAgICAgICAgcltybF0gKz0gMTA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByW3JsXSAtPSBidFtybF07DQogICAgICAgICAgfQ0KDQogICAgICAgICAgZm9yICg7ICFyWzBdOykgci5zaGlmdCgpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGJyZWFrOw0KICAgICAgICB9DQogICAgICB9DQoNCiAgICAgIC8vIEFkZCB0aGUgZGlnaXQgbiB0byB0aGUgcmVzdWx0IGFycmF5Lg0KICAgICAgcWNbcWkrK10gPSBjbXAgPyBuIDogKytuOw0KDQogICAgICAvLyBVcGRhdGUgdGhlIHJlbWFpbmRlci4NCiAgICAgIGlmIChyWzBdICYmIGNtcCkgcltybF0gPSBhW2FpXSB8fCAwOw0KICAgICAgZWxzZSByID0gW2FbYWldXTsNCg0KICAgIH0gd2hpbGUgKChhaSsrIDwgYWwgfHwgclswXSAhPT0gVU5ERUZJTkVEKSAmJiBrLS0pOw0KDQogICAgLy8gTGVhZGluZyB6ZXJvPyBEbyBub3QgcmVtb3ZlIGlmIHJlc3VsdCBpcyBzaW1wbHkgemVybyAocWkgPT0gMSkuDQogICAgaWYgKCFxY1swXSAmJiBxaSAhPSAxKSB7DQoNCiAgICAgIC8vIFRoZXJlIGNhbid0IGJlIG1vcmUgdGhhbiBvbmUgemVyby4NCiAgICAgIHFjLnNoaWZ0KCk7DQogICAgICBxLmUtLTsNCiAgICAgIHAtLTsNCiAgICB9DQoNCiAgICAvLyBSb3VuZD8NCiAgICBpZiAocWkgPiBwKSByb3VuZChxLCBwLCBCaWcuUk0sIHJbMF0gIT09IFVOREVGSU5FRCk7DQoNCiAgICByZXR1cm4gcTsNCiAgfTsNCg0KDQogIC8qDQogICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBlcXVhbCB0byB0aGUgdmFsdWUgb2YgQmlnIHksIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuDQogICAqLw0KICBQJDIuZXEgPSBmdW5jdGlvbiAoeSkgew0KICAgIHJldHVybiB0aGlzLmNtcCh5KSA9PT0gMDsNCiAgfTsNCg0KDQogIC8qDQogICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBncmVhdGVyIHRoYW4gdGhlIHZhbHVlIG9mIEJpZyB5LCBvdGhlcndpc2UgcmV0dXJuDQogICAqIGZhbHNlLg0KICAgKi8NCiAgUCQyLmd0ID0gZnVuY3Rpb24gKHkpIHsNCiAgICByZXR1cm4gdGhpcy5jbXAoeSkgPiAwOw0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgdmFsdWUgb2YgQmlnIHksIG90aGVyd2lzZQ0KICAgKiByZXR1cm4gZmFsc2UuDQogICAqLw0KICBQJDIuZ3RlID0gZnVuY3Rpb24gKHkpIHsNCiAgICByZXR1cm4gdGhpcy5jbXAoeSkgPiAtMTsNCiAgfTsNCg0KDQogIC8qDQogICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZyB5LCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLg0KICAgKi8NCiAgUCQyLmx0ID0gZnVuY3Rpb24gKHkpIHsNCiAgICByZXR1cm4gdGhpcy5jbXAoeSkgPCAwOw0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdmFsdWUgb2YgQmlnIHksIG90aGVyd2lzZQ0KICAgKiByZXR1cm4gZmFsc2UuDQogICAqLw0KICBQJDIubHRlID0gZnVuY3Rpb24gKHkpIHsNCiAgICByZXR1cm4gdGhpcy5jbXAoeSkgPCAxOw0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgbWludXMgdGhlIHZhbHVlIG9mIEJpZyB5Lg0KICAgKi8NCiAgUCQyLm1pbnVzID0gUCQyLnN1YiA9IGZ1bmN0aW9uICh5KSB7DQogICAgdmFyIGksIGosIHQsIHhsdHksDQogICAgICB4ID0gdGhpcywNCiAgICAgIEJpZyA9IHguY29uc3RydWN0b3IsDQogICAgICBhID0geC5zLA0KICAgICAgYiA9ICh5ID0gbmV3IEJpZyh5KSkuczsNCg0KICAgIC8vIFNpZ25zIGRpZmZlcj8NCiAgICBpZiAoYSAhPSBiKSB7DQogICAgICB5LnMgPSAtYjsNCiAgICAgIHJldHVybiB4LnBsdXMoeSk7DQogICAgfQ0KDQogICAgdmFyIHhjID0geC5jLnNsaWNlKCksDQogICAgICB4ZSA9IHguZSwNCiAgICAgIHljID0geS5jLA0KICAgICAgeWUgPSB5LmU7DQoNCiAgICAvLyBFaXRoZXIgemVybz8NCiAgICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkgew0KICAgICAgaWYgKHljWzBdKSB7DQogICAgICAgIHkucyA9IC1iOw0KICAgICAgfSBlbHNlIGlmICh4Y1swXSkgew0KICAgICAgICB5ID0gbmV3IEJpZyh4KTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHkucyA9IDE7DQogICAgICB9DQogICAgICByZXR1cm4geTsNCiAgICB9DQoNCiAgICAvLyBEZXRlcm1pbmUgd2hpY2ggaXMgdGhlIGJpZ2dlciBudW1iZXIuIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLg0KICAgIGlmIChhID0geGUgLSB5ZSkgew0KDQogICAgICBpZiAoeGx0eSA9IGEgPCAwKSB7DQogICAgICAgIGEgPSAtYTsNCiAgICAgICAgdCA9IHhjOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgeWUgPSB4ZTsNCiAgICAgICAgdCA9IHljOw0KICAgICAgfQ0KDQogICAgICB0LnJldmVyc2UoKTsNCiAgICAgIGZvciAoYiA9IGE7IGItLTspIHQucHVzaCgwKTsNCiAgICAgIHQucmV2ZXJzZSgpOw0KICAgIH0gZWxzZSB7DQoNCiAgICAgIC8vIEV4cG9uZW50cyBlcXVhbC4gQ2hlY2sgZGlnaXQgYnkgZGlnaXQuDQogICAgICBqID0gKCh4bHR5ID0geGMubGVuZ3RoIDwgeWMubGVuZ3RoKSA/IHhjIDogeWMpLmxlbmd0aDsNCg0KICAgICAgZm9yIChhID0gYiA9IDA7IGIgPCBqOyBiKyspIHsNCiAgICAgICAgaWYgKHhjW2JdICE9IHljW2JdKSB7DQogICAgICAgICAgeGx0eSA9IHhjW2JdIDwgeWNbYl07DQogICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQoNCiAgICAvLyB4IDwgeT8gUG9pbnQgeGMgdG8gdGhlIGFycmF5IG9mIHRoZSBiaWdnZXIgbnVtYmVyLg0KICAgIGlmICh4bHR5KSB7DQogICAgICB0ID0geGM7DQogICAgICB4YyA9IHljOw0KICAgICAgeWMgPSB0Ow0KICAgICAgeS5zID0gLXkuczsNCiAgICB9DQoNCiAgICAvKg0KICAgICAqIEFwcGVuZCB6ZXJvcyB0byB4YyBpZiBzaG9ydGVyLiBObyBuZWVkIHRvIGFkZCB6ZXJvcyB0byB5YyBpZiBzaG9ydGVyIGFzIHN1YnRyYWN0aW9uIG9ubHkNCiAgICAgKiBuZWVkcyB0byBzdGFydCBhdCB5Yy5sZW5ndGguDQogICAgICovDQogICAgaWYgKChiID0gKGogPSB5Yy5sZW5ndGgpIC0gKGkgPSB4Yy5sZW5ndGgpKSA+IDApIGZvciAoOyBiLS07KSB4Y1tpKytdID0gMDsNCg0KICAgIC8vIFN1YnRyYWN0IHljIGZyb20geGMuDQogICAgZm9yIChiID0gaTsgaiA+IGE7KSB7DQogICAgICBpZiAoeGNbLS1qXSA8IHljW2pdKSB7DQogICAgICAgIGZvciAoaSA9IGo7IGkgJiYgIXhjWy0taV07KSB4Y1tpXSA9IDk7DQogICAgICAgIC0teGNbaV07DQogICAgICAgIHhjW2pdICs9IDEwOw0KICAgICAgfQ0KDQogICAgICB4Y1tqXSAtPSB5Y1tqXTsNCiAgICB9DQoNCiAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuDQogICAgZm9yICg7IHhjWy0tYl0gPT09IDA7KSB4Yy5wb3AoKTsNCg0KICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zIGFuZCBhZGp1c3QgZXhwb25lbnQgYWNjb3JkaW5nbHkuDQogICAgZm9yICg7IHhjWzBdID09PSAwOykgew0KICAgICAgeGMuc2hpZnQoKTsNCiAgICAgIC0teWU7DQogICAgfQ0KDQogICAgaWYgKCF4Y1swXSkgew0KDQogICAgICAvLyBuIC0gbiA9ICswDQogICAgICB5LnMgPSAxOw0KDQogICAgICAvLyBSZXN1bHQgbXVzdCBiZSB6ZXJvLg0KICAgICAgeGMgPSBbeWUgPSAwXTsNCiAgICB9DQoNCiAgICB5LmMgPSB4YzsNCiAgICB5LmUgPSB5ZTsNCg0KICAgIHJldHVybiB5Ow0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgbW9kdWxvIHRoZSB2YWx1ZSBvZiBCaWcgeS4NCiAgICovDQogIFAkMi5tb2QgPSBmdW5jdGlvbiAoeSkgew0KICAgIHZhciB5Z3R4LA0KICAgICAgeCA9IHRoaXMsDQogICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLA0KICAgICAgYSA9IHgucywNCiAgICAgIGIgPSAoeSA9IG5ldyBCaWcoeSkpLnM7DQoNCiAgICBpZiAoIXkuY1swXSkgew0KICAgICAgdGhyb3cgRXJyb3IoRElWX0JZX1pFUk8pOw0KICAgIH0NCg0KICAgIHgucyA9IHkucyA9IDE7DQogICAgeWd0eCA9IHkuY21wKHgpID09IDE7DQogICAgeC5zID0gYTsNCiAgICB5LnMgPSBiOw0KDQogICAgaWYgKHlndHgpIHJldHVybiBuZXcgQmlnKHgpOw0KDQogICAgYSA9IEJpZy5EUDsNCiAgICBiID0gQmlnLlJNOw0KICAgIEJpZy5EUCA9IEJpZy5STSA9IDA7DQogICAgeCA9IHguZGl2KHkpOw0KICAgIEJpZy5EUCA9IGE7DQogICAgQmlnLlJNID0gYjsNCg0KICAgIHJldHVybiB0aGlzLm1pbnVzKHgudGltZXMoeSkpOw0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgbmVnYXRlZC4NCiAgICovDQogIFAkMi5uZWcgPSBmdW5jdGlvbiAoKSB7DQogICAgdmFyIHggPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKTsNCiAgICB4LnMgPSAteC5zOw0KICAgIHJldHVybiB4Ow0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgcGx1cyB0aGUgdmFsdWUgb2YgQmlnIHkuDQogICAqLw0KICBQJDIucGx1cyA9IFAkMi5hZGQgPSBmdW5jdGlvbiAoeSkgew0KICAgIHZhciBlLCBrLCB0LA0KICAgICAgeCA9IHRoaXMsDQogICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yOw0KDQogICAgeSA9IG5ldyBCaWcoeSk7DQoNCiAgICAvLyBTaWducyBkaWZmZXI/DQogICAgaWYgKHgucyAhPSB5LnMpIHsNCiAgICAgIHkucyA9IC15LnM7DQogICAgICByZXR1cm4geC5taW51cyh5KTsNCiAgICB9DQoNCiAgICB2YXIgeGUgPSB4LmUsDQogICAgICB4YyA9IHguYywNCiAgICAgIHllID0geS5lLA0KICAgICAgeWMgPSB5LmM7DQoNCiAgICAvLyBFaXRoZXIgemVybz8NCiAgICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkgew0KICAgICAgaWYgKCF5Y1swXSkgew0KICAgICAgICBpZiAoeGNbMF0pIHsNCiAgICAgICAgICB5ID0gbmV3IEJpZyh4KTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICB5LnMgPSB4LnM7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIHJldHVybiB5Ow0KICAgIH0NCg0KICAgIHhjID0geGMuc2xpY2UoKTsNCg0KICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLg0KICAgIC8vIE5vdGU6IHJldmVyc2UgZmFzdGVyIHRoYW4gdW5zaGlmdHMuDQogICAgaWYgKGUgPSB4ZSAtIHllKSB7DQogICAgICBpZiAoZSA+IDApIHsNCiAgICAgICAgeWUgPSB4ZTsNCiAgICAgICAgdCA9IHljOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgZSA9IC1lOw0KICAgICAgICB0ID0geGM7DQogICAgICB9DQoNCiAgICAgIHQucmV2ZXJzZSgpOw0KICAgICAgZm9yICg7IGUtLTspIHQucHVzaCgwKTsNCiAgICAgIHQucmV2ZXJzZSgpOw0KICAgIH0NCg0KICAgIC8vIFBvaW50IHhjIHRvIHRoZSBsb25nZXIgYXJyYXkuDQogICAgaWYgKHhjLmxlbmd0aCAtIHljLmxlbmd0aCA8IDApIHsNCiAgICAgIHQgPSB5YzsNCiAgICAgIHljID0geGM7DQogICAgICB4YyA9IHQ7DQogICAgfQ0KDQogICAgZSA9IHljLmxlbmd0aDsNCg0KICAgIC8vIE9ubHkgc3RhcnQgYWRkaW5nIGF0IHljLmxlbmd0aCAtIDEgYXMgdGhlIGZ1cnRoZXIgZGlnaXRzIG9mIHhjIGNhbiBiZSBsZWZ0IGFzIHRoZXkgYXJlLg0KICAgIGZvciAoayA9IDA7IGU7IHhjW2VdICU9IDEwKSBrID0gKHhjWy0tZV0gPSB4Y1tlXSArIHljW2VdICsgaykgLyAxMCB8IDA7DQoNCiAgICAvLyBObyBuZWVkIHRvIGNoZWNrIGZvciB6ZXJvLCBhcyAreCArICt5ICE9IDAgJiYgLXggKyAteSAhPSAwDQoNCiAgICBpZiAoaykgew0KICAgICAgeGMudW5zaGlmdChrKTsNCiAgICAgICsreWU7DQogICAgfQ0KDQogICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLg0KICAgIGZvciAoZSA9IHhjLmxlbmd0aDsgeGNbLS1lXSA9PT0gMDspIHhjLnBvcCgpOw0KDQogICAgeS5jID0geGM7DQogICAgeS5lID0geWU7DQoNCiAgICByZXR1cm4geTsNCiAgfTsNCg0KDQogIC8qDQogICAqIFJldHVybiBhIEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgcmFpc2VkIHRvIHRoZSBwb3dlciBuLg0KICAgKiBJZiBuIGlzIG5lZ2F0aXZlLCByb3VuZCB0byBhIG1heGltdW0gb2YgQmlnLkRQIGRlY2ltYWwgcGxhY2VzIHVzaW5nIHJvdW5kaW5nDQogICAqIG1vZGUgQmlnLlJNLg0KICAgKg0KICAgKiBuIHtudW1iZXJ9IEludGVnZXIsIC1NQVhfUE9XRVIgdG8gTUFYX1BPV0VSIGluY2x1c2l2ZS4NCiAgICovDQogIFAkMi5wb3cgPSBmdW5jdGlvbiAobikgew0KICAgIHZhciB4ID0gdGhpcywNCiAgICAgIG9uZSA9IG5ldyB4LmNvbnN0cnVjdG9yKCcxJyksDQogICAgICB5ID0gb25lLA0KICAgICAgaXNuZWcgPSBuIDwgMDsNCg0KICAgIGlmIChuICE9PSB+fm4gfHwgbiA8IC1NQVhfUE9XRVIgfHwgbiA+IE1BWF9QT1dFUikgew0KICAgICAgdGhyb3cgRXJyb3IoSU5WQUxJRCArICdleHBvbmVudCcpOw0KICAgIH0NCg0KICAgIGlmIChpc25lZykgbiA9IC1uOw0KDQogICAgZm9yICg7Oykgew0KICAgICAgaWYgKG4gJiAxKSB5ID0geS50aW1lcyh4KTsNCiAgICAgIG4gPj49IDE7DQogICAgICBpZiAoIW4pIGJyZWFrOw0KICAgICAgeCA9IHgudGltZXMoeCk7DQogICAgfQ0KDQogICAgcmV0dXJuIGlzbmVnID8gb25lLmRpdih5KSA6IHk7DQogIH07DQoNCg0KICAvKg0KICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyByb3VuZGVkIHRvIGEgbWF4aW11bSBwcmVjaXNpb24gb2Ygc2QNCiAgICogc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0sIG9yIEJpZy5STSBpZiBybSBpcyBub3Qgc3BlY2lmaWVkLg0KICAgKg0KICAgKiBzZCB7bnVtYmVyfSBTaWduaWZpY2FudCBkaWdpdHM6IGludGVnZXIsIDEgdG8gTUFYX0RQIGluY2x1c2l2ZS4NCiAgICogcm0/IHtudW1iZXJ9IFJvdW5kaW5nIG1vZGU6IDAgKGRvd24pLCAxIChoYWxmLXVwKSwgMiAoaGFsZi1ldmVuKSBvciAzICh1cCkuDQogICAqLw0KICBQJDIucHJlYyA9IGZ1bmN0aW9uIChzZCwgcm0pIHsNCiAgICBpZiAoc2QgIT09IH5+c2QgfHwgc2QgPCAxIHx8IHNkID4gTUFYX0RQKSB7DQogICAgICB0aHJvdyBFcnJvcihJTlZBTElEICsgJ3ByZWNpc2lvbicpOw0KICAgIH0NCiAgICByZXR1cm4gcm91bmQobmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyksIHNkLCBybSk7DQogIH07DQoNCg0KICAvKg0KICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyByb3VuZGVkIHRvIGEgbWF4aW11bSBvZiBkcCBkZWNpbWFsIHBsYWNlcw0KICAgKiB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvciBCaWcuUk0gaWYgcm0gaXMgbm90IHNwZWNpZmllZC4NCiAgICogSWYgZHAgaXMgbmVnYXRpdmUsIHJvdW5kIHRvIGFuIGludGVnZXIgd2hpY2ggaXMgYSBtdWx0aXBsZSBvZiAxMCoqLWRwLg0KICAgKiBJZiBkcCBpcyBub3Qgc3BlY2lmaWVkLCByb3VuZCB0byAwIGRlY2ltYWwgcGxhY2VzLg0KICAgKg0KICAgKiBkcD8ge251bWJlcn0gSW50ZWdlciwgLU1BWF9EUCB0byBNQVhfRFAgaW5jbHVzaXZlLg0KICAgKiBybT8ge251bWJlcn0gUm91bmRpbmcgbW9kZTogMCAoZG93biksIDEgKGhhbGYtdXApLCAyIChoYWxmLWV2ZW4pIG9yIDMgKHVwKS4NCiAgICovDQogIFAkMi5yb3VuZCA9IGZ1bmN0aW9uIChkcCwgcm0pIHsNCiAgICBpZiAoZHAgPT09IFVOREVGSU5FRCkgZHAgPSAwOw0KICAgIGVsc2UgaWYgKGRwICE9PSB+fmRwIHx8IGRwIDwgLU1BWF9EUCB8fCBkcCA+IE1BWF9EUCkgew0KICAgICAgdGhyb3cgRXJyb3IoSU5WQUxJRF9EUCk7DQogICAgfQ0KICAgIHJldHVybiByb3VuZChuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSwgZHAgKyB0aGlzLmUgKyAxLCBybSk7DQogIH07DQoNCg0KICAvKg0KICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcsIHJvdW5kZWQsIGlmDQogICAqIG5lY2Vzc2FyeSwgdG8gYSBtYXhpbXVtIG9mIEJpZy5EUCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIEJpZy5STS4NCiAgICovDQogIFAkMi5zcXJ0ID0gZnVuY3Rpb24gKCkgew0KICAgIHZhciByLCBjLCB0LA0KICAgICAgeCA9IHRoaXMsDQogICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLA0KICAgICAgcyA9IHgucywNCiAgICAgIGUgPSB4LmUsDQogICAgICBoYWxmID0gbmV3IEJpZygnMC41Jyk7DQoNCiAgICAvLyBaZXJvPw0KICAgIGlmICgheC5jWzBdKSByZXR1cm4gbmV3IEJpZyh4KTsNCg0KICAgIC8vIE5lZ2F0aXZlPw0KICAgIGlmIChzIDwgMCkgew0KICAgICAgdGhyb3cgRXJyb3IoTkFNRSArICdObyBzcXVhcmUgcm9vdCcpOw0KICAgIH0NCg0KICAgIC8vIEVzdGltYXRlLg0KICAgIHMgPSBNYXRoLnNxcnQoeCArICcnKTsNCg0KICAgIC8vIE1hdGguc3FydCB1bmRlcmZsb3cvb3ZlcmZsb3c/DQogICAgLy8gUmUtZXN0aW1hdGU6IHBhc3MgeCBjb2VmZmljaWVudCB0byBNYXRoLnNxcnQgYXMgaW50ZWdlciwgdGhlbiBhZGp1c3QgdGhlIHJlc3VsdCBleHBvbmVudC4NCiAgICBpZiAocyA9PT0gMCB8fCBzID09PSAxIC8gMCkgew0KICAgICAgYyA9IHguYy5qb2luKCcnKTsNCiAgICAgIGlmICghKGMubGVuZ3RoICsgZSAmIDEpKSBjICs9ICcwJzsNCiAgICAgIHMgPSBNYXRoLnNxcnQoYyk7DQogICAgICBlID0gKChlICsgMSkgLyAyIHwgMCkgLSAoZSA8IDAgfHwgZSAmIDEpOw0KICAgICAgciA9IG5ldyBCaWcoKHMgPT0gMSAvIDAgPyAnNWUnIDogKHMgPSBzLnRvRXhwb25lbnRpYWwoKSkuc2xpY2UoMCwgcy5pbmRleE9mKCdlJykgKyAxKSkgKyBlKTsNCiAgICB9IGVsc2Ugew0KICAgICAgciA9IG5ldyBCaWcocyArICcnKTsNCiAgICB9DQoNCiAgICBlID0gci5lICsgKEJpZy5EUCArPSA0KTsNCg0KICAgIC8vIE5ld3Rvbi1SYXBoc29uIGl0ZXJhdGlvbi4NCiAgICBkbyB7DQogICAgICB0ID0gcjsNCiAgICAgIHIgPSBoYWxmLnRpbWVzKHQucGx1cyh4LmRpdih0KSkpOw0KICAgIH0gd2hpbGUgKHQuYy5zbGljZSgwLCBlKS5qb2luKCcnKSAhPT0gci5jLnNsaWNlKDAsIGUpLmpvaW4oJycpKTsNCg0KICAgIHJldHVybiByb3VuZChyLCAoQmlnLkRQIC09IDQpICsgci5lICsgMSwgQmlnLlJNKTsNCiAgfTsNCg0KDQogIC8qDQogICAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIHRpbWVzIHRoZSB2YWx1ZSBvZiBCaWcgeS4NCiAgICovDQogIFAkMi50aW1lcyA9IFAkMi5tdWwgPSBmdW5jdGlvbiAoeSkgew0KICAgIHZhciBjLA0KICAgICAgeCA9IHRoaXMsDQogICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLA0KICAgICAgeGMgPSB4LmMsDQogICAgICB5YyA9ICh5ID0gbmV3IEJpZyh5KSkuYywNCiAgICAgIGEgPSB4Yy5sZW5ndGgsDQogICAgICBiID0geWMubGVuZ3RoLA0KICAgICAgaSA9IHguZSwNCiAgICAgIGogPSB5LmU7DQoNCiAgICAvLyBEZXRlcm1pbmUgc2lnbiBvZiByZXN1bHQuDQogICAgeS5zID0geC5zID09IHkucyA/IDEgOiAtMTsNCg0KICAgIC8vIFJldHVybiBzaWduZWQgMCBpZiBlaXRoZXIgMC4NCiAgICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkgew0KICAgICAgeS5jID0gW3kuZSA9IDBdOw0KICAgICAgcmV0dXJuIHk7DQogICAgfQ0KDQogICAgLy8gSW5pdGlhbGlzZSBleHBvbmVudCBvZiByZXN1bHQgYXMgeC5lICsgeS5lLg0KICAgIHkuZSA9IGkgKyBqOw0KDQogICAgLy8gSWYgYXJyYXkgeGMgaGFzIGZld2VyIGRpZ2l0cyB0aGFuIHljLCBzd2FwIHhjIGFuZCB5YywgYW5kIGxlbmd0aHMuDQogICAgaWYgKGEgPCBiKSB7DQogICAgICBjID0geGM7DQogICAgICB4YyA9IHljOw0KICAgICAgeWMgPSBjOw0KICAgICAgaiA9IGE7DQogICAgICBhID0gYjsNCiAgICAgIGIgPSBqOw0KICAgIH0NCg0KICAgIC8vIEluaXRpYWxpc2UgY29lZmZpY2llbnQgYXJyYXkgb2YgcmVzdWx0IHdpdGggemVyb3MuDQogICAgZm9yIChjID0gbmV3IEFycmF5KGogPSBhICsgYik7IGotLTspIGNbal0gPSAwOw0KDQogICAgLy8gTXVsdGlwbHkuDQoNCiAgICAvLyBpIGlzIGluaXRpYWxseSB4Yy5sZW5ndGguDQogICAgZm9yIChpID0gYjsgaS0tOykgew0KICAgICAgYiA9IDA7DQoNCiAgICAgIC8vIGEgaXMgeWMubGVuZ3RoLg0KICAgICAgZm9yIChqID0gYSArIGk7IGogPiBpOykgew0KDQogICAgICAgIC8vIEN1cnJlbnQgc3VtIG9mIHByb2R1Y3RzIGF0IHRoaXMgZGlnaXQgcG9zaXRpb24sIHBsdXMgY2FycnkuDQogICAgICAgIGIgPSBjW2pdICsgeWNbaV0gKiB4Y1tqIC0gaSAtIDFdICsgYjsNCiAgICAgICAgY1tqLS1dID0gYiAlIDEwOw0KDQogICAgICAgIC8vIGNhcnJ5DQogICAgICAgIGIgPSBiIC8gMTAgfCAwOw0KICAgICAgfQ0KDQogICAgICBjW2pdID0gYjsNCiAgICB9DQoNCiAgICAvLyBJbmNyZW1lbnQgcmVzdWx0IGV4cG9uZW50IGlmIHRoZXJlIGlzIGEgZmluYWwgY2FycnksIG90aGVyd2lzZSByZW1vdmUgbGVhZGluZyB6ZXJvLg0KICAgIGlmIChiKSArK3kuZTsNCiAgICBlbHNlIGMuc2hpZnQoKTsNCg0KICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy4NCiAgICBmb3IgKGkgPSBjLmxlbmd0aDsgIWNbLS1pXTspIGMucG9wKCk7DQogICAgeS5jID0gYzsNCg0KICAgIHJldHVybiB5Ow0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaW4gZXhwb25lbnRpYWwgbm90YXRpb24gcm91bmRlZCB0byBkcCBmaXhlZA0KICAgKiBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvciBCaWcuUk0gaWYgcm0gaXMgbm90IHNwZWNpZmllZC4NCiAgICoNCiAgICogZHA/IHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzOiBpbnRlZ2VyLCAwIHRvIE1BWF9EUCBpbmNsdXNpdmUuDQogICAqIHJtPyB7bnVtYmVyfSBSb3VuZGluZyBtb2RlOiAwIChkb3duKSwgMSAoaGFsZi11cCksIDIgKGhhbGYtZXZlbikgb3IgMyAodXApLg0KICAgKi8NCiAgUCQyLnRvRXhwb25lbnRpYWwgPSBmdW5jdGlvbiAoZHAsIHJtKSB7DQogICAgdmFyIHggPSB0aGlzLA0KICAgICAgbiA9IHguY1swXTsNCg0KICAgIGlmIChkcCAhPT0gVU5ERUZJTkVEKSB7DQogICAgICBpZiAoZHAgIT09IH5+ZHAgfHwgZHAgPCAwIHx8IGRwID4gTUFYX0RQKSB7DQogICAgICAgIHRocm93IEVycm9yKElOVkFMSURfRFApOw0KICAgICAgfQ0KICAgICAgeCA9IHJvdW5kKG5ldyB4LmNvbnN0cnVjdG9yKHgpLCArK2RwLCBybSk7DQogICAgICBmb3IgKDsgeC5jLmxlbmd0aCA8IGRwOykgeC5jLnB1c2goMCk7DQogICAgfQ0KDQogICAgcmV0dXJuIHN0cmluZ2lmeSh4LCB0cnVlLCAhIW4pOw0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaW4gbm9ybWFsIG5vdGF0aW9uIHJvdW5kZWQgdG8gZHAgZml4ZWQNCiAgICogZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBybSwgb3IgQmlnLlJNIGlmIHJtIGlzIG5vdCBzcGVjaWZpZWQuDQogICAqDQogICAqIGRwPyB7bnVtYmVyfSBEZWNpbWFsIHBsYWNlczogaW50ZWdlciwgMCB0byBNQVhfRFAgaW5jbHVzaXZlLg0KICAgKiBybT8ge251bWJlcn0gUm91bmRpbmcgbW9kZTogMCAoZG93biksIDEgKGhhbGYtdXApLCAyIChoYWxmLWV2ZW4pIG9yIDMgKHVwKS4NCiAgICoNCiAgICogKC0wKS50b0ZpeGVkKDApIGlzICcwJywgYnV0ICgtMC4xKS50b0ZpeGVkKDApIGlzICctMCcuDQogICAqICgtMCkudG9GaXhlZCgxKSBpcyAnMC4wJywgYnV0ICgtMC4wMSkudG9GaXhlZCgxKSBpcyAnLTAuMCcuDQogICAqLw0KICBQJDIudG9GaXhlZCA9IGZ1bmN0aW9uIChkcCwgcm0pIHsNCiAgICB2YXIgeCA9IHRoaXMsDQogICAgICBuID0geC5jWzBdOw0KDQogICAgaWYgKGRwICE9PSBVTkRFRklORUQpIHsNCiAgICAgIGlmIChkcCAhPT0gfn5kcCB8fCBkcCA8IDAgfHwgZHAgPiBNQVhfRFApIHsNCiAgICAgICAgdGhyb3cgRXJyb3IoSU5WQUxJRF9EUCk7DQogICAgICB9DQogICAgICB4ID0gcm91bmQobmV3IHguY29uc3RydWN0b3IoeCksIGRwICsgeC5lICsgMSwgcm0pOw0KDQogICAgICAvLyB4LmUgbWF5IGhhdmUgY2hhbmdlZCBpZiB0aGUgdmFsdWUgaXMgcm91bmRlZCB1cC4NCiAgICAgIGZvciAoZHAgPSBkcCArIHguZSArIDE7IHguYy5sZW5ndGggPCBkcDspIHguYy5wdXNoKDApOw0KICAgIH0NCg0KICAgIHJldHVybiBzdHJpbmdpZnkoeCwgZmFsc2UsICEhbik7DQogIH07DQoNCg0KICAvKg0KICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZy4NCiAgICogUmV0dXJuIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoaXMgQmlnIGhhcyBhIHBvc2l0aXZlIGV4cG9uZW50IGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhbg0KICAgKiBCaWcuUEUsIG9yIGEgbmVnYXRpdmUgZXhwb25lbnQgZXF1YWwgdG8gb3IgbGVzcyB0aGFuIEJpZy5ORS4NCiAgICogT21pdCB0aGUgc2lnbiBmb3IgbmVnYXRpdmUgemVyby4NCiAgICovDQogIFAkMltTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IFAkMi50b0pTT04gPSBQJDIudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7DQogICAgdmFyIHggPSB0aGlzLA0KICAgICAgQmlnID0geC5jb25zdHJ1Y3RvcjsNCiAgICByZXR1cm4gc3RyaW5naWZ5KHgsIHguZSA8PSBCaWcuTkUgfHwgeC5lID49IEJpZy5QRSwgISF4LmNbMF0pOw0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBhcyBhIHByaW1pdHZlIG51bWJlci4NCiAgICovDQogIFAkMi50b051bWJlciA9IGZ1bmN0aW9uICgpIHsNCiAgICB2YXIgbiA9IE51bWJlcihzdHJpbmdpZnkodGhpcywgdHJ1ZSwgdHJ1ZSkpOw0KICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLnN0cmljdCA9PT0gdHJ1ZSAmJiAhdGhpcy5lcShuLnRvU3RyaW5nKCkpKSB7DQogICAgICB0aHJvdyBFcnJvcihOQU1FICsgJ0ltcHJlY2lzZSBjb252ZXJzaW9uJyk7DQogICAgfQ0KICAgIHJldHVybiBuOw0KICB9Ow0KDQoNCiAgLyoNCiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgcm91bmRlZCB0byBzZCBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcNCiAgICogcm91bmRpbmcgbW9kZSBybSwgb3IgQmlnLlJNIGlmIHJtIGlzIG5vdCBzcGVjaWZpZWQuDQogICAqIFVzZSBleHBvbmVudGlhbCBub3RhdGlvbiBpZiBzZCBpcyBsZXNzIHRoYW4gdGhlIG51bWJlciBvZiBkaWdpdHMgbmVjZXNzYXJ5IHRvIHJlcHJlc2VudA0KICAgKiB0aGUgaW50ZWdlciBwYXJ0IG9mIHRoZSB2YWx1ZSBpbiBub3JtYWwgbm90YXRpb24uDQogICAqDQogICAqIHNkIHtudW1iZXJ9IFNpZ25pZmljYW50IGRpZ2l0czogaW50ZWdlciwgMSB0byBNQVhfRFAgaW5jbHVzaXZlLg0KICAgKiBybT8ge251bWJlcn0gUm91bmRpbmcgbW9kZTogMCAoZG93biksIDEgKGhhbGYtdXApLCAyIChoYWxmLWV2ZW4pIG9yIDMgKHVwKS4NCiAgICovDQogIFAkMi50b1ByZWNpc2lvbiA9IGZ1bmN0aW9uIChzZCwgcm0pIHsNCiAgICB2YXIgeCA9IHRoaXMsDQogICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLA0KICAgICAgbiA9IHguY1swXTsNCg0KICAgIGlmIChzZCAhPT0gVU5ERUZJTkVEKSB7DQogICAgICBpZiAoc2QgIT09IH5+c2QgfHwgc2QgPCAxIHx8IHNkID4gTUFYX0RQKSB7DQogICAgICAgIHRocm93IEVycm9yKElOVkFMSUQgKyAncHJlY2lzaW9uJyk7DQogICAgICB9DQogICAgICB4ID0gcm91bmQobmV3IEJpZyh4KSwgc2QsIHJtKTsNCiAgICAgIGZvciAoOyB4LmMubGVuZ3RoIDwgc2Q7KSB4LmMucHVzaCgwKTsNCiAgICB9DQoNCiAgICByZXR1cm4gc3RyaW5naWZ5KHgsIHNkIDw9IHguZSB8fCB4LmUgPD0gQmlnLk5FIHx8IHguZSA+PSBCaWcuUEUsICEhbik7DQogIH07DQoNCg0KICAvKg0KICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZy4NCiAgICogUmV0dXJuIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoaXMgQmlnIGhhcyBhIHBvc2l0aXZlIGV4cG9uZW50IGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhbg0KICAgKiBCaWcuUEUsIG9yIGEgbmVnYXRpdmUgZXhwb25lbnQgZXF1YWwgdG8gb3IgbGVzcyB0aGFuIEJpZy5ORS4NCiAgICogSW5jbHVkZSB0aGUgc2lnbiBmb3IgbmVnYXRpdmUgemVyby4NCiAgICovDQogIFAkMi52YWx1ZU9mID0gZnVuY3Rpb24gKCkgew0KICAgIHZhciB4ID0gdGhpcywNCiAgICAgIEJpZyA9IHguY29uc3RydWN0b3I7DQogICAgaWYgKEJpZy5zdHJpY3QgPT09IHRydWUpIHsNCiAgICAgIHRocm93IEVycm9yKE5BTUUgKyAndmFsdWVPZiBkaXNhbGxvd2VkJyk7DQogICAgfQ0KICAgIHJldHVybiBzdHJpbmdpZnkoeCwgeC5lIDw9IEJpZy5ORSB8fCB4LmUgPj0gQmlnLlBFLCB0cnVlKTsNCiAgfTsNCg0KDQogIC8vIEV4cG9ydA0KDQoNCiAgdmFyIEJpZyA9IF9CaWdfKCk7CgogIHZhciBlJDQ9eyIiOlsiPGVtPiIsIjwvZW0+Il0sXzpbIjxzdHJvbmc+IiwiPC9zdHJvbmc+Il0sIioiOlsiPHN0cm9uZz4iLCI8L3N0cm9uZz4iXSwifiI6WyI8cz4iLCI8L3M+Il0sIlxuIjpbIjxiciAvPiJdLCIgIjpbIjxiciAvPiJdLCItIjpbIjxociAvPiJdfTtmdW5jdGlvbiBuJDIoZSl7cmV0dXJuIGUucmVwbGFjZShSZWdFeHAoIl4iKyhlLm1hdGNoKC9eKFx0fCApKy8pfHwiIilbMF0sImdtIiksIiIpfWZ1bmN0aW9uIHIkMihlKXtyZXR1cm4gKGUrIiIpLnJlcGxhY2UoLyIvZywiJnF1b3Q7IikucmVwbGFjZSgvPC9nLCImbHQ7IikucmVwbGFjZSgvPi9nLCImZ3Q7Iil9ZnVuY3Rpb24gdCQyKGEsbyl7dmFyIGMsbCxzLGcscCx1PS8oKD86XnxcbispKD86XG4tLS0rfFwqIFwqKD86IFwqKSspXG4pfCg/Ol5gYGAgKihcdyopXG4oW1xzXFNdKj8pXG5gYGAkKXwoKD86KD86XnxcbispKD86XHR8ICB7Mix9KS4rKStcbiopfCgoPzooPzpefFxuKShbPiorLV18XGQrXC4pXHMrLiopKyl8KD86IVxbKFteXF1dKj8pXF1cKChbXildKz8pXCkpfChcWyl8KFxdKD86XCgoW14pXSs/KVwpKT8pfCg/Oig/Ol58XG4rKShbXlxzXS4qKVxuKC17Myx9fD17Myx9KSg/OlxuK3wkKSl8KD86KD86XnxcbispKCN7MSw2fSlccyooLispKD86XG4rfCQpKXwoPzpgKFteYF0uKj8pYCl8KCAgXG5cbip8XG57Mix9fF9ffFwqXCp8W18qXXx+fil8PChbXj5dKyk+L2dtLGg9W10sbT0iIixpPW98fHt9LGY9MDtmdW5jdGlvbiBkKG4pe3ZhciByPWUkNFtuWzFdfHwiIl0sdD1oW2gubGVuZ3RoLTFdPT1uO3JldHVybiByP3JbMV0/KHQ/aC5wb3AoKTpoLnB1c2gobiksclswfHRdKTpyWzBdOm59ZnVuY3Rpb24gJCgpe2Zvcih2YXIgZT0iIjtoLmxlbmd0aDspZSs9ZChoW2gubGVuZ3RoLTFdKTtyZXR1cm4gZX1mb3IoYT1hLnJlcGxhY2UoL15cWyguKz8pXF06XHMqKC4rKSQvZ20sZnVuY3Rpb24oZSxuLHIpe3JldHVybiBpW24udG9Mb3dlckNhc2UoKV09ciwiIn0pLnJlcGxhY2UoL15cbit8XG4rJC9nLCIiKTtzPXUuZXhlYyhhKTspbD1hLnN1YnN0cmluZyhmLHMuaW5kZXgpLGY9dS5sYXN0SW5kZXgsYz1zWzBdLGwubWF0Y2goL1teXFxdKFxcXFwpKlxcJC8pfHwoKHA9c1szXXx8c1s0XSk/Yz0nPHByZSBjbGFzcz0iY29kZSAnKyhzWzRdPyJwb2V0cnkiOnNbMl0udG9Mb3dlckNhc2UoKSkrJyI+PGNvZGUnKyhzWzJdPycgY2xhc3M9Imxhbmd1YWdlLScrc1syXS50b0xvd2VyQ2FzZSgpKyciJzoiIikrIj4iK24kMihyJDIocCkucmVwbGFjZSgvXlxuK3xcbiskL2csIiIpKSsiPC9jb2RlPjwvcHJlPiI6KHA9c1s2XSk/KHAubWF0Y2goL1wuLykmJihzWzVdPXNbNV0ucmVwbGFjZSgvXlxkKy9nbSwiIikpLGc9dCQyKG4kMihzWzVdLnJlcGxhY2UoL15ccypbPiorLi1dL2dtLCIiKSkpLCI+Ij09cD9wPSJibG9ja3F1b3RlIjoocD1wLm1hdGNoKC9cLi8pPyJvbCI6InVsIixnPWcucmVwbGFjZSgvXiguKikoXG58JCkvZ20sIjxsaT4kMTwvbGk+IikpLGM9IjwiK3ArIj4iK2crIjwvIitwKyI+Iik6c1s4XT9jPSc8aW1nIHNyYz0iJytyJDIoc1s4XSkrJyIgYWx0PSInK3IkMihzWzddKSsnIj4nOnNbMTBdPyhtPW0ucmVwbGFjZSgiPGE+IiwnPGEgaHJlZj0iJytyJDIoc1sxMV18fGlbbC50b0xvd2VyQ2FzZSgpXSkrJyI+JyksYz0kKCkrIjwvYT4iKTpzWzE4XSYmL14oaHR0cHM/fG1haWx0byk6Ly50ZXN0KHNbMThdKT9jPSc8YSBocmVmPSInK3IkMihzWzE4XSkrJyI+JytyJDIoc1sxOF0pKyI8L2E+IjpzWzldP2M9IjxhPiI6c1sxMl18fHNbMTRdP2M9IjwiKyhwPSJoIisoc1sxNF0/c1sxNF0ubGVuZ3RoOnNbMTNdPiI9Ij8xOjIpKSsiPiIrdCQyKHNbMTJdfHxzWzE1XSxpKSsiPC8iK3ArIj4iOnNbMTZdP2M9Ijxjb2RlPiIrciQyKHNbMTZdKSsiPC9jb2RlPiI6KHNbMTddfHxzWzFdKSYmKGM9ZChzWzE3XXx8Ii0tIikpKSxtKz1sLG0rPWM7cmV0dXJuIChtK2Euc3Vic3RyaW5nKGYpKyQoKSkucmVwbGFjZSgvXlxuK3xcbiskL2csIiIpfQoKICB2YXIgY2xhc3NuYW1lcyA9IHtleHBvcnRzOiB7fX07CgogIC8qIQogICAgQ29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uCiAgICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZQogICAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lcwogICovCgogIChmdW5jdGlvbiAobW9kdWxlKSB7CiAgLyogZ2xvYmFsIGRlZmluZSAqLwoKICAoZnVuY3Rpb24gKCkgewoKICAJdmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5OwoKICAJZnVuY3Rpb24gY2xhc3NOYW1lcygpIHsKICAJCXZhciBjbGFzc2VzID0gW107CgogIAkJZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAJCQl2YXIgYXJnID0gYXJndW1lbnRzW2ldOwogIAkJCWlmICghYXJnKSBjb250aW51ZTsKCiAgCQkJdmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnOwoKICAJCQlpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHsKICAJCQkJY2xhc3Nlcy5wdXNoKGFyZyk7CiAgCQkJfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHsKICAJCQkJaWYgKGFyZy5sZW5ndGgpIHsKICAJCQkJCXZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTsKICAJCQkJCWlmIChpbm5lcikgewogIAkJCQkJCWNsYXNzZXMucHVzaChpbm5lcik7CiAgCQkJCQl9CiAgCQkJCX0KICAJCQl9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7CiAgCQkJCWlmIChhcmcudG9TdHJpbmcgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHsKICAJCQkJCWZvciAodmFyIGtleSBpbiBhcmcpIHsKICAJCQkJCQlpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7CiAgCQkJCQkJCWNsYXNzZXMucHVzaChrZXkpOwogIAkJCQkJCX0KICAJCQkJCX0KICAJCQkJfSBlbHNlIHsKICAJCQkJCWNsYXNzZXMucHVzaChhcmcudG9TdHJpbmcoKSk7CiAgCQkJCX0KICAJCQl9CiAgCQl9CgogIAkJcmV0dXJuIGNsYXNzZXMuam9pbignICcpOwogIAl9CgogIAlpZiAobW9kdWxlLmV4cG9ydHMpIHsKICAJCWNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7CiAgCQltb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7CiAgCX0gZWxzZSB7CiAgCQl3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7CiAgCX0KICB9KCkpOwogIH0oY2xhc3NuYW1lcykpOwoKICB2YXIgY2xhc3NOYW1lcyA9IGNsYXNzbmFtZXMuZXhwb3J0czsKCiAgdmFyIG4kMSxsJDIsdSQxLHQkMSxvJDMsciQxLGYkMSxlJDM9e30sYyQxPVtdLHMkMT0vYWNpdHxleCg/OnN8Z3xufHB8JCl8cnBofGdyaWR8b3dzfG1uY3xudHd8aW5lW2NoXXx6b298Xm9yZHxpdGVyYS9pO2Z1bmN0aW9uIGEkMihuLGwpe2Zvcih2YXIgdSBpbiBsKW5bdV09bFt1XTtyZXR1cm4gbn1mdW5jdGlvbiBoJDEobil7dmFyIGw9bi5wYXJlbnROb2RlO2wmJmwucmVtb3ZlQ2hpbGQobik7fWZ1bmN0aW9uIHYkMShsLHUsaSl7dmFyIHQsbyxyLGY9e307Zm9yKHIgaW4gdSkia2V5Ij09cj90PXVbcl06InJlZiI9PXI/bz11W3JdOmZbcl09dVtyXTtpZihhcmd1bWVudHMubGVuZ3RoPjImJihmLmNoaWxkcmVuPWFyZ3VtZW50cy5sZW5ndGg+Mz9uJDEuY2FsbChhcmd1bWVudHMsMik6aSksImZ1bmN0aW9uIj09dHlwZW9mIGwmJm51bGwhPWwuZGVmYXVsdFByb3BzKWZvcihyIGluIGwuZGVmYXVsdFByb3BzKXZvaWQgMD09PWZbcl0mJihmW3JdPWwuZGVmYXVsdFByb3BzW3JdKTtyZXR1cm4geSQxKGwsZix0LG8sbnVsbCl9ZnVuY3Rpb24geSQxKG4saSx0LG8scil7dmFyIGY9e3R5cGU6bixwcm9wczppLGtleTp0LHJlZjpvLF9fazpudWxsLF9fOm51bGwsX19iOjAsX19lOm51bGwsX19kOnZvaWQgMCxfX2M6bnVsbCxfX2g6bnVsbCxjb25zdHJ1Y3Rvcjp2b2lkIDAsX192Om51bGw9PXI/Kyt1JDE6cn07cmV0dXJuIG51bGwhPWwkMi52bm9kZSYmbCQyLnZub2RlKGYpLGZ9ZnVuY3Rpb24gcCQyKCl7cmV0dXJuIHtjdXJyZW50Om51bGx9fWZ1bmN0aW9uIGQkMShuKXtyZXR1cm4gbi5jaGlsZHJlbn1mdW5jdGlvbiBfJDEobixsKXt0aGlzLnByb3BzPW4sdGhpcy5jb250ZXh0PWw7fWZ1bmN0aW9uIGskMihuLGwpe2lmKG51bGw9PWwpcmV0dXJuIG4uX18/ayQyKG4uX18sbi5fXy5fX2suaW5kZXhPZihuKSsxKTpudWxsO2Zvcih2YXIgdTtsPG4uX19rLmxlbmd0aDtsKyspaWYobnVsbCE9KHU9bi5fX2tbbF0pJiZudWxsIT11Ll9fZSlyZXR1cm4gdS5fX2U7cmV0dXJuICJmdW5jdGlvbiI9PXR5cGVvZiBuLnR5cGU/ayQyKG4pOm51bGx9ZnVuY3Rpb24gYiQxKG4pe3ZhciBsLHU7aWYobnVsbCE9KG49bi5fXykmJm51bGwhPW4uX19jKXtmb3Iobi5fX2U9bi5fX2MuYmFzZT1udWxsLGw9MDtsPG4uX19rLmxlbmd0aDtsKyspaWYobnVsbCE9KHU9bi5fX2tbbF0pJiZudWxsIT11Ll9fZSl7bi5fX2U9bi5fX2MuYmFzZT11Ll9fZTticmVha31yZXR1cm4gYiQxKG4pfX1mdW5jdGlvbiBtJDEobil7KCFuLl9fZCYmKG4uX19kPSEwKSYmdCQxLnB1c2gobikmJiFnJDIuX19yKyt8fHIkMSE9PWwkMi5kZWJvdW5jZVJlbmRlcmluZykmJigociQxPWwkMi5kZWJvdW5jZVJlbmRlcmluZyl8fG8kMykoZyQyKTt9ZnVuY3Rpb24gZyQyKCl7Zm9yKHZhciBuO2ckMi5fX3I9dCQxLmxlbmd0aDspbj10JDEuc29ydChmdW5jdGlvbihuLGwpe3JldHVybiBuLl9fdi5fX2ItbC5fX3YuX19ifSksdCQxPVtdLG4uc29tZShmdW5jdGlvbihuKXt2YXIgbCx1LGksdCxvLHI7bi5fX2QmJihvPSh0PShsPW4pLl9fdikuX19lLChyPWwuX19QKSYmKHU9W10sKGk9YSQyKHt9LHQpKS5fX3Y9dC5fX3YrMSxqJDIocix0LGksbC5fX24sdm9pZCAwIT09ci5vd25lclNWR0VsZW1lbnQsbnVsbCE9dC5fX2g/W29dOm51bGwsdSxudWxsPT1vP2skMih0KTpvLHQuX19oKSx6JDEodSx0KSx0Ll9fZSE9byYmYiQxKHQpKSk7fSk7fWZ1bmN0aW9uIHckMihuLGwsdSxpLHQsbyxyLGYscyxhKXt2YXIgaCx2LHAsXyxiLG0sZyx3PWkmJmkuX19rfHxjJDEsQT13Lmxlbmd0aDtmb3IodS5fX2s9W10saD0wO2g8bC5sZW5ndGg7aCsrKWlmKG51bGwhPShfPXUuX19rW2hdPW51bGw9PShfPWxbaF0pfHwiYm9vbGVhbiI9PXR5cGVvZiBfP251bGw6InN0cmluZyI9PXR5cGVvZiBffHwibnVtYmVyIj09dHlwZW9mIF98fCJiaWdpbnQiPT10eXBlb2YgXz95JDEobnVsbCxfLG51bGwsbnVsbCxfKTpBcnJheS5pc0FycmF5KF8pP3kkMShkJDEse2NoaWxkcmVuOl99LG51bGwsbnVsbCxudWxsKTpfLl9fYj4wP3kkMShfLnR5cGUsXy5wcm9wcyxfLmtleSxudWxsLF8uX192KTpfKSl7aWYoXy5fXz11LF8uX19iPXUuX19iKzEsbnVsbD09PShwPXdbaF0pfHxwJiZfLmtleT09cC5rZXkmJl8udHlwZT09PXAudHlwZSl3W2hdPXZvaWQgMDtlbHNlIGZvcih2PTA7djxBO3YrKyl7aWYoKHA9d1t2XSkmJl8ua2V5PT1wLmtleSYmXy50eXBlPT09cC50eXBlKXt3W3ZdPXZvaWQgMDticmVha31wPW51bGw7fWokMihuLF8scD1wfHxlJDMsdCxvLHIsZixzLGEpLGI9Xy5fX2UsKHY9Xy5yZWYpJiZwLnJlZiE9diYmKGd8fChnPVtdKSxwLnJlZiYmZy5wdXNoKHAucmVmLG51bGwsXyksZy5wdXNoKHYsXy5fX2N8fGIsXykpLG51bGwhPWI/KG51bGw9PW0mJihtPWIpLCJmdW5jdGlvbiI9PXR5cGVvZiBfLnR5cGUmJm51bGwhPV8uX19rJiZfLl9faz09PXAuX19rP18uX19kPXM9eCQyKF8scyxuKTpzPVAkMShuLF8scCx3LGIscyksYXx8Im9wdGlvbiIhPT11LnR5cGU/ImZ1bmN0aW9uIj09dHlwZW9mIHUudHlwZSYmKHUuX19kPXMpOm4udmFsdWU9IiIpOnMmJnAuX19lPT1zJiZzLnBhcmVudE5vZGUhPW4mJihzPWskMihwKSk7fWZvcih1Ll9fZT1tLGg9QTtoLS07KW51bGwhPXdbaF0mJigiZnVuY3Rpb24iPT10eXBlb2YgdS50eXBlJiZudWxsIT13W2hdLl9fZSYmd1toXS5fX2U9PXUuX19kJiYodS5fX2Q9ayQyKGksaCsxKSksTiQxKHdbaF0sd1toXSkpO2lmKGcpZm9yKGg9MDtoPGcubGVuZ3RoO2grKylNJDEoZ1toXSxnWysraF0sZ1srK2hdKTt9ZnVuY3Rpb24geCQyKG4sbCx1KXt2YXIgaSx0O2ZvcihpPTA7aTxuLl9fay5sZW5ndGg7aSsrKSh0PW4uX19rW2ldKSYmKHQuX189bixsPSJmdW5jdGlvbiI9PXR5cGVvZiB0LnR5cGU/eCQyKHQsbCx1KTpQJDEodSx0LHQsbi5fX2ssdC5fX2UsbCkpO3JldHVybiBsfWZ1bmN0aW9uIEEkMihuLGwpe3JldHVybiBsPWx8fFtdLG51bGw9PW58fCJib29sZWFuIj09dHlwZW9mIG58fChBcnJheS5pc0FycmF5KG4pP24uc29tZShmdW5jdGlvbihuKXtBJDIobixsKTt9KTpsLnB1c2gobikpLGx9ZnVuY3Rpb24gUCQxKG4sbCx1LGksdCxvKXt2YXIgcixmLGU7aWYodm9pZCAwIT09bC5fX2Qpcj1sLl9fZCxsLl9fZD12b2lkIDA7ZWxzZSBpZihudWxsPT11fHx0IT1vfHxudWxsPT10LnBhcmVudE5vZGUpbjppZihudWxsPT1vfHxvLnBhcmVudE5vZGUhPT1uKW4uYXBwZW5kQ2hpbGQodCkscj1udWxsO2Vsc2Uge2ZvcihmPW8sZT0wOyhmPWYubmV4dFNpYmxpbmcpJiZlPGkubGVuZ3RoO2UrPTIpaWYoZj09dClicmVhayBuO24uaW5zZXJ0QmVmb3JlKHQsbykscj1vO31yZXR1cm4gdm9pZCAwIT09cj9yOnQubmV4dFNpYmxpbmd9ZnVuY3Rpb24gQyQxKG4sbCx1LGksdCl7dmFyIG87Zm9yKG8gaW4gdSkiY2hpbGRyZW4iPT09b3x8ImtleSI9PT1vfHxvIGluIGx8fEgkMShuLG8sbnVsbCx1W29dLGkpO2ZvcihvIGluIGwpdCYmImZ1bmN0aW9uIiE9dHlwZW9mIGxbb118fCJjaGlsZHJlbiI9PT1vfHwia2V5Ij09PW98fCJ2YWx1ZSI9PT1vfHwiY2hlY2tlZCI9PT1vfHx1W29dPT09bFtvXXx8SCQxKG4sbyxsW29dLHVbb10saSk7fWZ1bmN0aW9uICQkMShuLGwsdSl7Ii0iPT09bFswXT9uLnNldFByb3BlcnR5KGwsdSk6bltsXT1udWxsPT11PyIiOiJudW1iZXIiIT10eXBlb2YgdXx8cyQxLnRlc3QobCk/dTp1KyJweCI7fWZ1bmN0aW9uIEgkMShuLGwsdSxpLHQpe3ZhciBvO246aWYoInN0eWxlIj09PWwpaWYoInN0cmluZyI9PXR5cGVvZiB1KW4uc3R5bGUuY3NzVGV4dD11O2Vsc2Uge2lmKCJzdHJpbmciPT10eXBlb2YgaSYmKG4uc3R5bGUuY3NzVGV4dD1pPSIiKSxpKWZvcihsIGluIGkpdSYmbCBpbiB1fHwkJDEobi5zdHlsZSxsLCIiKTtpZih1KWZvcihsIGluIHUpaSYmdVtsXT09PWlbbF18fCQkMShuLnN0eWxlLGwsdVtsXSk7fWVsc2UgaWYoIm8iPT09bFswXSYmIm4iPT09bFsxXSlvPWwhPT0obD1sLnJlcGxhY2UoL0NhcHR1cmUkLywiIikpLGw9bC50b0xvd2VyQ2FzZSgpaW4gbj9sLnRvTG93ZXJDYXNlKCkuc2xpY2UoMik6bC5zbGljZSgyKSxuLmx8fChuLmw9e30pLG4ubFtsK29dPXUsdT9pfHxuLmFkZEV2ZW50TGlzdGVuZXIobCxvP1QkMjpJJDEsbyk6bi5yZW1vdmVFdmVudExpc3RlbmVyKGwsbz9UJDI6SSQxLG8pO2Vsc2UgaWYoImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiE9PWwpe2lmKHQpbD1sLnJlcGxhY2UoL3hsaW5rW0g6aF0vLCJoIikucmVwbGFjZSgvc05hbWUkLywicyIpO2Vsc2UgaWYoImhyZWYiIT09bCYmImxpc3QiIT09bCYmImZvcm0iIT09bCYmInRhYkluZGV4IiE9PWwmJiJkb3dubG9hZCIhPT1sJiZsIGluIG4pdHJ5e25bbF09bnVsbD09dT8iIjp1O2JyZWFrIG59Y2F0Y2gobil7fSJmdW5jdGlvbiI9PXR5cGVvZiB1fHwobnVsbCE9dSYmKCExIT09dXx8ImEiPT09bFswXSYmInIiPT09bFsxXSk/bi5zZXRBdHRyaWJ1dGUobCx1KTpuLnJlbW92ZUF0dHJpYnV0ZShsKSk7fX1mdW5jdGlvbiBJJDEobil7dGhpcy5sW24udHlwZSshMV0obCQyLmV2ZW50P2wkMi5ldmVudChuKTpuKTt9ZnVuY3Rpb24gVCQyKG4pe3RoaXMubFtuLnR5cGUrITBdKGwkMi5ldmVudD9sJDIuZXZlbnQobik6bik7fWZ1bmN0aW9uIGokMihuLHUsaSx0LG8scixmLGUsYyl7dmFyIHMsaCx2LHkscCxrLGIsbSxnLHgsQSxQPXUudHlwZTtpZih2b2lkIDAhPT11LmNvbnN0cnVjdG9yKXJldHVybiBudWxsO251bGwhPWkuX19oJiYoYz1pLl9faCxlPXUuX19lPWkuX19lLHUuX19oPW51bGwscj1bZV0pLChzPWwkMi5fX2IpJiZzKHUpO3RyeXtuOmlmKCJmdW5jdGlvbiI9PXR5cGVvZiBQKXtpZihtPXUucHJvcHMsZz0ocz1QLmNvbnRleHRUeXBlKSYmdFtzLl9fY10seD1zP2c/Zy5wcm9wcy52YWx1ZTpzLl9fOnQsaS5fX2M/Yj0oaD11Ll9fYz1pLl9fYykuX189aC5fX0U6KCJwcm90b3R5cGUiaW4gUCYmUC5wcm90b3R5cGUucmVuZGVyP3UuX19jPWg9bmV3IFAobSx4KToodS5fX2M9aD1uZXcgXyQxKG0seCksaC5jb25zdHJ1Y3Rvcj1QLGgucmVuZGVyPU8kMSksZyYmZy5zdWIoaCksaC5wcm9wcz1tLGguc3RhdGV8fChoLnN0YXRlPXt9KSxoLmNvbnRleHQ9eCxoLl9fbj10LHY9aC5fX2Q9ITAsaC5fX2g9W10pLG51bGw9PWguX19zJiYoaC5fX3M9aC5zdGF0ZSksbnVsbCE9UC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJihoLl9fcz09aC5zdGF0ZSYmKGguX19zPWEkMih7fSxoLl9fcykpLGEkMihoLl9fcyxQLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhtLGguX19zKSkpLHk9aC5wcm9wcyxwPWguc3RhdGUsdiludWxsPT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbnVsbCE9aC5jb21wb25lbnRXaWxsTW91bnQmJmguY29tcG9uZW50V2lsbE1vdW50KCksbnVsbCE9aC5jb21wb25lbnREaWRNb3VudCYmaC5fX2gucHVzaChoLmNvbXBvbmVudERpZE1vdW50KTtlbHNlIHtpZihudWxsPT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbSE9PXkmJm51bGwhPWguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmaC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG0seCksIWguX19lJiZudWxsIT1oLnNob3VsZENvbXBvbmVudFVwZGF0ZSYmITE9PT1oLnNob3VsZENvbXBvbmVudFVwZGF0ZShtLGguX19zLHgpfHx1Ll9fdj09PWkuX192KXtoLnByb3BzPW0saC5zdGF0ZT1oLl9fcyx1Ll9fdiE9PWkuX192JiYoaC5fX2Q9ITEpLGguX192PXUsdS5fX2U9aS5fX2UsdS5fX2s9aS5fX2ssdS5fX2suZm9yRWFjaChmdW5jdGlvbihuKXtuJiYobi5fXz11KTt9KSxoLl9faC5sZW5ndGgmJmYucHVzaChoKTticmVhayBufW51bGwhPWguY29tcG9uZW50V2lsbFVwZGF0ZSYmaC5jb21wb25lbnRXaWxsVXBkYXRlKG0saC5fX3MseCksbnVsbCE9aC5jb21wb25lbnREaWRVcGRhdGUmJmguX19oLnB1c2goZnVuY3Rpb24oKXtoLmNvbXBvbmVudERpZFVwZGF0ZSh5LHAsayk7fSk7fWguY29udGV4dD14LGgucHJvcHM9bSxoLnN0YXRlPWguX19zLChzPWwkMi5fX3IpJiZzKHUpLGguX19kPSExLGguX192PXUsaC5fX1A9bixzPWgucmVuZGVyKGgucHJvcHMsaC5zdGF0ZSxoLmNvbnRleHQpLGguc3RhdGU9aC5fX3MsbnVsbCE9aC5nZXRDaGlsZENvbnRleHQmJih0PWEkMihhJDIoe30sdCksaC5nZXRDaGlsZENvbnRleHQoKSkpLHZ8fG51bGw9PWguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fChrPWguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoeSxwKSksQT1udWxsIT1zJiZzLnR5cGU9PT1kJDEmJm51bGw9PXMua2V5P3MucHJvcHMuY2hpbGRyZW46cyx3JDIobixBcnJheS5pc0FycmF5KEEpP0E6W0FdLHUsaSx0LG8scixmLGUsYyksaC5iYXNlPXUuX19lLHUuX19oPW51bGwsaC5fX2gubGVuZ3RoJiZmLnB1c2goaCksYiYmKGguX19FPWguX189bnVsbCksaC5fX2U9ITE7fWVsc2UgbnVsbD09ciYmdS5fX3Y9PT1pLl9fdj8odS5fX2s9aS5fX2ssdS5fX2U9aS5fX2UpOnUuX19lPUwkMShpLl9fZSx1LGksdCxvLHIsZixjKTsocz1sJDIuZGlmZmVkKSYmcyh1KTt9Y2F0Y2gobil7dS5fX3Y9bnVsbCwoY3x8bnVsbCE9cikmJih1Ll9fZT1lLHUuX19oPSEhYyxyW3IuaW5kZXhPZihlKV09bnVsbCksbCQyLl9fZShuLHUsaSk7fX1mdW5jdGlvbiB6JDEobix1KXtsJDIuX19jJiZsJDIuX19jKHUsbiksbi5zb21lKGZ1bmN0aW9uKHUpe3RyeXtuPXUuX19oLHUuX19oPVtdLG4uc29tZShmdW5jdGlvbihuKXtuLmNhbGwodSk7fSk7fWNhdGNoKG4pe2wkMi5fX2Uobix1Ll9fdik7fX0pO31mdW5jdGlvbiBMJDEobCx1LGksdCxvLHIsZixjKXt2YXIgcyxhLHYseT1pLnByb3BzLHA9dS5wcm9wcyxkPXUudHlwZSxfPTA7aWYoInN2ZyI9PT1kJiYobz0hMCksbnVsbCE9cilmb3IoO188ci5sZW5ndGg7XysrKWlmKChzPXJbX10pJiYocz09PWx8fChkP3MubG9jYWxOYW1lPT1kOjM9PXMubm9kZVR5cGUpKSl7bD1zLHJbX109bnVsbDticmVha31pZihudWxsPT1sKXtpZihudWxsPT09ZClyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocCk7bD1vP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLGQpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZCxwLmlzJiZwKSxyPW51bGwsYz0hMTt9aWYobnVsbD09PWQpeT09PXB8fGMmJmwuZGF0YT09PXB8fChsLmRhdGE9cCk7ZWxzZSB7aWYocj1yJiZuJDEuY2FsbChsLmNoaWxkTm9kZXMpLGE9KHk9aS5wcm9wc3x8ZSQzKS5kYW5nZXJvdXNseVNldElubmVySFRNTCx2PXAuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsIWMpe2lmKG51bGwhPXIpZm9yKHk9e30sXz0wO188bC5hdHRyaWJ1dGVzLmxlbmd0aDtfKyspeVtsLmF0dHJpYnV0ZXNbX10ubmFtZV09bC5hdHRyaWJ1dGVzW19dLnZhbHVlOyh2fHxhKSYmKHYmJihhJiZ2Ll9faHRtbD09YS5fX2h0bWx8fHYuX19odG1sPT09bC5pbm5lckhUTUwpfHwobC5pbm5lckhUTUw9diYmdi5fX2h0bWx8fCIiKSk7fWlmKEMkMShsLHAseSxvLGMpLHYpdS5fX2s9W107ZWxzZSBpZihfPXUucHJvcHMuY2hpbGRyZW4sdyQyKGwsQXJyYXkuaXNBcnJheShfKT9fOltfXSx1LGksdCxvJiYiZm9yZWlnbk9iamVjdCIhPT1kLHIsZixyP3JbMF06aS5fX2smJmskMihpLDApLGMpLG51bGwhPXIpZm9yKF89ci5sZW5ndGg7Xy0tOyludWxsIT1yW19dJiZoJDEocltfXSk7Y3x8KCJ2YWx1ZSJpbiBwJiZ2b2lkIDAhPT0oXz1wLnZhbHVlKSYmKF8hPT1sLnZhbHVlfHwicHJvZ3Jlc3MiPT09ZCYmIV8pJiZIJDEobCwidmFsdWUiLF8seS52YWx1ZSwhMSksImNoZWNrZWQiaW4gcCYmdm9pZCAwIT09KF89cC5jaGVja2VkKSYmXyE9PWwuY2hlY2tlZCYmSCQxKGwsImNoZWNrZWQiLF8seS5jaGVja2VkLCExKSk7fXJldHVybiBsfWZ1bmN0aW9uIE0kMShuLHUsaSl7dHJ5eyJmdW5jdGlvbiI9PXR5cGVvZiBuP24odSk6bi5jdXJyZW50PXU7fWNhdGNoKG4pe2wkMi5fX2UobixpKTt9fWZ1bmN0aW9uIE4kMShuLHUsaSl7dmFyIHQsbztpZihsJDIudW5tb3VudCYmbCQyLnVubW91bnQobiksKHQ9bi5yZWYpJiYodC5jdXJyZW50JiZ0LmN1cnJlbnQhPT1uLl9fZXx8TSQxKHQsbnVsbCx1KSksbnVsbCE9KHQ9bi5fX2MpKXtpZih0LmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXt0LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7fWNhdGNoKG4pe2wkMi5fX2Uobix1KTt9dC5iYXNlPXQuX19QPW51bGw7fWlmKHQ9bi5fX2spZm9yKG89MDtvPHQubGVuZ3RoO28rKyl0W29dJiZOJDEodFtvXSx1LCJmdW5jdGlvbiIhPXR5cGVvZiBuLnR5cGUpO2l8fG51bGw9PW4uX19lfHxoJDEobi5fX2UpLG4uX19lPW4uX19kPXZvaWQgMDt9ZnVuY3Rpb24gTyQxKG4sbCx1KXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihuLHUpfWZ1bmN0aW9uIFMkMSh1LGksdCl7dmFyIG8scixmO2wkMi5fXyYmbCQyLl9fKHUsaSkscj0obz0iZnVuY3Rpb24iPT10eXBlb2YgdCk/bnVsbDp0JiZ0Ll9fa3x8aS5fX2ssZj1bXSxqJDIoaSx1PSghbyYmdHx8aSkuX19rPXYkMShkJDEsbnVsbCxbdV0pLHJ8fGUkMyxlJDMsdm9pZCAwIT09aS5vd25lclNWR0VsZW1lbnQsIW8mJnQ/W3RdOnI/bnVsbDppLmZpcnN0Q2hpbGQ/biQxLmNhbGwoaS5jaGlsZE5vZGVzKTpudWxsLGYsIW8mJnQ/dDpyP3IuX19lOmkuZmlyc3RDaGlsZCxvKSx6JDEoZix1KTt9ZnVuY3Rpb24gcSQxKG4sbCl7UyQxKG4sbCxxJDEpO31mdW5jdGlvbiBCJDEobCx1LGkpe3ZhciB0LG8scixmPWEkMih7fSxsLnByb3BzKTtmb3IociBpbiB1KSJrZXkiPT1yP3Q9dVtyXToicmVmIj09cj9vPXVbcl06ZltyXT11W3JdO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjImJihmLmNoaWxkcmVuPWFyZ3VtZW50cy5sZW5ndGg+Mz9uJDEuY2FsbChhcmd1bWVudHMsMik6aSkseSQxKGwudHlwZSxmLHR8fGwua2V5LG98fGwucmVmLG51bGwpfWZ1bmN0aW9uIEQkMShuLGwpe3ZhciB1PXtfX2M6bD0iX19jQyIrZiQxKyssX186bixDb25zdW1lcjpmdW5jdGlvbihuLGwpe3JldHVybiBuLmNoaWxkcmVuKGwpfSxQcm92aWRlcjpmdW5jdGlvbihuKXt2YXIgdSxpO3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dHx8KHU9W10sKGk9e30pW2xdPXRoaXMsdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gaX0sdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5wcm9wcy52YWx1ZSE9PW4udmFsdWUmJnUuc29tZShtJDEpO30sdGhpcy5zdWI9ZnVuY3Rpb24obil7dS5wdXNoKG4pO3ZhciBsPW4uY29tcG9uZW50V2lsbFVubW91bnQ7bi5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3Uuc3BsaWNlKHUuaW5kZXhPZihuKSwxKSxsJiZsLmNhbGwobik7fTt9KSxuLmNoaWxkcmVufX07cmV0dXJuIHUuUHJvdmlkZXIuX189dS5Db25zdW1lci5jb250ZXh0VHlwZT11fW4kMT1jJDEuc2xpY2UsbCQyPXtfX2U6ZnVuY3Rpb24obixsKXtmb3IodmFyIHUsaSx0O2w9bC5fXzspaWYoKHU9bC5fX2MpJiYhdS5fXyl0cnl7aWYoKGk9dS5jb25zdHJ1Y3RvcikmJm51bGwhPWkuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yJiYodS5zZXRTdGF0ZShpLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihuKSksdD11Ll9fZCksbnVsbCE9dS5jb21wb25lbnREaWRDYXRjaCYmKHUuY29tcG9uZW50RGlkQ2F0Y2gobiksdD11Ll9fZCksdClyZXR1cm4gdS5fX0U9dX1jYXRjaChsKXtuPWw7fXRocm93IG59fSx1JDE9MCxfJDEucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKG4sbCl7dmFyIHU7dT1udWxsIT10aGlzLl9fcyYmdGhpcy5fX3MhPT10aGlzLnN0YXRlP3RoaXMuX19zOnRoaXMuX19zPWEkMih7fSx0aGlzLnN0YXRlKSwiZnVuY3Rpb24iPT10eXBlb2YgbiYmKG49bihhJDIoe30sdSksdGhpcy5wcm9wcykpLG4mJmEkMih1LG4pLG51bGwhPW4mJnRoaXMuX192JiYobCYmdGhpcy5fX2gucHVzaChsKSxtJDEodGhpcykpO30sXyQxLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLl9fdiYmKHRoaXMuX19lPSEwLG4mJnRoaXMuX19oLnB1c2gobiksbSQxKHRoaXMpKTt9LF8kMS5wcm90b3R5cGUucmVuZGVyPWQkMSx0JDE9W10sbyQzPSJmdW5jdGlvbiI9PXR5cGVvZiBQcm9taXNlP1Byb21pc2UucHJvdG90eXBlLnRoZW4uYmluZChQcm9taXNlLnJlc29sdmUoKSk6c2V0VGltZW91dCxnJDIuX19yPTAsZiQxPTA7CgogIHZhciBvJDI9MDtmdW5jdGlvbiBlJDIoXyxlLG4sdCxmKXt2YXIgbCxzLHU9e307Zm9yKHMgaW4gZSkicmVmIj09cz9sPWVbc106dVtzXT1lW3NdO3ZhciBhPXt0eXBlOl8scHJvcHM6dSxrZXk6bixyZWY6bCxfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsX19oOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjotLW8kMixfX3NvdXJjZTp0LF9fc2VsZjpmfTtpZigiZnVuY3Rpb24iPT10eXBlb2YgXyYmKGw9Xy5kZWZhdWx0UHJvcHMpKWZvcihzIGluIGwpdm9pZCAwPT09dVtzXSYmKHVbc109bFtzXSk7cmV0dXJuIGwkMi52bm9kZSYmbCQyLnZub2RlKGEpLGF9CgogIHZhciB0LHUscixvJDE9MCxpJDE9W10sYz1sJDIuX19iLGY9bCQyLl9fcixlJDE9bCQyLmRpZmZlZCxhJDE9bCQyLl9fYyx2PWwkMi51bm1vdW50O2Z1bmN0aW9uIG0odCxyKXtsJDIuX19oJiZsJDIuX19oKHUsdCxvJDF8fHIpLG8kMT0wO3ZhciBpPXUuX19IfHwodS5fX0g9e19fOltdLF9faDpbXX0pO3JldHVybiB0Pj1pLl9fLmxlbmd0aCYmaS5fXy5wdXNoKHt9KSxpLl9fW3RdfWZ1bmN0aW9uIGwkMShuKXtyZXR1cm4gbyQxPTEscCQxKHckMSxuKX1mdW5jdGlvbiBwJDEobixyLG8pe3ZhciBpPW0odCsrLDIpO3JldHVybiBpLnQ9bixpLl9fY3x8KGkuX189W28/byhyKTp3JDEodm9pZCAwLHIpLGZ1bmN0aW9uKG4pe3ZhciB0PWkudChpLl9fWzBdLG4pO2kuX19bMF0hPT10JiYoaS5fXz1bdCxpLl9fWzFdXSxpLl9fYy5zZXRTdGF0ZSh7fSkpO31dLGkuX19jPXUpLGkuX199ZnVuY3Rpb24geShyLG8pe3ZhciBpPW0odCsrLDMpOyFsJDIuX19zJiZrJDEoaS5fX0gsbykmJihpLl9fPXIsaS5fX0g9byx1Ll9fSC5fX2gucHVzaChpKSk7fWZ1bmN0aW9uIGgocixvKXt2YXIgaT1tKHQrKyw0KTshbCQyLl9fcyYmayQxKGkuX19ILG8pJiYoaS5fXz1yLGkuX19IPW8sdS5fX2gucHVzaChpKSk7fWZ1bmN0aW9uIHMobil7cmV0dXJuIG8kMT01LGQoZnVuY3Rpb24oKXtyZXR1cm4ge2N1cnJlbnQ6bn19LFtdKX1mdW5jdGlvbiBfKG4sdCx1KXtvJDE9NixoKGZ1bmN0aW9uKCl7ImZ1bmN0aW9uIj09dHlwZW9mIG4/bih0KCkpOm4mJihuLmN1cnJlbnQ9dCgpKTt9LG51bGw9PXU/dTp1LmNvbmNhdChuKSk7fWZ1bmN0aW9uIGQobix1KXt2YXIgcj1tKHQrKyw3KTtyZXR1cm4gayQxKHIuX19ILHUpJiYoci5fXz1uKCksci5fX0g9dSxyLl9faD1uKSxyLl9ffWZ1bmN0aW9uIEEkMShuLHQpe3JldHVybiBvJDE9OCxkKGZ1bmN0aW9uKCl7cmV0dXJuIG59LHQpfWZ1bmN0aW9uIEYkMShuKXt2YXIgcj11LmNvbnRleHRbbi5fX2NdLG89bSh0KyssOSk7cmV0dXJuIG8uYz1uLHI/KG51bGw9PW8uX18mJihvLl9fPSEwLHIuc3ViKHUpKSxyLnByb3BzLnZhbHVlKTpuLl9ffWZ1bmN0aW9uIFQkMSh0LHUpe2wkMi51c2VEZWJ1Z1ZhbHVlJiZsJDIudXNlRGVidWdWYWx1ZSh1P3UodCk6dCk7fWZ1bmN0aW9uIHgkMSgpe2kkMS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKHQuX19QKXRyeXt0Ll9fSC5fX2guZm9yRWFjaChnJDEpLHQuX19ILl9faC5mb3JFYWNoKGokMSksdC5fX0guX19oPVtdO31jYXRjaCh1KXt0Ll9fSC5fX2g9W10sbCQyLl9fZSh1LHQuX192KTt9fSksaSQxPVtdO31sJDIuX19iPWZ1bmN0aW9uKG4pe3U9bnVsbCxjJiZjKG4pO30sbCQyLl9fcj1mdW5jdGlvbihuKXtmJiZmKG4pLHQ9MDt2YXIgcj0odT1uLl9fYykuX19IO3ImJihyLl9faC5mb3JFYWNoKGckMSksci5fX2guZm9yRWFjaChqJDEpLHIuX19oPVtdKTt9LGwkMi5kaWZmZWQ9ZnVuY3Rpb24odCl7ZSQxJiZlJDEodCk7dmFyIG89dC5fX2M7byYmby5fX0gmJm8uX19ILl9faC5sZW5ndGgmJigxIT09aSQxLnB1c2gobykmJnI9PT1sJDIucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHwoKHI9bCQyLnJlcXVlc3RBbmltYXRpb25GcmFtZSl8fGZ1bmN0aW9uKG4pe3ZhciB0LHU9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQociksYiYmY2FuY2VsQW5pbWF0aW9uRnJhbWUodCksc2V0VGltZW91dChuKTt9LHI9c2V0VGltZW91dCh1LDEwMCk7YiYmKHQ9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHUpKTt9KSh4JDEpKSx1PXZvaWQgMDt9LGwkMi5fX2M9ZnVuY3Rpb24odCx1KXt1LnNvbWUoZnVuY3Rpb24odCl7dHJ5e3QuX19oLmZvckVhY2goZyQxKSx0Ll9faD10Ll9faC5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuICFuLl9ffHxqJDEobil9KTt9Y2F0Y2gocil7dS5zb21lKGZ1bmN0aW9uKG4pe24uX19oJiYobi5fX2g9W10pO30pLHU9W10sbCQyLl9fZShyLHQuX192KTt9fSksYSQxJiZhJDEodCx1KTt9LGwkMi51bm1vdW50PWZ1bmN0aW9uKHQpe3YmJnYodCk7dmFyIHU9dC5fX2M7aWYodSYmdS5fX0gpdHJ5e3UuX19ILl9fLmZvckVhY2goZyQxKTt9Y2F0Y2godCl7bCQyLl9fZSh0LHUuX192KTt9fTt2YXIgYj0iZnVuY3Rpb24iPT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lO2Z1bmN0aW9uIGckMShuKXt2YXIgdD11OyJmdW5jdGlvbiI9PXR5cGVvZiBuLl9fYyYmbi5fX2MoKSx1PXQ7fWZ1bmN0aW9uIGokMShuKXt2YXIgdD11O24uX19jPW4uX18oKSx1PXQ7fWZ1bmN0aW9uIGskMShuLHQpe3JldHVybiAhbnx8bi5sZW5ndGghPT10Lmxlbmd0aHx8dC5zb21lKGZ1bmN0aW9uKHQsdSl7cmV0dXJuIHQhPT1uW3VdfSl9ZnVuY3Rpb24gdyQxKG4sdCl7cmV0dXJuICJmdW5jdGlvbiI9PXR5cGVvZiB0P3Qobik6dH0KCiAgZnVuY3Rpb24gUyhuLHQpe2Zvcih2YXIgZSBpbiB0KW5bZV09dFtlXTtyZXR1cm4gbn1mdW5jdGlvbiBDKG4sdCl7Zm9yKHZhciBlIGluIG4paWYoIl9fc291cmNlIiE9PWUmJiEoZSBpbiB0KSlyZXR1cm4gITA7Zm9yKHZhciByIGluIHQpaWYoIl9fc291cmNlIiE9PXImJm5bcl0hPT10W3JdKXJldHVybiAhMDtyZXR1cm4gITF9ZnVuY3Rpb24gRShuKXt0aGlzLnByb3BzPW47fWZ1bmN0aW9uIGcobix0KXtmdW5jdGlvbiBlKG4pe3ZhciBlPXRoaXMucHJvcHMucmVmLHI9ZT09bi5yZWY7cmV0dXJuICFyJiZlJiYoZS5jYWxsP2UobnVsbCk6ZS5jdXJyZW50PW51bGwpLHQ/IXQodGhpcy5wcm9wcyxuKXx8IXI6Qyh0aGlzLnByb3BzLG4pfWZ1bmN0aW9uIHIodCl7cmV0dXJuIHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWUsdiQxKG4sdCl9cmV0dXJuIHIuZGlzcGxheU5hbWU9Ik1lbW8oIisobi5kaXNwbGF5TmFtZXx8bi5uYW1lKSsiKSIsci5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD0hMCxyLl9fZj0hMCxyfShFLnByb3RvdHlwZT1uZXcgXyQxKS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMCxFLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGU9ZnVuY3Rpb24obix0KXtyZXR1cm4gQyh0aGlzLnByb3BzLG4pfHxDKHRoaXMuc3RhdGUsdCl9O3ZhciB3PWwkMi5fX2I7bCQyLl9fYj1mdW5jdGlvbihuKXtuLnR5cGUmJm4udHlwZS5fX2YmJm4ucmVmJiYobi5wcm9wcy5yZWY9bi5yZWYsbi5yZWY9bnVsbCksdyYmdyhuKTt9O3ZhciBSPSJ1bmRlZmluZWQiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yJiZTeW1ib2wuZm9yKCJyZWFjdC5mb3J3YXJkX3JlZiIpfHwzOTExO2Z1bmN0aW9uIHgobil7ZnVuY3Rpb24gdCh0LGUpe3ZhciByPVMoe30sdCk7cmV0dXJuIGRlbGV0ZSByLnJlZixuKHIsKGU9dC5yZWZ8fGUpJiYoIm9iamVjdCIhPXR5cGVvZiBlfHwiY3VycmVudCJpbiBlKT9lOm51bGwpfXJldHVybiB0LiQkdHlwZW9mPVIsdC5yZW5kZXI9dCx0LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXQuX19mPSEwLHQuZGlzcGxheU5hbWU9IkZvcndhcmRSZWYoIisobi5kaXNwbGF5TmFtZXx8bi5uYW1lKSsiKSIsdH12YXIgTj1mdW5jdGlvbihuLHQpe3JldHVybiBudWxsPT1uP251bGw6QSQyKEEkMihuKS5tYXAodCkpfSxrPXttYXA6Tixmb3JFYWNoOk4sY291bnQ6ZnVuY3Rpb24obil7cmV0dXJuIG4/QSQyKG4pLmxlbmd0aDowfSxvbmx5OmZ1bmN0aW9uKG4pe3ZhciB0PUEkMihuKTtpZigxIT09dC5sZW5ndGgpdGhyb3cgIkNoaWxkcmVuLm9ubHkiO3JldHVybiB0WzBdfSx0b0FycmF5OkEkMn0sQT1sJDIuX19lO2wkMi5fX2U9ZnVuY3Rpb24obix0LGUpe2lmKG4udGhlbilmb3IodmFyIHIsdT10O3U9dS5fXzspaWYoKHI9dS5fX2MpJiZyLl9fYylyZXR1cm4gbnVsbD09dC5fX2UmJih0Ll9fZT1lLl9fZSx0Ll9faz1lLl9fayksci5fX2Mobix0KTtBKG4sdCxlKTt9O3ZhciBPPWwkMi51bm1vdW50O2Z1bmN0aW9uIEwoKXt0aGlzLl9fdT0wLHRoaXMudD1udWxsLHRoaXMuX19iPW51bGw7fWZ1bmN0aW9uIFUobil7dmFyIHQ9bi5fXy5fX2M7cmV0dXJuIHQmJnQuX19lJiZ0Ll9fZShuKX1mdW5jdGlvbiBGKG4pe3ZhciB0LGUscjtmdW5jdGlvbiB1KHUpe2lmKHR8fCh0PW4oKSkudGhlbihmdW5jdGlvbihuKXtlPW4uZGVmYXVsdHx8bjt9LGZ1bmN0aW9uKG4pe3I9bjt9KSxyKXRocm93IHI7aWYoIWUpdGhyb3cgdDtyZXR1cm4gdiQxKGUsdSl9cmV0dXJuIHUuZGlzcGxheU5hbWU9IkxhenkiLHUuX19mPSEwLHV9ZnVuY3Rpb24gTSgpe3RoaXMudT1udWxsLHRoaXMubz1udWxsO31sJDIudW5tb3VudD1mdW5jdGlvbihuKXt2YXIgdD1uLl9fYzt0JiZ0Ll9fUiYmdC5fX1IoKSx0JiYhMD09PW4uX19oJiYobi50eXBlPW51bGwpLE8mJk8obik7fSwoTC5wcm90b3R5cGU9bmV3IF8kMSkuX19jPWZ1bmN0aW9uKG4sdCl7dmFyIGU9dC5fX2Mscj10aGlzO251bGw9PXIudCYmKHIudD1bXSksci50LnB1c2goZSk7dmFyIHU9VShyLl9fdiksbz0hMSxpPWZ1bmN0aW9uKCl7b3x8KG89ITAsZS5fX1I9bnVsbCx1P3UobCk6bCgpKTt9O2UuX19SPWk7dmFyIGw9ZnVuY3Rpb24oKXtpZighLS1yLl9fdSl7aWYoci5zdGF0ZS5fX2Upe3ZhciBuPXIuc3RhdGUuX19lO3IuX192Ll9fa1swXT1mdW5jdGlvbiBuKHQsZSxyKXtyZXR1cm4gdCYmKHQuX192PW51bGwsdC5fX2s9dC5fX2smJnQuX19rLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gbih0LGUscil9KSx0Ll9fYyYmdC5fX2MuX19QPT09ZSYmKHQuX19lJiZyLmluc2VydEJlZm9yZSh0Ll9fZSx0Ll9fZCksdC5fX2MuX19lPSEwLHQuX19jLl9fUD1yKSksdH0obixuLl9fYy5fX1Asbi5fX2MuX19PKTt9dmFyIHQ7Zm9yKHIuc2V0U3RhdGUoe19fZTpyLl9fYj1udWxsfSk7dD1yLnQucG9wKCk7KXQuZm9yY2VVcGRhdGUoKTt9fSxmPSEwPT09dC5fX2g7ci5fX3UrK3x8Znx8ci5zZXRTdGF0ZSh7X19lOnIuX19iPXIuX192Ll9fa1swXX0pLG4udGhlbihpLGkpO30sTC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXt0aGlzLnQ9W107fSxMLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24obix0KXtpZih0aGlzLl9fYil7aWYodGhpcy5fX3YuX19rKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSxyPXRoaXMuX192Ll9fa1swXS5fX2M7dGhpcy5fX3YuX19rWzBdPWZ1bmN0aW9uIG4odCxlLHIpe3JldHVybiB0JiYodC5fX2MmJnQuX19jLl9fSCYmKHQuX19jLl9fSC5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4peyJmdW5jdGlvbiI9PXR5cGVvZiBuLl9fYyYmbi5fX2MoKTt9KSx0Ll9fYy5fX0g9bnVsbCksbnVsbCE9KHQ9Uyh7fSx0KSkuX19jJiYodC5fX2MuX19QPT09ciYmKHQuX19jLl9fUD1lKSx0Ll9fYz1udWxsKSx0Ll9faz10Ll9fayYmdC5fX2subWFwKGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsZSxyKX0pKSx0fSh0aGlzLl9fYixlLHIuX19PPXIuX19QKTt9dGhpcy5fX2I9bnVsbDt9dmFyIHU9dC5fX2UmJnYkMShkJDEsbnVsbCxuLmZhbGxiYWNrKTtyZXR1cm4gdSYmKHUuX19oPW51bGwpLFt2JDEoZCQxLG51bGwsdC5fX2U/bnVsbDpuLmNoaWxkcmVuKSx1XX07dmFyIFQ9ZnVuY3Rpb24obix0LGUpe2lmKCsrZVsxXT09PWVbMF0mJm4uby5kZWxldGUodCksbi5wcm9wcy5yZXZlYWxPcmRlciYmKCJ0IiE9PW4ucHJvcHMucmV2ZWFsT3JkZXJbMF18fCFuLm8uc2l6ZSkpZm9yKGU9bi51O2U7KXtmb3IoO2UubGVuZ3RoPjM7KWUucG9wKCkoKTtpZihlWzFdPGVbMF0pYnJlYWs7bi51PWU9ZVsyXTt9fTtmdW5jdGlvbiBEKG4pe3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiBuLmNvbnRleHR9LG4uY2hpbGRyZW59ZnVuY3Rpb24gSShuKXt2YXIgdD10aGlzLGU9bi5pO3QuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXtTJDEobnVsbCx0LmwpLHQubD1udWxsLHQuaT1udWxsO30sdC5pJiZ0LmkhPT1lJiZ0LmNvbXBvbmVudFdpbGxVbm1vdW50KCksbi5fX3Y/KHQubHx8KHQuaT1lLHQubD17bm9kZVR5cGU6MSxwYXJlbnROb2RlOmUsY2hpbGROb2RlczpbXSxhcHBlbmRDaGlsZDpmdW5jdGlvbihuKXt0aGlzLmNoaWxkTm9kZXMucHVzaChuKSx0LmkuYXBwZW5kQ2hpbGQobik7fSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24obixlKXt0aGlzLmNoaWxkTm9kZXMucHVzaChuKSx0LmkuYXBwZW5kQ2hpbGQobik7fSxyZW1vdmVDaGlsZDpmdW5jdGlvbihuKXt0aGlzLmNoaWxkTm9kZXMuc3BsaWNlKHRoaXMuY2hpbGROb2Rlcy5pbmRleE9mKG4pPj4+MSwxKSx0LmkucmVtb3ZlQ2hpbGQobik7fX0pLFMkMSh2JDEoRCx7Y29udGV4dDp0LmNvbnRleHR9LG4uX192KSx0LmwpKTp0LmwmJnQuY29tcG9uZW50V2lsbFVubW91bnQoKTt9ZnVuY3Rpb24gVyhuLHQpe3JldHVybiB2JDEoSSx7X192Om4saTp0fSl9KE0ucHJvdG90eXBlPW5ldyBfJDEpLl9fZT1mdW5jdGlvbihuKXt2YXIgdD10aGlzLGU9VSh0Ll9fdikscj10Lm8uZ2V0KG4pO3JldHVybiByWzBdKyssZnVuY3Rpb24odSl7dmFyIG89ZnVuY3Rpb24oKXt0LnByb3BzLnJldmVhbE9yZGVyPyhyLnB1c2godSksVCh0LG4scikpOnUoKTt9O2U/ZShvKTpvKCk7fX0sTS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKG4pe3RoaXMudT1udWxsLHRoaXMubz1uZXcgTWFwO3ZhciB0PUEkMihuLmNoaWxkcmVuKTtuLnJldmVhbE9yZGVyJiYiYiI9PT1uLnJldmVhbE9yZGVyWzBdJiZ0LnJldmVyc2UoKTtmb3IodmFyIGU9dC5sZW5ndGg7ZS0tOyl0aGlzLm8uc2V0KHRbZV0sdGhpcy51PVsxLDAsdGhpcy51XSk7cmV0dXJuIG4uY2hpbGRyZW59LE0ucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZT1NLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbigpe3ZhciBuPXRoaXM7dGhpcy5vLmZvckVhY2goZnVuY3Rpb24odCxlKXtUKG4sZSx0KTt9KTt9O3ZhciBqPSJ1bmRlZmluZWQiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yJiZTeW1ib2wuZm9yKCJyZWFjdC5lbGVtZW50Iil8fDYwMTAzLFA9L14oPzphY2NlbnR8YWxpZ25tZW50fGFyYWJpY3xiYXNlbGluZXxjYXB8Y2xpcCg/IVBhdGhVKXxjb2xvcnxmaWxsfGZsb29kfGZvbnR8Z2x5cGgoPyFSKXxob3JpenxtYXJrZXIoPyFIfFd8VSl8b3ZlcmxpbmV8cGFpbnR8c3RvcHxzdHJpa2V0aHJvdWdofHN0cm9rZXx0ZXh0KD8hTCl8dW5kZXJsaW5lfHVuaWNvZGV8dW5pdHN8dnx2ZWN0b3J8dmVydHx3b3JkfHdyaXRpbmd8eCg/IUMpKVtBLVpdLyxWPWZ1bmN0aW9uKG4pe3JldHVybiAoInVuZGVmaW5lZCIhPXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sKCk/L2ZpbHxjaGV8cmFkL2k6L2ZpbHxjaGV8cmEvaSkudGVzdChuKX07ZnVuY3Rpb24geihuLHQsZSl7cmV0dXJuIG51bGw9PXQuX19rJiYodC50ZXh0Q29udGVudD0iIiksUyQxKG4sdCksImZ1bmN0aW9uIj09dHlwZW9mIGUmJmUoKSxuP24uX19jOm51bGx9ZnVuY3Rpb24gQihuLHQsZSl7cmV0dXJuIHEkMShuLHQpLCJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlKCksbj9uLl9fYzpudWxsfV8kMS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fSxbImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjb21wb25lbnRXaWxsVXBkYXRlIl0uZm9yRWFjaChmdW5jdGlvbihuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoXyQxLnByb3RvdHlwZSxuLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbIlVOU0FGRV8iK25dfSxzZXQ6ZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsbix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOnR9KTt9fSk7fSk7dmFyIEg9bCQyLmV2ZW50O2Z1bmN0aW9uIFooKXt9ZnVuY3Rpb24gWSgpe3JldHVybiB0aGlzLmNhbmNlbEJ1YmJsZX1mdW5jdGlvbiAkKCl7cmV0dXJuIHRoaXMuZGVmYXVsdFByZXZlbnRlZH1sJDIuZXZlbnQ9ZnVuY3Rpb24obil7cmV0dXJuIEgmJihuPUgobikpLG4ucGVyc2lzdD1aLG4uaXNQcm9wYWdhdGlvblN0b3BwZWQ9WSxuLmlzRGVmYXVsdFByZXZlbnRlZD0kLG4ubmF0aXZlRXZlbnQ9bn07dmFyIHEsRz17Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNsYXNzfX0sSj1sJDIudm5vZGU7bCQyLnZub2RlPWZ1bmN0aW9uKG4pe3ZhciB0PW4udHlwZSxlPW4ucHJvcHMscj1lO2lmKCJzdHJpbmciPT10eXBlb2YgdCl7Zm9yKHZhciB1IGluIHI9e30sZSl7dmFyIG89ZVt1XTsidmFsdWUiPT09dSYmImRlZmF1bHRWYWx1ZSJpbiBlJiZudWxsPT1vfHwoImRlZmF1bHRWYWx1ZSI9PT11JiYidmFsdWUiaW4gZSYmbnVsbD09ZS52YWx1ZT91PSJ2YWx1ZSI6ImRvd25sb2FkIj09PXUmJiEwPT09bz9vPSIiOi9vbmRvdWJsZWNsaWNrL2kudGVzdCh1KT91PSJvbmRibGNsaWNrIjovXm9uY2hhbmdlKHRleHRhcmVhfGlucHV0KS9pLnRlc3QodSt0KSYmIVYoZS50eXBlKT91PSJvbmlucHV0IjovXm9uKEFuaXxUcmF8VG91fEJlZm9yZUlucCkvLnRlc3QodSk/dT11LnRvTG93ZXJDYXNlKCk6UC50ZXN0KHUpP3U9dS5yZXBsYWNlKC9bQS1aMC05XS8sIi0kJiIpLnRvTG93ZXJDYXNlKCk6bnVsbD09PW8mJihvPXZvaWQgMCksclt1XT1vKTt9InNlbGVjdCI9PXQmJnIubXVsdGlwbGUmJkFycmF5LmlzQXJyYXkoci52YWx1ZSkmJihyLnZhbHVlPUEkMihlLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe24ucHJvcHMuc2VsZWN0ZWQ9LTEhPXIudmFsdWUuaW5kZXhPZihuLnByb3BzLnZhbHVlKTt9KSksInNlbGVjdCI9PXQmJm51bGwhPXIuZGVmYXVsdFZhbHVlJiYoci52YWx1ZT1BJDIoZS5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbihuKXtuLnByb3BzLnNlbGVjdGVkPXIubXVsdGlwbGU/LTEhPXIuZGVmYXVsdFZhbHVlLmluZGV4T2Yobi5wcm9wcy52YWx1ZSk6ci5kZWZhdWx0VmFsdWU9PW4ucHJvcHMudmFsdWU7fSkpLG4ucHJvcHM9cjt9dCYmZS5jbGFzcyE9ZS5jbGFzc05hbWUmJihHLmVudW1lcmFibGU9ImNsYXNzTmFtZSJpbiBlLG51bGwhPWUuY2xhc3NOYW1lJiYoci5jbGFzcz1lLmNsYXNzTmFtZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsImNsYXNzTmFtZSIsRykpLG4uJCR0eXBlb2Y9aixKJiZKKG4pO307dmFyIEs9bCQyLl9fcjtsJDIuX19yPWZ1bmN0aW9uKG4pe0smJksobikscT1uLl9fYzt9O3ZhciBRPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOntjdXJyZW50OntyZWFkQ29udGV4dDpmdW5jdGlvbihuKXtyZXR1cm4gcS5fX25bbi5fX2NdLnByb3BzLnZhbHVlfX19fTtmdW5jdGlvbiBubihuKXtyZXR1cm4gdiQxLmJpbmQobnVsbCxuKX1mdW5jdGlvbiB0bihuKXtyZXR1cm4gISFuJiZuLiQkdHlwZW9mPT09an1mdW5jdGlvbiBlbihuKXtyZXR1cm4gdG4obik/QiQxLmFwcGx5KG51bGwsYXJndW1lbnRzKTpufWZ1bmN0aW9uIHJuKG4pe3JldHVybiAhIW4uX19rJiYoUyQxKG51bGwsbiksITApfWZ1bmN0aW9uIHVuKG4pe3JldHVybiBuJiYobi5iYXNlfHwxPT09bi5ub2RlVHlwZSYmbil8fG51bGx9dmFyIG9uPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4odCl9LGxuPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4odCl9O3ZhciBSZWFjdCA9IHt1c2VTdGF0ZTpsJDEsdXNlUmVkdWNlcjpwJDEsdXNlRWZmZWN0OnksdXNlTGF5b3V0RWZmZWN0OmgsdXNlUmVmOnMsdXNlSW1wZXJhdGl2ZUhhbmRsZTpfLHVzZU1lbW86ZCx1c2VDYWxsYmFjazpBJDEsdXNlQ29udGV4dDpGJDEsdXNlRGVidWdWYWx1ZTpUJDEsdmVyc2lvbjoiMTcuMC4yIixDaGlsZHJlbjprLHJlbmRlcjp6LGh5ZHJhdGU6Qix1bm1vdW50Q29tcG9uZW50QXROb2RlOnJuLGNyZWF0ZVBvcnRhbDpXLGNyZWF0ZUVsZW1lbnQ6diQxLGNyZWF0ZUNvbnRleHQ6RCQxLGNyZWF0ZUZhY3Rvcnk6bm4sY2xvbmVFbGVtZW50OmVuLGNyZWF0ZVJlZjpwJDIsRnJhZ21lbnQ6ZCQxLGlzVmFsaWRFbGVtZW50OnRuLGZpbmRET01Ob2RlOnVuLENvbXBvbmVudDpfJDEsUHVyZUNvbXBvbmVudDpFLG1lbW86Zyxmb3J3YXJkUmVmOngsZmx1c2hTeW5jOmxuLHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOm9uLFN0cmljdE1vZGU6ZCQxLFN1c3BlbnNlOkwsU3VzcGVuc2VMaXN0Ok0sbGF6eTpGLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOlF9OwoKICB2YXIgSE9PS1MgPSBbCiAgICAgICJvbkNoYW5nZSIsCiAgICAgICJvbkNsb3NlIiwKICAgICAgIm9uRGF5Q3JlYXRlIiwKICAgICAgIm9uRGVzdHJveSIsCiAgICAgICJvbktleURvd24iLAogICAgICAib25Nb250aENoYW5nZSIsCiAgICAgICJvbk9wZW4iLAogICAgICAib25QYXJzZUNvbmZpZyIsCiAgICAgICJvblJlYWR5IiwKICAgICAgIm9uVmFsdWVVcGRhdGUiLAogICAgICAib25ZZWFyQ2hhbmdlIiwKICAgICAgIm9uUHJlQ2FsZW5kYXJQb3NpdGlvbiIsCiAgXTsKICB2YXIgZGVmYXVsdHMgPSB7CiAgICAgIF9kaXNhYmxlOiBbXSwKICAgICAgYWxsb3dJbnB1dDogZmFsc2UsCiAgICAgIGFsbG93SW52YWxpZFByZWxvYWQ6IGZhbHNlLAogICAgICBhbHRGb3JtYXQ6ICJGIGosIFkiLAogICAgICBhbHRJbnB1dDogZmFsc2UsCiAgICAgIGFsdElucHV0Q2xhc3M6ICJmb3JtLWNvbnRyb2wgaW5wdXQiLAogICAgICBhbmltYXRlOiB0eXBlb2Ygd2luZG93ID09PSAib2JqZWN0IiAmJgogICAgICAgICAgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigiTVNJRSIpID09PSAtMSwKICAgICAgYXJpYURhdGVGb3JtYXQ6ICJGIGosIFkiLAogICAgICBhdXRvRmlsbERlZmF1bHRUaW1lOiB0cnVlLAogICAgICBjbGlja09wZW5zOiB0cnVlLAogICAgICBjbG9zZU9uU2VsZWN0OiB0cnVlLAogICAgICBjb25qdW5jdGlvbjogIiwgIiwKICAgICAgZGF0ZUZvcm1hdDogIlktbS1kIiwKICAgICAgZGVmYXVsdEhvdXI6IDEyLAogICAgICBkZWZhdWx0TWludXRlOiAwLAogICAgICBkZWZhdWx0U2Vjb25kczogMCwKICAgICAgZGlzYWJsZTogW10sCiAgICAgIGRpc2FibGVNb2JpbGU6IGZhbHNlLAogICAgICBlbmFibGVTZWNvbmRzOiBmYWxzZSwKICAgICAgZW5hYmxlVGltZTogZmFsc2UsCiAgICAgIGVycm9ySGFuZGxlcjogZnVuY3Rpb24gKGVycikgewogICAgICAgICAgcmV0dXJuIHR5cGVvZiBjb25zb2xlICE9PSAidW5kZWZpbmVkIiAmJiBjb25zb2xlLndhcm4oZXJyKTsKICAgICAgfSwKICAgICAgZ2V0V2VlazogZnVuY3Rpb24gKGdpdmVuRGF0ZSkgewogICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShnaXZlbkRhdGUuZ2V0VGltZSgpKTsKICAgICAgICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7CiAgICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAzIC0gKChkYXRlLmdldERheSgpICsgNikgJSA3KSk7CiAgICAgICAgICB2YXIgd2VlazEgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIDAsIDQpOwogICAgICAgICAgcmV0dXJuICgxICsKICAgICAgICAgICAgICBNYXRoLnJvdW5kKCgoZGF0ZS5nZXRUaW1lKCkgLSB3ZWVrMS5nZXRUaW1lKCkpIC8gODY0MDAwMDAgLQogICAgICAgICAgICAgICAgICAzICsKICAgICAgICAgICAgICAgICAgKCh3ZWVrMS5nZXREYXkoKSArIDYpICUgNykpIC8KICAgICAgICAgICAgICAgICAgNykpOwogICAgICB9LAogICAgICBob3VySW5jcmVtZW50OiAxLAogICAgICBpZ25vcmVkRm9jdXNFbGVtZW50czogW10sCiAgICAgIGlubGluZTogZmFsc2UsCiAgICAgIGxvY2FsZTogImRlZmF1bHQiLAogICAgICBtaW51dGVJbmNyZW1lbnQ6IDUsCiAgICAgIG1vZGU6ICJzaW5nbGUiLAogICAgICBtb250aFNlbGVjdG9yVHlwZTogImRyb3Bkb3duIiwKICAgICAgbmV4dEFycm93OiAiPHN2ZyB2ZXJzaW9uPScxLjEnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnIHZpZXdCb3g9JzAgMCAxNyAxNyc+PGc+PC9nPjxwYXRoIGQ9J00xMy4yMDcgOC40NzJsLTcuODU0IDcuODU0LTAuNzA3LTAuNzA3IDcuMTQ2LTcuMTQ2LTcuMTQ2LTcuMTQ4IDAuNzA3LTAuNzA3IDcuODU0IDcuODU0eicgLz48L3N2Zz4iLAogICAgICBub0NhbGVuZGFyOiBmYWxzZSwKICAgICAgbm93OiBuZXcgRGF0ZSgpLAogICAgICBvbkNoYW5nZTogW10sCiAgICAgIG9uQ2xvc2U6IFtdLAogICAgICBvbkRheUNyZWF0ZTogW10sCiAgICAgIG9uRGVzdHJveTogW10sCiAgICAgIG9uS2V5RG93bjogW10sCiAgICAgIG9uTW9udGhDaGFuZ2U6IFtdLAogICAgICBvbk9wZW46IFtdLAogICAgICBvblBhcnNlQ29uZmlnOiBbXSwKICAgICAgb25SZWFkeTogW10sCiAgICAgIG9uVmFsdWVVcGRhdGU6IFtdLAogICAgICBvblllYXJDaGFuZ2U6IFtdLAogICAgICBvblByZUNhbGVuZGFyUG9zaXRpb246IFtdLAogICAgICBwbHVnaW5zOiBbXSwKICAgICAgcG9zaXRpb246ICJhdXRvIiwKICAgICAgcG9zaXRpb25FbGVtZW50OiB1bmRlZmluZWQsCiAgICAgIHByZXZBcnJvdzogIjxzdmcgdmVyc2lvbj0nMS4xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB2aWV3Qm94PScwIDAgMTcgMTcnPjxnPjwvZz48cGF0aCBkPSdNNS4yMDcgOC40NzFsNy4xNDYgNy4xNDctMC43MDcgMC43MDctNy44NTMtNy44NTQgNy44NTQtNy44NTMgMC43MDcgMC43MDctNy4xNDcgNy4xNDZ6JyAvPjwvc3ZnPiIsCiAgICAgIHNob3J0aGFuZEN1cnJlbnRNb250aDogZmFsc2UsCiAgICAgIHNob3dNb250aHM6IDEsCiAgICAgIHN0YXRpYzogZmFsc2UsCiAgICAgIHRpbWVfMjRocjogZmFsc2UsCiAgICAgIHdlZWtOdW1iZXJzOiBmYWxzZSwKICAgICAgd3JhcDogZmFsc2UsCiAgfTsKCiAgdmFyIGVuZ2xpc2ggPSB7CiAgICAgIHdlZWtkYXlzOiB7CiAgICAgICAgICBzaG9ydGhhbmQ6IFsiU3VuIiwgIk1vbiIsICJUdWUiLCAiV2VkIiwgIlRodSIsICJGcmkiLCAiU2F0Il0sCiAgICAgICAgICBsb25naGFuZDogWwogICAgICAgICAgICAgICJTdW5kYXkiLAogICAgICAgICAgICAgICJNb25kYXkiLAogICAgICAgICAgICAgICJUdWVzZGF5IiwKICAgICAgICAgICAgICAiV2VkbmVzZGF5IiwKICAgICAgICAgICAgICAiVGh1cnNkYXkiLAogICAgICAgICAgICAgICJGcmlkYXkiLAogICAgICAgICAgICAgICJTYXR1cmRheSIsCiAgICAgICAgICBdLAogICAgICB9LAogICAgICBtb250aHM6IHsKICAgICAgICAgIHNob3J0aGFuZDogWwogICAgICAgICAgICAgICJKYW4iLAogICAgICAgICAgICAgICJGZWIiLAogICAgICAgICAgICAgICJNYXIiLAogICAgICAgICAgICAgICJBcHIiLAogICAgICAgICAgICAgICJNYXkiLAogICAgICAgICAgICAgICJKdW4iLAogICAgICAgICAgICAgICJKdWwiLAogICAgICAgICAgICAgICJBdWciLAogICAgICAgICAgICAgICJTZXAiLAogICAgICAgICAgICAgICJPY3QiLAogICAgICAgICAgICAgICJOb3YiLAogICAgICAgICAgICAgICJEZWMiLAogICAgICAgICAgXSwKICAgICAgICAgIGxvbmdoYW5kOiBbCiAgICAgICAgICAgICAgIkphbnVhcnkiLAogICAgICAgICAgICAgICJGZWJydWFyeSIsCiAgICAgICAgICAgICAgIk1hcmNoIiwKICAgICAgICAgICAgICAiQXByaWwiLAogICAgICAgICAgICAgICJNYXkiLAogICAgICAgICAgICAgICJKdW5lIiwKICAgICAgICAgICAgICAiSnVseSIsCiAgICAgICAgICAgICAgIkF1Z3VzdCIsCiAgICAgICAgICAgICAgIlNlcHRlbWJlciIsCiAgICAgICAgICAgICAgIk9jdG9iZXIiLAogICAgICAgICAgICAgICJOb3ZlbWJlciIsCiAgICAgICAgICAgICAgIkRlY2VtYmVyIiwKICAgICAgICAgIF0sCiAgICAgIH0sCiAgICAgIGRheXNJbk1vbnRoOiBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV0sCiAgICAgIGZpcnN0RGF5T2ZXZWVrOiAwLAogICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnRoKSB7CiAgICAgICAgICB2YXIgcyA9IG50aCAlIDEwMDsKICAgICAgICAgIGlmIChzID4gMyAmJiBzIDwgMjEpCiAgICAgICAgICAgICAgcmV0dXJuICJ0aCI7CiAgICAgICAgICBzd2l0Y2ggKHMgJSAxMCkgewogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgcmV0dXJuICJzdCI7CiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICByZXR1cm4gIm5kIjsKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgIHJldHVybiAicmQiOwogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIHJldHVybiAidGgiOwogICAgICAgICAgfQogICAgICB9LAogICAgICByYW5nZVNlcGFyYXRvcjogIiB0byAiLAogICAgICB3ZWVrQWJicmV2aWF0aW9uOiAiV2siLAogICAgICBzY3JvbGxUaXRsZTogIlNjcm9sbCB0byBpbmNyZW1lbnQiLAogICAgICB0b2dnbGVUaXRsZTogIkNsaWNrIHRvIHRvZ2dsZSIsCiAgICAgIGFtUE06IFsiQU0iLCAiUE0iXSwKICAgICAgeWVhckFyaWFMYWJlbDogIlllYXIiLAogICAgICBtb250aEFyaWFMYWJlbDogIk1vbnRoIiwKICAgICAgaG91ckFyaWFMYWJlbDogIkhvdXIiLAogICAgICBtaW51dGVBcmlhTGFiZWw6ICJNaW51dGUiLAogICAgICB0aW1lXzI0aHI6IGZhbHNlLAogIH07CgogIHZhciBwYWQgPSBmdW5jdGlvbiAobnVtYmVyLCBsZW5ndGgpIHsKICAgICAgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7IGxlbmd0aCA9IDI7IH0KICAgICAgcmV0dXJuICgiMDAwIiArIG51bWJlcikuc2xpY2UobGVuZ3RoICogLTEpOwogIH07CiAgdmFyIGludCA9IGZ1bmN0aW9uIChib29sKSB7IHJldHVybiAoYm9vbCA9PT0gdHJ1ZSA/IDEgOiAwKTsgfTsKICBmdW5jdGlvbiBkZWJvdW5jZShmbiwgd2FpdCkgewogICAgICB2YXIgdDsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50czsKICAgICAgICAgIGNsZWFyVGltZW91dCh0KTsKICAgICAgICAgIHQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZuLmFwcGx5KF90aGlzLCBhcmdzKTsgfSwgd2FpdCk7CiAgICAgIH07CiAgfQogIHZhciBhcnJheWlmeSA9IGZ1bmN0aW9uIChvYmopIHsKICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFycmF5ID8gb2JqIDogW29ial07CiAgfTsKCiAgZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoZWxlbSwgY2xhc3NOYW1lLCBib29sKSB7CiAgICAgIGlmIChib29sID09PSB0cnVlKQogICAgICAgICAgcmV0dXJuIGVsZW0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOwogICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcsIGNsYXNzTmFtZSwgY29udGVudCkgewogICAgICB2YXIgZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7CiAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSB8fCAiIjsKICAgICAgY29udGVudCA9IGNvbnRlbnQgfHwgIiI7CiAgICAgIGUuY2xhc3NOYW1lID0gY2xhc3NOYW1lOwogICAgICBpZiAoY29udGVudCAhPT0gdW5kZWZpbmVkKQogICAgICAgICAgZS50ZXh0Q29udGVudCA9IGNvbnRlbnQ7CiAgICAgIHJldHVybiBlOwogIH0KICBmdW5jdGlvbiBjbGVhck5vZGUobm9kZSkgewogICAgICB3aGlsZSAobm9kZS5maXJzdENoaWxkKQogICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmZpcnN0Q2hpbGQpOwogIH0KICBmdW5jdGlvbiBmaW5kUGFyZW50KG5vZGUsIGNvbmRpdGlvbikgewogICAgICBpZiAoY29uZGl0aW9uKG5vZGUpKQogICAgICAgICAgcmV0dXJuIG5vZGU7CiAgICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSkKICAgICAgICAgIHJldHVybiBmaW5kUGFyZW50KG5vZGUucGFyZW50Tm9kZSwgY29uZGl0aW9uKTsKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICB9CiAgZnVuY3Rpb24gY3JlYXRlTnVtYmVySW5wdXQoaW5wdXRDbGFzc05hbWUsIG9wdHMpIHsKICAgICAgdmFyIHdyYXBwZXIgPSBjcmVhdGVFbGVtZW50KCJkaXYiLCAibnVtSW5wdXRXcmFwcGVyIiksIG51bUlucHV0ID0gY3JlYXRlRWxlbWVudCgiaW5wdXQiLCAibnVtSW5wdXQgIiArIGlucHV0Q2xhc3NOYW1lKSwgYXJyb3dVcCA9IGNyZWF0ZUVsZW1lbnQoInNwYW4iLCAiYXJyb3dVcCIpLCBhcnJvd0Rvd24gPSBjcmVhdGVFbGVtZW50KCJzcGFuIiwgImFycm93RG93biIpOwogICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCJNU0lFIDkuMCIpID09PSAtMSkgewogICAgICAgICAgbnVtSW5wdXQudHlwZSA9ICJudW1iZXIiOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgICAgbnVtSW5wdXQudHlwZSA9ICJ0ZXh0IjsKICAgICAgICAgIG51bUlucHV0LnBhdHRlcm4gPSAiXFxkKiI7CiAgICAgIH0KICAgICAgaWYgKG9wdHMgIT09IHVuZGVmaW5lZCkKICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRzKQogICAgICAgICAgICAgIG51bUlucHV0LnNldEF0dHJpYnV0ZShrZXksIG9wdHNba2V5XSk7CiAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobnVtSW5wdXQpOwogICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGFycm93VXApOwogICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGFycm93RG93bik7CiAgICAgIHJldHVybiB3cmFwcGVyOwogIH0KICBmdW5jdGlvbiBnZXRFdmVudFRhcmdldChldmVudCkgewogICAgICB0cnkgewogICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5jb21wb3NlZFBhdGggPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICB2YXIgcGF0aCA9IGV2ZW50LmNvbXBvc2VkUGF0aCgpOwogICAgICAgICAgICAgIHJldHVybiBwYXRoWzBdOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldDsKICAgICAgfQogICAgICBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgIHJldHVybiBldmVudC50YXJnZXQ7CiAgICAgIH0KICB9CgogIHZhciBkb05vdGhpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH07CiAgdmFyIG1vbnRoVG9TdHIgPSBmdW5jdGlvbiAobW9udGhOdW1iZXIsIHNob3J0aGFuZCwgbG9jYWxlKSB7IHJldHVybiBsb2NhbGUubW9udGhzW3Nob3J0aGFuZCA/ICJzaG9ydGhhbmQiIDogImxvbmdoYW5kIl1bbW9udGhOdW1iZXJdOyB9OwogIHZhciByZXZGb3JtYXQgPSB7CiAgICAgIEQ6IGRvTm90aGluZywKICAgICAgRjogZnVuY3Rpb24gKGRhdGVPYmosIG1vbnRoTmFtZSwgbG9jYWxlKSB7CiAgICAgICAgICBkYXRlT2JqLnNldE1vbnRoKGxvY2FsZS5tb250aHMubG9uZ2hhbmQuaW5kZXhPZihtb250aE5hbWUpKTsKICAgICAgfSwKICAgICAgRzogZnVuY3Rpb24gKGRhdGVPYmosIGhvdXIpIHsKICAgICAgICAgIGRhdGVPYmouc2V0SG91cnMoKGRhdGVPYmouZ2V0SG91cnMoKSA+PSAxMiA/IDEyIDogMCkgKyBwYXJzZUZsb2F0KGhvdXIpKTsKICAgICAgfSwKICAgICAgSDogZnVuY3Rpb24gKGRhdGVPYmosIGhvdXIpIHsKICAgICAgICAgIGRhdGVPYmouc2V0SG91cnMocGFyc2VGbG9hdChob3VyKSk7CiAgICAgIH0sCiAgICAgIEo6IGZ1bmN0aW9uIChkYXRlT2JqLCBkYXkpIHsKICAgICAgICAgIGRhdGVPYmouc2V0RGF0ZShwYXJzZUZsb2F0KGRheSkpOwogICAgICB9LAogICAgICBLOiBmdW5jdGlvbiAoZGF0ZU9iaiwgYW1QTSwgbG9jYWxlKSB7CiAgICAgICAgICBkYXRlT2JqLnNldEhvdXJzKChkYXRlT2JqLmdldEhvdXJzKCkgJSAxMikgKwogICAgICAgICAgICAgIDEyICogaW50KG5ldyBSZWdFeHAobG9jYWxlLmFtUE1bMV0sICJpIikudGVzdChhbVBNKSkpOwogICAgICB9LAogICAgICBNOiBmdW5jdGlvbiAoZGF0ZU9iaiwgc2hvcnRNb250aCwgbG9jYWxlKSB7CiAgICAgICAgICBkYXRlT2JqLnNldE1vbnRoKGxvY2FsZS5tb250aHMuc2hvcnRoYW5kLmluZGV4T2Yoc2hvcnRNb250aCkpOwogICAgICB9LAogICAgICBTOiBmdW5jdGlvbiAoZGF0ZU9iaiwgc2Vjb25kcykgewogICAgICAgICAgZGF0ZU9iai5zZXRTZWNvbmRzKHBhcnNlRmxvYXQoc2Vjb25kcykpOwogICAgICB9LAogICAgICBVOiBmdW5jdGlvbiAoXywgdW5peFNlY29uZHMpIHsgcmV0dXJuIG5ldyBEYXRlKHBhcnNlRmxvYXQodW5peFNlY29uZHMpICogMTAwMCk7IH0sCiAgICAgIFc6IGZ1bmN0aW9uIChkYXRlT2JqLCB3ZWVrTnVtLCBsb2NhbGUpIHsKICAgICAgICAgIHZhciB3ZWVrTnVtYmVyID0gcGFyc2VJbnQod2Vla051bSk7CiAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGRhdGVPYmouZ2V0RnVsbFllYXIoKSwgMCwgMiArICh3ZWVrTnVtYmVyIC0gMSkgKiA3LCAwLCAwLCAwLCAwKTsKICAgICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIGRhdGUuZ2V0RGF5KCkgKyBsb2NhbGUuZmlyc3REYXlPZldlZWspOwogICAgICAgICAgcmV0dXJuIGRhdGU7CiAgICAgIH0sCiAgICAgIFk6IGZ1bmN0aW9uIChkYXRlT2JqLCB5ZWFyKSB7CiAgICAgICAgICBkYXRlT2JqLnNldEZ1bGxZZWFyKHBhcnNlRmxvYXQoeWVhcikpOwogICAgICB9LAogICAgICBaOiBmdW5jdGlvbiAoXywgSVNPRGF0ZSkgeyByZXR1cm4gbmV3IERhdGUoSVNPRGF0ZSk7IH0sCiAgICAgIGQ6IGZ1bmN0aW9uIChkYXRlT2JqLCBkYXkpIHsKICAgICAgICAgIGRhdGVPYmouc2V0RGF0ZShwYXJzZUZsb2F0KGRheSkpOwogICAgICB9LAogICAgICBoOiBmdW5jdGlvbiAoZGF0ZU9iaiwgaG91cikgewogICAgICAgICAgZGF0ZU9iai5zZXRIb3VycygoZGF0ZU9iai5nZXRIb3VycygpID49IDEyID8gMTIgOiAwKSArIHBhcnNlRmxvYXQoaG91cikpOwogICAgICB9LAogICAgICBpOiBmdW5jdGlvbiAoZGF0ZU9iaiwgbWludXRlcykgewogICAgICAgICAgZGF0ZU9iai5zZXRNaW51dGVzKHBhcnNlRmxvYXQobWludXRlcykpOwogICAgICB9LAogICAgICBqOiBmdW5jdGlvbiAoZGF0ZU9iaiwgZGF5KSB7CiAgICAgICAgICBkYXRlT2JqLnNldERhdGUocGFyc2VGbG9hdChkYXkpKTsKICAgICAgfSwKICAgICAgbDogZG9Ob3RoaW5nLAogICAgICBtOiBmdW5jdGlvbiAoZGF0ZU9iaiwgbW9udGgpIHsKICAgICAgICAgIGRhdGVPYmouc2V0TW9udGgocGFyc2VGbG9hdChtb250aCkgLSAxKTsKICAgICAgfSwKICAgICAgbjogZnVuY3Rpb24gKGRhdGVPYmosIG1vbnRoKSB7CiAgICAgICAgICBkYXRlT2JqLnNldE1vbnRoKHBhcnNlRmxvYXQobW9udGgpIC0gMSk7CiAgICAgIH0sCiAgICAgIHM6IGZ1bmN0aW9uIChkYXRlT2JqLCBzZWNvbmRzKSB7CiAgICAgICAgICBkYXRlT2JqLnNldFNlY29uZHMocGFyc2VGbG9hdChzZWNvbmRzKSk7CiAgICAgIH0sCiAgICAgIHU6IGZ1bmN0aW9uIChfLCB1bml4TWlsbFNlY29uZHMpIHsKICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShwYXJzZUZsb2F0KHVuaXhNaWxsU2Vjb25kcykpOwogICAgICB9LAogICAgICB3OiBkb05vdGhpbmcsCiAgICAgIHk6IGZ1bmN0aW9uIChkYXRlT2JqLCB5ZWFyKSB7CiAgICAgICAgICBkYXRlT2JqLnNldEZ1bGxZZWFyKDIwMDAgKyBwYXJzZUZsb2F0KHllYXIpKTsKICAgICAgfSwKICB9OwogIHZhciB0b2tlblJlZ2V4ID0gewogICAgICBEOiAiIiwKICAgICAgRjogIiIsCiAgICAgIEc6ICIoXFxkXFxkfFxcZCkiLAogICAgICBIOiAiKFxcZFxcZHxcXGQpIiwKICAgICAgSjogIihcXGRcXGR8XFxkKVxcdysiLAogICAgICBLOiAiIiwKICAgICAgTTogIiIsCiAgICAgIFM6ICIoXFxkXFxkfFxcZCkiLAogICAgICBVOiAiKC4rKSIsCiAgICAgIFc6ICIoXFxkXFxkfFxcZCkiLAogICAgICBZOiAiKFxcZHs0fSkiLAogICAgICBaOiAiKC4rKSIsCiAgICAgIGQ6ICIoXFxkXFxkfFxcZCkiLAogICAgICBoOiAiKFxcZFxcZHxcXGQpIiwKICAgICAgaTogIihcXGRcXGR8XFxkKSIsCiAgICAgIGo6ICIoXFxkXFxkfFxcZCkiLAogICAgICBsOiAiIiwKICAgICAgbTogIihcXGRcXGR8XFxkKSIsCiAgICAgIG46ICIoXFxkXFxkfFxcZCkiLAogICAgICBzOiAiKFxcZFxcZHxcXGQpIiwKICAgICAgdTogIiguKykiLAogICAgICB3OiAiKFxcZFxcZHxcXGQpIiwKICAgICAgeTogIihcXGR7Mn0pIiwKICB9OwogIHZhciBmb3JtYXRzID0gewogICAgICBaOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpOyB9LAogICAgICBEOiBmdW5jdGlvbiAoZGF0ZSwgbG9jYWxlLCBvcHRpb25zKSB7CiAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzLnNob3J0aGFuZFtmb3JtYXRzLncoZGF0ZSwgbG9jYWxlLCBvcHRpb25zKV07CiAgICAgIH0sCiAgICAgIEY6IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUsIG9wdGlvbnMpIHsKICAgICAgICAgIHJldHVybiBtb250aFRvU3RyKGZvcm1hdHMubihkYXRlLCBsb2NhbGUsIG9wdGlvbnMpIC0gMSwgZmFsc2UsIGxvY2FsZSk7CiAgICAgIH0sCiAgICAgIEc6IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUsIG9wdGlvbnMpIHsKICAgICAgICAgIHJldHVybiBwYWQoZm9ybWF0cy5oKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykpOwogICAgICB9LAogICAgICBIOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0SG91cnMoKSk7IH0sCiAgICAgIEo6IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUpIHsKICAgICAgICAgIHJldHVybiBsb2NhbGUub3JkaW5hbCAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgPyBkYXRlLmdldERhdGUoKSArIGxvY2FsZS5vcmRpbmFsKGRhdGUuZ2V0RGF0ZSgpKQogICAgICAgICAgICAgIDogZGF0ZS5nZXREYXRlKCk7CiAgICAgIH0sCiAgICAgIEs6IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUpIHsgcmV0dXJuIGxvY2FsZS5hbVBNW2ludChkYXRlLmdldEhvdXJzKCkgPiAxMSldOyB9LAogICAgICBNOiBmdW5jdGlvbiAoZGF0ZSwgbG9jYWxlKSB7CiAgICAgICAgICByZXR1cm4gbW9udGhUb1N0cihkYXRlLmdldE1vbnRoKCksIHRydWUsIGxvY2FsZSk7CiAgICAgIH0sCiAgICAgIFM6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBwYWQoZGF0ZS5nZXRTZWNvbmRzKCkpOyB9LAogICAgICBVOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLyAxMDAwOyB9LAogICAgICBXOiBmdW5jdGlvbiAoZGF0ZSwgXywgb3B0aW9ucykgewogICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZ2V0V2VlayhkYXRlKTsKICAgICAgfSwKICAgICAgWTogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHBhZChkYXRlLmdldEZ1bGxZZWFyKCksIDQpOyB9LAogICAgICBkOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0RGF0ZSgpKTsgfSwKICAgICAgaDogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIChkYXRlLmdldEhvdXJzKCkgJSAxMiA/IGRhdGUuZ2V0SG91cnMoKSAlIDEyIDogMTIpOyB9LAogICAgICBpOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0TWludXRlcygpKTsgfSwKICAgICAgajogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpOyB9LAogICAgICBsOiBmdW5jdGlvbiAoZGF0ZSwgbG9jYWxlKSB7CiAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzLmxvbmdoYW5kW2RhdGUuZ2V0RGF5KCldOwogICAgICB9LAogICAgICBtOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0TW9udGgoKSArIDEpOyB9LAogICAgICBuOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXRNb250aCgpICsgMTsgfSwKICAgICAgczogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0U2Vjb25kcygpOyB9LAogICAgICB1OiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXRUaW1lKCk7IH0sCiAgICAgIHc6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBkYXRlLmdldERheSgpOyB9LAogICAgICB5OiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gU3RyaW5nKGRhdGUuZ2V0RnVsbFllYXIoKSkuc3Vic3RyaW5nKDIpOyB9LAogIH07CgogIHZhciBjcmVhdGVEYXRlRm9ybWF0dGVyID0gZnVuY3Rpb24gKF9hKSB7CiAgICAgIHZhciBfYiA9IF9hLmNvbmZpZywgY29uZmlnID0gX2IgPT09IHZvaWQgMCA/IGRlZmF1bHRzIDogX2IsIF9jID0gX2EubDEwbiwgbDEwbiA9IF9jID09PSB2b2lkIDAgPyBlbmdsaXNoIDogX2MsIF9kID0gX2EuaXNNb2JpbGUsIGlzTW9iaWxlID0gX2QgPT09IHZvaWQgMCA/IGZhbHNlIDogX2Q7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZU9iaiwgZnJtdCwgb3ZlcnJpZGVMb2NhbGUpIHsKICAgICAgICAgIHZhciBsb2NhbGUgPSBvdmVycmlkZUxvY2FsZSB8fCBsMTBuOwogICAgICAgICAgaWYgKGNvbmZpZy5mb3JtYXREYXRlICE9PSB1bmRlZmluZWQgJiYgIWlzTW9iaWxlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZy5mb3JtYXREYXRlKGRhdGVPYmosIGZybXQsIGxvY2FsZSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZnJtdAogICAgICAgICAgICAgIC5zcGxpdCgiIikKICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjLCBpLCBhcnIpIHsKICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0c1tjXSAmJiBhcnJbaSAtIDFdICE9PSAiXFwiCiAgICAgICAgICAgICAgICAgID8gZm9ybWF0c1tjXShkYXRlT2JqLCBsb2NhbGUsIGNvbmZpZykKICAgICAgICAgICAgICAgICAgOiBjICE9PSAiXFwiCiAgICAgICAgICAgICAgICAgICAgICA/IGMKICAgICAgICAgICAgICAgICAgICAgIDogIiI7CiAgICAgICAgICB9KQogICAgICAgICAgICAgIC5qb2luKCIiKTsKICAgICAgfTsKICB9OwogIHZhciBjcmVhdGVEYXRlUGFyc2VyID0gZnVuY3Rpb24gKF9hKSB7CiAgICAgIHZhciBfYiA9IF9hLmNvbmZpZywgY29uZmlnID0gX2IgPT09IHZvaWQgMCA/IGRlZmF1bHRzIDogX2IsIF9jID0gX2EubDEwbiwgbDEwbiA9IF9jID09PSB2b2lkIDAgPyBlbmdsaXNoIDogX2M7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZSwgZ2l2ZW5Gb3JtYXQsIHRpbWVsZXNzLCBjdXN0b21Mb2NhbGUpIHsKICAgICAgICAgIGlmIChkYXRlICE9PSAwICYmICFkYXRlKQogICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgICB2YXIgbG9jYWxlID0gY3VzdG9tTG9jYWxlIHx8IGwxMG47CiAgICAgICAgICB2YXIgcGFyc2VkRGF0ZTsKICAgICAgICAgIHZhciBkYXRlT3JpZyA9IGRhdGU7CiAgICAgICAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpCiAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTsKICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRlICE9PSAic3RyaW5nIiAmJgogICAgICAgICAgICAgIGRhdGUudG9GaXhlZCAhPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgIHBhcnNlZERhdGUgPSBuZXcgRGF0ZShkYXRlKTsKICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRlID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgIHZhciBmb3JtYXQgPSBnaXZlbkZvcm1hdCB8fCAoY29uZmlnIHx8IGRlZmF1bHRzKS5kYXRlRm9ybWF0OwogICAgICAgICAgICAgIHZhciBkYXRlc3RyID0gU3RyaW5nKGRhdGUpLnRyaW0oKTsKICAgICAgICAgICAgICBpZiAoZGF0ZXN0ciA9PT0gInRvZGF5IikgewogICAgICAgICAgICAgICAgICBwYXJzZWREYXRlID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgICAgICAgdGltZWxlc3MgPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIGlmIChjb25maWcgJiYgY29uZmlnLnBhcnNlRGF0ZSkgewogICAgICAgICAgICAgICAgICBwYXJzZWREYXRlID0gY29uZmlnLnBhcnNlRGF0ZShkYXRlLCBmb3JtYXQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIGlmICgvWiQvLnRlc3QoZGF0ZXN0cikgfHwKICAgICAgICAgICAgICAgICAgL0dNVCQvLnRlc3QoZGF0ZXN0cikpIHsKICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9IG5ldyBEYXRlKGRhdGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZWQgPSB2b2lkIDAsIG9wcyA9IFtdOwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbWF0Y2hJbmRleCA9IDAsIHJlZ2V4U3RyID0gIiI7IGkgPCBmb3JtYXQubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IGZvcm1hdFtpXTsKICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0JhY2tTbGFzaCA9IHRva2VuID09PSAiXFwiOwogICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWQgPSBmb3JtYXRbaSAtIDFdID09PSAiXFwiIHx8IGlzQmFja1NsYXNoOwogICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuUmVnZXhbdG9rZW5dICYmICFlc2NhcGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhTdHIgKz0gdG9rZW5SZWdleFt0b2tlbl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbmV3IFJlZ0V4cChyZWdleFN0cikuZXhlYyhkYXRlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgKG1hdGNoZWQgPSB0cnVlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHNbdG9rZW4gIT09ICJZIiA/ICJwdXNoIiA6ICJ1bnNoaWZ0Il0oewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IHJldkZvcm1hdFt0b2tlbl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw6IG1hdGNoWysrbWF0Y2hJbmRleF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFpc0JhY2tTbGFzaCkKICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleFN0ciArPSAiLiI7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9CiAgICAgICAgICAgICAgICAgICAgICAhY29uZmlnIHx8ICFjb25maWcubm9DYWxlbmRhcgogICAgICAgICAgICAgICAgICAgICAgICAgID8gbmV3IERhdGUobmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLCAwLCAxLCAwLCAwLCAwLCAwKQogICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IERhdGUobmV3IERhdGUoKS5zZXRIb3VycygwLCAwLCAwLCAwKSk7CiAgICAgICAgICAgICAgICAgIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChfYSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gX2EuZm4sIHZhbCA9IF9hLnZhbDsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAocGFyc2VkRGF0ZSA9IGZuKHBhcnNlZERhdGUsIHZhbCwgbG9jYWxlKSB8fCBwYXJzZWREYXRlKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGUgPSBtYXRjaGVkID8gcGFyc2VkRGF0ZSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIShwYXJzZWREYXRlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4ocGFyc2VkRGF0ZS5nZXRUaW1lKCkpKSkgewogICAgICAgICAgICAgIGNvbmZpZy5lcnJvckhhbmRsZXIobmV3IEVycm9yKCJJbnZhbGlkIGRhdGUgcHJvdmlkZWQ6ICIgKyBkYXRlT3JpZykpOwogICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGltZWxlc3MgPT09IHRydWUpCiAgICAgICAgICAgICAgcGFyc2VkRGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTsKICAgICAgICAgIHJldHVybiBwYXJzZWREYXRlOwogICAgICB9OwogIH07CiAgZnVuY3Rpb24gY29tcGFyZURhdGVzKGRhdGUxLCBkYXRlMiwgdGltZWxlc3MpIHsKICAgICAgaWYgKHRpbWVsZXNzID09PSB2b2lkIDApIHsgdGltZWxlc3MgPSB0cnVlOyB9CiAgICAgIGlmICh0aW1lbGVzcyAhPT0gZmFsc2UpIHsKICAgICAgICAgIHJldHVybiAobmV3IERhdGUoZGF0ZTEuZ2V0VGltZSgpKS5zZXRIb3VycygwLCAwLCAwLCAwKSAtCiAgICAgICAgICAgICAgbmV3IERhdGUoZGF0ZTIuZ2V0VGltZSgpKS5zZXRIb3VycygwLCAwLCAwLCAwKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIGRhdGUxLmdldFRpbWUoKSAtIGRhdGUyLmdldFRpbWUoKTsKICB9CiAgdmFyIGlzQmV0d2VlbiA9IGZ1bmN0aW9uICh0cywgdHMxLCB0czIpIHsKICAgICAgcmV0dXJuIHRzID4gTWF0aC5taW4odHMxLCB0czIpICYmIHRzIDwgTWF0aC5tYXgodHMxLCB0czIpOwogIH07CiAgdmFyIGNhbGN1bGF0ZVNlY29uZHNTaW5jZU1pZG5pZ2h0ID0gZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7CiAgICAgIHJldHVybiBob3VycyAqIDM2MDAgKyBtaW51dGVzICogNjAgKyBzZWNvbmRzOwogIH07CiAgdmFyIHBhcnNlU2Vjb25kcyA9IGZ1bmN0aW9uIChzZWNvbmRzU2luY2VNaWRuaWdodCkgewogICAgICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKHNlY29uZHNTaW5jZU1pZG5pZ2h0IC8gMzYwMCksIG1pbnV0ZXMgPSAoc2Vjb25kc1NpbmNlTWlkbmlnaHQgLSBob3VycyAqIDM2MDApIC8gNjA7CiAgICAgIHJldHVybiBbaG91cnMsIG1pbnV0ZXMsIHNlY29uZHNTaW5jZU1pZG5pZ2h0IC0gaG91cnMgKiAzNjAwIC0gbWludXRlcyAqIDYwXTsKICB9OwogIHZhciBkdXJhdGlvbiA9IHsKICAgICAgREFZOiA4NjQwMDAwMCwKICB9OwogIGZ1bmN0aW9uIGdldERlZmF1bHRIb3Vycyhjb25maWcpIHsKICAgICAgdmFyIGhvdXJzID0gY29uZmlnLmRlZmF1bHRIb3VyOwogICAgICB2YXIgbWludXRlcyA9IGNvbmZpZy5kZWZhdWx0TWludXRlOwogICAgICB2YXIgc2Vjb25kcyA9IGNvbmZpZy5kZWZhdWx0U2Vjb25kczsKICAgICAgaWYgKGNvbmZpZy5taW5EYXRlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHZhciBtaW5Ib3VyID0gY29uZmlnLm1pbkRhdGUuZ2V0SG91cnMoKTsKICAgICAgICAgIHZhciBtaW5NaW51dGVzID0gY29uZmlnLm1pbkRhdGUuZ2V0TWludXRlcygpOwogICAgICAgICAgdmFyIG1pblNlY29uZHMgPSBjb25maWcubWluRGF0ZS5nZXRTZWNvbmRzKCk7CiAgICAgICAgICBpZiAoaG91cnMgPCBtaW5Ib3VyKSB7CiAgICAgICAgICAgICAgaG91cnMgPSBtaW5Ib3VyOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGhvdXJzID09PSBtaW5Ib3VyICYmIG1pbnV0ZXMgPCBtaW5NaW51dGVzKSB7CiAgICAgICAgICAgICAgbWludXRlcyA9IG1pbk1pbnV0ZXM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaG91cnMgPT09IG1pbkhvdXIgJiYgbWludXRlcyA9PT0gbWluTWludXRlcyAmJiBzZWNvbmRzIDwgbWluU2Vjb25kcykKICAgICAgICAgICAgICBzZWNvbmRzID0gY29uZmlnLm1pbkRhdGUuZ2V0U2Vjb25kcygpOwogICAgICB9CiAgICAgIGlmIChjb25maWcubWF4RGF0ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB2YXIgbWF4SHIgPSBjb25maWcubWF4RGF0ZS5nZXRIb3VycygpOwogICAgICAgICAgdmFyIG1heE1pbnV0ZXMgPSBjb25maWcubWF4RGF0ZS5nZXRNaW51dGVzKCk7CiAgICAgICAgICBob3VycyA9IE1hdGgubWluKGhvdXJzLCBtYXhIcik7CiAgICAgICAgICBpZiAoaG91cnMgPT09IG1heEhyKQogICAgICAgICAgICAgIG1pbnV0ZXMgPSBNYXRoLm1pbihtYXhNaW51dGVzLCBtaW51dGVzKTsKICAgICAgICAgIGlmIChob3VycyA9PT0gbWF4SHIgJiYgbWludXRlcyA9PT0gbWF4TWludXRlcykKICAgICAgICAgICAgICBzZWNvbmRzID0gY29uZmlnLm1heERhdGUuZ2V0U2Vjb25kcygpOwogICAgICB9CiAgICAgIHJldHVybiB7IGhvdXJzOiBob3VycywgbWludXRlczogbWludXRlcywgc2Vjb25kczogc2Vjb25kcyB9OwogIH0KCiAgaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSAiZnVuY3Rpb24iKSB7CiAgICAgIE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgICAgICAgICB2YXIgYXJncyA9IFtdOwogICAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHsKICAgICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCF0YXJnZXQpIHsKICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoIkNhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCIpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoc291cmNlKSB7CiAgICAgICAgICAgICAgaWYgKHNvdXJjZSkgewogICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHRhcmdldFtrZXldID0gc291cmNlW2tleV0pOyB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBhcmdzXzEgPSBhcmdzOyBfYSA8IGFyZ3NfMS5sZW5ndGg7IF9hKyspIHsKICAgICAgICAgICAgICB2YXIgc291cmNlID0gYXJnc18xW19hXTsKICAgICAgICAgICAgICBfbG9vcF8xKHNvdXJjZSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGFyZ2V0OwogICAgICB9OwogIH0KCiAgdmFyIF9fYXNzaWduID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHsKICAgICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykgewogICAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07CiAgICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgICB0W3BdID0gc1twXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0OwogICAgICB9OwogICAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9OwogIHZhciBfX3NwcmVhZEFycmF5cyA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7CiAgICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoOwogICAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspCiAgICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKykKICAgICAgICAgICAgICByW2tdID0gYVtqXTsKICAgICAgcmV0dXJuIHI7CiAgfTsKICB2YXIgREVCT1VOQ0VEX0NIQU5HRV9NUyA9IDMwMDsKICBmdW5jdGlvbiBGbGF0cGlja3JJbnN0YW5jZShlbGVtZW50LCBpbnN0YW5jZUNvbmZpZykgewogICAgICB2YXIgc2VsZiA9IHsKICAgICAgICAgIGNvbmZpZzogX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHRzKSwgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcpLAogICAgICAgICAgbDEwbjogZW5nbGlzaCwKICAgICAgfTsKICAgICAgc2VsZi5wYXJzZURhdGUgPSBjcmVhdGVEYXRlUGFyc2VyKHsgY29uZmlnOiBzZWxmLmNvbmZpZywgbDEwbjogc2VsZi5sMTBuIH0pOwogICAgICBzZWxmLl9oYW5kbGVycyA9IFtdOwogICAgICBzZWxmLnBsdWdpbkVsZW1lbnRzID0gW107CiAgICAgIHNlbGYubG9hZGVkUGx1Z2lucyA9IFtdOwogICAgICBzZWxmLl9iaW5kID0gYmluZDsKICAgICAgc2VsZi5fc2V0SG91cnNGcm9tRGF0ZSA9IHNldEhvdXJzRnJvbURhdGU7CiAgICAgIHNlbGYuX3Bvc2l0aW9uQ2FsZW5kYXIgPSBwb3NpdGlvbkNhbGVuZGFyOwogICAgICBzZWxmLmNoYW5nZU1vbnRoID0gY2hhbmdlTW9udGg7CiAgICAgIHNlbGYuY2hhbmdlWWVhciA9IGNoYW5nZVllYXI7CiAgICAgIHNlbGYuY2xlYXIgPSBjbGVhcjsKICAgICAgc2VsZi5jbG9zZSA9IGNsb3NlOwogICAgICBzZWxmLm9uTW91c2VPdmVyID0gb25Nb3VzZU92ZXI7CiAgICAgIHNlbGYuX2NyZWF0ZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50OwogICAgICBzZWxmLmNyZWF0ZURheSA9IGNyZWF0ZURheTsKICAgICAgc2VsZi5kZXN0cm95ID0gZGVzdHJveTsKICAgICAgc2VsZi5pc0VuYWJsZWQgPSBpc0VuYWJsZWQ7CiAgICAgIHNlbGYuanVtcFRvRGF0ZSA9IGp1bXBUb0RhdGU7CiAgICAgIHNlbGYudXBkYXRlVmFsdWUgPSB1cGRhdGVWYWx1ZTsKICAgICAgc2VsZi5vcGVuID0gb3BlbjsKICAgICAgc2VsZi5yZWRyYXcgPSByZWRyYXc7CiAgICAgIHNlbGYuc2V0ID0gc2V0OwogICAgICBzZWxmLnNldERhdGUgPSBzZXREYXRlOwogICAgICBzZWxmLnRvZ2dsZSA9IHRvZ2dsZTsKICAgICAgZnVuY3Rpb24gc2V0dXBIZWxwZXJGdW5jdGlvbnMoKSB7CiAgICAgICAgICBzZWxmLnV0aWxzID0gewogICAgICAgICAgICAgIGdldERheXNJbk1vbnRoOiBmdW5jdGlvbiAobW9udGgsIHlyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChtb250aCA9PT0gdm9pZCAwKSB7IG1vbnRoID0gc2VsZi5jdXJyZW50TW9udGg7IH0KICAgICAgICAgICAgICAgICAgaWYgKHlyID09PSB2b2lkIDApIHsgeXIgPSBzZWxmLmN1cnJlbnRZZWFyOyB9CiAgICAgICAgICAgICAgICAgIGlmIChtb250aCA9PT0gMSAmJiAoKHlyICUgNCA9PT0gMCAmJiB5ciAlIDEwMCAhPT0gMCkgfHwgeXIgJSA0MDAgPT09IDApKQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI5OwogICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5sMTBuLmRheXNJbk1vbnRoW21vbnRoXTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgfTsKICAgICAgfQogICAgICBmdW5jdGlvbiBpbml0KCkgewogICAgICAgICAgc2VsZi5lbGVtZW50ID0gc2VsZi5pbnB1dCA9IGVsZW1lbnQ7CiAgICAgICAgICBzZWxmLmlzT3BlbiA9IGZhbHNlOwogICAgICAgICAgcGFyc2VDb25maWcoKTsKICAgICAgICAgIHNldHVwTG9jYWxlKCk7CiAgICAgICAgICBzZXR1cElucHV0cygpOwogICAgICAgICAgc2V0dXBEYXRlcygpOwogICAgICAgICAgc2V0dXBIZWxwZXJGdW5jdGlvbnMoKTsKICAgICAgICAgIGlmICghc2VsZi5pc01vYmlsZSkKICAgICAgICAgICAgICBidWlsZCgpOwogICAgICAgICAgYmluZEV2ZW50cygpOwogICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggfHwgc2VsZi5jb25maWcubm9DYWxlbmRhcikgewogICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSB7CiAgICAgICAgICAgICAgICAgIHNldEhvdXJzRnJvbURhdGUoc2VsZi5jb25maWcubm9DYWxlbmRhciA/IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqIDogdW5kZWZpbmVkKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdXBkYXRlVmFsdWUoZmFsc2UpOwogICAgICAgICAgfQogICAgICAgICAgc2V0Q2FsZW5kYXJXaWR0aCgpOwogICAgICAgICAgdmFyIGlzU2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsKICAgICAgICAgIGlmICghc2VsZi5pc01vYmlsZSAmJiBpc1NhZmFyaSkgewogICAgICAgICAgICAgIHBvc2l0aW9uQ2FsZW5kYXIoKTsKICAgICAgICAgIH0KICAgICAgICAgIHRyaWdnZXJFdmVudCgib25SZWFkeSIpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGdldENsb3Nlc3RBY3RpdmVFbGVtZW50KCkgewogICAgICAgICAgdmFyIF9hOwogICAgICAgICAgcmV0dXJuICgoKF9hID0gc2VsZi5jYWxlbmRhckNvbnRhaW5lcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFJvb3ROb2RlKCkpCiAgICAgICAgICAgICAgLmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gYmluZFRvSW5zdGFuY2UoZm4pIHsKICAgICAgICAgIHJldHVybiBmbi5iaW5kKHNlbGYpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNldENhbGVuZGFyV2lkdGgoKSB7CiAgICAgICAgICB2YXIgY29uZmlnID0gc2VsZi5jb25maWc7CiAgICAgICAgICBpZiAoY29uZmlnLndlZWtOdW1iZXJzID09PSBmYWxzZSAmJiBjb25maWcuc2hvd01vbnRocyA9PT0gMSkgewogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZy5ub0NhbGVuZGFyICE9PSB0cnVlKSB7CiAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmNhbGVuZGFyQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICJoaWRkZW4iOwogICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXlzV2lkdGggPSAoc2VsZi5kYXlzLm9mZnNldFdpZHRoICsgMSkgKiBjb25maWcuc2hvd01vbnRoczsKICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci5zdHlsZS53aWR0aCA9IGRheXNXaWR0aCArICJweCI7CiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLndpZHRoID0KICAgICAgICAgICAgICAgICAgICAgICAgICBkYXlzV2lkdGggKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2VsZi53ZWVrV3JhcHBlciAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGYud2Vla1dyYXBwZXIub2Zmc2V0V2lkdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMCkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicHgiOwogICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgidmlzaWJpbGl0eSIpOwogICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgiZGlzcGxheSIpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgIH0KICAgICAgZnVuY3Rpb24gdXBkYXRlVGltZShlKSB7CiAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgIHZhciBkZWZhdWx0RGF0ZSA9IHNlbGYuY29uZmlnLm1pbkRhdGUgPT09IHVuZGVmaW5lZCB8fAogICAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMobmV3IERhdGUoKSwgc2VsZi5jb25maWcubWluRGF0ZSkgPj0gMAogICAgICAgICAgICAgICAgICA/IG5ldyBEYXRlKCkKICAgICAgICAgICAgICAgICAgOiBuZXcgRGF0ZShzZWxmLmNvbmZpZy5taW5EYXRlLmdldFRpbWUoKSk7CiAgICAgICAgICAgICAgdmFyIGRlZmF1bHRzID0gZ2V0RGVmYXVsdEhvdXJzKHNlbGYuY29uZmlnKTsKICAgICAgICAgICAgICBkZWZhdWx0RGF0ZS5zZXRIb3VycyhkZWZhdWx0cy5ob3VycywgZGVmYXVsdHMubWludXRlcywgZGVmYXVsdHMuc2Vjb25kcywgZGVmYXVsdERhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpOwogICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IFtkZWZhdWx0RGF0ZV07CiAgICAgICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSBkZWZhdWx0RGF0ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChlICE9PSB1bmRlZmluZWQgJiYgZS50eXBlICE9PSAiYmx1ciIpIHsKICAgICAgICAgICAgICB0aW1lV3JhcHBlcihlKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBwcmV2VmFsdWUgPSBzZWxmLl9pbnB1dC52YWx1ZTsKICAgICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpOwogICAgICAgICAgdXBkYXRlVmFsdWUoKTsKICAgICAgICAgIGlmIChzZWxmLl9pbnB1dC52YWx1ZSAhPT0gcHJldlZhbHVlKSB7CiAgICAgICAgICAgICAgc2VsZi5fZGVib3VuY2VkQ2hhbmdlKCk7CiAgICAgICAgICB9CiAgICAgIH0KICAgICAgZnVuY3Rpb24gYW1wbTJtaWxpdGFyeShob3VyLCBhbVBNKSB7CiAgICAgICAgICByZXR1cm4gKGhvdXIgJSAxMikgKyAxMiAqIGludChhbVBNID09PSBzZWxmLmwxMG4uYW1QTVsxXSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gbWlsaXRhcnkyYW1wbShob3VyKSB7CiAgICAgICAgICBzd2l0Y2ggKGhvdXIgJSAyNCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgICByZXR1cm4gMTI7CiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgJSAxMjsKICAgICAgICAgIH0KICAgICAgfQogICAgICBmdW5jdGlvbiBzZXRIb3Vyc0Zyb21JbnB1dHMoKSB7CiAgICAgICAgICBpZiAoc2VsZi5ob3VyRWxlbWVudCA9PT0gdW5kZWZpbmVkIHx8IHNlbGYubWludXRlRWxlbWVudCA9PT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIHZhciBob3VycyA9IChwYXJzZUludChzZWxmLmhvdXJFbGVtZW50LnZhbHVlLnNsaWNlKC0yKSwgMTApIHx8IDApICUgMjQsIG1pbnV0ZXMgPSAocGFyc2VJbnQoc2VsZi5taW51dGVFbGVtZW50LnZhbHVlLCAxMCkgfHwgMCkgJSA2MCwgc2Vjb25kcyA9IHNlbGYuc2Vjb25kRWxlbWVudCAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgPyAocGFyc2VJbnQoc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlLCAxMCkgfHwgMCkgJSA2MAogICAgICAgICAgICAgIDogMDsKICAgICAgICAgIGlmIChzZWxmLmFtUE0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIGhvdXJzID0gYW1wbTJtaWxpdGFyeShob3Vycywgc2VsZi5hbVBNLnRleHRDb250ZW50KTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBsaW1pdE1pbkhvdXJzID0gc2VsZi5jb25maWcubWluVGltZSAhPT0gdW5kZWZpbmVkIHx8CiAgICAgICAgICAgICAgKHNlbGYuY29uZmlnLm1pbkRhdGUgJiYKICAgICAgICAgICAgICAgICAgc2VsZi5taW5EYXRlSGFzVGltZSAmJgogICAgICAgICAgICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiAmJgogICAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmosIHNlbGYuY29uZmlnLm1pbkRhdGUsIHRydWUpID09PQogICAgICAgICAgICAgICAgICAgICAgMCk7CiAgICAgICAgICB2YXIgbGltaXRNYXhIb3VycyA9IHNlbGYuY29uZmlnLm1heFRpbWUgIT09IHVuZGVmaW5lZCB8fAogICAgICAgICAgICAgIChzZWxmLmNvbmZpZy5tYXhEYXRlICYmCiAgICAgICAgICAgICAgICAgIHNlbGYubWF4RGF0ZUhhc1RpbWUgJiYKICAgICAgICAgICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogJiYKICAgICAgICAgICAgICAgICAgY29tcGFyZURhdGVzKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLCBzZWxmLmNvbmZpZy5tYXhEYXRlLCB0cnVlKSA9PT0KICAgICAgICAgICAgICAgICAgICAgIDApOwogICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heFRpbWUgIT09IHVuZGVmaW5lZCAmJgogICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1pblRpbWUgIT09IHVuZGVmaW5lZCAmJgogICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1pblRpbWUgPiBzZWxmLmNvbmZpZy5tYXhUaW1lKSB7CiAgICAgICAgICAgICAgdmFyIG1pbkJvdW5kID0gY2FsY3VsYXRlU2Vjb25kc1NpbmNlTWlkbmlnaHQoc2VsZi5jb25maWcubWluVGltZS5nZXRIb3VycygpLCBzZWxmLmNvbmZpZy5taW5UaW1lLmdldE1pbnV0ZXMoKSwgc2VsZi5jb25maWcubWluVGltZS5nZXRTZWNvbmRzKCkpOwogICAgICAgICAgICAgIHZhciBtYXhCb3VuZCA9IGNhbGN1bGF0ZVNlY29uZHNTaW5jZU1pZG5pZ2h0KHNlbGYuY29uZmlnLm1heFRpbWUuZ2V0SG91cnMoKSwgc2VsZi5jb25maWcubWF4VGltZS5nZXRNaW51dGVzKCksIHNlbGYuY29uZmlnLm1heFRpbWUuZ2V0U2Vjb25kcygpKTsKICAgICAgICAgICAgICB2YXIgY3VycmVudFRpbWUgPSBjYWxjdWxhdGVTZWNvbmRzU2luY2VNaWRuaWdodChob3VycywgbWludXRlcywgc2Vjb25kcyk7CiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID4gbWF4Qm91bmQgJiYgY3VycmVudFRpbWUgPCBtaW5Cb3VuZCkgewogICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VTZWNvbmRzKG1pbkJvdW5kKTsKICAgICAgICAgICAgICAgICAgaG91cnMgPSByZXN1bHRbMF07CiAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSByZXN1bHRbMV07CiAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSByZXN1bHRbMl07CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgaWYgKGxpbWl0TWF4SG91cnMpIHsKICAgICAgICAgICAgICAgICAgdmFyIG1heFRpbWUgPSBzZWxmLmNvbmZpZy5tYXhUaW1lICE9PSB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi5jb25maWcubWF4VGltZQogICAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmNvbmZpZy5tYXhEYXRlOwogICAgICAgICAgICAgICAgICBob3VycyA9IE1hdGgubWluKGhvdXJzLCBtYXhUaW1lLmdldEhvdXJzKCkpOwogICAgICAgICAgICAgICAgICBpZiAoaG91cnMgPT09IG1heFRpbWUuZ2V0SG91cnMoKSkKICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBNYXRoLm1pbihtaW51dGVzLCBtYXhUaW1lLmdldE1pbnV0ZXMoKSk7CiAgICAgICAgICAgICAgICAgIGlmIChtaW51dGVzID09PSBtYXhUaW1lLmdldE1pbnV0ZXMoKSkKICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSBNYXRoLm1pbihzZWNvbmRzLCBtYXhUaW1lLmdldFNlY29uZHMoKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChsaW1pdE1pbkhvdXJzKSB7CiAgICAgICAgICAgICAgICAgIHZhciBtaW5UaW1lID0gc2VsZi5jb25maWcubWluVGltZSAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLm1pblRpbWUKICAgICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubWluRGF0ZTsKICAgICAgICAgICAgICAgICAgaG91cnMgPSBNYXRoLm1heChob3VycywgbWluVGltZS5nZXRIb3VycygpKTsKICAgICAgICAgICAgICAgICAgaWYgKGhvdXJzID09PSBtaW5UaW1lLmdldEhvdXJzKCkgJiYgbWludXRlcyA8IG1pblRpbWUuZ2V0TWludXRlcygpKQogICAgICAgICAgICAgICAgICAgICAgbWludXRlcyA9IG1pblRpbWUuZ2V0TWludXRlcygpOwogICAgICAgICAgICAgICAgICBpZiAobWludXRlcyA9PT0gbWluVGltZS5nZXRNaW51dGVzKCkpCiAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gTWF0aC5tYXgoc2Vjb25kcywgbWluVGltZS5nZXRTZWNvbmRzKCkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHNldEhvdXJzKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBzZXRIb3Vyc0Zyb21EYXRlKGRhdGVPYmopIHsKICAgICAgICAgIHZhciBkYXRlID0gZGF0ZU9iaiB8fCBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iajsKICAgICAgICAgIGlmIChkYXRlICYmIGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7CiAgICAgICAgICAgICAgc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCkpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNldEhvdXJzKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7CiAgICAgICAgICBpZiAoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLnNldEhvdXJzKGhvdXJzICUgMjQsIG1pbnV0ZXMsIHNlY29uZHMgfHwgMCwgMCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIXNlbGYuaG91ckVsZW1lbnQgfHwgIXNlbGYubWludXRlRWxlbWVudCB8fCBzZWxmLmlzTW9iaWxlKQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQudmFsdWUgPSBwYWQoIXNlbGYuY29uZmlnLnRpbWVfMjRocgogICAgICAgICAgICAgID8gKCgxMiArIGhvdXJzKSAlIDEyKSArIDEyICogaW50KGhvdXJzICUgMTIgPT09IDApCiAgICAgICAgICAgICAgOiBob3Vycyk7CiAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQudmFsdWUgPSBwYWQobWludXRlcyk7CiAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgc2VsZi5hbVBNLnRleHRDb250ZW50ID0gc2VsZi5sMTBuLmFtUE1baW50KGhvdXJzID49IDEyKV07CiAgICAgICAgICBpZiAoc2VsZi5zZWNvbmRFbGVtZW50ICE9PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlID0gcGFkKHNlY29uZHMpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIG9uWWVhcklucHV0KGV2ZW50KSB7CiAgICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChldmVudCk7CiAgICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KGV2ZW50VGFyZ2V0LnZhbHVlKSArIChldmVudC5kZWx0YSB8fCAwKTsKICAgICAgICAgIGlmICh5ZWFyIC8gMTAwMCA+IDEgfHwKICAgICAgICAgICAgICAoZXZlbnQua2V5ID09PSAiRW50ZXIiICYmICEvW15cZF0vLnRlc3QoeWVhci50b1N0cmluZygpKSkpIHsKICAgICAgICAgICAgICBjaGFuZ2VZZWFyKHllYXIpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIGJpbmQoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHsKICAgICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEFycmF5KQogICAgICAgICAgICAgIHJldHVybiBldmVudC5mb3JFYWNoKGZ1bmN0aW9uIChldikgeyByZXR1cm4gYmluZChlbGVtZW50LCBldiwgaGFuZGxlciwgb3B0aW9ucyk7IH0pOwogICAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBBcnJheSkKICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gYmluZChlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpOyB9KTsKICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7CiAgICAgICAgICBzZWxmLl9oYW5kbGVycy5wdXNoKHsKICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7IH0sCiAgICAgICAgICB9KTsKICAgICAgfQogICAgICBmdW5jdGlvbiB0cmlnZ2VyQ2hhbmdlKCkgewogICAgICAgICAgdHJpZ2dlckV2ZW50KCJvbkNoYW5nZSIpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGJpbmRFdmVudHMoKSB7CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcud3JhcCkgewogICAgICAgICAgICAgIFsib3BlbiIsICJjbG9zZSIsICJ0b2dnbGUiLCAiY2xlYXIiXS5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzZWxmLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgiW2RhdGEtIiArIGV2dCArICJdIiksIGZ1bmN0aW9uIChlbCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJpbmQoZWwsICJjbGljayIsIHNlbGZbZXZ0XSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHNlbGYuaXNNb2JpbGUpIHsKICAgICAgICAgICAgICBzZXR1cE1vYmlsZSgpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBkZWJvdW5jZWRSZXNpemUgPSBkZWJvdW5jZShvblJlc2l6ZSwgNTApOwogICAgICAgICAgc2VsZi5fZGVib3VuY2VkQ2hhbmdlID0gZGVib3VuY2UodHJpZ2dlckNoYW5nZSwgREVCT1VOQ0VEX0NIQU5HRV9NUyk7CiAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICYmICEvaVBob25lfGlQYWR8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpCiAgICAgICAgICAgICAgYmluZChzZWxmLmRheXNDb250YWluZXIsICJtb3VzZW92ZXIiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gInJhbmdlIikKICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VPdmVyKGdldEV2ZW50VGFyZ2V0KGUpKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgIGJpbmQoc2VsZi5faW5wdXQsICJrZXlkb3duIiwgb25LZXlEb3duKTsKICAgICAgICAgIGlmIChzZWxmLmNhbGVuZGFyQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICBiaW5kKHNlbGYuY2FsZW5kYXJDb250YWluZXIsICJrZXlkb3duIiwgb25LZXlEb3duKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghc2VsZi5jb25maWcuaW5saW5lICYmICFzZWxmLmNvbmZpZy5zdGF0aWMpCiAgICAgICAgICAgICAgYmluZCh3aW5kb3csICJyZXNpemUiLCBkZWJvdW5jZWRSZXNpemUpOwogICAgICAgICAgaWYgKHdpbmRvdy5vbnRvdWNoc3RhcnQgIT09IHVuZGVmaW5lZCkKICAgICAgICAgICAgICBiaW5kKHdpbmRvdy5kb2N1bWVudCwgInRvdWNoc3RhcnQiLCBkb2N1bWVudENsaWNrKTsKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICBiaW5kKHdpbmRvdy5kb2N1bWVudCwgIm1vdXNlZG93biIsIGRvY3VtZW50Q2xpY2spOwogICAgICAgICAgYmluZCh3aW5kb3cuZG9jdW1lbnQsICJmb2N1cyIsIGRvY3VtZW50Q2xpY2ssIHsgY2FwdHVyZTogdHJ1ZSB9KTsKICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5jbGlja09wZW5zID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgYmluZChzZWxmLl9pbnB1dCwgImZvY3VzIiwgc2VsZi5vcGVuKTsKICAgICAgICAgICAgICBiaW5kKHNlbGYuX2lucHV0LCAiY2xpY2siLCBzZWxmLm9wZW4pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgYmluZChzZWxmLm1vbnRoTmF2LCAiY2xpY2siLCBvbk1vbnRoTmF2Q2xpY2spOwogICAgICAgICAgICAgIGJpbmQoc2VsZi5tb250aE5hdiwgWyJrZXl1cCIsICJpbmNyZW1lbnQiXSwgb25ZZWFySW5wdXQpOwogICAgICAgICAgICAgIGJpbmQoc2VsZi5kYXlzQ29udGFpbmVyLCAiY2xpY2siLCBzZWxlY3REYXRlKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzZWxmLnRpbWVDb250YWluZXIgIT09IHVuZGVmaW5lZCAmJgogICAgICAgICAgICAgIHNlbGYubWludXRlRWxlbWVudCAhPT0gdW5kZWZpbmVkICYmCiAgICAgICAgICAgICAgc2VsZi5ob3VyRWxlbWVudCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgdmFyIHNlbFRleHQgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RXZlbnRUYXJnZXQoZSkuc2VsZWN0KCk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBiaW5kKHNlbGYudGltZUNvbnRhaW5lciwgWyJpbmNyZW1lbnQiXSwgdXBkYXRlVGltZSk7CiAgICAgICAgICAgICAgYmluZChzZWxmLnRpbWVDb250YWluZXIsICJibHVyIiwgdXBkYXRlVGltZSwgeyBjYXB0dXJlOiB0cnVlIH0pOwogICAgICAgICAgICAgIGJpbmQoc2VsZi50aW1lQ29udGFpbmVyLCAiY2xpY2siLCB0aW1lSW5jcmVtZW50KTsKICAgICAgICAgICAgICBiaW5kKFtzZWxmLmhvdXJFbGVtZW50LCBzZWxmLm1pbnV0ZUVsZW1lbnRdLCBbImZvY3VzIiwgImNsaWNrIl0sIHNlbFRleHQpOwogICAgICAgICAgICAgIGlmIChzZWxmLnNlY29uZEVsZW1lbnQgIT09IHVuZGVmaW5lZCkKICAgICAgICAgICAgICAgICAgYmluZChzZWxmLnNlY29uZEVsZW1lbnQsICJmb2N1cyIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuc2Vjb25kRWxlbWVudCAmJiBzZWxmLnNlY29uZEVsZW1lbnQuc2VsZWN0KCk7IH0pOwogICAgICAgICAgICAgIGlmIChzZWxmLmFtUE0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICBiaW5kKHNlbGYuYW1QTSwgImNsaWNrIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWUoZSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5hbGxvd0lucHV0KSB7CiAgICAgICAgICAgICAgYmluZChzZWxmLl9pbnB1dCwgImJsdXIiLCBvbkJsdXIpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIGp1bXBUb0RhdGUoanVtcERhdGUsIHRyaWdnZXJDaGFuZ2UpIHsKICAgICAgICAgIHZhciBqdW1wVG8gPSBqdW1wRGF0ZSAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgPyBzZWxmLnBhcnNlRGF0ZShqdW1wRGF0ZSkKICAgICAgICAgICAgICA6IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqIHx8CiAgICAgICAgICAgICAgICAgIChzZWxmLmNvbmZpZy5taW5EYXRlICYmIHNlbGYuY29uZmlnLm1pbkRhdGUgPiBzZWxmLm5vdwogICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5taW5EYXRlCiAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLm1heERhdGUgJiYgc2VsZi5jb25maWcubWF4RGF0ZSA8IHNlbGYubm93CiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5tYXhEYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzZWxmLm5vdyk7CiAgICAgICAgICB2YXIgb2xkWWVhciA9IHNlbGYuY3VycmVudFllYXI7CiAgICAgICAgICB2YXIgb2xkTW9udGggPSBzZWxmLmN1cnJlbnRNb250aDsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYgKGp1bXBUbyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPSBqdW1wVG8uZ2V0RnVsbFllYXIoKTsKICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBqdW1wVG8uZ2V0TW9udGgoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjYXRjaCAoZSkgewogICAgICAgICAgICAgIGUubWVzc2FnZSA9ICJJbnZhbGlkIGRhdGUgc3VwcGxpZWQ6ICIgKyBqdW1wVG87CiAgICAgICAgICAgICAgc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKGUpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UgJiYgc2VsZi5jdXJyZW50WWVhciAhPT0gb2xkWWVhcikgewogICAgICAgICAgICAgIHRyaWdnZXJFdmVudCgib25ZZWFyQ2hhbmdlIik7CiAgICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UgJiYKICAgICAgICAgICAgICAoc2VsZi5jdXJyZW50WWVhciAhPT0gb2xkWWVhciB8fCBzZWxmLmN1cnJlbnRNb250aCAhPT0gb2xkTW9udGgpKSB7CiAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KCJvbk1vbnRoQ2hhbmdlIik7CiAgICAgICAgICB9CiAgICAgICAgICBzZWxmLnJlZHJhdygpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHRpbWVJbmNyZW1lbnQoZSkgewogICAgICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZSk7CiAgICAgICAgICBpZiAofmV2ZW50VGFyZ2V0LmNsYXNzTmFtZS5pbmRleE9mKCJhcnJvdyIpKQogICAgICAgICAgICAgIGluY3JlbWVudE51bUlucHV0KGUsIGV2ZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygiYXJyb3dVcCIpID8gMSA6IC0xKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBpbmNyZW1lbnROdW1JbnB1dChlLCBkZWx0YSwgaW5wdXRFbGVtKSB7CiAgICAgICAgICB2YXIgdGFyZ2V0ID0gZSAmJiBnZXRFdmVudFRhcmdldChlKTsKICAgICAgICAgIHZhciBpbnB1dCA9IGlucHV0RWxlbSB8fAogICAgICAgICAgICAgICh0YXJnZXQgJiYgdGFyZ2V0LnBhcmVudE5vZGUgJiYgdGFyZ2V0LnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7CiAgICAgICAgICB2YXIgZXZlbnQgPSBjcmVhdGVFdmVudCgiaW5jcmVtZW50Iik7CiAgICAgICAgICBldmVudC5kZWx0YSA9IGRlbHRhOwogICAgICAgICAgaW5wdXQgJiYgaW5wdXQuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gYnVpbGQoKSB7CiAgICAgICAgICB2YXIgZnJhZ21lbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwogICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoImRpdiIsICJmbGF0cGlja3ItY2FsZW5kYXIiKTsKICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIudGFiSW5kZXggPSAtMTsKICAgICAgICAgIGlmICghc2VsZi5jb25maWcubm9DYWxlbmRhcikgewogICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGJ1aWxkTW9udGhOYXYoKSk7CiAgICAgICAgICAgICAgc2VsZi5pbm5lckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoImRpdiIsICJmbGF0cGlja3ItaW5uZXJDb250YWluZXIiKTsKICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcud2Vla051bWJlcnMpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9hID0gYnVpbGRXZWVrcygpLCB3ZWVrV3JhcHBlciA9IF9hLndlZWtXcmFwcGVyLCB3ZWVrTnVtYmVycyA9IF9hLndlZWtOdW1iZXJzOwogICAgICAgICAgICAgICAgICBzZWxmLmlubmVyQ29udGFpbmVyLmFwcGVuZENoaWxkKHdlZWtXcmFwcGVyKTsKICAgICAgICAgICAgICAgICAgc2VsZi53ZWVrTnVtYmVycyA9IHdlZWtOdW1iZXJzOwogICAgICAgICAgICAgICAgICBzZWxmLndlZWtXcmFwcGVyID0gd2Vla1dyYXBwZXI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHNlbGYuckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoImRpdiIsICJmbGF0cGlja3ItckNvbnRhaW5lciIpOwogICAgICAgICAgICAgIHNlbGYuckNvbnRhaW5lci5hcHBlbmRDaGlsZChidWlsZFdlZWtkYXlzKCkpOwogICAgICAgICAgICAgIGlmICghc2VsZi5kYXlzQ29udGFpbmVyKSB7CiAgICAgICAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoImRpdiIsICJmbGF0cGlja3ItZGF5cyIpOwogICAgICAgICAgICAgICAgICBzZWxmLmRheXNDb250YWluZXIudGFiSW5kZXggPSAtMTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnVpbGREYXlzKCk7CiAgICAgICAgICAgICAgc2VsZi5yQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGYuZGF5c0NvbnRhaW5lcik7CiAgICAgICAgICAgICAgc2VsZi5pbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxmLnJDb250YWluZXIpOwogICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHNlbGYuaW5uZXJDb250YWluZXIpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUpIHsKICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChidWlsZFRpbWUoKSk7CiAgICAgICAgICB9CiAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCAicmFuZ2VNb2RlIiwgc2VsZi5jb25maWcubW9kZSA9PT0gInJhbmdlIik7CiAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCAiYW5pbWF0ZSIsIHNlbGYuY29uZmlnLmFuaW1hdGUgPT09IHRydWUpOwogICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgIm11bHRpTW9udGgiLCBzZWxmLmNvbmZpZy5zaG93TW9udGhzID4gMSk7CiAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmFwcGVuZENoaWxkKGZyYWdtZW50KTsKICAgICAgICAgIHZhciBjdXN0b21BcHBlbmQgPSBzZWxmLmNvbmZpZy5hcHBlbmRUbyAhPT0gdW5kZWZpbmVkICYmCiAgICAgICAgICAgICAgc2VsZi5jb25maWcuYXBwZW5kVG8ubm9kZVR5cGUgIT09IHVuZGVmaW5lZDsKICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5pbmxpbmUgfHwgc2VsZi5jb25maWcuc3RhdGljKSB7CiAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHNlbGYuY29uZmlnLmlubGluZSA/ICJpbmxpbmUiIDogInN0YXRpYyIpOwogICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5pbmxpbmUpIHsKICAgICAgICAgICAgICAgICAgaWYgKCFjdXN0b21BcHBlbmQgJiYgc2VsZi5lbGVtZW50LnBhcmVudE5vZGUpCiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgc2VsZi5faW5wdXQubmV4dFNpYmxpbmcpOwogICAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxmLmNvbmZpZy5hcHBlbmRUbyAhPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcuYXBwZW5kVG8uYXBwZW5kQ2hpbGQoc2VsZi5jYWxlbmRhckNvbnRhaW5lcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5zdGF0aWMpIHsKICAgICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBjcmVhdGVFbGVtZW50KCJkaXYiLCAiZmxhdHBpY2tyLXdyYXBwZXIiKTsKICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuZWxlbWVudC5wYXJlbnROb2RlKQogICAgICAgICAgICAgICAgICAgICAgc2VsZi5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHNlbGYuZWxlbWVudCk7CiAgICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZi5lbGVtZW50KTsKICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYWx0SW5wdXQpCiAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNlbGYuYWx0SW5wdXQpOwogICAgICAgICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNlbGYuY2FsZW5kYXJDb250YWluZXIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghc2VsZi5jb25maWcuc3RhdGljICYmICFzZWxmLmNvbmZpZy5pbmxpbmUpCiAgICAgICAgICAgICAgKHNlbGYuY29uZmlnLmFwcGVuZFRvICE9PSB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5hcHBlbmRUbwogICAgICAgICAgICAgICAgICA6IHdpbmRvdy5kb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBjcmVhdGVEYXkoY2xhc3NOYW1lLCBkYXRlLCBfZGF5TnVtYmVyLCBpKSB7CiAgICAgICAgICB2YXIgZGF0ZUlzRW5hYmxlZCA9IGlzRW5hYmxlZChkYXRlLCB0cnVlKSwgZGF5RWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoInNwYW4iLCBjbGFzc05hbWUsIGRhdGUuZ2V0RGF0ZSgpLnRvU3RyaW5nKCkpOwogICAgICAgICAgZGF5RWxlbWVudC5kYXRlT2JqID0gZGF0ZTsKICAgICAgICAgIGRheUVsZW1lbnQuJGkgPSBpOwogICAgICAgICAgZGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoImFyaWEtbGFiZWwiLCBzZWxmLmZvcm1hdERhdGUoZGF0ZSwgc2VsZi5jb25maWcuYXJpYURhdGVGb3JtYXQpKTsKICAgICAgICAgIGlmIChjbGFzc05hbWUuaW5kZXhPZigiaGlkZGVuIikgPT09IC0xICYmCiAgICAgICAgICAgICAgY29tcGFyZURhdGVzKGRhdGUsIHNlbGYubm93KSA9PT0gMCkgewogICAgICAgICAgICAgIHNlbGYudG9kYXlEYXRlRWxlbSA9IGRheUVsZW1lbnQ7CiAgICAgICAgICAgICAgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKCJ0b2RheSIpOwogICAgICAgICAgICAgIGRheUVsZW1lbnQuc2V0QXR0cmlidXRlKCJhcmlhLWN1cnJlbnQiLCAiZGF0ZSIpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGRhdGVJc0VuYWJsZWQpIHsKICAgICAgICAgICAgICBkYXlFbGVtZW50LnRhYkluZGV4ID0gLTE7CiAgICAgICAgICAgICAgaWYgKGlzRGF0ZVNlbGVjdGVkKGRhdGUpKSB7CiAgICAgICAgICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgic2VsZWN0ZWQiKTsKICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVFbGVtID0gZGF5RWxlbWVudDsKICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09ICJyYW5nZSIpIHsKICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGRheUVsZW1lbnQsICJzdGFydFJhbmdlIiwgc2VsZi5zZWxlY3RlZERhdGVzWzBdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZURhdGVzKGRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXSwgdHJ1ZSkgPT09IDApOwogICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZGF5RWxlbWVudCwgImVuZFJhbmdlIiwgc2VsZi5zZWxlY3RlZERhdGVzWzFdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZURhdGVzKGRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1sxXSwgdHJ1ZSkgPT09IDApOwogICAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PT0gIm5leHRNb250aERheSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKCJpblJhbmdlIik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICBkYXlFbGVtZW50LmNsYXNzTGlzdC5hZGQoImZsYXRwaWNrci1kaXNhYmxlZCIpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09ICJyYW5nZSIpIHsKICAgICAgICAgICAgICBpZiAoaXNEYXRlSW5SYW5nZShkYXRlKSAmJiAhaXNEYXRlU2VsZWN0ZWQoZGF0ZSkpCiAgICAgICAgICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgiaW5SYW5nZSIpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHNlbGYud2Vla051bWJlcnMgJiYKICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5zaG93TW9udGhzID09PSAxICYmCiAgICAgICAgICAgICAgY2xhc3NOYW1lICE9PSAicHJldk1vbnRoRGF5IiAmJgogICAgICAgICAgICAgIGkgJSA3ID09PSA2KSB7CiAgICAgICAgICAgICAgc2VsZi53ZWVrTnVtYmVycy5pbnNlcnRBZGphY2VudEhUTUwoImJlZm9yZWVuZCIsICI8c3BhbiBjbGFzcz0nZmxhdHBpY2tyLWRheSc+IiArIHNlbGYuY29uZmlnLmdldFdlZWsoZGF0ZSkgKyAiPC9zcGFuPiIpOwogICAgICAgICAgfQogICAgICAgICAgdHJpZ2dlckV2ZW50KCJvbkRheUNyZWF0ZSIsIGRheUVsZW1lbnQpOwogICAgICAgICAgcmV0dXJuIGRheUVsZW1lbnQ7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gZm9jdXNPbkRheUVsZW0odGFyZ2V0Tm9kZSkgewogICAgICAgICAgdGFyZ2V0Tm9kZS5mb2N1cygpOwogICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09ICJyYW5nZSIpCiAgICAgICAgICAgICAgb25Nb3VzZU92ZXIodGFyZ2V0Tm9kZSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gZ2V0Rmlyc3RBdmFpbGFibGVEYXkoZGVsdGEpIHsKICAgICAgICAgIHZhciBzdGFydE1vbnRoID0gZGVsdGEgPiAwID8gMCA6IHNlbGYuY29uZmlnLnNob3dNb250aHMgLSAxOwogICAgICAgICAgdmFyIGVuZE1vbnRoID0gZGVsdGEgPiAwID8gc2VsZi5jb25maWcuc2hvd01vbnRocyA6IC0xOwogICAgICAgICAgZm9yICh2YXIgbSA9IHN0YXJ0TW9udGg7IG0gIT0gZW5kTW9udGg7IG0gKz0gZGVsdGEpIHsKICAgICAgICAgICAgICB2YXIgbW9udGggPSBzZWxmLmRheXNDb250YWluZXIuY2hpbGRyZW5bbV07CiAgICAgICAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSBkZWx0YSA+IDAgPyAwIDogbW9udGguY2hpbGRyZW4ubGVuZ3RoIC0gMTsKICAgICAgICAgICAgICB2YXIgZW5kSW5kZXggPSBkZWx0YSA+IDAgPyBtb250aC5jaGlsZHJlbi5sZW5ndGggOiAtMTsKICAgICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSAhPSBlbmRJbmRleDsgaSArPSBkZWx0YSkgewogICAgICAgICAgICAgICAgICB2YXIgYyA9IG1vbnRoLmNoaWxkcmVuW2ldOwogICAgICAgICAgICAgICAgICBpZiAoYy5jbGFzc05hbWUuaW5kZXhPZigiaGlkZGVuIikgPT09IC0xICYmIGlzRW5hYmxlZChjLmRhdGVPYmopKQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgfQogICAgICBmdW5jdGlvbiBnZXROZXh0QXZhaWxhYmxlRGF5KGN1cnJlbnQsIGRlbHRhKSB7CiAgICAgICAgICB2YXIgZ2l2ZW5Nb250aCA9IGN1cnJlbnQuY2xhc3NOYW1lLmluZGV4T2YoIk1vbnRoIikgPT09IC0xCiAgICAgICAgICAgICAgPyBjdXJyZW50LmRhdGVPYmouZ2V0TW9udGgoKQogICAgICAgICAgICAgIDogc2VsZi5jdXJyZW50TW9udGg7CiAgICAgICAgICB2YXIgZW5kTW9udGggPSBkZWx0YSA+IDAgPyBzZWxmLmNvbmZpZy5zaG93TW9udGhzIDogLTE7CiAgICAgICAgICB2YXIgbG9vcERlbHRhID0gZGVsdGEgPiAwID8gMSA6IC0xOwogICAgICAgICAgZm9yICh2YXIgbSA9IGdpdmVuTW9udGggLSBzZWxmLmN1cnJlbnRNb250aDsgbSAhPSBlbmRNb250aDsgbSArPSBsb29wRGVsdGEpIHsKICAgICAgICAgICAgICB2YXIgbW9udGggPSBzZWxmLmRheXNDb250YWluZXIuY2hpbGRyZW5bbV07CiAgICAgICAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSBnaXZlbk1vbnRoIC0gc2VsZi5jdXJyZW50TW9udGggPT09IG0KICAgICAgICAgICAgICAgICAgPyBjdXJyZW50LiRpICsgZGVsdGEKICAgICAgICAgICAgICAgICAgOiBkZWx0YSA8IDAKICAgICAgICAgICAgICAgICAgICAgID8gbW9udGguY2hpbGRyZW4ubGVuZ3RoIC0gMQogICAgICAgICAgICAgICAgICAgICAgOiAwOwogICAgICAgICAgICAgIHZhciBudW1Nb250aERheXMgPSBtb250aC5jaGlsZHJlbi5sZW5ndGg7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPj0gMCAmJiBpIDwgbnVtTW9udGhEYXlzICYmIGkgIT0gKGRlbHRhID4gMCA/IG51bU1vbnRoRGF5cyA6IC0xKTsgaSArPSBsb29wRGVsdGEpIHsKICAgICAgICAgICAgICAgICAgdmFyIGMgPSBtb250aC5jaGlsZHJlbltpXTsKICAgICAgICAgICAgICAgICAgaWYgKGMuY2xhc3NOYW1lLmluZGV4T2YoImhpZGRlbiIpID09PSAtMSAmJgogICAgICAgICAgICAgICAgICAgICAgaXNFbmFibGVkKGMuZGF0ZU9iaikgJiYKICAgICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKGN1cnJlbnQuJGkgLSBpKSA+PSBNYXRoLmFicyhkZWx0YSkpCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9jdXNPbkRheUVsZW0oYyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgc2VsZi5jaGFuZ2VNb250aChsb29wRGVsdGEpOwogICAgICAgICAgZm9jdXNPbkRheShnZXRGaXJzdEF2YWlsYWJsZURheShsb29wRGVsdGEpLCAwKTsKICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gZm9jdXNPbkRheShjdXJyZW50LCBvZmZzZXQpIHsKICAgICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gZ2V0Q2xvc2VzdEFjdGl2ZUVsZW1lbnQoKTsKICAgICAgICAgIHZhciBkYXlGb2N1c2VkID0gaXNJblZpZXcoYWN0aXZlRWxlbWVudCB8fCBkb2N1bWVudC5ib2R5KTsKICAgICAgICAgIHZhciBzdGFydEVsZW0gPSBjdXJyZW50ICE9PSB1bmRlZmluZWQKICAgICAgICAgICAgICA/IGN1cnJlbnQKICAgICAgICAgICAgICA6IGRheUZvY3VzZWQKICAgICAgICAgICAgICAgICAgPyBhY3RpdmVFbGVtZW50CiAgICAgICAgICAgICAgICAgIDogc2VsZi5zZWxlY3RlZERhdGVFbGVtICE9PSB1bmRlZmluZWQgJiYgaXNJblZpZXcoc2VsZi5zZWxlY3RlZERhdGVFbGVtKQogICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLnNlbGVjdGVkRGF0ZUVsZW0KICAgICAgICAgICAgICAgICAgICAgIDogc2VsZi50b2RheURhdGVFbGVtICE9PSB1bmRlZmluZWQgJiYgaXNJblZpZXcoc2VsZi50b2RheURhdGVFbGVtKQogICAgICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi50b2RheURhdGVFbGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBnZXRGaXJzdEF2YWlsYWJsZURheShvZmZzZXQgPiAwID8gMSA6IC0xKTsKICAgICAgICAgIGlmIChzdGFydEVsZW0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIHNlbGYuX2lucHV0LmZvY3VzKCk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmICghZGF5Rm9jdXNlZCkgewogICAgICAgICAgICAgIGZvY3VzT25EYXlFbGVtKHN0YXJ0RWxlbSk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICBnZXROZXh0QXZhaWxhYmxlRGF5KHN0YXJ0RWxlbSwgb2Zmc2V0KTsKICAgICAgICAgIH0KICAgICAgfQogICAgICBmdW5jdGlvbiBidWlsZE1vbnRoRGF5cyh5ZWFyLCBtb250aCkgewogICAgICAgICAgdmFyIGZpcnN0T2ZNb250aCA9IChuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSkuZ2V0RGF5KCkgLSBzZWxmLmwxMG4uZmlyc3REYXlPZldlZWsgKyA3KSAlIDc7CiAgICAgICAgICB2YXIgcHJldk1vbnRoRGF5cyA9IHNlbGYudXRpbHMuZ2V0RGF5c0luTW9udGgoKG1vbnRoIC0gMSArIDEyKSAlIDEyLCB5ZWFyKTsKICAgICAgICAgIHZhciBkYXlzSW5Nb250aCA9IHNlbGYudXRpbHMuZ2V0RGF5c0luTW9udGgobW9udGgsIHllYXIpLCBkYXlzID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgaXNNdWx0aU1vbnRoID0gc2VsZi5jb25maWcuc2hvd01vbnRocyA+IDEsIHByZXZNb250aERheUNsYXNzID0gaXNNdWx0aU1vbnRoID8gInByZXZNb250aERheSBoaWRkZW4iIDogInByZXZNb250aERheSIsIG5leHRNb250aERheUNsYXNzID0gaXNNdWx0aU1vbnRoID8gIm5leHRNb250aERheSBoaWRkZW4iIDogIm5leHRNb250aERheSI7CiAgICAgICAgICB2YXIgZGF5TnVtYmVyID0gcHJldk1vbnRoRGF5cyArIDEgLSBmaXJzdE9mTW9udGgsIGRheUluZGV4ID0gMDsKICAgICAgICAgIGZvciAoOyBkYXlOdW1iZXIgPD0gcHJldk1vbnRoRGF5czsgZGF5TnVtYmVyKyssIGRheUluZGV4KyspIHsKICAgICAgICAgICAgICBkYXlzLmFwcGVuZENoaWxkKGNyZWF0ZURheSgiZmxhdHBpY2tyLWRheSAiICsgcHJldk1vbnRoRGF5Q2xhc3MsIG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF5TnVtYmVyKSwgZGF5TnVtYmVyLCBkYXlJbmRleCkpOwogICAgICAgICAgfQogICAgICAgICAgZm9yIChkYXlOdW1iZXIgPSAxOyBkYXlOdW1iZXIgPD0gZGF5c0luTW9udGg7IGRheU51bWJlcisrLCBkYXlJbmRleCsrKSB7CiAgICAgICAgICAgICAgZGF5cy5hcHBlbmRDaGlsZChjcmVhdGVEYXkoImZsYXRwaWNrci1kYXkiLCBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5TnVtYmVyKSwgZGF5TnVtYmVyLCBkYXlJbmRleCkpOwogICAgICAgICAgfQogICAgICAgICAgZm9yICh2YXIgZGF5TnVtID0gZGF5c0luTW9udGggKyAxOyBkYXlOdW0gPD0gNDIgLSBmaXJzdE9mTW9udGggJiYKICAgICAgICAgICAgICAoc2VsZi5jb25maWcuc2hvd01vbnRocyA9PT0gMSB8fCBkYXlJbmRleCAlIDcgIT09IDApOyBkYXlOdW0rKywgZGF5SW5kZXgrKykgewogICAgICAgICAgICAgIGRheXMuYXBwZW5kQ2hpbGQoY3JlYXRlRGF5KCJmbGF0cGlja3ItZGF5ICIgKyBuZXh0TW9udGhEYXlDbGFzcywgbmV3IERhdGUoeWVhciwgbW9udGggKyAxLCBkYXlOdW0gJSBkYXlzSW5Nb250aCksIGRheU51bSwgZGF5SW5kZXgpKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBkYXlDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCJkaXYiLCAiZGF5Q29udGFpbmVyIik7CiAgICAgICAgICBkYXlDb250YWluZXIuYXBwZW5kQ2hpbGQoZGF5cyk7CiAgICAgICAgICByZXR1cm4gZGF5Q29udGFpbmVyOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGJ1aWxkRGF5cygpIHsKICAgICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGNsZWFyTm9kZShzZWxmLmRheXNDb250YWluZXIpOwogICAgICAgICAgaWYgKHNlbGYud2Vla051bWJlcnMpCiAgICAgICAgICAgICAgY2xlYXJOb2RlKHNlbGYud2Vla051bWJlcnMpOwogICAgICAgICAgdmFyIGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuY29uZmlnLnNob3dNb250aHM7IGkrKykgewogICAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgc2VsZi5jdXJyZW50TW9udGgsIDEpOwogICAgICAgICAgICAgIGQuc2V0TW9udGgoc2VsZi5jdXJyZW50TW9udGggKyBpKTsKICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGJ1aWxkTW9udGhEYXlzKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKSk7CiAgICAgICAgICB9CiAgICAgICAgICBzZWxmLmRheXNDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZyk7CiAgICAgICAgICBzZWxmLmRheXMgPSBzZWxmLmRheXNDb250YWluZXIuZmlyc3RDaGlsZDsKICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSAicmFuZ2UiICYmIHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgICAgICBvbk1vdXNlT3ZlcigpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIGJ1aWxkTW9udGhTd2l0Y2goKSB7CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcuc2hvd01vbnRocyA+IDEgfHwKICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tb250aFNlbGVjdG9yVHlwZSAhPT0gImRyb3Bkb3duIikKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB2YXIgc2hvdWxkQnVpbGRNb250aCA9IGZ1bmN0aW9uIChtb250aCkgewogICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlICE9PSB1bmRlZmluZWQgJiYKICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9PT0gc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpICYmCiAgICAgICAgICAgICAgICAgIG1vbnRoIDwgc2VsZi5jb25maWcubWluRGF0ZS5nZXRNb250aCgpKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuICEoc2VsZi5jb25maWcubWF4RGF0ZSAhPT0gdW5kZWZpbmVkICYmCiAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSAmJgogICAgICAgICAgICAgICAgICBtb250aCA+IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TW9udGgoKSk7CiAgICAgICAgICB9OwogICAgICAgICAgc2VsZi5tb250aHNEcm9wZG93bkNvbnRhaW5lci50YWJJbmRleCA9IC0xOwogICAgICAgICAgc2VsZi5tb250aHNEcm9wZG93bkNvbnRhaW5lci5pbm5lckhUTUwgPSAiIjsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTI7IGkrKykgewogICAgICAgICAgICAgIGlmICghc2hvdWxkQnVpbGRNb250aChpKSkKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgdmFyIG1vbnRoID0gY3JlYXRlRWxlbWVudCgib3B0aW9uIiwgImZsYXRwaWNrci1tb250aERyb3Bkb3duLW1vbnRoIik7CiAgICAgICAgICAgICAgbW9udGgudmFsdWUgPSBuZXcgRGF0ZShzZWxmLmN1cnJlbnRZZWFyLCBpKS5nZXRNb250aCgpLnRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgbW9udGgudGV4dENvbnRlbnQgPSBtb250aFRvU3RyKGksIHNlbGYuY29uZmlnLnNob3J0aGFuZEN1cnJlbnRNb250aCwgc2VsZi5sMTBuKTsKICAgICAgICAgICAgICBtb250aC50YWJJbmRleCA9IC0xOwogICAgICAgICAgICAgIGlmIChzZWxmLmN1cnJlbnRNb250aCA9PT0gaSkgewogICAgICAgICAgICAgICAgICBtb250aC5zZWxlY3RlZCA9IHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIuYXBwZW5kQ2hpbGQobW9udGgpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIGJ1aWxkTW9udGgoKSB7CiAgICAgICAgICB2YXIgY29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgiZGl2IiwgImZsYXRwaWNrci1tb250aCIpOwogICAgICAgICAgdmFyIG1vbnRoTmF2RnJhZ21lbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwogICAgICAgICAgdmFyIG1vbnRoRWxlbWVudDsKICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5zaG93TW9udGhzID4gMSB8fAogICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1vbnRoU2VsZWN0b3JUeXBlID09PSAic3RhdGljIikgewogICAgICAgICAgICAgIG1vbnRoRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoInNwYW4iLCAiY3VyLW1vbnRoIik7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICBzZWxmLm1vbnRoc0Ryb3Bkb3duQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgic2VsZWN0IiwgImZsYXRwaWNrci1tb250aERyb3Bkb3duLW1vbnRocyIpOwogICAgICAgICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIuc2V0QXR0cmlidXRlKCJhcmlhLWxhYmVsIiwgc2VsZi5sMTBuLm1vbnRoQXJpYUxhYmVsKTsKICAgICAgICAgICAgICBiaW5kKHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIsICJjaGFuZ2UiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZSk7CiAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZE1vbnRoID0gcGFyc2VJbnQodGFyZ2V0LnZhbHVlLCAxMCk7CiAgICAgICAgICAgICAgICAgIHNlbGYuY2hhbmdlTW9udGgoc2VsZWN0ZWRNb250aCAtIHNlbGYuY3VycmVudE1vbnRoKTsKICAgICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KCJvbk1vbnRoQ2hhbmdlIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpOwogICAgICAgICAgICAgIG1vbnRoRWxlbWVudCA9IHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXI7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgeWVhcklucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoImN1ci15ZWFyIiwgeyB0YWJpbmRleDogIi0xIiB9KTsKICAgICAgICAgIHZhciB5ZWFyRWxlbWVudCA9IHllYXJJbnB1dC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaW5wdXQiKVswXTsKICAgICAgICAgIHllYXJFbGVtZW50LnNldEF0dHJpYnV0ZSgiYXJpYS1sYWJlbCIsIHNlbGYubDEwbi55ZWFyQXJpYUxhYmVsKTsKICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlKSB7CiAgICAgICAgICAgICAgeWVhckVsZW1lbnQuc2V0QXR0cmlidXRlKCJtaW4iLCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4RGF0ZSkgewogICAgICAgICAgICAgIHllYXJFbGVtZW50LnNldEF0dHJpYnV0ZSgibWF4Iiwgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpOwogICAgICAgICAgICAgIHllYXJFbGVtZW50LmRpc2FibGVkID0KICAgICAgICAgICAgICAgICAgISFzZWxmLmNvbmZpZy5taW5EYXRlICYmCiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBjdXJyZW50TW9udGggPSBjcmVhdGVFbGVtZW50KCJkaXYiLCAiZmxhdHBpY2tyLWN1cnJlbnQtbW9udGgiKTsKICAgICAgICAgIGN1cnJlbnRNb250aC5hcHBlbmRDaGlsZChtb250aEVsZW1lbnQpOwogICAgICAgICAgY3VycmVudE1vbnRoLmFwcGVuZENoaWxkKHllYXJJbnB1dCk7CiAgICAgICAgICBtb250aE5hdkZyYWdtZW50LmFwcGVuZENoaWxkKGN1cnJlbnRNb250aCk7CiAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobW9udGhOYXZGcmFnbWVudCk7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLAogICAgICAgICAgICAgIHllYXJFbGVtZW50OiB5ZWFyRWxlbWVudCwKICAgICAgICAgICAgICBtb250aEVsZW1lbnQ6IG1vbnRoRWxlbWVudCwKICAgICAgICAgIH07CiAgICAgIH0KICAgICAgZnVuY3Rpb24gYnVpbGRNb250aHMoKSB7CiAgICAgICAgICBjbGVhck5vZGUoc2VsZi5tb250aE5hdik7CiAgICAgICAgICBzZWxmLm1vbnRoTmF2LmFwcGVuZENoaWxkKHNlbGYucHJldk1vbnRoTmF2KTsKICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5zaG93TW9udGhzKSB7CiAgICAgICAgICAgICAgc2VsZi55ZWFyRWxlbWVudHMgPSBbXTsKICAgICAgICAgICAgICBzZWxmLm1vbnRoRWxlbWVudHMgPSBbXTsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAodmFyIG0gPSBzZWxmLmNvbmZpZy5zaG93TW9udGhzOyBtLS07KSB7CiAgICAgICAgICAgICAgdmFyIG1vbnRoID0gYnVpbGRNb250aCgpOwogICAgICAgICAgICAgIHNlbGYueWVhckVsZW1lbnRzLnB1c2gobW9udGgueWVhckVsZW1lbnQpOwogICAgICAgICAgICAgIHNlbGYubW9udGhFbGVtZW50cy5wdXNoKG1vbnRoLm1vbnRoRWxlbWVudCk7CiAgICAgICAgICAgICAgc2VsZi5tb250aE5hdi5hcHBlbmRDaGlsZChtb250aC5jb250YWluZXIpOwogICAgICAgICAgfQogICAgICAgICAgc2VsZi5tb250aE5hdi5hcHBlbmRDaGlsZChzZWxmLm5leHRNb250aE5hdik7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gYnVpbGRNb250aE5hdigpIHsKICAgICAgICAgIHNlbGYubW9udGhOYXYgPSBjcmVhdGVFbGVtZW50KCJkaXYiLCAiZmxhdHBpY2tyLW1vbnRocyIpOwogICAgICAgICAgc2VsZi55ZWFyRWxlbWVudHMgPSBbXTsKICAgICAgICAgIHNlbGYubW9udGhFbGVtZW50cyA9IFtdOwogICAgICAgICAgc2VsZi5wcmV2TW9udGhOYXYgPSBjcmVhdGVFbGVtZW50KCJzcGFuIiwgImZsYXRwaWNrci1wcmV2LW1vbnRoIik7CiAgICAgICAgICBzZWxmLnByZXZNb250aE5hdi5pbm5lckhUTUwgPSBzZWxmLmNvbmZpZy5wcmV2QXJyb3c7CiAgICAgICAgICBzZWxmLm5leHRNb250aE5hdiA9IGNyZWF0ZUVsZW1lbnQoInNwYW4iLCAiZmxhdHBpY2tyLW5leHQtbW9udGgiKTsKICAgICAgICAgIHNlbGYubmV4dE1vbnRoTmF2LmlubmVySFRNTCA9IHNlbGYuY29uZmlnLm5leHRBcnJvdzsKICAgICAgICAgIGJ1aWxkTW9udGhzKCk7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgIl9oaWRlUHJldk1vbnRoQXJyb3ciLCB7CiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLl9faGlkZVByZXZNb250aEFycm93OyB9LAogICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGJvb2wpIHsKICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuX19oaWRlUHJldk1vbnRoQXJyb3cgIT09IGJvb2wpIHsKICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYucHJldk1vbnRoTmF2LCAiZmxhdHBpY2tyLWRpc2FibGVkIiwgYm9vbCk7CiAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9faGlkZVByZXZNb250aEFycm93ID0gYm9vbDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICB9KTsKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCAiX2hpZGVOZXh0TW9udGhBcnJvdyIsIHsKICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuX19oaWRlTmV4dE1vbnRoQXJyb3c7IH0sCiAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoYm9vbCkgewogICAgICAgICAgICAgICAgICBpZiAoc2VsZi5fX2hpZGVOZXh0TW9udGhBcnJvdyAhPT0gYm9vbCkgewogICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5uZXh0TW9udGhOYXYsICJmbGF0cGlja3ItZGlzYWJsZWQiLCBib29sKTsKICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX19oaWRlTmV4dE1vbnRoQXJyb3cgPSBib29sOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgIH0pOwogICAgICAgICAgc2VsZi5jdXJyZW50WWVhckVsZW1lbnQgPSBzZWxmLnllYXJFbGVtZW50c1swXTsKICAgICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTsKICAgICAgICAgIHJldHVybiBzZWxmLm1vbnRoTmF2OwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGJ1aWxkVGltZSgpIHsKICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZCgiaGFzVGltZSIpOwogICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIpCiAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJub0NhbGVuZGFyIik7CiAgICAgICAgICB2YXIgZGVmYXVsdHMgPSBnZXREZWZhdWx0SG91cnMoc2VsZi5jb25maWcpOwogICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgiZGl2IiwgImZsYXRwaWNrci10aW1lIik7CiAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIudGFiSW5kZXggPSAtMTsKICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSBjcmVhdGVFbGVtZW50KCJzcGFuIiwgImZsYXRwaWNrci10aW1lLXNlcGFyYXRvciIsICI6Iik7CiAgICAgICAgICB2YXIgaG91cklucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoImZsYXRwaWNrci1ob3VyIiwgewogICAgICAgICAgICAgICJhcmlhLWxhYmVsIjogc2VsZi5sMTBuLmhvdXJBcmlhTGFiZWwsCiAgICAgICAgICB9KTsKICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQgPSBob3VySW5wdXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImlucHV0IilbMF07CiAgICAgICAgICB2YXIgbWludXRlSW5wdXQgPSBjcmVhdGVOdW1iZXJJbnB1dCgiZmxhdHBpY2tyLW1pbnV0ZSIsIHsKICAgICAgICAgICAgICAiYXJpYS1sYWJlbCI6IHNlbGYubDEwbi5taW51dGVBcmlhTGFiZWwsCiAgICAgICAgICB9KTsKICAgICAgICAgIHNlbGYubWludXRlRWxlbWVudCA9IG1pbnV0ZUlucHV0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJpbnB1dCIpWzBdOwogICAgICAgICAgc2VsZi5ob3VyRWxlbWVudC50YWJJbmRleCA9IHNlbGYubWludXRlRWxlbWVudC50YWJJbmRleCA9IC0xOwogICAgICAgICAgc2VsZi5ob3VyRWxlbWVudC52YWx1ZSA9IHBhZChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iagogICAgICAgICAgICAgID8gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmouZ2V0SG91cnMoKQogICAgICAgICAgICAgIDogc2VsZi5jb25maWcudGltZV8yNGhyCiAgICAgICAgICAgICAgICAgID8gZGVmYXVsdHMuaG91cnMKICAgICAgICAgICAgICAgICAgOiBtaWxpdGFyeTJhbXBtKGRlZmF1bHRzLmhvdXJzKSk7CiAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQudmFsdWUgPSBwYWQoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmoKICAgICAgICAgICAgICA/IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLmdldE1pbnV0ZXMoKQogICAgICAgICAgICAgIDogZGVmYXVsdHMubWludXRlcyk7CiAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50LnNldEF0dHJpYnV0ZSgic3RlcCIsIHNlbGYuY29uZmlnLmhvdXJJbmNyZW1lbnQudG9TdHJpbmcoKSk7CiAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJzdGVwIiwgc2VsZi5jb25maWcubWludXRlSW5jcmVtZW50LnRvU3RyaW5nKCkpOwogICAgICAgICAgc2VsZi5ob3VyRWxlbWVudC5zZXRBdHRyaWJ1dGUoIm1pbiIsIHNlbGYuY29uZmlnLnRpbWVfMjRociA/ICIwIiA6ICIxIik7CiAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50LnNldEF0dHJpYnV0ZSgibWF4Iiwgc2VsZi5jb25maWcudGltZV8yNGhyID8gIjIzIiA6ICIxMiIpOwogICAgICAgICAgc2VsZi5ob3VyRWxlbWVudC5zZXRBdHRyaWJ1dGUoIm1heGxlbmd0aCIsICIyIik7CiAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJtaW4iLCAiMCIpOwogICAgICAgICAgc2VsZi5taW51dGVFbGVtZW50LnNldEF0dHJpYnV0ZSgibWF4IiwgIjU5Iik7CiAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJtYXhsZW5ndGgiLCAiMiIpOwogICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKGhvdXJJbnB1dCk7CiAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VwYXJhdG9yKTsKICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChtaW51dGVJbnB1dCk7CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcudGltZV8yNGhyKQogICAgICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJ0aW1lMjRociIpOwogICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVNlY29uZHMpIHsKICAgICAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZCgiaGFzU2Vjb25kcyIpOwogICAgICAgICAgICAgIHZhciBzZWNvbmRJbnB1dCA9IGNyZWF0ZU51bWJlcklucHV0KCJmbGF0cGlja3Itc2Vjb25kIik7CiAgICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50ID0gc2Vjb25kSW5wdXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImlucHV0IilbMF07CiAgICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlID0gcGFkKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqCiAgICAgICAgICAgICAgICAgID8gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmouZ2V0U2Vjb25kcygpCiAgICAgICAgICAgICAgICAgIDogZGVmYXVsdHMuc2Vjb25kcyk7CiAgICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnNldEF0dHJpYnV0ZSgic3RlcCIsIHNlbGYubWludXRlRWxlbWVudC5nZXRBdHRyaWJ1dGUoInN0ZXAiKSk7CiAgICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnNldEF0dHJpYnV0ZSgibWluIiwgIjAiKTsKICAgICAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQuc2V0QXR0cmlidXRlKCJtYXgiLCAiNTkiKTsKICAgICAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQuc2V0QXR0cmlidXRlKCJtYXhsZW5ndGgiLCAiMiIpOwogICAgICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCJzcGFuIiwgImZsYXRwaWNrci10aW1lLXNlcGFyYXRvciIsICI6IikpOwogICAgICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWNvbmRJbnB1dCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIXNlbGYuY29uZmlnLnRpbWVfMjRocikgewogICAgICAgICAgICAgIHNlbGYuYW1QTSA9IGNyZWF0ZUVsZW1lbnQoInNwYW4iLCAiZmxhdHBpY2tyLWFtLXBtIiwgc2VsZi5sMTBuLmFtUE1baW50KChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iagogICAgICAgICAgICAgICAgICA/IHNlbGYuaG91ckVsZW1lbnQudmFsdWUKICAgICAgICAgICAgICAgICAgOiBzZWxmLmNvbmZpZy5kZWZhdWx0SG91cikgPiAxMSldKTsKICAgICAgICAgICAgICBzZWxmLmFtUE0udGl0bGUgPSBzZWxmLmwxMG4udG9nZ2xlVGl0bGU7CiAgICAgICAgICAgICAgc2VsZi5hbVBNLnRhYkluZGV4ID0gLTE7CiAgICAgICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGYuYW1QTSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gc2VsZi50aW1lQ29udGFpbmVyOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGJ1aWxkV2Vla2RheXMoKSB7CiAgICAgICAgICBpZiAoIXNlbGYud2Vla2RheUNvbnRhaW5lcikKICAgICAgICAgICAgICBzZWxmLndlZWtkYXlDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCJkaXYiLCAiZmxhdHBpY2tyLXdlZWtkYXlzIik7CiAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgY2xlYXJOb2RlKHNlbGYud2Vla2RheUNvbnRhaW5lcik7CiAgICAgICAgICBmb3IgKHZhciBpID0gc2VsZi5jb25maWcuc2hvd01vbnRoczsgaS0tOykgewogICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCJkaXYiLCAiZmxhdHBpY2tyLXdlZWtkYXljb250YWluZXIiKTsKICAgICAgICAgICAgICBzZWxmLndlZWtkYXlDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsKICAgICAgICAgIH0KICAgICAgICAgIHVwZGF0ZVdlZWtkYXlzKCk7CiAgICAgICAgICByZXR1cm4gc2VsZi53ZWVrZGF5Q29udGFpbmVyOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVdlZWtkYXlzKCkgewogICAgICAgICAgaWYgKCFzZWxmLndlZWtkYXlDb250YWluZXIpIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgZmlyc3REYXlPZldlZWsgPSBzZWxmLmwxMG4uZmlyc3REYXlPZldlZWs7CiAgICAgICAgICB2YXIgd2Vla2RheXMgPSBfX3NwcmVhZEFycmF5cyhzZWxmLmwxMG4ud2Vla2RheXMuc2hvcnRoYW5kKTsKICAgICAgICAgIGlmIChmaXJzdERheU9mV2VlayA+IDAgJiYgZmlyc3REYXlPZldlZWsgPCB3ZWVrZGF5cy5sZW5ndGgpIHsKICAgICAgICAgICAgICB3ZWVrZGF5cyA9IF9fc3ByZWFkQXJyYXlzKHdlZWtkYXlzLnNwbGljZShmaXJzdERheU9mV2Vlaywgd2Vla2RheXMubGVuZ3RoKSwgd2Vla2RheXMuc3BsaWNlKDAsIGZpcnN0RGF5T2ZXZWVrKSk7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKHZhciBpID0gc2VsZi5jb25maWcuc2hvd01vbnRoczsgaS0tOykgewogICAgICAgICAgICAgIHNlbGYud2Vla2RheUNvbnRhaW5lci5jaGlsZHJlbltpXS5pbm5lckhUTUwgPSAiXG4gICAgICA8c3BhbiBjbGFzcz0nZmxhdHBpY2tyLXdlZWtkYXknPlxuICAgICAgICAiICsgd2Vla2RheXMuam9pbigiPC9zcGFuPjxzcGFuIGNsYXNzPSdmbGF0cGlja3Itd2Vla2RheSc+IikgKyAiXG4gICAgICA8L3NwYW4+XG4gICAgICAiOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIGJ1aWxkV2Vla3MoKSB7CiAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoImhhc1dlZWtzIik7CiAgICAgICAgICB2YXIgd2Vla1dyYXBwZXIgPSBjcmVhdGVFbGVtZW50KCJkaXYiLCAiZmxhdHBpY2tyLXdlZWt3cmFwcGVyIik7CiAgICAgICAgICB3ZWVrV3JhcHBlci5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCJzcGFuIiwgImZsYXRwaWNrci13ZWVrZGF5Iiwgc2VsZi5sMTBuLndlZWtBYmJyZXZpYXRpb24pKTsKICAgICAgICAgIHZhciB3ZWVrTnVtYmVycyA9IGNyZWF0ZUVsZW1lbnQoImRpdiIsICJmbGF0cGlja3Itd2Vla3MiKTsKICAgICAgICAgIHdlZWtXcmFwcGVyLmFwcGVuZENoaWxkKHdlZWtOdW1iZXJzKTsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgd2Vla1dyYXBwZXI6IHdlZWtXcmFwcGVyLAogICAgICAgICAgICAgIHdlZWtOdW1iZXJzOiB3ZWVrTnVtYmVycywKICAgICAgICAgIH07CiAgICAgIH0KICAgICAgZnVuY3Rpb24gY2hhbmdlTW9udGgodmFsdWUsIGlzT2Zmc2V0KSB7CiAgICAgICAgICBpZiAoaXNPZmZzZXQgPT09IHZvaWQgMCkgeyBpc09mZnNldCA9IHRydWU7IH0KICAgICAgICAgIHZhciBkZWx0YSA9IGlzT2Zmc2V0ID8gdmFsdWUgOiB2YWx1ZSAtIHNlbGYuY3VycmVudE1vbnRoOwogICAgICAgICAgaWYgKChkZWx0YSA8IDAgJiYgc2VsZi5faGlkZVByZXZNb250aEFycm93ID09PSB0cnVlKSB8fAogICAgICAgICAgICAgIChkZWx0YSA+IDAgJiYgc2VsZi5faGlkZU5leHRNb250aEFycm93ID09PSB0cnVlKSkKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCArPSBkZWx0YTsKICAgICAgICAgIGlmIChzZWxmLmN1cnJlbnRNb250aCA8IDAgfHwgc2VsZi5jdXJyZW50TW9udGggPiAxMSkgewogICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgKz0gc2VsZi5jdXJyZW50TW9udGggPiAxMSA/IDEgOiAtMTsKICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IChzZWxmLmN1cnJlbnRNb250aCArIDEyKSAlIDEyOwogICAgICAgICAgICAgIHRyaWdnZXJFdmVudCgib25ZZWFyQ2hhbmdlIik7CiAgICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpOwogICAgICAgICAgfQogICAgICAgICAgYnVpbGREYXlzKCk7CiAgICAgICAgICB0cmlnZ2VyRXZlbnQoIm9uTW9udGhDaGFuZ2UiKTsKICAgICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBjbGVhcih0cmlnZ2VyQ2hhbmdlRXZlbnQsIHRvSW5pdGlhbCkgewogICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCA9PT0gdm9pZCAwKSB7IHRyaWdnZXJDaGFuZ2VFdmVudCA9IHRydWU7IH0KICAgICAgICAgIGlmICh0b0luaXRpYWwgPT09IHZvaWQgMCkgeyB0b0luaXRpYWwgPSB0cnVlOyB9CiAgICAgICAgICBzZWxmLmlucHV0LnZhbHVlID0gIiI7CiAgICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dCAhPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQudmFsdWUgPSAiIjsKICAgICAgICAgIGlmIChzZWxmLm1vYmlsZUlucHV0ICE9PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC52YWx1ZSA9ICIiOwogICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gW107CiAgICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA9IHVuZGVmaW5lZDsKICAgICAgICAgIGlmICh0b0luaXRpYWwgPT09IHRydWUpIHsKICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID0gc2VsZi5faW5pdGlhbERhdGUuZ2V0RnVsbFllYXIoKTsKICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IHNlbGYuX2luaXRpYWxEYXRlLmdldE1vbnRoKCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgIHZhciBfYSA9IGdldERlZmF1bHRIb3VycyhzZWxmLmNvbmZpZyksIGhvdXJzID0gX2EuaG91cnMsIG1pbnV0ZXMgPSBfYS5taW51dGVzLCBzZWNvbmRzID0gX2Euc2Vjb25kczsKICAgICAgICAgICAgICBzZXRIb3Vycyhob3VycywgbWludXRlcywgc2Vjb25kcyk7CiAgICAgICAgICB9CiAgICAgICAgICBzZWxmLnJlZHJhdygpOwogICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkKICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoIm9uQ2hhbmdlIik7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gY2xvc2UoKSB7CiAgICAgICAgICBzZWxmLmlzT3BlbiA9IGZhbHNlOwogICAgICAgICAgaWYgKCFzZWxmLmlzTW9iaWxlKSB7CiAgICAgICAgICAgICAgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoIm9wZW4iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHNlbGYuX2lucHV0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgc2VsZi5faW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgiYWN0aXZlIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdHJpZ2dlckV2ZW50KCJvbkNsb3NlIik7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgICAgIGlmIChzZWxmLmNvbmZpZyAhPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgIHRyaWdnZXJFdmVudCgib25EZXN0cm95Iik7CiAgICAgICAgICBmb3IgKHZhciBpID0gc2VsZi5faGFuZGxlcnMubGVuZ3RoOyBpLS07KSB7CiAgICAgICAgICAgICAgc2VsZi5faGFuZGxlcnNbaV0ucmVtb3ZlKCk7CiAgICAgICAgICB9CiAgICAgICAgICBzZWxmLl9oYW5kbGVycyA9IFtdOwogICAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQpIHsKICAgICAgICAgICAgICBpZiAoc2VsZi5tb2JpbGVJbnB1dC5wYXJlbnROb2RlKQogICAgICAgICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2VsZi5tb2JpbGVJbnB1dCk7CiAgICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dCA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgJiYgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5wYXJlbnROb2RlKSB7CiAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLnN0YXRpYyAmJiBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnBhcmVudE5vZGUpIHsKICAgICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgIHdyYXBwZXIubGFzdENoaWxkICYmIHdyYXBwZXIucmVtb3ZlQ2hpbGQod3JhcHBlci5sYXN0Q2hpbGQpOwogICAgICAgICAgICAgICAgICBpZiAod3JhcHBlci5wYXJlbnROb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAod3JhcHBlci5maXJzdENoaWxkKQogICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUod3JhcHBlci5maXJzdENoaWxkLCB3cmFwcGVyKTsKICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh3cmFwcGVyKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzZWxmLmFsdElucHV0KSB7CiAgICAgICAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gInRleHQiOwogICAgICAgICAgICAgIGlmIChzZWxmLmFsdElucHV0LnBhcmVudE5vZGUpCiAgICAgICAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzZWxmLmFsdElucHV0KTsKICAgICAgICAgICAgICBkZWxldGUgc2VsZi5hbHRJbnB1dDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzZWxmLmlucHV0KSB7CiAgICAgICAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gc2VsZi5pbnB1dC5fdHlwZTsKICAgICAgICAgICAgICBzZWxmLmlucHV0LmNsYXNzTGlzdC5yZW1vdmUoImZsYXRwaWNrci1pbnB1dCIpOwogICAgICAgICAgICAgIHNlbGYuaW5wdXQucmVtb3ZlQXR0cmlidXRlKCJyZWFkb25seSIpOwogICAgICAgICAgfQogICAgICAgICAgWwogICAgICAgICAgICAgICJfc2hvd1RpbWVJbnB1dCIsCiAgICAgICAgICAgICAgImxhdGVzdFNlbGVjdGVkRGF0ZU9iaiIsCiAgICAgICAgICAgICAgIl9oaWRlTmV4dE1vbnRoQXJyb3ciLAogICAgICAgICAgICAgICJfaGlkZVByZXZNb250aEFycm93IiwKICAgICAgICAgICAgICAiX19oaWRlTmV4dE1vbnRoQXJyb3ciLAogICAgICAgICAgICAgICJfX2hpZGVQcmV2TW9udGhBcnJvdyIsCiAgICAgICAgICAgICAgImlzTW9iaWxlIiwKICAgICAgICAgICAgICAiaXNPcGVuIiwKICAgICAgICAgICAgICAic2VsZWN0ZWREYXRlRWxlbSIsCiAgICAgICAgICAgICAgIm1pbkRhdGVIYXNUaW1lIiwKICAgICAgICAgICAgICAibWF4RGF0ZUhhc1RpbWUiLAogICAgICAgICAgICAgICJkYXlzIiwKICAgICAgICAgICAgICAiZGF5c0NvbnRhaW5lciIsCiAgICAgICAgICAgICAgIl9pbnB1dCIsCiAgICAgICAgICAgICAgIl9wb3NpdGlvbkVsZW1lbnQiLAogICAgICAgICAgICAgICJpbm5lckNvbnRhaW5lciIsCiAgICAgICAgICAgICAgInJDb250YWluZXIiLAogICAgICAgICAgICAgICJtb250aE5hdiIsCiAgICAgICAgICAgICAgInRvZGF5RGF0ZUVsZW0iLAogICAgICAgICAgICAgICJjYWxlbmRhckNvbnRhaW5lciIsCiAgICAgICAgICAgICAgIndlZWtkYXlDb250YWluZXIiLAogICAgICAgICAgICAgICJwcmV2TW9udGhOYXYiLAogICAgICAgICAgICAgICJuZXh0TW9udGhOYXYiLAogICAgICAgICAgICAgICJtb250aHNEcm9wZG93bkNvbnRhaW5lciIsCiAgICAgICAgICAgICAgImN1cnJlbnRNb250aEVsZW1lbnQiLAogICAgICAgICAgICAgICJjdXJyZW50WWVhckVsZW1lbnQiLAogICAgICAgICAgICAgICJuYXZpZ2F0aW9uQ3VycmVudE1vbnRoIiwKICAgICAgICAgICAgICAic2VsZWN0ZWREYXRlRWxlbSIsCiAgICAgICAgICAgICAgImNvbmZpZyIsCiAgICAgICAgICBdLmZvckVhY2goZnVuY3Rpb24gKGspIHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICBkZWxldGUgc2VsZltrXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY2F0Y2ggKF8pIHsgfQogICAgICAgICAgfSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gaXNDYWxlbmRhckVsZW0oZWxlbSkgewogICAgICAgICAgcmV0dXJuIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY29udGFpbnMoZWxlbSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDbGljayhlKSB7CiAgICAgICAgICBpZiAoc2VsZi5pc09wZW4gJiYgIXNlbGYuY29uZmlnLmlubGluZSkgewogICAgICAgICAgICAgIHZhciBldmVudFRhcmdldF8xID0gZ2V0RXZlbnRUYXJnZXQoZSk7CiAgICAgICAgICAgICAgdmFyIGlzQ2FsZW5kYXJFbGVtZW50ID0gaXNDYWxlbmRhckVsZW0oZXZlbnRUYXJnZXRfMSk7CiAgICAgICAgICAgICAgdmFyIGlzSW5wdXQgPSBldmVudFRhcmdldF8xID09PSBzZWxmLmlucHV0IHx8CiAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0XzEgPT09IHNlbGYuYWx0SW5wdXQgfHwKICAgICAgICAgICAgICAgICAgc2VsZi5lbGVtZW50LmNvbnRhaW5zKGV2ZW50VGFyZ2V0XzEpIHx8CiAgICAgICAgICAgICAgICAgIChlLnBhdGggJiYKICAgICAgICAgICAgICAgICAgICAgIGUucGF0aC5pbmRleE9mICYmCiAgICAgICAgICAgICAgICAgICAgICAofmUucGF0aC5pbmRleE9mKHNlbGYuaW5wdXQpIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgfmUucGF0aC5pbmRleE9mKHNlbGYuYWx0SW5wdXQpKSk7CiAgICAgICAgICAgICAgdmFyIGxvc3RGb2N1cyA9ICFpc0lucHV0ICYmCiAgICAgICAgICAgICAgICAgICFpc0NhbGVuZGFyRWxlbWVudCAmJgogICAgICAgICAgICAgICAgICAhaXNDYWxlbmRhckVsZW0oZS5yZWxhdGVkVGFyZ2V0KTsKICAgICAgICAgICAgICB2YXIgaXNJZ25vcmVkID0gIXNlbGYuY29uZmlnLmlnbm9yZWRGb2N1c0VsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGFpbnMoZXZlbnRUYXJnZXRfMSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgaWYgKGxvc3RGb2N1cyAmJiBpc0lnbm9yZWQpIHsKICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmFsbG93SW5wdXQpIHsKICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0RGF0ZShzZWxmLl9pbnB1dC52YWx1ZSwgZmFsc2UsIHNlbGYuY29uZmlnLmFsdElucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5hbHRGb3JtYXQKICAgICAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnRpbWVDb250YWluZXIgIT09IHVuZGVmaW5lZCAmJgogICAgICAgICAgICAgICAgICAgICAgc2VsZi5taW51dGVFbGVtZW50ICE9PSB1bmRlZmluZWQgJiYKICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJgogICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbnB1dC52YWx1ZSAhPT0gIiIgJiYKICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaW5wdXQudmFsdWUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHNlbGYuY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnICYmCiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tb2RlID09PSAicmFuZ2UiICYmCiAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAxKQogICAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhcihmYWxzZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIGNoYW5nZVllYXIobmV3WWVhcikgewogICAgICAgICAgaWYgKCFuZXdZZWFyIHx8CiAgICAgICAgICAgICAgKHNlbGYuY29uZmlnLm1pbkRhdGUgJiYgbmV3WWVhciA8IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKSkgfHwKICAgICAgICAgICAgICAoc2VsZi5jb25maWcubWF4RGF0ZSAmJiBuZXdZZWFyID4gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpKSkKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB2YXIgbmV3WWVhck51bSA9IG5ld1llYXIsIGlzTmV3WWVhciA9IHNlbGYuY3VycmVudFllYXIgIT09IG5ld1llYXJOdW07CiAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID0gbmV3WWVhck51bSB8fCBzZWxmLmN1cnJlbnRZZWFyOwogICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heERhdGUgJiYKICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkpIHsKICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IE1hdGgubWluKHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TW9udGgoKSwgc2VsZi5jdXJyZW50TW9udGgpOwogICAgICAgICAgfQogICAgICAgICAgZWxzZSBpZiAoc2VsZi5jb25maWcubWluRGF0ZSAmJgogICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKSkgewogICAgICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gTWF0aC5tYXgoc2VsZi5jb25maWcubWluRGF0ZS5nZXRNb250aCgpLCBzZWxmLmN1cnJlbnRNb250aCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaXNOZXdZZWFyKSB7CiAgICAgICAgICAgICAgc2VsZi5yZWRyYXcoKTsKICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoIm9uWWVhckNoYW5nZSIpOwogICAgICAgICAgICAgIGJ1aWxkTW9udGhTd2l0Y2goKTsKICAgICAgICAgIH0KICAgICAgfQogICAgICBmdW5jdGlvbiBpc0VuYWJsZWQoZGF0ZSwgdGltZWxlc3MpIHsKICAgICAgICAgIHZhciBfYTsKICAgICAgICAgIGlmICh0aW1lbGVzcyA9PT0gdm9pZCAwKSB7IHRpbWVsZXNzID0gdHJ1ZTsgfQogICAgICAgICAgdmFyIGRhdGVUb0NoZWNrID0gc2VsZi5wYXJzZURhdGUoZGF0ZSwgdW5kZWZpbmVkLCB0aW1lbGVzcyk7CiAgICAgICAgICBpZiAoKHNlbGYuY29uZmlnLm1pbkRhdGUgJiYKICAgICAgICAgICAgICBkYXRlVG9DaGVjayAmJgogICAgICAgICAgICAgIGNvbXBhcmVEYXRlcyhkYXRlVG9DaGVjaywgc2VsZi5jb25maWcubWluRGF0ZSwgdGltZWxlc3MgIT09IHVuZGVmaW5lZCA/IHRpbWVsZXNzIDogIXNlbGYubWluRGF0ZUhhc1RpbWUpIDwgMCkgfHwKICAgICAgICAgICAgICAoc2VsZi5jb25maWcubWF4RGF0ZSAmJgogICAgICAgICAgICAgICAgICBkYXRlVG9DaGVjayAmJgogICAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoZGF0ZVRvQ2hlY2ssIHNlbGYuY29uZmlnLm1heERhdGUsIHRpbWVsZXNzICE9PSB1bmRlZmluZWQgPyB0aW1lbGVzcyA6ICFzZWxmLm1heERhdGVIYXNUaW1lKSA+IDApKQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIGlmICghc2VsZi5jb25maWcuZW5hYmxlICYmIHNlbGYuY29uZmlnLmRpc2FibGUubGVuZ3RoID09PSAwKQogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgaWYgKGRhdGVUb0NoZWNrID09PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgdmFyIGJvb2wgPSAhIXNlbGYuY29uZmlnLmVuYWJsZSwgYXJyYXkgPSAoX2EgPSBzZWxmLmNvbmZpZy5lbmFibGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHNlbGYuY29uZmlnLmRpc2FibGU7CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgZCA9IHZvaWQgMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgZCA9IGFycmF5W2ldOwogICAgICAgICAgICAgIGlmICh0eXBlb2YgZCA9PT0gImZ1bmN0aW9uIiAmJgogICAgICAgICAgICAgICAgICBkKGRhdGVUb0NoZWNrKSkKICAgICAgICAgICAgICAgICAgcmV0dXJuIGJvb2w7CiAgICAgICAgICAgICAgZWxzZSBpZiAoZCBpbnN0YW5jZW9mIERhdGUgJiYKICAgICAgICAgICAgICAgICAgZGF0ZVRvQ2hlY2sgIT09IHVuZGVmaW5lZCAmJgogICAgICAgICAgICAgICAgICBkLmdldFRpbWUoKSA9PT0gZGF0ZVRvQ2hlY2suZ2V0VGltZSgpKQogICAgICAgICAgICAgICAgICByZXR1cm4gYm9vbDsKICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZCA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgICAgdmFyIHBhcnNlZCA9IHNlbGYucGFyc2VEYXRlKGQsIHVuZGVmaW5lZCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQgJiYgcGFyc2VkLmdldFRpbWUoKSA9PT0gZGF0ZVRvQ2hlY2suZ2V0VGltZSgpCiAgICAgICAgICAgICAgICAgICAgICA/IGJvb2wKICAgICAgICAgICAgICAgICAgICAgIDogIWJvb2w7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkID09PSAib2JqZWN0IiAmJgogICAgICAgICAgICAgICAgICBkYXRlVG9DaGVjayAhPT0gdW5kZWZpbmVkICYmCiAgICAgICAgICAgICAgICAgIGQuZnJvbSAmJgogICAgICAgICAgICAgICAgICBkLnRvICYmCiAgICAgICAgICAgICAgICAgIGRhdGVUb0NoZWNrLmdldFRpbWUoKSA+PSBkLmZyb20uZ2V0VGltZSgpICYmCiAgICAgICAgICAgICAgICAgIGRhdGVUb0NoZWNrLmdldFRpbWUoKSA8PSBkLnRvLmdldFRpbWUoKSkKICAgICAgICAgICAgICAgICAgcmV0dXJuIGJvb2w7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gIWJvb2w7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gaXNJblZpZXcoZWxlbSkgewogICAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lciAhPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgIHJldHVybiAoZWxlbS5jbGFzc05hbWUuaW5kZXhPZigiaGlkZGVuIikgPT09IC0xICYmCiAgICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NOYW1lLmluZGV4T2YoImZsYXRwaWNrci1kaXNhYmxlZCIpID09PSAtMSAmJgogICAgICAgICAgICAgICAgICBzZWxmLmRheXNDb250YWluZXIuY29udGFpbnMoZWxlbSkpOwogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIG9uQmx1cihlKSB7CiAgICAgICAgICB2YXIgaXNJbnB1dCA9IGUudGFyZ2V0ID09PSBzZWxmLl9pbnB1dDsKICAgICAgICAgIHZhciB2YWx1ZUNoYW5nZWQgPSBzZWxmLl9pbnB1dC52YWx1ZS50cmltRW5kKCkgIT09IGdldERhdGVTdHIoKTsKICAgICAgICAgIGlmIChpc0lucHV0ICYmCiAgICAgICAgICAgICAgdmFsdWVDaGFuZ2VkICYmCiAgICAgICAgICAgICAgIShlLnJlbGF0ZWRUYXJnZXQgJiYgaXNDYWxlbmRhckVsZW0oZS5yZWxhdGVkVGFyZ2V0KSkpIHsKICAgICAgICAgICAgICBzZWxmLnNldERhdGUoc2VsZi5faW5wdXQudmFsdWUsIHRydWUsIGUudGFyZ2V0ID09PSBzZWxmLmFsdElucHV0CiAgICAgICAgICAgICAgICAgID8gc2VsZi5jb25maWcuYWx0Rm9ybWF0CiAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7CiAgICAgICAgICB9CiAgICAgIH0KICAgICAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHsKICAgICAgICAgIHZhciBldmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGUpOwogICAgICAgICAgdmFyIGlzSW5wdXQgPSBzZWxmLmNvbmZpZy53cmFwCiAgICAgICAgICAgICAgPyBlbGVtZW50LmNvbnRhaW5zKGV2ZW50VGFyZ2V0KQogICAgICAgICAgICAgIDogZXZlbnRUYXJnZXQgPT09IHNlbGYuX2lucHV0OwogICAgICAgICAgdmFyIGFsbG93SW5wdXQgPSBzZWxmLmNvbmZpZy5hbGxvd0lucHV0OwogICAgICAgICAgdmFyIGFsbG93S2V5ZG93biA9IHNlbGYuaXNPcGVuICYmICghYWxsb3dJbnB1dCB8fCAhaXNJbnB1dCk7CiAgICAgICAgICB2YXIgYWxsb3dJbmxpbmVLZXlkb3duID0gc2VsZi5jb25maWcuaW5saW5lICYmIGlzSW5wdXQgJiYgIWFsbG93SW5wdXQ7CiAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAxMyAmJiBpc0lucHV0KSB7CiAgICAgICAgICAgICAgaWYgKGFsbG93SW5wdXQpIHsKICAgICAgICAgICAgICAgICAgc2VsZi5zZXREYXRlKHNlbGYuX2lucHV0LnZhbHVlLCB0cnVlLCBldmVudFRhcmdldCA9PT0gc2VsZi5hbHRJbnB1dAogICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5hbHRGb3JtYXQKICAgICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7CiAgICAgICAgICAgICAgICAgIHNlbGYuY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50VGFyZ2V0LmJsdXIoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgIHNlbGYub3BlbigpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKGlzQ2FsZW5kYXJFbGVtKGV2ZW50VGFyZ2V0KSB8fAogICAgICAgICAgICAgIGFsbG93S2V5ZG93biB8fAogICAgICAgICAgICAgIGFsbG93SW5saW5lS2V5ZG93bikgewogICAgICAgICAgICAgIHZhciBpc1RpbWVPYmogPSAhIXNlbGYudGltZUNvbnRhaW5lciAmJgogICAgICAgICAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuY29udGFpbnMoZXZlbnRUYXJnZXQpOwogICAgICAgICAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNUaW1lT2JqKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c0FuZENsb3NlKCk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RGF0ZShlKTsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgZm9jdXNBbmRDbG9zZSgpOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgY2FzZSA0NjoKICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0lucHV0ICYmICFzZWxmLmNvbmZpZy5hbGxvd0lucHV0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXIoKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlIDM3OgogICAgICAgICAgICAgICAgICBjYXNlIDM5OgogICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RpbWVPYmogJiYgIWlzSW5wdXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBnZXRDbG9zZXN0QWN0aXZlRWxlbWVudCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIgIT09IHVuZGVmaW5lZCAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYWxsb3dJbnB1dCA9PT0gZmFsc2UgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhY3RpdmVFbGVtZW50ICYmIGlzSW5WaWV3KGFjdGl2ZUVsZW1lbnQpKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhXzEgPSBlLmtleUNvZGUgPT09IDM5ID8gMSA6IC0xOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWUuY3RybEtleSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzT25EYXkodW5kZWZpbmVkLCBkZWx0YV8xKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlTW9udGgoZGVsdGFfMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c09uRGF5KGdldEZpcnN0QXZhaWxhYmxlRGF5KDEpLCAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYuaG91ckVsZW1lbnQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ob3VyRWxlbWVudC5mb2N1cygpOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgMzg6CiAgICAgICAgICAgICAgICAgIGNhc2UgNDA6CiAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLmtleUNvZGUgPT09IDQwID8gMSA6IC0xOwogICAgICAgICAgICAgICAgICAgICAgaWYgKChzZWxmLmRheXNDb250YWluZXIgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldC4kaSAhPT0gdW5kZWZpbmVkKSB8fAogICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0ID09PSBzZWxmLmlucHV0IHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQgPT09IHNlbGYuYWx0SW5wdXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVllYXIoc2VsZi5jdXJyZW50WWVhciAtIGRlbHRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNPbkRheShnZXRGaXJzdEF2YWlsYWJsZURheSgxKSwgMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFpc1RpbWVPYmopCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzT25EYXkodW5kZWZpbmVkLCBkZWx0YSAqIDcpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnRUYXJnZXQgPT09IHNlbGYuY3VycmVudFllYXJFbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlWWVhcihzZWxmLmN1cnJlbnRZZWFyIC0gZGVsdGEpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNUaW1lT2JqICYmIHNlbGYuaG91ckVsZW1lbnQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQuZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVUaW1lKGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2RlYm91bmNlZENoYW5nZSgpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1RpbWVPYmopIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXMgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWludXRlRWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFtUE0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHNlbGYucGx1Z2luRWxlbWVudHMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gZWxlbXMuaW5kZXhPZihldmVudFRhcmdldCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlbGVtc1tpICsgKGUuc2hpZnRLZXkgPyAtMSA6IDEpXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0IHx8IHNlbGYuX2lucHV0KS5mb2N1cygpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFzZWxmLmNvbmZpZy5ub0NhbGVuZGFyICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyLmNvbnRhaW5zKGV2ZW50VGFyZ2V0KSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2hpZnRLZXkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5faW5wdXQuZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChzZWxmLmFtUE0gIT09IHVuZGVmaW5lZCAmJiBldmVudFRhcmdldCA9PT0gc2VsZi5hbVBNKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChlLmtleSkgewogICAgICAgICAgICAgICAgICBjYXNlIHNlbGYubDEwbi5hbVBNWzBdLmNoYXJBdCgwKToKICAgICAgICAgICAgICAgICAgY2FzZSBzZWxmLmwxMG4uYW1QTVswXS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKToKICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9IHNlbGYubDEwbi5hbVBNWzBdOwogICAgICAgICAgICAgICAgICAgICAgc2V0SG91cnNGcm9tSW5wdXRzKCk7CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZSgpOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2Ugc2VsZi5sMTBuLmFtUE1bMV0uY2hhckF0KDApOgogICAgICAgICAgICAgICAgICBjYXNlIHNlbGYubDEwbi5hbVBNWzFdLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpOgogICAgICAgICAgICAgICAgICAgICAgc2VsZi5hbVBNLnRleHRDb250ZW50ID0gc2VsZi5sMTBuLmFtUE1bMV07CiAgICAgICAgICAgICAgICAgICAgICBzZXRIb3Vyc0Zyb21JbnB1dHMoKTsKICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZhbHVlKCk7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaXNJbnB1dCB8fCBpc0NhbGVuZGFyRWxlbShldmVudFRhcmdldCkpIHsKICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoIm9uS2V5RG93biIsIGUpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIG9uTW91c2VPdmVyKGVsZW0sIGNlbGxDbGFzcykgewogICAgICAgICAgaWYgKGNlbGxDbGFzcyA9PT0gdm9pZCAwKSB7IGNlbGxDbGFzcyA9ICJmbGF0cGlja3ItZGF5IjsgfQogICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggIT09IDEgfHwKICAgICAgICAgICAgICAoZWxlbSAmJgogICAgICAgICAgICAgICAgICAoIWVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKGNlbGxDbGFzcykgfHwKICAgICAgICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCJmbGF0cGlja3ItZGlzYWJsZWQiKSkpKQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIHZhciBob3ZlckRhdGUgPSBlbGVtCiAgICAgICAgICAgICAgPyBlbGVtLmRhdGVPYmouZ2V0VGltZSgpCiAgICAgICAgICAgICAgOiBzZWxmLmRheXMuZmlyc3RFbGVtZW50Q2hpbGQuZGF0ZU9iai5nZXRUaW1lKCksIGluaXRpYWxEYXRlID0gc2VsZi5wYXJzZURhdGUoc2VsZi5zZWxlY3RlZERhdGVzWzBdLCB1bmRlZmluZWQsIHRydWUpLmdldFRpbWUoKSwgcmFuZ2VTdGFydERhdGUgPSBNYXRoLm1pbihob3ZlckRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkpLCByYW5nZUVuZERhdGUgPSBNYXRoLm1heChob3ZlckRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkpOwogICAgICAgICAgdmFyIGNvbnRhaW5zRGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgIHZhciBtaW5SYW5nZSA9IDAsIG1heFJhbmdlID0gMDsKICAgICAgICAgIGZvciAodmFyIHQgPSByYW5nZVN0YXJ0RGF0ZTsgdCA8IHJhbmdlRW5kRGF0ZTsgdCArPSBkdXJhdGlvbi5EQVkpIHsKICAgICAgICAgICAgICBpZiAoIWlzRW5hYmxlZChuZXcgRGF0ZSh0KSwgdHJ1ZSkpIHsKICAgICAgICAgICAgICAgICAgY29udGFpbnNEaXNhYmxlZCA9CiAgICAgICAgICAgICAgICAgICAgICBjb250YWluc0Rpc2FibGVkIHx8ICh0ID4gcmFuZ2VTdGFydERhdGUgJiYgdCA8IHJhbmdlRW5kRGF0ZSk7CiAgICAgICAgICAgICAgICAgIGlmICh0IDwgaW5pdGlhbERhdGUgJiYgKCFtaW5SYW5nZSB8fCB0ID4gbWluUmFuZ2UpKQogICAgICAgICAgICAgICAgICAgICAgbWluUmFuZ2UgPSB0OwogICAgICAgICAgICAgICAgICBlbHNlIGlmICh0ID4gaW5pdGlhbERhdGUgJiYgKCFtYXhSYW5nZSB8fCB0IDwgbWF4UmFuZ2UpKQogICAgICAgICAgICAgICAgICAgICAgbWF4UmFuZ2UgPSB0OwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHZhciBob3ZlcmFibGVDZWxscyA9IEFycmF5LmZyb20oc2VsZi5yQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoIio6bnRoLWNoaWxkKC1uKyIgKyBzZWxmLmNvbmZpZy5zaG93TW9udGhzICsgIikgPiAuIiArIGNlbGxDbGFzcykpOwogICAgICAgICAgaG92ZXJhYmxlQ2VsbHMuZm9yRWFjaChmdW5jdGlvbiAoZGF5RWxlbSkgewogICAgICAgICAgICAgIHZhciBkYXRlID0gZGF5RWxlbS5kYXRlT2JqOwogICAgICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTsKICAgICAgICAgICAgICB2YXIgb3V0T2ZSYW5nZSA9IChtaW5SYW5nZSA+IDAgJiYgdGltZXN0YW1wIDwgbWluUmFuZ2UpIHx8CiAgICAgICAgICAgICAgICAgIChtYXhSYW5nZSA+IDAgJiYgdGltZXN0YW1wID4gbWF4UmFuZ2UpOwogICAgICAgICAgICAgIGlmIChvdXRPZlJhbmdlKSB7CiAgICAgICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LmFkZCgibm90QWxsb3dlZCIpOwogICAgICAgICAgICAgICAgICBbImluUmFuZ2UiLCAic3RhcnRSYW5nZSIsICJlbmRSYW5nZSJdLmZvckVhY2goZnVuY3Rpb24gKGMpIHsKICAgICAgICAgICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LnJlbW92ZShjKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSBpZiAoY29udGFpbnNEaXNhYmxlZCAmJiAhb3V0T2ZSYW5nZSkKICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIFsic3RhcnRSYW5nZSIsICJpblJhbmdlIiwgImVuZFJhbmdlIiwgIm5vdEFsbG93ZWQiXS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LnJlbW92ZShjKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBpZiAoZWxlbSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChob3ZlckRhdGUgPD0gc2VsZi5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKQogICAgICAgICAgICAgICAgICAgICAgPyAic3RhcnRSYW5nZSIKICAgICAgICAgICAgICAgICAgICAgIDogImVuZFJhbmdlIik7CiAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsRGF0ZSA8IGhvdmVyRGF0ZSAmJiB0aW1lc3RhbXAgPT09IGluaXRpYWxEYXRlKQogICAgICAgICAgICAgICAgICAgICAgZGF5RWxlbS5jbGFzc0xpc3QuYWRkKCJzdGFydFJhbmdlIik7CiAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluaXRpYWxEYXRlID4gaG92ZXJEYXRlICYmIHRpbWVzdGFtcCA9PT0gaW5pdGlhbERhdGUpCiAgICAgICAgICAgICAgICAgICAgICBkYXlFbGVtLmNsYXNzTGlzdC5hZGQoImVuZFJhbmdlIik7CiAgICAgICAgICAgICAgICAgIGlmICh0aW1lc3RhbXAgPj0gbWluUmFuZ2UgJiYKICAgICAgICAgICAgICAgICAgICAgIChtYXhSYW5nZSA9PT0gMCB8fCB0aW1lc3RhbXAgPD0gbWF4UmFuZ2UpICYmCiAgICAgICAgICAgICAgICAgICAgICBpc0JldHdlZW4odGltZXN0YW1wLCBpbml0aWFsRGF0ZSwgaG92ZXJEYXRlKSkKICAgICAgICAgICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LmFkZCgiaW5SYW5nZSIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIG9uUmVzaXplKCkgewogICAgICAgICAgaWYgKHNlbGYuaXNPcGVuICYmICFzZWxmLmNvbmZpZy5zdGF0aWMgJiYgIXNlbGYuY29uZmlnLmlubGluZSkKICAgICAgICAgICAgICBwb3NpdGlvbkNhbGVuZGFyKCk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gb3BlbihlLCBwb3NpdGlvbkVsZW1lbnQpIHsKICAgICAgICAgIGlmIChwb3NpdGlvbkVsZW1lbnQgPT09IHZvaWQgMCkgeyBwb3NpdGlvbkVsZW1lbnQgPSBzZWxmLl9wb3NpdGlvbkVsZW1lbnQ7IH0KICAgICAgICAgIGlmIChzZWxmLmlzTW9iaWxlID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgaWYgKGUpIHsKICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChlKTsKICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50VGFyZ2V0KSB7CiAgICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldC5ibHVyKCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQuY2xpY2soKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KCJvbk9wZW4iKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmIChzZWxmLl9pbnB1dC5kaXNhYmxlZCB8fCBzZWxmLmNvbmZpZy5pbmxpbmUpIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgd2FzT3BlbiA9IHNlbGYuaXNPcGVuOwogICAgICAgICAgc2VsZi5pc09wZW4gPSB0cnVlOwogICAgICAgICAgaWYgKCF3YXNPcGVuKSB7CiAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJvcGVuIik7CiAgICAgICAgICAgICAgc2VsZi5faW5wdXQuY2xhc3NMaXN0LmFkZCgiYWN0aXZlIik7CiAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KCJvbk9wZW4iKTsKICAgICAgICAgICAgICBwb3NpdGlvbkNhbGVuZGFyKHBvc2l0aW9uRWxlbWVudCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSA9PT0gdHJ1ZSAmJiBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmFsbG93SW5wdXQgPT09IGZhbHNlICYmCiAgICAgICAgICAgICAgICAgIChlID09PSB1bmRlZmluZWQgfHwKICAgICAgICAgICAgICAgICAgICAgICFzZWxmLnRpbWVDb250YWluZXIuY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KSkpIHsKICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLmhvdXJFbGVtZW50LnNlbGVjdCgpOyB9LCA1MCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIG1pbk1heERhdGVTZXR0ZXIodHlwZSkgewogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7CiAgICAgICAgICAgICAgdmFyIGRhdGVPYmogPSAoc2VsZi5jb25maWdbIl8iICsgdHlwZSArICJEYXRlIl0gPSBzZWxmLnBhcnNlRGF0ZShkYXRlLCBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0KSk7CiAgICAgICAgICAgICAgdmFyIGludmVyc2VEYXRlT2JqID0gc2VsZi5jb25maWdbIl8iICsgKHR5cGUgPT09ICJtaW4iID8gIm1heCIgOiAibWluIikgKyAiRGF0ZSJdOwogICAgICAgICAgICAgIGlmIChkYXRlT2JqICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgc2VsZlt0eXBlID09PSAibWluIiA/ICJtaW5EYXRlSGFzVGltZSIgOiAibWF4RGF0ZUhhc1RpbWUiXSA9CiAgICAgICAgICAgICAgICAgICAgICBkYXRlT2JqLmdldEhvdXJzKCkgPiAwIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZU9iai5nZXRNaW51dGVzKCkgPiAwIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZU9iai5nZXRTZWNvbmRzKCkgPiAwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzKSB7CiAgICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IHNlbGYuc2VsZWN0ZWREYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGlzRW5hYmxlZChkKTsgfSk7CiAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCAmJiB0eXBlID09PSAibWluIikKICAgICAgICAgICAgICAgICAgICAgIHNldEhvdXJzRnJvbURhdGUoZGF0ZU9iaik7CiAgICAgICAgICAgICAgICAgIHVwZGF0ZVZhbHVlKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIpIHsKICAgICAgICAgICAgICAgICAgcmVkcmF3KCk7CiAgICAgICAgICAgICAgICAgIGlmIChkYXRlT2JqICE9PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudFt0eXBlXSA9IGRhdGVPYmouZ2V0RnVsbFllYXIoKS50b1N0cmluZygpOwogICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodHlwZSk7CiAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXJFbGVtZW50LmRpc2FibGVkID0KICAgICAgICAgICAgICAgICAgICAgICEhaW52ZXJzZURhdGVPYmogJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlT2JqICE9PSB1bmRlZmluZWQgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNlRGF0ZU9iai5nZXRGdWxsWWVhcigpID09PSBkYXRlT2JqLmdldEZ1bGxZZWFyKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgfQogICAgICBmdW5jdGlvbiBwYXJzZUNvbmZpZygpIHsKICAgICAgICAgIHZhciBib29sT3B0cyA9IFsKICAgICAgICAgICAgICAid3JhcCIsCiAgICAgICAgICAgICAgIndlZWtOdW1iZXJzIiwKICAgICAgICAgICAgICAiYWxsb3dJbnB1dCIsCiAgICAgICAgICAgICAgImFsbG93SW52YWxpZFByZWxvYWQiLAogICAgICAgICAgICAgICJjbGlja09wZW5zIiwKICAgICAgICAgICAgICAidGltZV8yNGhyIiwKICAgICAgICAgICAgICAiZW5hYmxlVGltZSIsCiAgICAgICAgICAgICAgIm5vQ2FsZW5kYXIiLAogICAgICAgICAgICAgICJhbHRJbnB1dCIsCiAgICAgICAgICAgICAgInNob3J0aGFuZEN1cnJlbnRNb250aCIsCiAgICAgICAgICAgICAgImlubGluZSIsCiAgICAgICAgICAgICAgInN0YXRpYyIsCiAgICAgICAgICAgICAgImVuYWJsZVNlY29uZHMiLAogICAgICAgICAgICAgICJkaXNhYmxlTW9iaWxlIiwKICAgICAgICAgIF07CiAgICAgICAgICB2YXIgdXNlckNvbmZpZyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGVsZW1lbnQuZGF0YXNldCB8fCB7fSkpKSwgaW5zdGFuY2VDb25maWcpOwogICAgICAgICAgdmFyIGZvcm1hdHMgPSB7fTsKICAgICAgICAgIHNlbGYuY29uZmlnLnBhcnNlRGF0ZSA9IHVzZXJDb25maWcucGFyc2VEYXRlOwogICAgICAgICAgc2VsZi5jb25maWcuZm9ybWF0RGF0ZSA9IHVzZXJDb25maWcuZm9ybWF0RGF0ZTsKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgImVuYWJsZSIsIHsKICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9lbmFibGU7IH0sCiAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGF0ZXMpIHsKICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcuX2VuYWJsZSA9IHBhcnNlRGF0ZVJ1bGVzKGRhdGVzKTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgfSk7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsICJkaXNhYmxlIiwgewogICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZi5jb25maWcuX2Rpc2FibGU7IH0sCiAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGF0ZXMpIHsKICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcuX2Rpc2FibGUgPSBwYXJzZURhdGVSdWxlcyhkYXRlcyk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgIH0pOwogICAgICAgICAgdmFyIHRpbWVNb2RlID0gdXNlckNvbmZpZy5tb2RlID09PSAidGltZSI7CiAgICAgICAgICBpZiAoIXVzZXJDb25maWcuZGF0ZUZvcm1hdCAmJiAodXNlckNvbmZpZy5lbmFibGVUaW1lIHx8IHRpbWVNb2RlKSkgewogICAgICAgICAgICAgIHZhciBkZWZhdWx0RGF0ZUZvcm1hdCA9IGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnLmRhdGVGb3JtYXQgfHwgZGVmYXVsdHMuZGF0ZUZvcm1hdDsKICAgICAgICAgICAgICBmb3JtYXRzLmRhdGVGb3JtYXQgPQogICAgICAgICAgICAgICAgICB1c2VyQ29uZmlnLm5vQ2FsZW5kYXIgfHwgdGltZU1vZGUKICAgICAgICAgICAgICAgICAgICAgID8gIkg6aSIgKyAodXNlckNvbmZpZy5lbmFibGVTZWNvbmRzID8gIjpTIiA6ICIiKQogICAgICAgICAgICAgICAgICAgICAgOiBkZWZhdWx0RGF0ZUZvcm1hdCArICIgSDppIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyAiOlMiIDogIiIpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHVzZXJDb25maWcuYWx0SW5wdXQgJiYKICAgICAgICAgICAgICAodXNlckNvbmZpZy5lbmFibGVUaW1lIHx8IHRpbWVNb2RlKSAmJgogICAgICAgICAgICAgICF1c2VyQ29uZmlnLmFsdEZvcm1hdCkgewogICAgICAgICAgICAgIHZhciBkZWZhdWx0QWx0Rm9ybWF0ID0gZmxhdHBpY2tyLmRlZmF1bHRDb25maWcuYWx0Rm9ybWF0IHx8IGRlZmF1bHRzLmFsdEZvcm1hdDsKICAgICAgICAgICAgICBmb3JtYXRzLmFsdEZvcm1hdCA9CiAgICAgICAgICAgICAgICAgIHVzZXJDb25maWcubm9DYWxlbmRhciB8fCB0aW1lTW9kZQogICAgICAgICAgICAgICAgICAgICAgPyAiaDppIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyAiOlMgSyIgOiAiIEsiKQogICAgICAgICAgICAgICAgICAgICAgOiBkZWZhdWx0QWx0Rm9ybWF0ICsgKCIgaDppIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyAiOlMiIDogIiIpICsgIiBLIik7CiAgICAgICAgICB9CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsICJtaW5EYXRlIiwgewogICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZi5jb25maWcuX21pbkRhdGU7IH0sCiAgICAgICAgICAgICAgc2V0OiBtaW5NYXhEYXRlU2V0dGVyKCJtaW4iKSwKICAgICAgICAgIH0pOwogICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCAibWF4RGF0ZSIsIHsKICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9tYXhEYXRlOyB9LAogICAgICAgICAgICAgIHNldDogbWluTWF4RGF0ZVNldHRlcigibWF4IiksCiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBtaW5NYXhUaW1lU2V0dGVyID0gZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1t0eXBlID09PSAibWluIiA/ICJfbWluVGltZSIgOiAiX21heFRpbWUiXSA9IHNlbGYucGFyc2VEYXRlKHZhbCwgIkg6aTpTIik7CiAgICAgICAgICB9OyB9OwogICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCAibWluVGltZSIsIHsKICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9taW5UaW1lOyB9LAogICAgICAgICAgICAgIHNldDogbWluTWF4VGltZVNldHRlcigibWluIiksCiAgICAgICAgICB9KTsKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgIm1heFRpbWUiLCB7CiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLmNvbmZpZy5fbWF4VGltZTsgfSwKICAgICAgICAgICAgICBzZXQ6IG1pbk1heFRpbWVTZXR0ZXIoIm1heCIpLAogICAgICAgICAgfSk7CiAgICAgICAgICBpZiAodXNlckNvbmZpZy5tb2RlID09PSAidGltZSIpIHsKICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyID0gdHJ1ZTsKICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5lbmFibGVUaW1lID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIE9iamVjdC5hc3NpZ24oc2VsZi5jb25maWcsIGZvcm1hdHMsIHVzZXJDb25maWcpOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib29sT3B0cy5sZW5ndGg7IGkrKykKICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1tib29sT3B0c1tpXV0gPQogICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1tib29sT3B0c1tpXV0gPT09IHRydWUgfHwKICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnW2Jvb2xPcHRzW2ldXSA9PT0gInRydWUiOwogICAgICAgICAgSE9PS1MuZmlsdGVyKGZ1bmN0aW9uIChob29rKSB7IHJldHVybiBzZWxmLmNvbmZpZ1tob29rXSAhPT0gdW5kZWZpbmVkOyB9KS5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7CiAgICAgICAgICAgICAgc2VsZi5jb25maWdbaG9va10gPSBhcnJheWlmeShzZWxmLmNvbmZpZ1tob29rXSB8fCBbXSkubWFwKGJpbmRUb0luc3RhbmNlKTsKICAgICAgICAgIH0pOwogICAgICAgICAgc2VsZi5pc01vYmlsZSA9CiAgICAgICAgICAgICAgIXNlbGYuY29uZmlnLmRpc2FibGVNb2JpbGUgJiYKICAgICAgICAgICAgICAgICAgIXNlbGYuY29uZmlnLmlubGluZSAmJgogICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tb2RlID09PSAic2luZ2xlIiAmJgogICAgICAgICAgICAgICAgICAhc2VsZi5jb25maWcuZGlzYWJsZS5sZW5ndGggJiYKICAgICAgICAgICAgICAgICAgIXNlbGYuY29uZmlnLmVuYWJsZSAmJgogICAgICAgICAgICAgICAgICAhc2VsZi5jb25maWcud2Vla051bWJlcnMgJiYKICAgICAgICAgICAgICAgICAgL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmNvbmZpZy5wbHVnaW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgdmFyIHBsdWdpbkNvbmYgPSBzZWxmLmNvbmZpZy5wbHVnaW5zW2ldKHNlbGYpIHx8IHt9OwogICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBwbHVnaW5Db25mKSB7CiAgICAgICAgICAgICAgICAgIGlmIChIT09LUy5pbmRleE9mKGtleSkgPiAtMSkgewogICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWdba2V5XSA9IGFycmF5aWZ5KHBsdWdpbkNvbmZba2V5XSkKICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGJpbmRUb0luc3RhbmNlKQogICAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoc2VsZi5jb25maWdba2V5XSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHVzZXJDb25maWdba2V5XSA9PT0gInVuZGVmaW5lZCIpCiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1trZXldID0gcGx1Z2luQ29uZltrZXldOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghdXNlckNvbmZpZy5hbHRJbnB1dENsYXNzKSB7CiAgICAgICAgICAgICAgc2VsZi5jb25maWcuYWx0SW5wdXRDbGFzcyA9CiAgICAgICAgICAgICAgICAgIGdldElucHV0RWxlbSgpLmNsYXNzTmFtZSArICIgIiArIHNlbGYuY29uZmlnLmFsdElucHV0Q2xhc3M7CiAgICAgICAgICB9CiAgICAgICAgICB0cmlnZ2VyRXZlbnQoIm9uUGFyc2VDb25maWciKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBnZXRJbnB1dEVsZW0oKSB7CiAgICAgICAgICByZXR1cm4gc2VsZi5jb25maWcud3JhcAogICAgICAgICAgICAgID8gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCJbZGF0YS1pbnB1dF0iKQogICAgICAgICAgICAgIDogZWxlbWVudDsKICAgICAgfQogICAgICBmdW5jdGlvbiBzZXR1cExvY2FsZSgpIHsKICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5jb25maWcubG9jYWxlICE9PSAib2JqZWN0IiAmJgogICAgICAgICAgICAgIHR5cGVvZiBmbGF0cGlja3IubDEwbnNbc2VsZi5jb25maWcubG9jYWxlXSA9PT0gInVuZGVmaW5lZCIpCiAgICAgICAgICAgICAgc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKG5ldyBFcnJvcigiZmxhdHBpY2tyOiBpbnZhbGlkIGxvY2FsZSAiICsgc2VsZi5jb25maWcubG9jYWxlKSk7CiAgICAgICAgICBzZWxmLmwxMG4gPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmxhdHBpY2tyLmwxMG5zLmRlZmF1bHQpLCAodHlwZW9mIHNlbGYuY29uZmlnLmxvY2FsZSA9PT0gIm9iamVjdCIKICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLmxvY2FsZQogICAgICAgICAgICAgIDogc2VsZi5jb25maWcubG9jYWxlICE9PSAiZGVmYXVsdCIKICAgICAgICAgICAgICAgICAgPyBmbGF0cGlja3IubDEwbnNbc2VsZi5jb25maWcubG9jYWxlXQogICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCkpOwogICAgICAgICAgdG9rZW5SZWdleC5EID0gIigiICsgc2VsZi5sMTBuLndlZWtkYXlzLnNob3J0aGFuZC5qb2luKCJ8IikgKyAiKSI7CiAgICAgICAgICB0b2tlblJlZ2V4LmwgPSAiKCIgKyBzZWxmLmwxMG4ud2Vla2RheXMubG9uZ2hhbmQuam9pbigifCIpICsgIikiOwogICAgICAgICAgdG9rZW5SZWdleC5NID0gIigiICsgc2VsZi5sMTBuLm1vbnRocy5zaG9ydGhhbmQuam9pbigifCIpICsgIikiOwogICAgICAgICAgdG9rZW5SZWdleC5GID0gIigiICsgc2VsZi5sMTBuLm1vbnRocy5sb25naGFuZC5qb2luKCJ8IikgKyAiKSI7CiAgICAgICAgICB0b2tlblJlZ2V4LksgPSAiKCIgKyBzZWxmLmwxMG4uYW1QTVswXSArICJ8IiArIHNlbGYubDEwbi5hbVBNWzFdICsgInwiICsgc2VsZi5sMTBuLmFtUE1bMF0udG9Mb3dlckNhc2UoKSArICJ8IiArIHNlbGYubDEwbi5hbVBNWzFdLnRvTG93ZXJDYXNlKCkgKyAiKSI7CiAgICAgICAgICB2YXIgdXNlckNvbmZpZyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBpbnN0YW5jZUNvbmZpZyksIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZWxlbWVudC5kYXRhc2V0IHx8IHt9KSkpOwogICAgICAgICAgaWYgKHVzZXJDb25maWcudGltZV8yNGhyID09PSB1bmRlZmluZWQgJiYKICAgICAgICAgICAgICBmbGF0cGlja3IuZGVmYXVsdENvbmZpZy50aW1lXzI0aHIgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIHNlbGYuY29uZmlnLnRpbWVfMjRociA9IHNlbGYubDEwbi50aW1lXzI0aHI7CiAgICAgICAgICB9CiAgICAgICAgICBzZWxmLmZvcm1hdERhdGUgPSBjcmVhdGVEYXRlRm9ybWF0dGVyKHNlbGYpOwogICAgICAgICAgc2VsZi5wYXJzZURhdGUgPSBjcmVhdGVEYXRlUGFyc2VyKHsgY29uZmlnOiBzZWxmLmNvbmZpZywgbDEwbjogc2VsZi5sMTBuIH0pOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uQ2FsZW5kYXIoY3VzdG9tUG9zaXRpb25FbGVtZW50KSB7CiAgICAgICAgICBpZiAodHlwZW9mIHNlbGYuY29uZmlnLnBvc2l0aW9uID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgc2VsZi5jb25maWcucG9zaXRpb24oc2VsZiwgY3VzdG9tUG9zaXRpb25FbGVtZW50KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzZWxmLmNhbGVuZGFyQ29udGFpbmVyID09PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgdHJpZ2dlckV2ZW50KCJvblByZUNhbGVuZGFyUG9zaXRpb24iKTsKICAgICAgICAgIHZhciBwb3NpdGlvbkVsZW1lbnQgPSBjdXN0b21Qb3NpdGlvbkVsZW1lbnQgfHwgc2VsZi5fcG9zaXRpb25FbGVtZW50OwogICAgICAgICAgdmFyIGNhbGVuZGFySGVpZ2h0ID0gQXJyYXkucHJvdG90eXBlLnJlZHVjZS5jYWxsKHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2hpbGRyZW4sIChmdW5jdGlvbiAoYWNjLCBjaGlsZCkgeyByZXR1cm4gYWNjICsgY2hpbGQub2Zmc2V0SGVpZ2h0OyB9KSwgMCksIGNhbGVuZGFyV2lkdGggPSBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLm9mZnNldFdpZHRoLCBjb25maWdQb3MgPSBzZWxmLmNvbmZpZy5wb3NpdGlvbi5zcGxpdCgiICIpLCBjb25maWdQb3NWZXJ0aWNhbCA9IGNvbmZpZ1Bvc1swXSwgY29uZmlnUG9zSG9yaXpvbnRhbCA9IGNvbmZpZ1Bvcy5sZW5ndGggPiAxID8gY29uZmlnUG9zWzFdIDogbnVsbCwgaW5wdXRCb3VuZHMgPSBwb3NpdGlvbkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGRpc3RhbmNlRnJvbUJvdHRvbSA9IHdpbmRvdy5pbm5lckhlaWdodCAtIGlucHV0Qm91bmRzLmJvdHRvbSwgc2hvd09uVG9wID0gY29uZmlnUG9zVmVydGljYWwgPT09ICJhYm92ZSIgfHwKICAgICAgICAgICAgICAoY29uZmlnUG9zVmVydGljYWwgIT09ICJiZWxvdyIgJiYKICAgICAgICAgICAgICAgICAgZGlzdGFuY2VGcm9tQm90dG9tIDwgY2FsZW5kYXJIZWlnaHQgJiYKICAgICAgICAgICAgICAgICAgaW5wdXRCb3VuZHMudG9wID4gY2FsZW5kYXJIZWlnaHQpOwogICAgICAgICAgdmFyIHRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCArCiAgICAgICAgICAgICAgaW5wdXRCb3VuZHMudG9wICsKICAgICAgICAgICAgICAoIXNob3dPblRvcCA/IHBvc2l0aW9uRWxlbWVudC5vZmZzZXRIZWlnaHQgKyAyIDogLWNhbGVuZGFySGVpZ2h0IC0gMik7CiAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCAiYXJyb3dUb3AiLCAhc2hvd09uVG9wKTsKICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsICJhcnJvd0JvdHRvbSIsIHNob3dPblRvcCk7CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcuaW5saW5lKQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIHZhciBsZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0ICsgaW5wdXRCb3VuZHMubGVmdDsKICAgICAgICAgIHZhciBpc0NlbnRlciA9IGZhbHNlOwogICAgICAgICAgdmFyIGlzUmlnaHQgPSBmYWxzZTsKICAgICAgICAgIGlmIChjb25maWdQb3NIb3Jpem9udGFsID09PSAiY2VudGVyIikgewogICAgICAgICAgICAgIGxlZnQgLT0gKGNhbGVuZGFyV2lkdGggLSBpbnB1dEJvdW5kcy53aWR0aCkgLyAyOwogICAgICAgICAgICAgIGlzQ2VudGVyID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZ1Bvc0hvcml6b250YWwgPT09ICJyaWdodCIpIHsKICAgICAgICAgICAgICBsZWZ0IC09IGNhbGVuZGFyV2lkdGggLSBpbnB1dEJvdW5kcy53aWR0aDsKICAgICAgICAgICAgICBpc1JpZ2h0ID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsICJhcnJvd0xlZnQiLCAhaXNDZW50ZXIgJiYgIWlzUmlnaHQpOwogICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgImFycm93Q2VudGVyIiwgaXNDZW50ZXIpOwogICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgImFycm93UmlnaHQiLCBpc1JpZ2h0KTsKICAgICAgICAgIHZhciByaWdodCA9IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC0KICAgICAgICAgICAgICAod2luZG93LnBhZ2VYT2Zmc2V0ICsgaW5wdXRCb3VuZHMucmlnaHQpOwogICAgICAgICAgdmFyIHJpZ2h0TW9zdCA9IGxlZnQgKyBjYWxlbmRhcldpZHRoID4gd2luZG93LmRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGg7CiAgICAgICAgICB2YXIgY2VudGVyTW9zdCA9IHJpZ2h0ICsgY2FsZW5kYXJXaWR0aCA+IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoOwogICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgInJpZ2h0TW9zdCIsIHJpZ2h0TW9zdCk7CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcuc3RhdGljKQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUudG9wID0gdG9wICsgInB4IjsKICAgICAgICAgIGlmICghcmlnaHRNb3N0KSB7CiAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gbGVmdCArICJweCI7CiAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yaWdodCA9ICJhdXRvIjsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKCFjZW50ZXJNb3N0KSB7CiAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gImF1dG8iOwogICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUucmlnaHQgPSByaWdodCArICJweCI7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnRTdHlsZVNoZWV0KCk7CiAgICAgICAgICAgICAgaWYgKGRvYyA9PT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgdmFyIGJvZHlXaWR0aCA9IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoOwogICAgICAgICAgICAgIHZhciBjZW50ZXJMZWZ0ID0gTWF0aC5tYXgoMCwgYm9keVdpZHRoIC8gMiAtIGNhbGVuZGFyV2lkdGggLyAyKTsKICAgICAgICAgICAgICB2YXIgY2VudGVyQmVmb3JlID0gIi5mbGF0cGlja3ItY2FsZW5kYXIuY2VudGVyTW9zdDpiZWZvcmUiOwogICAgICAgICAgICAgIHZhciBjZW50ZXJBZnRlciA9ICIuZmxhdHBpY2tyLWNhbGVuZGFyLmNlbnRlck1vc3Q6YWZ0ZXIiOwogICAgICAgICAgICAgIHZhciBjZW50ZXJJbmRleCA9IGRvYy5jc3NSdWxlcy5sZW5ndGg7CiAgICAgICAgICAgICAgdmFyIGNlbnRlclN0eWxlID0gIntsZWZ0OiIgKyBpbnB1dEJvdW5kcy5sZWZ0ICsgInB4O3JpZ2h0OmF1dG87fSI7CiAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgInJpZ2h0TW9zdCIsIGZhbHNlKTsKICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCAiY2VudGVyTW9zdCIsIHRydWUpOwogICAgICAgICAgICAgIGRvYy5pbnNlcnRSdWxlKGNlbnRlckJlZm9yZSArICIsIiArIGNlbnRlckFmdGVyICsgY2VudGVyU3R5bGUsIGNlbnRlckluZGV4KTsKICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBjZW50ZXJMZWZ0ICsgInB4IjsKICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnJpZ2h0ID0gImF1dG8iOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIGdldERvY3VtZW50U3R5bGVTaGVldCgpIHsKICAgICAgICAgIHZhciBlZGl0YWJsZVNoZWV0ID0gbnVsbDsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICB2YXIgc2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTsKICAgICAgICAgICAgICBpZiAoIXNoZWV0LmNzc1J1bGVzKQogICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICBzaGVldC5jc3NSdWxlczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWRpdGFibGVTaGVldCA9IHNoZWV0OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGVkaXRhYmxlU2hlZXQgIT0gbnVsbCA/IGVkaXRhYmxlU2hlZXQgOiBjcmVhdGVTdHlsZVNoZWV0KCk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gY3JlYXRlU3R5bGVTaGVldCgpIHsKICAgICAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7CiAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTsKICAgICAgICAgIHJldHVybiBzdHlsZS5zaGVldDsKICAgICAgfQogICAgICBmdW5jdGlvbiByZWRyYXcoKSB7CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcubm9DYWxlbmRhciB8fCBzZWxmLmlzTW9iaWxlKQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIGJ1aWxkTW9udGhTd2l0Y2goKTsKICAgICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTsKICAgICAgICAgIGJ1aWxkRGF5cygpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGZvY3VzQW5kQ2xvc2UoKSB7CiAgICAgICAgICBzZWxmLl9pbnB1dC5mb2N1cygpOwogICAgICAgICAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoIk1TSUUiKSAhPT0gLTEgfHwKICAgICAgICAgICAgICBuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgc2V0VGltZW91dChzZWxmLmNsb3NlLCAwKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHNlbGYuY2xvc2UoKTsKICAgICAgICAgIH0KICAgICAgfQogICAgICBmdW5jdGlvbiBzZWxlY3REYXRlKGUpIHsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICB2YXIgaXNTZWxlY3RhYmxlID0gZnVuY3Rpb24gKGRheSkgewogICAgICAgICAgICAgIHJldHVybiBkYXkuY2xhc3NMaXN0ICYmCiAgICAgICAgICAgICAgICAgIGRheS5jbGFzc0xpc3QuY29udGFpbnMoImZsYXRwaWNrci1kYXkiKSAmJgogICAgICAgICAgICAgICAgICAhZGF5LmNsYXNzTGlzdC5jb250YWlucygiZmxhdHBpY2tyLWRpc2FibGVkIikgJiYKICAgICAgICAgICAgICAgICAgIWRheS5jbGFzc0xpc3QuY29udGFpbnMoIm5vdEFsbG93ZWQiKTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgdCA9IGZpbmRQYXJlbnQoZ2V0RXZlbnRUYXJnZXQoZSksIGlzU2VsZWN0YWJsZSk7CiAgICAgICAgICBpZiAodCA9PT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIHZhciB0YXJnZXQgPSB0OwogICAgICAgICAgdmFyIHNlbGVjdGVkRGF0ZSA9IChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA9IG5ldyBEYXRlKHRhcmdldC5kYXRlT2JqLmdldFRpbWUoKSkpOwogICAgICAgICAgdmFyIHNob3VsZENoYW5nZU1vbnRoID0gKHNlbGVjdGVkRGF0ZS5nZXRNb250aCgpIDwgc2VsZi5jdXJyZW50TW9udGggfHwKICAgICAgICAgICAgICBzZWxlY3RlZERhdGUuZ2V0TW9udGgoKSA+CiAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoICsgc2VsZi5jb25maWcuc2hvd01vbnRocyAtIDEpICYmCiAgICAgICAgICAgICAgc2VsZi5jb25maWcubW9kZSAhPT0gInJhbmdlIjsKICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlRWxlbSA9IHRhcmdldDsKICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSAic2luZ2xlIikKICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBbc2VsZWN0ZWREYXRlXTsKICAgICAgICAgIGVsc2UgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09ICJtdWx0aXBsZSIpIHsKICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IGlzRGF0ZVNlbGVjdGVkKHNlbGVjdGVkRGF0ZSk7CiAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXgpCiAgICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5zcGxpY2UocGFyc2VJbnQoc2VsZWN0ZWRJbmRleCksIDEpOwogICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzLnB1c2goc2VsZWN0ZWREYXRlKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09ICJyYW5nZSIpIHsKICAgICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMikgewogICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyKGZhbHNlLCBmYWxzZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gc2VsZWN0ZWREYXRlOwogICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5wdXNoKHNlbGVjdGVkRGF0ZSk7CiAgICAgICAgICAgICAgaWYgKGNvbXBhcmVEYXRlcyhzZWxlY3RlZERhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXSwgdHJ1ZSkgIT09IDApCiAgICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmdldFRpbWUoKSAtIGIuZ2V0VGltZSgpOyB9KTsKICAgICAgICAgIH0KICAgICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpOwogICAgICAgICAgaWYgKHNob3VsZENoYW5nZU1vbnRoKSB7CiAgICAgICAgICAgICAgdmFyIGlzTmV3WWVhciA9IHNlbGYuY3VycmVudFllYXIgIT09IHNlbGVjdGVkRGF0ZS5nZXRGdWxsWWVhcigpOwogICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPSBzZWxlY3RlZERhdGUuZ2V0RnVsbFllYXIoKTsKICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IHNlbGVjdGVkRGF0ZS5nZXRNb250aCgpOwogICAgICAgICAgICAgIGlmIChpc05ld1llYXIpIHsKICAgICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KCJvblllYXJDaGFuZ2UiKTsKICAgICAgICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoIm9uTW9udGhDaGFuZ2UiKTsKICAgICAgICAgIH0KICAgICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTsKICAgICAgICAgIGJ1aWxkRGF5cygpOwogICAgICAgICAgdXBkYXRlVmFsdWUoKTsKICAgICAgICAgIGlmICghc2hvdWxkQ2hhbmdlTW9udGggJiYKICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tb2RlICE9PSAicmFuZ2UiICYmCiAgICAgICAgICAgICAgc2VsZi5jb25maWcuc2hvd01vbnRocyA9PT0gMSkKICAgICAgICAgICAgICBmb2N1c09uRGF5RWxlbSh0YXJnZXQpOwogICAgICAgICAgZWxzZSBpZiAoc2VsZi5zZWxlY3RlZERhdGVFbGVtICE9PSB1bmRlZmluZWQgJiYKICAgICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZUVsZW0gJiYgc2VsZi5zZWxlY3RlZERhdGVFbGVtLmZvY3VzKCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc2VsZi5ob3VyRWxlbWVudCAhPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJiBzZWxmLmhvdXJFbGVtZW50LmZvY3VzKCk7CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcuY2xvc2VPblNlbGVjdCkgewogICAgICAgICAgICAgIHZhciBzaW5nbGUgPSBzZWxmLmNvbmZpZy5tb2RlID09PSAic2luZ2xlIiAmJiAhc2VsZi5jb25maWcuZW5hYmxlVGltZTsKICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBzZWxmLmNvbmZpZy5tb2RlID09PSAicmFuZ2UiICYmCiAgICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDIgJiYKICAgICAgICAgICAgICAgICAgIXNlbGYuY29uZmlnLmVuYWJsZVRpbWU7CiAgICAgICAgICAgICAgaWYgKHNpbmdsZSB8fCByYW5nZSkgewogICAgICAgICAgICAgICAgICBmb2N1c0FuZENsb3NlKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdHJpZ2dlckNoYW5nZSgpOwogICAgICB9CiAgICAgIHZhciBDQUxMQkFDS1MgPSB7CiAgICAgICAgICBsb2NhbGU6IFtzZXR1cExvY2FsZSwgdXBkYXRlV2Vla2RheXNdLAogICAgICAgICAgc2hvd01vbnRoczogW2J1aWxkTW9udGhzLCBzZXRDYWxlbmRhcldpZHRoLCBidWlsZFdlZWtkYXlzXSwKICAgICAgICAgIG1pbkRhdGU6IFtqdW1wVG9EYXRlXSwKICAgICAgICAgIG1heERhdGU6IFtqdW1wVG9EYXRlXSwKICAgICAgICAgIHBvc2l0aW9uRWxlbWVudDogW3VwZGF0ZVBvc2l0aW9uRWxlbWVudF0sCiAgICAgICAgICBjbGlja09wZW5zOiBbCiAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuY2xpY2tPcGVucyA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgYmluZChzZWxmLl9pbnB1dCwgImZvY3VzIiwgc2VsZi5vcGVuKTsKICAgICAgICAgICAgICAgICAgICAgIGJpbmQoc2VsZi5faW5wdXQsICJjbGljayIsIHNlbGYub3Blbik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCJmb2N1cyIsIHNlbGYub3Blbik7CiAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCJjbGljayIsIHNlbGYub3Blbik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgXSwKICAgICAgfTsKICAgICAgZnVuY3Rpb24gc2V0KG9wdGlvbiwgdmFsdWUpIHsKICAgICAgICAgIGlmIChvcHRpb24gIT09IG51bGwgJiYgdHlwZW9mIG9wdGlvbiA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHNlbGYuY29uZmlnLCBvcHRpb24pOwogICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRpb24pIHsKICAgICAgICAgICAgICAgICAgaWYgKENBTExCQUNLU1trZXldICE9PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgICAgICAgICBDQUxMQkFDS1Nba2V5XS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4KCk7IH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHNlbGYuY29uZmlnW29wdGlvbl0gPSB2YWx1ZTsKICAgICAgICAgICAgICBpZiAoQ0FMTEJBQ0tTW29wdGlvbl0gIT09IHVuZGVmaW5lZCkKICAgICAgICAgICAgICAgICAgQ0FMTEJBQ0tTW29wdGlvbl0uZm9yRWFjaChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCgpOyB9KTsKICAgICAgICAgICAgICBlbHNlIGlmIChIT09LUy5pbmRleE9mKG9wdGlvbikgPiAtMSkKICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWdbb3B0aW9uXSA9IGFycmF5aWZ5KHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICAgIHNlbGYucmVkcmF3KCk7CiAgICAgICAgICB1cGRhdGVWYWx1ZSh0cnVlKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBzZXRTZWxlY3RlZERhdGUoaW5wdXREYXRlLCBmb3JtYXQpIHsKICAgICAgICAgIHZhciBkYXRlcyA9IFtdOwogICAgICAgICAgaWYgKGlucHV0RGF0ZSBpbnN0YW5jZW9mIEFycmF5KQogICAgICAgICAgICAgIGRhdGVzID0gaW5wdXREYXRlLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gc2VsZi5wYXJzZURhdGUoZCwgZm9ybWF0KTsgfSk7CiAgICAgICAgICBlbHNlIGlmIChpbnB1dERhdGUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBpbnB1dERhdGUgPT09ICJudW1iZXIiKQogICAgICAgICAgICAgIGRhdGVzID0gW3NlbGYucGFyc2VEYXRlKGlucHV0RGF0ZSwgZm9ybWF0KV07CiAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXREYXRlID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgIHN3aXRjaCAoc2VsZi5jb25maWcubW9kZSkgewogICAgICAgICAgICAgICAgICBjYXNlICJzaW5nbGUiOgogICAgICAgICAgICAgICAgICBjYXNlICJ0aW1lIjoKICAgICAgICAgICAgICAgICAgICAgIGRhdGVzID0gW3NlbGYucGFyc2VEYXRlKGlucHV0RGF0ZSwgZm9ybWF0KV07CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAibXVsdGlwbGUiOgogICAgICAgICAgICAgICAgICAgICAgZGF0ZXMgPSBpbnB1dERhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoc2VsZi5jb25maWcuY29uanVuY3Rpb24pCiAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gc2VsZi5wYXJzZURhdGUoZGF0ZSwgZm9ybWF0KTsgfSk7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAicmFuZ2UiOgogICAgICAgICAgICAgICAgICAgICAgZGF0ZXMgPSBpbnB1dERhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoc2VsZi5sMTBuLnJhbmdlU2VwYXJhdG9yKQogICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHNlbGYucGFyc2VEYXRlKGRhdGUsIGZvcm1hdCk7IH0pOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZWxzZQogICAgICAgICAgICAgIHNlbGYuY29uZmlnLmVycm9ySGFuZGxlcihuZXcgRXJyb3IoIkludmFsaWQgZGF0ZSBzdXBwbGllZDogIiArIEpTT04uc3RyaW5naWZ5KGlucHV0RGF0ZSkpKTsKICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IChzZWxmLmNvbmZpZy5hbGxvd0ludmFsaWRQcmVsb2FkCiAgICAgICAgICAgICAgPyBkYXRlcwogICAgICAgICAgICAgIDogZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkIGluc3RhbmNlb2YgRGF0ZSAmJiBpc0VuYWJsZWQoZCwgZmFsc2UpOyB9KSk7CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gInJhbmdlIikKICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5nZXRUaW1lKCkgLSBiLmdldFRpbWUoKTsgfSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gc2V0RGF0ZShkYXRlLCB0cmlnZ2VyQ2hhbmdlLCBmb3JtYXQpIHsKICAgICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlID09PSB2b2lkIDApIHsgdHJpZ2dlckNoYW5nZSA9IGZhbHNlOyB9CiAgICAgICAgICBpZiAoZm9ybWF0ID09PSB2b2lkIDApIHsgZm9ybWF0ID0gc2VsZi5jb25maWcuZGF0ZUZvcm1hdDsgfQogICAgICAgICAgaWYgKChkYXRlICE9PSAwICYmICFkYXRlKSB8fCAoZGF0ZSBpbnN0YW5jZW9mIEFycmF5ICYmIGRhdGUubGVuZ3RoID09PSAwKSkKICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jbGVhcih0cmlnZ2VyQ2hhbmdlKTsKICAgICAgICAgIHNldFNlbGVjdGVkRGF0ZShkYXRlLCBmb3JtYXQpOwogICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPQogICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlc1tzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIC0gMV07CiAgICAgICAgICBzZWxmLnJlZHJhdygpOwogICAgICAgICAganVtcFRvRGF0ZSh1bmRlZmluZWQsIHRyaWdnZXJDaGFuZ2UpOwogICAgICAgICAgc2V0SG91cnNGcm9tRGF0ZSgpOwogICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICBzZWxmLmNsZWFyKGZhbHNlKTsKICAgICAgICAgIH0KICAgICAgICAgIHVwZGF0ZVZhbHVlKHRyaWdnZXJDaGFuZ2UpOwogICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UpCiAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KCJvbkNoYW5nZSIpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHBhcnNlRGF0ZVJ1bGVzKGFycikgewogICAgICAgICAgcmV0dXJuIGFycgogICAgICAgICAgICAgIC5zbGljZSgpCiAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocnVsZSkgewogICAgICAgICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gInN0cmluZyIgfHwKICAgICAgICAgICAgICAgICAgdHlwZW9mIHJ1bGUgPT09ICJudW1iZXIiIHx8CiAgICAgICAgICAgICAgICAgIHJ1bGUgaW5zdGFuY2VvZiBEYXRlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnBhcnNlRGF0ZShydWxlLCB1bmRlZmluZWQsIHRydWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIGlmIChydWxlICYmCiAgICAgICAgICAgICAgICAgIHR5cGVvZiBydWxlID09PSAib2JqZWN0IiAmJgogICAgICAgICAgICAgICAgICBydWxlLmZyb20gJiYKICAgICAgICAgICAgICAgICAgcnVsZS50bykKICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgIGZyb206IHNlbGYucGFyc2VEYXRlKHJ1bGUuZnJvbSwgdW5kZWZpbmVkKSwKICAgICAgICAgICAgICAgICAgICAgIHRvOiBzZWxmLnBhcnNlRGF0ZShydWxlLnRvLCB1bmRlZmluZWQpLAogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHJldHVybiBydWxlOwogICAgICAgICAgfSkKICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9KTsKICAgICAgfQogICAgICBmdW5jdGlvbiBzZXR1cERhdGVzKCkgewogICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gW107CiAgICAgICAgICBzZWxmLm5vdyA9IHNlbGYucGFyc2VEYXRlKHNlbGYuY29uZmlnLm5vdykgfHwgbmV3IERhdGUoKTsKICAgICAgICAgIHZhciBwcmVsb2FkZWREYXRlID0gc2VsZi5jb25maWcuZGVmYXVsdERhdGUgfHwKICAgICAgICAgICAgICAoKHNlbGYuaW5wdXQubm9kZU5hbWUgPT09ICJJTlBVVCIgfHwKICAgICAgICAgICAgICAgICAgc2VsZi5pbnB1dC5ub2RlTmFtZSA9PT0gIlRFWFRBUkVBIikgJiYKICAgICAgICAgICAgICAgICAgc2VsZi5pbnB1dC5wbGFjZWhvbGRlciAmJgogICAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnZhbHVlID09PSBzZWxmLmlucHV0LnBsYWNlaG9sZGVyCiAgICAgICAgICAgICAgICAgID8gbnVsbAogICAgICAgICAgICAgICAgICA6IHNlbGYuaW5wdXQudmFsdWUpOwogICAgICAgICAgaWYgKHByZWxvYWRlZERhdGUpCiAgICAgICAgICAgICAgc2V0U2VsZWN0ZWREYXRlKHByZWxvYWRlZERhdGUsIHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpOwogICAgICAgICAgc2VsZi5faW5pdGlhbERhdGUgPQogICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPiAwCiAgICAgICAgICAgICAgICAgID8gc2VsZi5zZWxlY3RlZERhdGVzWzBdCiAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubWluRGF0ZSAmJgogICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWluRGF0ZS5nZXRUaW1lKCkgPiBzZWxmLm5vdy5nZXRUaW1lKCkKICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi5jb25maWcubWluRGF0ZQogICAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmNvbmZpZy5tYXhEYXRlICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRUaW1lKCkgPCBzZWxmLm5vdy5nZXRUaW1lKCkKICAgICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLm1heERhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYubm93OwogICAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9IHNlbGYuX2luaXRpYWxEYXRlLmdldEZ1bGxZZWFyKCk7CiAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IHNlbGYuX2luaXRpYWxEYXRlLmdldE1vbnRoKCk7CiAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA+IDApCiAgICAgICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSBzZWxmLnNlbGVjdGVkRGF0ZXNbMF07CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcubWluVGltZSAhPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1pblRpbWUgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLmNvbmZpZy5taW5UaW1lLCAiSDppIik7CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4VGltZSAhPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1heFRpbWUgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLmNvbmZpZy5tYXhUaW1lLCAiSDppIik7CiAgICAgICAgICBzZWxmLm1pbkRhdGVIYXNUaW1lID0KICAgICAgICAgICAgICAhIXNlbGYuY29uZmlnLm1pbkRhdGUgJiYKICAgICAgICAgICAgICAgICAgKHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0SG91cnMoKSA+IDAgfHwKICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0TWludXRlcygpID4gMCB8fAogICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWluRGF0ZS5nZXRTZWNvbmRzKCkgPiAwKTsKICAgICAgICAgIHNlbGYubWF4RGF0ZUhhc1RpbWUgPQogICAgICAgICAgICAgICEhc2VsZi5jb25maWcubWF4RGF0ZSAmJgogICAgICAgICAgICAgICAgICAoc2VsZi5jb25maWcubWF4RGF0ZS5nZXRIb3VycygpID4gMCB8fAogICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRNaW51dGVzKCkgPiAwIHx8CiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldFNlY29uZHMoKSA+IDApOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNldHVwSW5wdXRzKCkgewogICAgICAgICAgc2VsZi5pbnB1dCA9IGdldElucHV0RWxlbSgpOwogICAgICAgICAgaWYgKCFzZWxmLmlucHV0KSB7CiAgICAgICAgICAgICAgc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKG5ldyBFcnJvcigiSW52YWxpZCBpbnB1dCBlbGVtZW50IHNwZWNpZmllZCIpKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBzZWxmLmlucHV0Ll90eXBlID0gc2VsZi5pbnB1dC50eXBlOwogICAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gInRleHQiOwogICAgICAgICAgc2VsZi5pbnB1dC5jbGFzc0xpc3QuYWRkKCJmbGF0cGlja3ItaW5wdXQiKTsKICAgICAgICAgIHNlbGYuX2lucHV0ID0gc2VsZi5pbnB1dDsKICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5hbHRJbnB1dCkgewogICAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQgPSBjcmVhdGVFbGVtZW50KHNlbGYuaW5wdXQubm9kZU5hbWUsIHNlbGYuY29uZmlnLmFsdElucHV0Q2xhc3MpOwogICAgICAgICAgICAgIHNlbGYuX2lucHV0ID0gc2VsZi5hbHRJbnB1dDsKICAgICAgICAgICAgICBzZWxmLmFsdElucHV0LnBsYWNlaG9sZGVyID0gc2VsZi5pbnB1dC5wbGFjZWhvbGRlcjsKICAgICAgICAgICAgICBzZWxmLmFsdElucHV0LmRpc2FibGVkID0gc2VsZi5pbnB1dC5kaXNhYmxlZDsKICAgICAgICAgICAgICBzZWxmLmFsdElucHV0LnJlcXVpcmVkID0gc2VsZi5pbnB1dC5yZXF1aXJlZDsKICAgICAgICAgICAgICBzZWxmLmFsdElucHV0LnRhYkluZGV4ID0gc2VsZi5pbnB1dC50YWJJbmRleDsKICAgICAgICAgICAgICBzZWxmLmFsdElucHV0LnR5cGUgPSAidGV4dCI7CiAgICAgICAgICAgICAgc2VsZi5pbnB1dC5zZXRBdHRyaWJ1dGUoInR5cGUiLCAiaGlkZGVuIik7CiAgICAgICAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy5zdGF0aWMgJiYgc2VsZi5pbnB1dC5wYXJlbnROb2RlKQogICAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYuYWx0SW5wdXQsIHNlbGYuaW5wdXQubmV4dFNpYmxpbmcpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy5hbGxvd0lucHV0KQogICAgICAgICAgICAgIHNlbGYuX2lucHV0LnNldEF0dHJpYnV0ZSgicmVhZG9ubHkiLCAicmVhZG9ubHkiKTsKICAgICAgICAgIHVwZGF0ZVBvc2l0aW9uRWxlbWVudCgpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uRWxlbWVudCgpIHsKICAgICAgICAgIHNlbGYuX3Bvc2l0aW9uRWxlbWVudCA9IHNlbGYuY29uZmlnLnBvc2l0aW9uRWxlbWVudCB8fCBzZWxmLl9pbnB1dDsKICAgICAgfQogICAgICBmdW5jdGlvbiBzZXR1cE1vYmlsZSgpIHsKICAgICAgICAgIHZhciBpbnB1dFR5cGUgPSBzZWxmLmNvbmZpZy5lbmFibGVUaW1lCiAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyCiAgICAgICAgICAgICAgICAgID8gInRpbWUiCiAgICAgICAgICAgICAgICAgIDogImRhdGV0aW1lLWxvY2FsIgogICAgICAgICAgICAgIDogImRhdGUiOwogICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dCA9IGNyZWF0ZUVsZW1lbnQoImlucHV0Iiwgc2VsZi5pbnB1dC5jbGFzc05hbWUgKyAiIGZsYXRwaWNrci1tb2JpbGUiKTsKICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQudGFiSW5kZXggPSAxOwogICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC50eXBlID0gaW5wdXRUeXBlOwogICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5kaXNhYmxlZCA9IHNlbGYuaW5wdXQuZGlzYWJsZWQ7CiAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnJlcXVpcmVkID0gc2VsZi5pbnB1dC5yZXF1aXJlZDsKICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQucGxhY2Vob2xkZXIgPSBzZWxmLmlucHV0LnBsYWNlaG9sZGVyOwogICAgICAgICAgc2VsZi5tb2JpbGVGb3JtYXRTdHIgPQogICAgICAgICAgICAgIGlucHV0VHlwZSA9PT0gImRhdGV0aW1lLWxvY2FsIgogICAgICAgICAgICAgICAgICA/ICJZLW0tZFxcVEg6aTpTIgogICAgICAgICAgICAgICAgICA6IGlucHV0VHlwZSA9PT0gImRhdGUiCiAgICAgICAgICAgICAgICAgICAgICA/ICJZLW0tZCIKICAgICAgICAgICAgICAgICAgICAgIDogIkg6aTpTIjsKICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQuZGVmYXVsdFZhbHVlID0gc2VsZi5tb2JpbGVJbnB1dC52YWx1ZSA9IHNlbGYuZm9ybWF0RGF0ZShzZWxmLnNlbGVjdGVkRGF0ZXNbMF0sIHNlbGYubW9iaWxlRm9ybWF0U3RyKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlKQogICAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQubWluID0gc2VsZi5mb3JtYXREYXRlKHNlbGYuY29uZmlnLm1pbkRhdGUsICJZLW0tZCIpOwogICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heERhdGUpCiAgICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5tYXggPSBzZWxmLmZvcm1hdERhdGUoc2VsZi5jb25maWcubWF4RGF0ZSwgIlktbS1kIik7CiAgICAgICAgICBpZiAoc2VsZi5pbnB1dC5nZXRBdHRyaWJ1dGUoInN0ZXAiKSkKICAgICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnN0ZXAgPSBTdHJpbmcoc2VsZi5pbnB1dC5nZXRBdHRyaWJ1dGUoInN0ZXAiKSk7CiAgICAgICAgICBzZWxmLmlucHV0LnR5cGUgPSAiaGlkZGVuIjsKICAgICAgICAgIGlmIChzZWxmLmFsdElucHV0ICE9PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC50eXBlID0gImhpZGRlbiI7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGlmIChzZWxmLmlucHV0LnBhcmVudE5vZGUpCiAgICAgICAgICAgICAgICAgIHNlbGYuaW5wdXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5tb2JpbGVJbnB1dCwgc2VsZi5pbnB1dC5uZXh0U2libGluZyk7CiAgICAgICAgICB9CiAgICAgICAgICBjYXRjaCAoX2EpIHsgfQogICAgICAgICAgYmluZChzZWxmLm1vYmlsZUlucHV0LCAiY2hhbmdlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBzZWxmLnNldERhdGUoZ2V0RXZlbnRUYXJnZXQoZSkudmFsdWUsIGZhbHNlLCBzZWxmLm1vYmlsZUZvcm1hdFN0cik7CiAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KCJvbkNoYW5nZSIpOwogICAgICAgICAgICAgIHRyaWdnZXJFdmVudCgib25DbG9zZSIpOwogICAgICAgICAgfSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gdG9nZ2xlKGUpIHsKICAgICAgICAgIGlmIChzZWxmLmlzT3BlbiA9PT0gdHJ1ZSkKICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jbG9zZSgpOwogICAgICAgICAgc2VsZi5vcGVuKGUpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHRyaWdnZXJFdmVudChldmVudCwgZGF0YSkgewogICAgICAgICAgaWYgKHNlbGYuY29uZmlnID09PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgdmFyIGhvb2tzID0gc2VsZi5jb25maWdbZXZlbnRdOwogICAgICAgICAgaWYgKGhvb2tzICE9PSB1bmRlZmluZWQgJiYgaG9va3MubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBob29rc1tpXSAmJiBpIDwgaG9va3MubGVuZ3RoOyBpKyspCiAgICAgICAgICAgICAgICAgIGhvb2tzW2ldKHNlbGYuc2VsZWN0ZWREYXRlcywgc2VsZi5pbnB1dC52YWx1ZSwgc2VsZiwgZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZXZlbnQgPT09ICJvbkNoYW5nZSIpIHsKICAgICAgICAgICAgICBzZWxmLmlucHV0LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoImNoYW5nZSIpKTsKICAgICAgICAgICAgICBzZWxmLmlucHV0LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoImlucHV0IikpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KG5hbWUpIHsKICAgICAgICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoIkV2ZW50Iik7CiAgICAgICAgICBlLmluaXRFdmVudChuYW1lLCB0cnVlLCB0cnVlKTsKICAgICAgICAgIHJldHVybiBlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGlzRGF0ZVNlbGVjdGVkKGRhdGUpIHsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGF0ZSA9IHNlbGYuc2VsZWN0ZWREYXRlc1tpXTsKICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWREYXRlIGluc3RhbmNlb2YgRGF0ZSAmJgogICAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoc2VsZWN0ZWREYXRlLCBkYXRlKSA9PT0gMCkKICAgICAgICAgICAgICAgICAgcmV0dXJuICIiICsgaTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBmdW5jdGlvbiBpc0RhdGVJblJhbmdlKGRhdGUpIHsKICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlICE9PSAicmFuZ2UiIHx8IHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPCAyKQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIHJldHVybiAoY29tcGFyZURhdGVzKGRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXSkgPj0gMCAmJgogICAgICAgICAgICAgIGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMV0pIDw9IDApOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKSB7CiAgICAgICAgICBpZiAoc2VsZi5jb25maWcubm9DYWxlbmRhciB8fCBzZWxmLmlzTW9iaWxlIHx8ICFzZWxmLm1vbnRoTmF2KQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIHNlbGYueWVhckVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKHllYXJFbGVtZW50LCBpKSB7CiAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZShzZWxmLmN1cnJlbnRZZWFyLCBzZWxmLmN1cnJlbnRNb250aCwgMSk7CiAgICAgICAgICAgICAgZC5zZXRNb250aChzZWxmLmN1cnJlbnRNb250aCArIGkpOwogICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5zaG93TW9udGhzID4gMSB8fAogICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tb250aFNlbGVjdG9yVHlwZSA9PT0gInN0YXRpYyIpIHsKICAgICAgICAgICAgICAgICAgc2VsZi5tb250aEVsZW1lbnRzW2ldLnRleHRDb250ZW50ID0KICAgICAgICAgICAgICAgICAgICAgIG1vbnRoVG9TdHIoZC5nZXRNb250aCgpLCBzZWxmLmNvbmZpZy5zaG9ydGhhbmRDdXJyZW50TW9udGgsIHNlbGYubDEwbikgKyAiICI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICBzZWxmLm1vbnRoc0Ryb3Bkb3duQ29udGFpbmVyLnZhbHVlID0gZC5nZXRNb250aCgpLnRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHllYXJFbGVtZW50LnZhbHVlID0gZC5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHNlbGYuX2hpZGVQcmV2TW9udGhBcnJvdyA9CiAgICAgICAgICAgICAgc2VsZi5jb25maWcubWluRGF0ZSAhPT0gdW5kZWZpbmVkICYmCiAgICAgICAgICAgICAgICAgIChzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkKICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi5jdXJyZW50TW9udGggPD0gc2VsZi5jb25maWcubWluRGF0ZS5nZXRNb250aCgpCiAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY3VycmVudFllYXIgPCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkpOwogICAgICAgICAgc2VsZi5faGlkZU5leHRNb250aEFycm93ID0KICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tYXhEYXRlICE9PSB1bmRlZmluZWQgJiYKICAgICAgICAgICAgICAgICAgKHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKQogICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmN1cnJlbnRNb250aCArIDEgPiBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldE1vbnRoKCkKICAgICAgICAgICAgICAgICAgICAgIDogc2VsZi5jdXJyZW50WWVhciA+IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gZ2V0RGF0ZVN0cihzcGVjaWZpY0Zvcm1hdCkgewogICAgICAgICAgdmFyIGZvcm1hdCA9IHNwZWNpZmljRm9ybWF0IHx8CiAgICAgICAgICAgICAgKHNlbGYuY29uZmlnLmFsdElucHV0ID8gc2VsZi5jb25maWcuYWx0Rm9ybWF0IDogc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7CiAgICAgICAgICByZXR1cm4gc2VsZi5zZWxlY3RlZERhdGVzCiAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoZE9iaikgeyByZXR1cm4gc2VsZi5mb3JtYXREYXRlKGRPYmosIGZvcm1hdCk7IH0pCiAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoZCwgaSwgYXJyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLm1vZGUgIT09ICJyYW5nZSIgfHwKICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcuZW5hYmxlVGltZSB8fAogICAgICAgICAgICAgICAgICBhcnIuaW5kZXhPZihkKSA9PT0gaTsKICAgICAgICAgIH0pCiAgICAgICAgICAgICAgLmpvaW4oc2VsZi5jb25maWcubW9kZSAhPT0gInJhbmdlIgogICAgICAgICAgICAgID8gc2VsZi5jb25maWcuY29uanVuY3Rpb24KICAgICAgICAgICAgICA6IHNlbGYubDEwbi5yYW5nZVNlcGFyYXRvcik7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gdXBkYXRlVmFsdWUodHJpZ2dlckNoYW5nZSkgewogICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UgPT09IHZvaWQgMCkgeyB0cmlnZ2VyQ2hhbmdlID0gdHJ1ZTsgfQogICAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQgIT09IHVuZGVmaW5lZCAmJiBzZWxmLm1vYmlsZUZvcm1hdFN0cikgewogICAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQudmFsdWUgPQogICAgICAgICAgICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgICAgICAgICA/IHNlbGYuZm9ybWF0RGF0ZShzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiwgc2VsZi5tb2JpbGVGb3JtYXRTdHIpCiAgICAgICAgICAgICAgICAgICAgICA6ICIiOwogICAgICAgICAgfQogICAgICAgICAgc2VsZi5pbnB1dC52YWx1ZSA9IGdldERhdGVTdHIoc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7CiAgICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC52YWx1ZSA9IGdldERhdGVTdHIoc2VsZi5jb25maWcuYWx0Rm9ybWF0KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlICE9PSBmYWxzZSkKICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoIm9uVmFsdWVVcGRhdGUiKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBvbk1vbnRoTmF2Q2xpY2soZSkgewogICAgICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZSk7CiAgICAgICAgICB2YXIgaXNQcmV2TW9udGggPSBzZWxmLnByZXZNb250aE5hdi5jb250YWlucyhldmVudFRhcmdldCk7CiAgICAgICAgICB2YXIgaXNOZXh0TW9udGggPSBzZWxmLm5leHRNb250aE5hdi5jb250YWlucyhldmVudFRhcmdldCk7CiAgICAgICAgICBpZiAoaXNQcmV2TW9udGggfHwgaXNOZXh0TW9udGgpIHsKICAgICAgICAgICAgICBjaGFuZ2VNb250aChpc1ByZXZNb250aCA/IC0xIDogMSk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmIChzZWxmLnllYXJFbGVtZW50cy5pbmRleE9mKGV2ZW50VGFyZ2V0KSA+PSAwKSB7CiAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuc2VsZWN0KCk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmIChldmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoImFycm93VXAiKSkgewogICAgICAgICAgICAgIHNlbGYuY2hhbmdlWWVhcihzZWxmLmN1cnJlbnRZZWFyICsgMSk7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmIChldmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoImFycm93RG93biIpKSB7CiAgICAgICAgICAgICAgc2VsZi5jaGFuZ2VZZWFyKHNlbGYuY3VycmVudFllYXIgLSAxKTsKICAgICAgICAgIH0KICAgICAgfQogICAgICBmdW5jdGlvbiB0aW1lV3JhcHBlcihlKSB7CiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICB2YXIgaXNLZXlEb3duID0gZS50eXBlID09PSAia2V5ZG93biIsIGV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZSksIGlucHV0ID0gZXZlbnRUYXJnZXQ7CiAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQgJiYgZXZlbnRUYXJnZXQgPT09IHNlbGYuYW1QTSkgewogICAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9CiAgICAgICAgICAgICAgICAgIHNlbGYubDEwbi5hbVBNW2ludChzZWxmLmFtUE0udGV4dENvbnRlbnQgPT09IHNlbGYubDEwbi5hbVBNWzBdKV07CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgbWluID0gcGFyc2VGbG9hdChpbnB1dC5nZXRBdHRyaWJ1dGUoIm1pbiIpKSwgbWF4ID0gcGFyc2VGbG9hdChpbnB1dC5nZXRBdHRyaWJ1dGUoIm1heCIpKSwgc3RlcCA9IHBhcnNlRmxvYXQoaW5wdXQuZ2V0QXR0cmlidXRlKCJzdGVwIikpLCBjdXJWYWx1ZSA9IHBhcnNlSW50KGlucHV0LnZhbHVlLCAxMCksIGRlbHRhID0gZS5kZWx0YSB8fAogICAgICAgICAgICAgIChpc0tleURvd24gPyAoZS53aGljaCA9PT0gMzggPyAxIDogLTEpIDogMCk7CiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXJWYWx1ZSArIHN0ZXAgKiBkZWx0YTsKICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQudmFsdWUgIT09ICJ1bmRlZmluZWQiICYmIGlucHV0LnZhbHVlLmxlbmd0aCA9PT0gMikgewogICAgICAgICAgICAgIHZhciBpc0hvdXJFbGVtID0gaW5wdXQgPT09IHNlbGYuaG91ckVsZW1lbnQsIGlzTWludXRlRWxlbSA9IGlucHV0ID09PSBzZWxmLm1pbnV0ZUVsZW1lbnQ7CiAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlIDwgbWluKSB7CiAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0KICAgICAgICAgICAgICAgICAgICAgIG1heCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgKwogICAgICAgICAgICAgICAgICAgICAgICAgIGludCghaXNIb3VyRWxlbSkgKwogICAgICAgICAgICAgICAgICAgICAgICAgIChpbnQoaXNIb3VyRWxlbSkgJiYgaW50KCFzZWxmLmFtUE0pKTsKICAgICAgICAgICAgICAgICAgaWYgKGlzTWludXRlRWxlbSkKICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudE51bUlucHV0KHVuZGVmaW5lZCwgLTEsIHNlbGYuaG91ckVsZW1lbnQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIGlmIChuZXdWYWx1ZSA+IG1heCkgewogICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9CiAgICAgICAgICAgICAgICAgICAgICBpbnB1dCA9PT0gc2VsZi5ob3VyRWxlbWVudCA/IG5ld1ZhbHVlIC0gbWF4IC0gaW50KCFzZWxmLmFtUE0pIDogbWluOwogICAgICAgICAgICAgICAgICBpZiAoaXNNaW51dGVFbGVtKQogICAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50TnVtSW5wdXQodW5kZWZpbmVkLCAxLCBzZWxmLmhvdXJFbGVtZW50KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHNlbGYuYW1QTSAmJgogICAgICAgICAgICAgICAgICBpc0hvdXJFbGVtICYmCiAgICAgICAgICAgICAgICAgIChzdGVwID09PSAxCiAgICAgICAgICAgICAgICAgICAgICA/IG5ld1ZhbHVlICsgY3VyVmFsdWUgPT09IDIzCiAgICAgICAgICAgICAgICAgICAgICA6IE1hdGguYWJzKG5ld1ZhbHVlIC0gY3VyVmFsdWUpID4gc3RlcCkpIHsKICAgICAgICAgICAgICAgICAgc2VsZi5hbVBNLnRleHRDb250ZW50ID0KICAgICAgICAgICAgICAgICAgICAgIHNlbGYubDEwbi5hbVBNW2ludChzZWxmLmFtUE0udGV4dENvbnRlbnQgPT09IHNlbGYubDEwbi5hbVBNWzBdKV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gcGFkKG5ld1ZhbHVlKTsKICAgICAgICAgIH0KICAgICAgfQogICAgICBpbml0KCk7CiAgICAgIHJldHVybiBzZWxmOwogIH0KICBmdW5jdGlvbiBfZmxhdHBpY2tyKG5vZGVMaXN0LCBjb25maWcpIHsKICAgICAgdmFyIG5vZGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlCiAgICAgICAgICAuY2FsbChub2RlTGlzdCkKICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggaW5zdGFuY2VvZiBIVE1MRWxlbWVudDsgfSk7CiAgICAgIHZhciBpbnN0YW5jZXMgPSBbXTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKCJkYXRhLWZwLW9taXQiKSAhPT0gbnVsbCkKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgaWYgKG5vZGUuX2ZsYXRwaWNrciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgIG5vZGUuX2ZsYXRwaWNrci5kZXN0cm95KCk7CiAgICAgICAgICAgICAgICAgIG5vZGUuX2ZsYXRwaWNrciA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbm9kZS5fZmxhdHBpY2tyID0gRmxhdHBpY2tySW5zdGFuY2Uobm9kZSwgY29uZmlnIHx8IHt9KTsKICAgICAgICAgICAgICBpbnN0YW5jZXMucHVzaChub2RlLl9mbGF0cGlja3IpOwogICAgICAgICAgfQogICAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBpbnN0YW5jZXMubGVuZ3RoID09PSAxID8gaW5zdGFuY2VzWzBdIDogaW5zdGFuY2VzOwogIH0KICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ICE9PSAidW5kZWZpbmVkIiAmJgogICAgICB0eXBlb2YgSFRNTENvbGxlY3Rpb24gIT09ICJ1bmRlZmluZWQiICYmCiAgICAgIHR5cGVvZiBOb2RlTGlzdCAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgSFRNTENvbGxlY3Rpb24ucHJvdG90eXBlLmZsYXRwaWNrciA9IE5vZGVMaXN0LnByb3RvdHlwZS5mbGF0cGlja3IgPSBmdW5jdGlvbiAoY29uZmlnKSB7CiAgICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcih0aGlzLCBjb25maWcpOwogICAgICB9OwogICAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuZmxhdHBpY2tyID0gZnVuY3Rpb24gKGNvbmZpZykgewogICAgICAgICAgcmV0dXJuIF9mbGF0cGlja3IoW3RoaXNdLCBjb25maWcpOwogICAgICB9OwogIH0KICB2YXIgZmxhdHBpY2tyID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBjb25maWcpIHsKICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gInN0cmluZyIpIHsKICAgICAgICAgIHJldHVybiBfZmxhdHBpY2tyKHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSwgY29uZmlnKTsKICAgICAgfQogICAgICBlbHNlIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIE5vZGUpIHsKICAgICAgICAgIHJldHVybiBfZmxhdHBpY2tyKFtzZWxlY3Rvcl0sIGNvbmZpZyk7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcihzZWxlY3RvciwgY29uZmlnKTsKICAgICAgfQogIH07CiAgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcgPSB7fTsKICBmbGF0cGlja3IubDEwbnMgPSB7CiAgICAgIGVuOiBfX2Fzc2lnbih7fSwgZW5nbGlzaCksCiAgICAgIGRlZmF1bHQ6IF9fYXNzaWduKHt9LCBlbmdsaXNoKSwKICB9OwogIGZsYXRwaWNrci5sb2NhbGl6ZSA9IGZ1bmN0aW9uIChsMTBuKSB7CiAgICAgIGZsYXRwaWNrci5sMTBucy5kZWZhdWx0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGZsYXRwaWNrci5sMTBucy5kZWZhdWx0KSwgbDEwbik7CiAgfTsKICBmbGF0cGlja3Iuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoY29uZmlnKSB7CiAgICAgIGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnKSwgY29uZmlnKTsKICB9OwogIGZsYXRwaWNrci5wYXJzZURhdGUgPSBjcmVhdGVEYXRlUGFyc2VyKHt9KTsKICBmbGF0cGlja3IuZm9ybWF0RGF0ZSA9IGNyZWF0ZURhdGVGb3JtYXR0ZXIoe30pOwogIGZsYXRwaWNrci5jb21wYXJlRGF0ZXMgPSBjb21wYXJlRGF0ZXM7CiAgaWYgKHR5cGVvZiBqUXVlcnkgIT09ICJ1bmRlZmluZWQiICYmIHR5cGVvZiBqUXVlcnkuZm4gIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgIGpRdWVyeS5mbi5mbGF0cGlja3IgPSBmdW5jdGlvbiAoY29uZmlnKSB7CiAgICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcih0aGlzLCBjb25maWcpOwogICAgICB9OwogIH0KICBEYXRlLnByb3RvdHlwZS5mcF9pbmNyID0gZnVuY3Rpb24gKGRheXMpIHsKICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMuZ2V0RnVsbFllYXIoKSwgdGhpcy5nZXRNb250aCgpLCB0aGlzLmdldERhdGUoKSArICh0eXBlb2YgZGF5cyA9PT0gInN0cmluZyIgPyBwYXJzZUludChkYXlzLCAxMCkgOiBkYXlzKSk7CiAgfTsKICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgd2luZG93LmZsYXRwaWNrciA9IGZsYXRwaWNrcjsKICB9CgogIHZhciBlLG89e307ZnVuY3Rpb24gbihyLHQsZSl7aWYoMz09PXIubm9kZVR5cGUpe3ZhciBvPSJ0ZXh0Q29udGVudCJpbiByP3IudGV4dENvbnRlbnQ6ci5ub2RlVmFsdWV8fCIiO2lmKCExIT09bi5vcHRpb25zLnRyaW0pe3ZhciBhPTA9PT10fHx0PT09ZS5sZW5ndGgtMTtpZigoIShvPW8ubWF0Y2goL15bXHNcbl0rJC9nKSYmImFsbCIhPT1uLm9wdGlvbnMudHJpbT8iICI6by5yZXBsYWNlKC8oXltcc1xuXSt8W1xzXG5dKyQpL2csImFsbCI9PT1uLm9wdGlvbnMudHJpbXx8YT8iIjoiICIpKXx8IiAiPT09bykmJmUubGVuZ3RoPjEmJmEpcmV0dXJuIG51bGx9cmV0dXJuIG99aWYoMSE9PXIubm9kZVR5cGUpcmV0dXJuIG51bGw7dmFyIHA9U3RyaW5nKHIubm9kZU5hbWUpLnRvTG93ZXJDYXNlKCk7aWYoInNjcmlwdCI9PT1wJiYhbi5vcHRpb25zLmFsbG93U2NyaXB0cylyZXR1cm4gbnVsbDt2YXIgbCxzLHU9bi5oKHAsZnVuY3Rpb24ocil7dmFyIHQ9ciYmci5sZW5ndGg7aWYoIXQpcmV0dXJuIG51bGw7Zm9yKHZhciBlPXt9LG89MDtvPHQ7bysrKXt2YXIgYT1yW29dLGk9YS5uYW1lLHA9YS52YWx1ZTsib24iPT09aS5zdWJzdHJpbmcoMCwyKSYmbi5vcHRpb25zLmFsbG93RXZlbnRzJiYocD1uZXcgRnVuY3Rpb24ocCkpLGVbaV09cDt9cmV0dXJuIGV9KHIuYXR0cmlidXRlcyksKHM9KGw9ci5jaGlsZE5vZGVzKSYmQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGwsbikuZmlsdGVyKGkpKSYmcy5sZW5ndGg/czpudWxsKTtyZXR1cm4gbi52aXNpdG9yJiZuLnZpc2l0b3IodSksdX12YXIgYSxpPWZ1bmN0aW9uKHIpe3JldHVybiByfSxwPXt9O2Z1bmN0aW9uIGwocil7dmFyIHQ9KHIudHlwZXx8IiIpLnRvTG93ZXJDYXNlKCksZT1sLm1hcDtlJiZlLmhhc093blByb3BlcnR5KHQpPyhyLnR5cGU9ZVt0XSxyLnByb3BzPU9iamVjdC5rZXlzKHIucHJvcHN8fHt9KS5yZWR1Y2UoZnVuY3Rpb24odCxlKXt2YXIgbztyZXR1cm4gdFsobz1lLG8ucmVwbGFjZSgvLSguKS9nLGZ1bmN0aW9uKHIsdCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX0pKV09ci5wcm9wc1tlXSx0fSx7fSkpOnIudHlwZT10LnJlcGxhY2UoL1teYS16MC05LV0vaSwiIik7fXZhciBNYXJrdXAgPSAoZnVuY3Rpb24odCl7ZnVuY3Rpb24gaSgpe3QuYXBwbHkodGhpcyxhcmd1bWVudHMpO31yZXR1cm4gdCYmKGkuX19wcm90b19fPXQpLChpLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlKSkuY29uc3RydWN0b3I9aSxpLnNldFJldml2ZXI9ZnVuY3Rpb24ocil7YT1yO30saS5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uKHIpe3ZhciB0PXRoaXMucHJvcHM7cmV0dXJuIHIud3JhcCE9PXQud3JhcHx8ci50eXBlIT09dC50eXBlfHxyLm1hcmt1cCE9PXQubWFya3VwfSxpLnByb3RvdHlwZS5zZXRDb21wb25lbnRzPWZ1bmN0aW9uKHIpe2lmKHRoaXMubWFwPXt9LHIpZm9yKHZhciB0IGluIHIpaWYoci5oYXNPd25Qcm9wZXJ0eSh0KSl7dmFyIGU9dC5yZXBsYWNlKC8oW0EtWl0rKShbQS1aXVthLXowLTldKXwoW2EtejAtOV0rKShbQS1aXSkvZywiJDEkMy0kMiQ0IikudG9Mb3dlckNhc2UoKTt0aGlzLm1hcFtlXT1yW3RdO319LGkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbih0KXt2YXIgaT10LndyYXA7dm9pZCAwPT09aSYmKGk9ITApO3ZhciBzLHU9dC50eXBlLGM9dC5tYXJrdXAsbT10LmNvbXBvbmVudHMsdj10LnJldml2ZXIsZj10Lm9uRXJyb3IsZD10WyJhbGxvdy1zY3JpcHRzIl0saD10WyJhbGxvdy1ldmVudHMiXSx5PXQudHJpbSx3PWZ1bmN0aW9uKHIsdCl7dmFyIGU9e307Zm9yKHZhciBvIGluIHIpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsbykmJi0xPT09dC5pbmRleE9mKG8pJiYoZVtvXT1yW29dKTtyZXR1cm4gZX0odCxbIndyYXAiLCJ0eXBlIiwibWFya3VwIiwiY29tcG9uZW50cyIsInJldml2ZXIiLCJvbkVycm9yIiwiYWxsb3ctc2NyaXB0cyIsImFsbG93LWV2ZW50cyIsInRyaW0iXSksQz12fHx0aGlzLnJldml2ZXJ8fHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLnJldml2ZXJ8fGF8fHYkMTt0aGlzLnNldENvbXBvbmVudHMobSk7dmFyIGc9e2FsbG93U2NyaXB0czpkLGFsbG93RXZlbnRzOmgsdHJpbTp5fTt0cnl7cz1mdW5jdGlvbihyLHQsYSxpLHMpe3ZhciB1PWZ1bmN0aW9uKHIsdCl7dmFyIG8sbixhLGkscD0iaHRtbCI9PT10PyJ0ZXh0L2h0bWwiOiJhcHBsaWNhdGlvbi94bWwiOyJodG1sIj09PXQ/KGk9ImJvZHkiLGE9IjwhRE9DVFlQRSBodG1sPlxuPGh0bWw+PGJvZHk+IityKyI8L2JvZHk+PC9odG1sPiIpOihpPSJ4bWwiLGE9Jzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVURi04Ij8+XG48eG1sPicrcisiPC94bWw+Iik7dHJ5e289KG5ldyBET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyhhLHApO31jYXRjaChyKXtuPXI7fWlmKG98fCJodG1sIiE9PXR8fCgobz1lfHwoZT1mdW5jdGlvbigpe2lmKGRvY3VtZW50LmltcGxlbWVudGF0aW9uJiZkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQpcmV0dXJuIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgiIik7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaWZyYW1lIik7cmV0dXJuIHIuc3R5bGUuY3NzVGV4dD0icG9zaXRpb246YWJzb2x1dGU7IGxlZnQ6MDsgdG9wOi05OTllbTsgd2lkdGg6MXB4OyBoZWlnaHQ6MXB4OyBvdmVyZmxvdzpoaWRkZW47IixyLnNldEF0dHJpYnV0ZSgic2FuZGJveCIsImFsbG93LWZvcm1zIiksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyKSxyLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnR9KCkpKS5vcGVuKCksby53cml0ZShhKSxvLmNsb3NlKCkpLG8pe3ZhciBsPW8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoaSlbMF0scz1sLmZpcnN0Q2hpbGQ7cmV0dXJuIHImJiFzJiYobC5lcnJvcj0iRG9jdW1lbnQgcGFyc2UgZmFpbGVkLiIpLHMmJiJwYXJzZXJlcnJvciI9PT1TdHJpbmcocy5ub2RlTmFtZSkudG9Mb3dlckNhc2UoKSYmKHMucmVtb3ZlQ2hpbGQocy5maXJzdENoaWxkKSxzLnJlbW92ZUNoaWxkKHMubGFzdENoaWxkKSxsLmVycm9yPXMudGV4dENvbnRlbnR8fHMubm9kZVZhbHVlfHxufHwiVW5rbm93biBlcnJvciIsbC5yZW1vdmVDaGlsZChzKSksbH19KHIsdCk7aWYodSYmdS5lcnJvcil0aHJvdyBuZXcgRXJyb3IodS5lcnJvcik7dmFyIGM9dSYmdS5ib2R5fHx1O2wubWFwPWl8fHA7dmFyIG09YyYmZnVuY3Rpb24ocix0LGUsYSl7cmV0dXJuIG4udmlzaXRvcj10LG4uaD1lLG4ub3B0aW9ucz1hfHxvLG4ocil9KGMsbCxhLHMpO3JldHVybiBsLm1hcD1udWxsLG0mJm0ucHJvcHMmJm0ucHJvcHMuY2hpbGRyZW58fG51bGx9KGMsdSxDLHRoaXMubWFwLGcpO31jYXRjaChyKXtmP2Yoe2Vycm9yOnJ9KToidW5kZWZpbmVkIiE9dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUuZXJyb3ImJmNvbnNvbGUuZXJyb3IoInByZWFjdC1tYXJrdXA6ICIrcik7fWlmKCExPT09aSlyZXR1cm4gc3x8bnVsbDt2YXIgeD13Lmhhc093blByb3BlcnR5KCJjbGFzc05hbWUiKT8iY2xhc3NOYW1lIjoiY2xhc3MiLGI9d1t4XTtyZXR1cm4gYj9iLnNwbGljZT9iLnNwbGljZSgwLDAsIm1hcmt1cCIpOiJzdHJpbmciPT10eXBlb2YgYj93W3hdKz0iIG1hcmt1cCI6Im9iamVjdCI9PXR5cGVvZiBiJiYoYi5tYXJrdXA9ITApOndbeF09Im1hcmt1cCIsQygiZGl2Iix3LHN8fG51bGwpfSxpfShfJDEpKTsKCiAgY29uc3QgQ0xBU1NfUEFUVEVSTiA9IC9eY2xhc3NbIHtdLzsKCgogIC8qKgogICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuCiAgICoKICAgKiBAcmV0dXJuIHtib29sZWFufQogICAqLwogIGZ1bmN0aW9uIGlzQ2xhc3MoZm4pIHsKICAgIHJldHVybiBDTEFTU19QQVRURVJOLnRlc3QoZm4udG9TdHJpbmcoKSk7CiAgfQoKICAvKioKICAgKiBAcGFyYW0ge2FueX0gb2JqCiAgICoKICAgKiBAcmV0dXJuIHtib29sZWFufQogICAqLwogIGZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7CiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShvYmopOwogIH0KCiAgLyoqCiAgICogQHBhcmFtIHthbnl9IG9iagogICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wCiAgICoKICAgKiBAcmV0dXJuIHtib29sZWFufQogICAqLwogIGZ1bmN0aW9uIGhhc093blByb3Aob2JqLCBwcm9wKSB7CiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7CiAgfQoKICAvKioKICAgKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2luZGV4JykuSW5qZWN0QW5ub3RhdGVkIH0gSW5qZWN0QW5ub3RhdGVkCiAgICovCgogIC8qKgogICAqIEB0ZW1wbGF0ZSBUCiAgICoKICAgKiBAcGFyYW1zIHtbLi4uc3RyaW5nW10sIFRdIHwgLi4uc3RyaW5nW10sIFR9IGFyZ3MKICAgKgogICAqIEByZXR1cm4ge1QgJiBJbmplY3RBbm5vdGF0ZWR9CiAgICovCiAgZnVuY3Rpb24gYW5ub3RhdGUoLi4uYXJncykgewoKICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KGFyZ3NbMF0pKSB7CiAgICAgIGFyZ3MgPSBhcmdzWzBdOwogICAgfQoKICAgIGFyZ3MgPSBbIC4uLmFyZ3MgXTsKCiAgICBjb25zdCBmbiA9IGFyZ3MucG9wKCk7CgogICAgZm4uJGluamVjdCA9IGFyZ3M7CgogICAgcmV0dXJuIGZuOwogIH0KCgogIC8vIEN1cnJlbnQgbGltaXRhdGlvbnM6CiAgLy8gLSBjYW4ndCBwdXQgaW50byAiZnVuY3Rpb24gYXJnIiBjb21tZW50cwogIC8vIGZ1bmN0aW9uIC8qIChubyBwYXJlbnRoZXNpcyBsaWtlIHRoaXMpICovICgpe30KICAvLyBmdW5jdGlvbiBhYmMoIC8qIHh4IChubyBwYXJlbnRoZXNpcyBsaWtlIHRoaXMpICovIGEsIGIpIHt9CiAgLy8KICAvLyBKdXN0IHB1dCB0aGUgY29tbWVudCBiZWZvcmUgZnVuY3Rpb24gb3IgaW5zaWRlOgogIC8vIC8qICgoKHRoaXMgaXMgZmluZSkpKSAqLyBmdW5jdGlvbihhLCBiKSB7fQogIC8vIGZ1bmN0aW9uIGFiYyhhKSB7IC8qICgoKHRoaXMgaXMgZmluZSkpKSAqL30KICAvLwogIC8vIC0gY2FuJ3QgcmVsaWFibHkgYXV0by1hbm5vdGF0ZSBjb25zdHJ1Y3Rvcjsgd2UnbGwgbWF0Y2ggdGhlCiAgLy8gZmlyc3QgY29uc3RydWN0b3IoLi4uKSBwYXR0ZXJuIGZvdW5kIHdoaWNoIG1heSBiZSB0aGUgb25lCiAgLy8gb2YgYSBuZXN0ZWQgY2xhc3MsIHRvby4KCiAgY29uc3QgQ09OU1RSVUNUT1JfQVJHUyA9IC9jb25zdHJ1Y3RvclxzKlteKF0qXChccyooW14pXSopXCkvbTsKICBjb25zdCBGTl9BUkdTID0gL14oPzphc3luY1xzKyk/KD86ZnVuY3Rpb25ccypbXihdKik/KD86XChccyooW14pXSopXCl8KFx3KykpL207CiAgY29uc3QgRk5fQVJHID0gL1wvXCooW14qXSopXCpcLy9tOwoKICAvKioKICAgKiBAcGFyYW0ge3Vua25vd259IGZuCiAgICoKICAgKiBAcmV0dXJuIHtzdHJpbmdbXX0KICAgKi8KICBmdW5jdGlvbiBwYXJzZUFubm90YXRpb25zKGZuKSB7CgogICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgewogICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBhbm5vdGF0ZSAiJHtmbn0iLiBFeHBlY3RlZCBhIGZ1bmN0aW9uIWApOwogICAgfQoKICAgIGNvbnN0IG1hdGNoID0gZm4udG9TdHJpbmcoKS5tYXRjaChpc0NsYXNzKGZuKSA/IENPTlNUUlVDVE9SX0FSR1MgOiBGTl9BUkdTKTsKCiAgICAvLyBtYXkgcGFyc2UgY2xhc3Mgd2l0aG91dCBjb25zdHJ1Y3RvcgogICAgaWYgKCFtYXRjaCkgewogICAgICByZXR1cm4gW107CiAgICB9CgogICAgY29uc3QgYXJncyA9IG1hdGNoWzFdIHx8IG1hdGNoWzJdOwoKICAgIHJldHVybiBhcmdzICYmIGFyZ3Muc3BsaXQoJywnKS5tYXAoYXJnID0+IHsKICAgICAgY29uc3QgYXJnTWF0Y2ggPSBhcmcubWF0Y2goRk5fQVJHKTsKICAgICAgcmV0dXJuIChhcmdNYXRjaCAmJiBhcmdNYXRjaFsxXSB8fCBhcmcpLnRyaW0oKTsKICAgIH0pIHx8IFtdOwogIH0KCiAgLyoqCiAgICogQHR5cGVkZWYgeyBpbXBvcnQoJy4vaW5kZXgnKS5Nb2R1bGVEZWNsYXJhdGlvbiB9IE1vZHVsZURlY2xhcmF0aW9uCiAgICogQHR5cGVkZWYgeyBpbXBvcnQoJy4vaW5kZXgnKS5Nb2R1bGVEZWZpbml0aW9uIH0gTW9kdWxlRGVmaW5pdGlvbgogICAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuL2luZGV4JykuSW5qZWN0b3JDb250ZXh0IH0gSW5qZWN0b3JDb250ZXh0CiAgICovCgogIC8qKgogICAqIENyZWF0ZSBhIG5ldyBpbmplY3RvciB3aXRoIHRoZSBnaXZlbiBtb2R1bGVzLgogICAqCiAgICogQHBhcmFtIHtNb2R1bGVEZWZpbml0aW9uW119IG1vZHVsZXMKICAgKiBAcGFyYW0ge0luamVjdG9yQ29udGV4dH0gW3BhcmVudF0KICAgKi8KICBmdW5jdGlvbiBJbmplY3Rvcihtb2R1bGVzLCBwYXJlbnQpIHsKICAgIHBhcmVudCA9IHBhcmVudCB8fCB7CiAgICAgIGdldDogZnVuY3Rpb24obmFtZSwgc3RyaWN0KSB7CiAgICAgICAgY3VycmVudGx5UmVzb2x2aW5nLnB1c2gobmFtZSk7CgogICAgICAgIGlmIChzdHJpY3QgPT09IGZhbHNlKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgZXJyb3IoYE5vIHByb3ZpZGVyIGZvciAiJHsgbmFtZSB9IiFgKTsKICAgICAgICB9CiAgICAgIH0KICAgIH07CgogICAgY29uc3QgY3VycmVudGx5UmVzb2x2aW5nID0gW107CiAgICBjb25zdCBwcm92aWRlcnMgPSB0aGlzLl9wcm92aWRlcnMgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5fcHJvdmlkZXJzIHx8IG51bGwpOwogICAgY29uc3QgaW5zdGFuY2VzID0gdGhpcy5faW5zdGFuY2VzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKCiAgICBjb25zdCBzZWxmID0gaW5zdGFuY2VzLmluamVjdG9yID0gdGhpczsKCiAgICBjb25zdCBlcnJvciA9IGZ1bmN0aW9uKG1zZykgewogICAgICBjb25zdCBzdGFjayA9IGN1cnJlbnRseVJlc29sdmluZy5qb2luKCcgLT4gJyk7CiAgICAgIGN1cnJlbnRseVJlc29sdmluZy5sZW5ndGggPSAwOwogICAgICByZXR1cm4gbmV3IEVycm9yKHN0YWNrID8gYCR7IG1zZyB9IChSZXNvbHZpbmc6ICR7IHN0YWNrIH0pYCA6IG1zZyk7CiAgICB9OwoKICAgIC8qKgogICAgICogUmV0dXJuIGEgbmFtZWQgc2VydmljZS4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZQogICAgICogQHBhcmFtIHtib29sZWFufSBbc3RyaWN0PXRydWVdIGlmIGZhbHNlLCByZXNvbHZlIG1pc3Npbmcgc2VydmljZXMgdG8gbnVsbAogICAgICoKICAgICAqIEByZXR1cm4ge2FueX0KICAgICAqLwogICAgZnVuY3Rpb24gZ2V0KG5hbWUsIHN0cmljdCkgewogICAgICBpZiAoIXByb3ZpZGVyc1tuYW1lXSAmJiBuYW1lLmluZGV4T2YoJy4nKSAhPT0gLTEpIHsKICAgICAgICBjb25zdCBwYXJ0cyA9IG5hbWUuc3BsaXQoJy4nKTsKICAgICAgICBsZXQgcGl2b3QgPSBnZXQocGFydHMuc2hpZnQoKSk7CgogICAgICAgIHdoaWxlIChwYXJ0cy5sZW5ndGgpIHsKICAgICAgICAgIHBpdm90ID0gcGl2b3RbcGFydHMuc2hpZnQoKV07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcGl2b3Q7CiAgICAgIH0KCiAgICAgIGlmIChoYXNPd25Qcm9wKGluc3RhbmNlcywgbmFtZSkpIHsKICAgICAgICByZXR1cm4gaW5zdGFuY2VzW25hbWVdOwogICAgICB9CgogICAgICBpZiAoaGFzT3duUHJvcChwcm92aWRlcnMsIG5hbWUpKSB7CiAgICAgICAgaWYgKGN1cnJlbnRseVJlc29sdmluZy5pbmRleE9mKG5hbWUpICE9PSAtMSkgewogICAgICAgICAgY3VycmVudGx5UmVzb2x2aW5nLnB1c2gobmFtZSk7CiAgICAgICAgICB0aHJvdyBlcnJvcignQ2Fubm90IHJlc29sdmUgY2lyY3VsYXIgZGVwZW5kZW5jeSEnKTsKICAgICAgICB9CgogICAgICAgIGN1cnJlbnRseVJlc29sdmluZy5wdXNoKG5hbWUpOwogICAgICAgIGluc3RhbmNlc1tuYW1lXSA9IHByb3ZpZGVyc1tuYW1lXVswXShwcm92aWRlcnNbbmFtZV1bMV0pOwogICAgICAgIGN1cnJlbnRseVJlc29sdmluZy5wb3AoKTsKCiAgICAgICAgcmV0dXJuIGluc3RhbmNlc1tuYW1lXTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBhcmVudC5nZXQobmFtZSwgc3RyaWN0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBmbkRlZihmbiwgbG9jYWxzKSB7CgogICAgICBpZiAodHlwZW9mIGxvY2FscyA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBsb2NhbHMgPSB7fTsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIGlmIChpc0FycmF5KGZuKSkgewogICAgICAgICAgZm4gPSBhbm5vdGF0ZShmbi5zbGljZSgpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgZXJyb3IoYENhbm5vdCBpbnZva2UgIiR7IGZuIH0iLiBFeHBlY3RlZCBhIGZ1bmN0aW9uIWApOwogICAgICAgIH0KICAgICAgfQoKICAgICAgY29uc3QgaW5qZWN0ID0gZm4uJGluamVjdCB8fCBwYXJzZUFubm90YXRpb25zKGZuKTsKICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gaW5qZWN0Lm1hcChkZXAgPT4gewogICAgICAgIGlmIChoYXNPd25Qcm9wKGxvY2FscywgZGVwKSkgewogICAgICAgICAgcmV0dXJuIGxvY2Fsc1tkZXBdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gZ2V0KGRlcCk7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHJldHVybiB7CiAgICAgICAgZm46IGZuLAogICAgICAgIGRlcGVuZGVuY2llczogZGVwZW5kZW5jaWVzCiAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gaW5zdGFudGlhdGUoVHlwZSkgewogICAgICBjb25zdCB7CiAgICAgICAgZm4sCiAgICAgICAgZGVwZW5kZW5jaWVzCiAgICAgIH0gPSBmbkRlZihUeXBlKTsKCiAgICAgIC8vIGluc3RhbnRpYXRlIHZhciBhcmdzIGNvbnN0cnVjdG9yCiAgICAgIGNvbnN0IENvbnN0cnVjdG9yID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoZm4sIFsgbnVsbCBdLmNvbmNhdChkZXBlbmRlbmNpZXMpKTsKCiAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnZva2UoZnVuYywgY29udGV4dCwgbG9jYWxzKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBmbiwKICAgICAgICBkZXBlbmRlbmNpZXMKICAgICAgfSA9IGZuRGVmKGZ1bmMsIGxvY2Fscyk7CgogICAgICByZXR1cm4gZm4uYXBwbHkoY29udGV4dCwgZGVwZW5kZW5jaWVzKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBwYXJhbSB7SW5qZWN0b3J9IGNoaWxkSW5qZWN0b3IKICAgICAqCiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0KICAgICAqLwogICAgZnVuY3Rpb24gY3JlYXRlUHJpdmF0ZUluamVjdG9yRmFjdG9yeShjaGlsZEluamVjdG9yKSB7CiAgICAgIHJldHVybiBhbm5vdGF0ZShrZXkgPT4gY2hpbGRJbmplY3Rvci5nZXQoa2V5KSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAcGFyYW0ge01vZHVsZURlZmluaXRpb25bXX0gbW9kdWxlcwogICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW2ZvcmNlTmV3SW5zdGFuY2VzXQogICAgICoKICAgICAqIEByZXR1cm4ge0luamVjdG9yfQogICAgICovCiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZChtb2R1bGVzLCBmb3JjZU5ld0luc3RhbmNlcykgewogICAgICBpZiAoZm9yY2VOZXdJbnN0YW5jZXMgJiYgZm9yY2VOZXdJbnN0YW5jZXMubGVuZ3RoKSB7CiAgICAgICAgY29uc3QgZnJvbVBhcmVudE1vZHVsZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgICAgY29uc3QgbWF0Y2hlZFNjb3BlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CgogICAgICAgIGNvbnN0IHByaXZhdGVJbmplY3RvcnNDYWNoZSA9IFtdOwogICAgICAgIGNvbnN0IHByaXZhdGVDaGlsZEluamVjdG9ycyA9IFtdOwogICAgICAgIGNvbnN0IHByaXZhdGVDaGlsZEZhY3RvcmllcyA9IFtdOwoKICAgICAgICBsZXQgcHJvdmlkZXI7CiAgICAgICAgbGV0IGNhY2hlSWR4OwogICAgICAgIGxldCBwcml2YXRlQ2hpbGRJbmplY3RvcjsKICAgICAgICBsZXQgcHJpdmF0ZUNoaWxkSW5qZWN0b3JGYWN0b3J5OwoKICAgICAgICBmb3IgKGxldCBuYW1lIGluIHByb3ZpZGVycykgewogICAgICAgICAgcHJvdmlkZXIgPSBwcm92aWRlcnNbbmFtZV07CgogICAgICAgICAgaWYgKGZvcmNlTmV3SW5zdGFuY2VzLmluZGV4T2YobmFtZSkgIT09IC0xKSB7CiAgICAgICAgICAgIGlmIChwcm92aWRlclsyXSA9PT0gJ3ByaXZhdGUnKSB7CiAgICAgICAgICAgICAgY2FjaGVJZHggPSBwcml2YXRlSW5qZWN0b3JzQ2FjaGUuaW5kZXhPZihwcm92aWRlclszXSk7CiAgICAgICAgICAgICAgaWYgKGNhY2hlSWR4ID09PSAtMSkgewogICAgICAgICAgICAgICAgcHJpdmF0ZUNoaWxkSW5qZWN0b3IgPSBwcm92aWRlclszXS5jcmVhdGVDaGlsZChbXSwgZm9yY2VOZXdJbnN0YW5jZXMpOwogICAgICAgICAgICAgICAgcHJpdmF0ZUNoaWxkSW5qZWN0b3JGYWN0b3J5ID0gY3JlYXRlUHJpdmF0ZUluamVjdG9yRmFjdG9yeShwcml2YXRlQ2hpbGRJbmplY3Rvcik7CiAgICAgICAgICAgICAgICBwcml2YXRlSW5qZWN0b3JzQ2FjaGUucHVzaChwcm92aWRlclszXSk7CiAgICAgICAgICAgICAgICBwcml2YXRlQ2hpbGRJbmplY3RvcnMucHVzaChwcml2YXRlQ2hpbGRJbmplY3Rvcik7CiAgICAgICAgICAgICAgICBwcml2YXRlQ2hpbGRGYWN0b3JpZXMucHVzaChwcml2YXRlQ2hpbGRJbmplY3RvckZhY3RvcnkpOwogICAgICAgICAgICAgICAgZnJvbVBhcmVudE1vZHVsZVtuYW1lXSA9IFsgcHJpdmF0ZUNoaWxkSW5qZWN0b3JGYWN0b3J5LCBuYW1lLCAncHJpdmF0ZScsIHByaXZhdGVDaGlsZEluamVjdG9yIF07CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZyb21QYXJlbnRNb2R1bGVbbmFtZV0gPSBbIHByaXZhdGVDaGlsZEZhY3Rvcmllc1tjYWNoZUlkeF0sIG5hbWUsICdwcml2YXRlJywgcHJpdmF0ZUNoaWxkSW5qZWN0b3JzW2NhY2hlSWR4XSBdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBmcm9tUGFyZW50TW9kdWxlW25hbWVdID0gWyBwcm92aWRlclsyXSwgcHJvdmlkZXJbMV0gXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBtYXRjaGVkU2NvcGVzW25hbWVdID0gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoKHByb3ZpZGVyWzJdID09PSAnZmFjdG9yeScgfHwgcHJvdmlkZXJbMl0gPT09ICd0eXBlJykgJiYgcHJvdmlkZXJbMV0uJHNjb3BlKSB7CiAgICAgICAgICAgIC8qIGpzaGludCAtVzA4MyAqLwogICAgICAgICAgICBmb3JjZU5ld0luc3RhbmNlcy5mb3JFYWNoKHNjb3BlID0+IHsKICAgICAgICAgICAgICBpZiAocHJvdmlkZXJbMV0uJHNjb3BlLmluZGV4T2Yoc2NvcGUpICE9PSAtMSkgewogICAgICAgICAgICAgICAgZnJvbVBhcmVudE1vZHVsZVtuYW1lXSA9IFsgcHJvdmlkZXJbMl0sIHByb3ZpZGVyWzFdIF07CiAgICAgICAgICAgICAgICBtYXRjaGVkU2NvcGVzW3Njb3BlXSA9IHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZvcmNlTmV3SW5zdGFuY2VzLmZvckVhY2goc2NvcGUgPT4gewogICAgICAgICAgaWYgKCFtYXRjaGVkU2NvcGVzW3Njb3BlXSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHByb3ZpZGVyIGZvciAiJyArIHNjb3BlICsgJyIuIENhbm5vdCB1c2UgcHJvdmlkZXIgZnJvbSB0aGUgcGFyZW50IScpOwogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBtb2R1bGVzLnVuc2hpZnQoZnJvbVBhcmVudE1vZHVsZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBuZXcgSW5qZWN0b3IobW9kdWxlcywgc2VsZik7CiAgICB9CgogICAgY29uc3QgZmFjdG9yeU1hcCA9IHsKICAgICAgZmFjdG9yeTogaW52b2tlLAogICAgICB0eXBlOiBpbnN0YW50aWF0ZSwKICAgICAgdmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogQHBhcmFtIHtNb2R1bGVEZWZpbml0aW9ufSBtb2R1bGVEZWZpbml0aW9uCiAgICAgKiBAcGFyYW0ge0luamVjdG9yfSBpbmplY3RvcgogICAgICovCiAgICBmdW5jdGlvbiBjcmVhdGVJbml0aWFsaXplcihtb2R1bGVEZWZpbml0aW9uLCBpbmplY3RvcikgewoKICAgICAgY29uc3QgaW5pdGlhbGl6ZXJzID0gbW9kdWxlRGVmaW5pdGlvbi5fX2luaXRfXyB8fCBbXTsKCiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICBpbml0aWFsaXplcnMuZm9yRWFjaChpbml0aWFsaXplciA9PiB7CgogICAgICAgICAgLy8gZWFnZXJseSByZXNvbHZlIGNvbXBvbmVudCAoZm4gb3Igc3RyaW5nKQogICAgICAgICAgaWYgKHR5cGVvZiBpbml0aWFsaXplciA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgaW5qZWN0b3IuZ2V0KGluaXRpYWxpemVyKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGluamVjdG9yLmludm9rZShpbml0aWFsaXplcik7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBAcGFyYW0ge01vZHVsZURlZmluaXRpb259IG1vZHVsZURlZmluaXRpb24KICAgICAqLwogICAgZnVuY3Rpb24gbG9hZE1vZHVsZShtb2R1bGVEZWZpbml0aW9uKSB7CgogICAgICBjb25zdCBtb2R1bGVFeHBvcnRzID0gbW9kdWxlRGVmaW5pdGlvbi5fX2V4cG9ydHNfXzsKCiAgICAgIC8vIHByaXZhdGUgbW9kdWxlCiAgICAgIGlmIChtb2R1bGVFeHBvcnRzKSB7CiAgICAgICAgY29uc3QgbmVzdGVkTW9kdWxlcyA9IG1vZHVsZURlZmluaXRpb24uX19tb2R1bGVzX187CgogICAgICAgIGNvbnN0IGNsb25lZE1vZHVsZSA9IE9iamVjdC5rZXlzKG1vZHVsZURlZmluaXRpb24pLnJlZHVjZSgoY2xvbmVkTW9kdWxlLCBrZXkpID0+IHsKCiAgICAgICAgICBpZiAoa2V5ICE9PSAnX19leHBvcnRzX18nICYmIGtleSAhPT0gJ19fbW9kdWxlc19fJyAmJiBrZXkgIT09ICdfX2luaXRfXycgJiYga2V5ICE9PSAnX19kZXBlbmRzX18nKSB7CiAgICAgICAgICAgIGNsb25lZE1vZHVsZVtrZXldID0gbW9kdWxlRGVmaW5pdGlvbltrZXldOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBjbG9uZWRNb2R1bGU7CiAgICAgICAgfSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7CgogICAgICAgIGNvbnN0IGNoaWxkTW9kdWxlcyA9IChuZXN0ZWRNb2R1bGVzIHx8IFtdKS5jb25jYXQoY2xvbmVkTW9kdWxlKTsKCiAgICAgICAgY29uc3QgcHJpdmF0ZUluamVjdG9yID0gY3JlYXRlQ2hpbGQoY2hpbGRNb2R1bGVzKTsKICAgICAgICBjb25zdCBnZXRGcm9tUHJpdmF0ZUluamVjdG9yID0gYW5ub3RhdGUoZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICByZXR1cm4gcHJpdmF0ZUluamVjdG9yLmdldChrZXkpOwogICAgICAgIH0pOwoKICAgICAgICBtb2R1bGVFeHBvcnRzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICBwcm92aWRlcnNba2V5XSA9IFsgZ2V0RnJvbVByaXZhdGVJbmplY3Rvciwga2V5LCAncHJpdmF0ZScsIHByaXZhdGVJbmplY3RvciBdOwogICAgICAgIH0pOwoKICAgICAgICAvLyBlbnN1cmUgY2hpbGQgaW5qZWN0b3IgaW5pdGlhbGl6ZXMKICAgICAgICBjb25zdCBpbml0aWFsaXplcnMgPSAobW9kdWxlRGVmaW5pdGlvbi5fX2luaXRfXyB8fCBbXSkuc2xpY2UoKTsKCiAgICAgICAgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoZnVuY3Rpb24oKSB7CiAgICAgICAgICBwcml2YXRlSW5qZWN0b3IuaW5pdCgpOwogICAgICAgIH0pOwoKICAgICAgICBtb2R1bGVEZWZpbml0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgbW9kdWxlRGVmaW5pdGlvbiwgewogICAgICAgICAgX19pbml0X186IGluaXRpYWxpemVycwogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gY3JlYXRlSW5pdGlhbGl6ZXIobW9kdWxlRGVmaW5pdGlvbiwgcHJpdmF0ZUluamVjdG9yKTsKICAgICAgfQoKICAgICAgLy8gbm9ybWFsIG1vZHVsZQogICAgICBPYmplY3Qua2V5cyhtb2R1bGVEZWZpbml0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgewoKICAgICAgICBpZiAoa2V5ID09PSAnX19pbml0X18nIHx8IGtleSA9PT0gJ19fZGVwZW5kc19fJykgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKG1vZHVsZURlZmluaXRpb25ba2V5XVsyXSA9PT0gJ3ByaXZhdGUnKSB7CiAgICAgICAgICBwcm92aWRlcnNba2V5XSA9IG1vZHVsZURlZmluaXRpb25ba2V5XTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHR5cGUgPSBtb2R1bGVEZWZpbml0aW9uW2tleV1bMF07CiAgICAgICAgY29uc3QgdmFsdWUgPSBtb2R1bGVEZWZpbml0aW9uW2tleV1bMV07CgogICAgICAgIHByb3ZpZGVyc1trZXldID0gWyBmYWN0b3J5TWFwW3R5cGVdLCBhcnJheVVud3JhcCh0eXBlLCB2YWx1ZSksIHR5cGUgXTsKICAgICAgfSk7CgogICAgICByZXR1cm4gY3JlYXRlSW5pdGlhbGl6ZXIobW9kdWxlRGVmaW5pdGlvbiwgc2VsZik7CiAgICB9CgogICAgLyoqCiAgICAgKiBAcGFyYW0ge01vZHVsZURlZmluaXRpb25bXX0gbW9kdWxlRGVmaW5pdGlvbnMKICAgICAqIEBwYXJhbSB7TW9kdWxlRGVmaW5pdGlvbn0gbW9kdWxlRGVmaW5pdGlvbgogICAgICoKICAgICAqIEByZXR1cm4ge01vZHVsZURlZmluaXRpb25bXX0KICAgICAqLwogICAgZnVuY3Rpb24gcmVzb2x2ZURlcGVuZGVuY2llcyhtb2R1bGVEZWZpbml0aW9ucywgbW9kdWxlRGVmaW5pdGlvbikgewoKICAgICAgaWYgKG1vZHVsZURlZmluaXRpb25zLmluZGV4T2YobW9kdWxlRGVmaW5pdGlvbikgIT09IC0xKSB7CiAgICAgICAgcmV0dXJuIG1vZHVsZURlZmluaXRpb25zOwogICAgICB9CgogICAgICBtb2R1bGVEZWZpbml0aW9ucyA9IChtb2R1bGVEZWZpbml0aW9uLl9fZGVwZW5kc19fIHx8IFtdKS5yZWR1Y2UocmVzb2x2ZURlcGVuZGVuY2llcywgbW9kdWxlRGVmaW5pdGlvbnMpOwoKICAgICAgaWYgKG1vZHVsZURlZmluaXRpb25zLmluZGV4T2YobW9kdWxlRGVmaW5pdGlvbikgIT09IC0xKSB7CiAgICAgICAgcmV0dXJuIG1vZHVsZURlZmluaXRpb25zOwogICAgICB9CgogICAgICByZXR1cm4gbW9kdWxlRGVmaW5pdGlvbnMuY29uY2F0KG1vZHVsZURlZmluaXRpb24pOwogICAgfQoKICAgIC8qKgogICAgICogQHBhcmFtIHtNb2R1bGVEZWZpbml0aW9uW119IG1vZHVsZURlZmluaXRpb25zCiAgICAgKgogICAgICogQHJldHVybiB7ICgpID0+IHZvaWQgfSBpbml0aWFsaXplckZuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJvb3RzdHJhcChtb2R1bGVEZWZpbml0aW9ucykgewoKICAgICAgY29uc3QgaW5pdGlhbGl6ZXJzID0gbW9kdWxlRGVmaW5pdGlvbnMKICAgICAgICAucmVkdWNlKHJlc29sdmVEZXBlbmRlbmNpZXMsIFtdKQogICAgICAgIC5tYXAobG9hZE1vZHVsZSk7CgogICAgICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTsKCiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKCiAgICAgICAgaWYgKGluaXRpYWxpemVkKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7CgogICAgICAgIGluaXRpYWxpemVycy5mb3JFYWNoKGluaXRpYWxpemVyID0+IGluaXRpYWxpemVyKCkpOwogICAgICB9OwogICAgfQoKICAgIC8vIHB1YmxpYyBBUEkKICAgIHRoaXMuZ2V0ID0gZ2V0OwogICAgdGhpcy5pbnZva2UgPSBpbnZva2U7CiAgICB0aGlzLmluc3RhbnRpYXRlID0gaW5zdGFudGlhdGU7CiAgICB0aGlzLmNyZWF0ZUNoaWxkID0gY3JlYXRlQ2hpbGQ7CgogICAgLy8gc2V0dXAKICAgIHRoaXMuaW5pdCA9IGJvb3RzdHJhcChtb2R1bGVzKTsKICB9CgoKICAvLyBoZWxwZXJzIC8vLy8vLy8vLy8vLy8vLwoKICBmdW5jdGlvbiBhcnJheVVud3JhcCh0eXBlLCB2YWx1ZSkgewogICAgaWYgKHR5cGUgIT09ICd2YWx1ZScgJiYgaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgdmFsdWUgPSBhbm5vdGF0ZSh2YWx1ZS5zbGljZSgpKTsKICAgIH0KCiAgICByZXR1cm4gdmFsdWU7CiAgfQoKICAvKioKICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBDb25kaXRpb24KICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2hpZGVdCiAgICovCgogIGNsYXNzIENvbmRpdGlvbkNoZWNrZXIgewogICAgY29uc3RydWN0b3IoZm9ybUZpZWxkUmVnaXN0cnksIGV2ZW50QnVzKSB7CiAgICAgIHRoaXMuX2Zvcm1GaWVsZFJlZ2lzdHJ5ID0gZm9ybUZpZWxkUmVnaXN0cnk7CiAgICAgIHRoaXMuX2V2ZW50QnVzID0gZXZlbnRCdXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBGb3IgZ2l2ZW4gZGF0YSwgcmVtb3ZlIHByb3BlcnRpZXMgYmFzZWQgb24gY29uZGl0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcHJvcGVydGllcwogICAgICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBkYXRhCiAgICAgKi8KICAgIGFwcGx5Q29uZGl0aW9ucyhwcm9wZXJ0aWVzLCBkYXRhID0ge30pIHsKICAgICAgY29uc3QgY29uZGl0aW9ucyA9IHRoaXMuX2dldENvbmRpdGlvbnMoKTsKICAgICAgY29uc3QgbmV3UHJvcGVydGllcyA9IHsKICAgICAgICAuLi5wcm9wZXJ0aWVzCiAgICAgIH07CiAgICAgIGZvciAoY29uc3QgewogICAgICAgIGtleSwKICAgICAgICBjb25kaXRpb24KICAgICAgfSBvZiBjb25kaXRpb25zKSB7CiAgICAgICAgY29uc3Qgc2hvdWxkUmVtb3ZlID0gdGhpcy5fY2hlY2tIaWRlQ29uZGl0aW9uKGNvbmRpdGlvbiwgZGF0YSk7CiAgICAgICAgaWYgKHNob3VsZFJlbW92ZSkgewogICAgICAgICAgZGVsZXRlIG5ld1Byb3BlcnRpZXNba2V5XTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG5ld1Byb3BlcnRpZXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVjayBpZiBnaXZlbiBjb25kaXRpb24gaXMgbWV0LiBSZXR1cm5zIG51bGwgZm9yIGludmFsaWQvbWlzc2luZyBjb25kaXRpb25zLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb25kaXRpb24KICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuLi90eXBlcycpLkRhdGF9IFtkYXRhXQogICAgICoKICAgICAqIEByZXR1cm5zIHtib29sZWFufG51bGx9CiAgICAgKi8KICAgIGNoZWNrKGNvbmRpdGlvbiwgZGF0YSA9IHt9KSB7CiAgICAgIGlmICghY29uZGl0aW9uKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgaWYgKCFpc1N0cmluZyQyKGNvbmRpdGlvbikgfHwgIWNvbmRpdGlvbi5zdGFydHNXaXRoKCc9JykpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICB0cnkgewogICAgICAgIC8vIGN1dCBvZmYgaW5pdGlhbCAnPScKICAgICAgICBjb25zdCByZXN1bHQgPSB1bmFyeVRlc3QoY29uZGl0aW9uLnNsaWNlKDEpLCBkYXRhKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIHRoaXMuX2V2ZW50QnVzLmZpcmUoJ2Vycm9yJywgewogICAgICAgICAgZXJyb3IKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2sgaWYgaGlkZSBjb25kaXRpb24gaXMgbWV0LgogICAgICoKICAgICAqIEBwYXJhbSB7Q29uZGl0aW9ufSBjb25kaXRpb24KICAgICAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gZGF0YQogICAgICogQHJldHVybnMge2Jvb2xlYW59CiAgICAgKi8KICAgIF9jaGVja0hpZGVDb25kaXRpb24oY29uZGl0aW9uLCBkYXRhKSB7CiAgICAgIGlmICghY29uZGl0aW9uLmhpZGUpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jaGVjayhjb25kaXRpb24uaGlkZSwgZGF0YSk7CiAgICAgIHJldHVybiByZXN1bHQgPT09IHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBFdmFsdWF0ZSBhbiBleHByZXNzaW9uLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uCiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vdHlwZXMnKS5EYXRhfSBbZGF0YV0KICAgICAqCiAgICAgKiBAcmV0dXJucyB7YW55fQogICAgICovCiAgICBldmFsdWF0ZShleHByZXNzaW9uLCBkYXRhID0ge30pIHsKICAgICAgaWYgKCFleHByZXNzaW9uKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgaWYgKCFpc1N0cmluZyQyKGV4cHJlc3Npb24pIHx8ICFleHByZXNzaW9uLnN0YXJ0c1dpdGgoJz0nKSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcmVzdWx0ID0gZXZhbHVhdGUoZXhwcmVzc2lvbi5zbGljZSgxKSwgZGF0YSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICB0aGlzLl9ldmVudEJ1cy5maXJlKCdlcnJvcicsIHsKICAgICAgICAgIGVycm9yCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0KICAgIF9nZXRDb25kaXRpb25zKCkgewogICAgICBjb25zdCBmb3JtRmllbGRzID0gdGhpcy5fZm9ybUZpZWxkUmVnaXN0cnkuZ2V0QWxsKCk7CiAgICAgIHJldHVybiBmb3JtRmllbGRzLnJlZHVjZSgoY29uZGl0aW9ucywgZm9ybUZpZWxkKSA9PiB7CiAgICAgICAgY29uc3QgewogICAgICAgICAga2V5LAogICAgICAgICAgY29uZGl0aW9uYWw6IGNvbmRpdGlvbgogICAgICAgIH0gPSBmb3JtRmllbGQ7CiAgICAgICAgaWYgKGtleSAmJiBjb25kaXRpb24pIHsKICAgICAgICAgIHJldHVybiBbLi4uY29uZGl0aW9ucywgewogICAgICAgICAgICBrZXksCiAgICAgICAgICAgIGNvbmRpdGlvbgogICAgICAgICAgfV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBjb25kaXRpb25zOwogICAgICB9LCBbXSk7CiAgICB9CiAgfQogIENvbmRpdGlvbkNoZWNrZXIuJGluamVjdCA9IFsnZm9ybUZpZWxkUmVnaXN0cnknLCAnZXZlbnRCdXMnXTsKCiAgdmFyIEZOX1JFRiA9ICdfX2ZuJzsKICB2YXIgREVGQVVMVF9QUklPUklUWSA9IDEwMDA7CiAgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlOwoKICAvKioKICAgKiBBIGdlbmVyYWwgcHVycG9zZSBldmVudCBidXMuCiAgICoKICAgKiBUaGlzIGNvbXBvbmVudCBpcyB1c2VkIHRvIGNvbW11bmljYXRlIGFjcm9zcyBhIGRpYWdyYW0gaW5zdGFuY2UuCiAgICogT3RoZXIgcGFydHMgb2YgYSBkaWFncmFtIGNhbiB1c2UgaXQgdG8gbGlzdGVuIHRvIGFuZCBicm9hZGNhc3QgZXZlbnRzLgogICAqCiAgICoKICAgKiAjIyBSZWdpc3RlcmluZyBmb3IgRXZlbnRzCiAgICoKICAgKiBUaGUgZXZlbnQgYnVzIHByb3ZpZGVzIHRoZSB7QGxpbmsgRXZlbnRCdXMjb259IGFuZCB7QGxpbmsgRXZlbnRCdXMjb25jZX0KICAgKiBtZXRob2RzIHRvIHJlZ2lzdGVyIGZvciBldmVudHMuIHtAbGluayBFdmVudEJ1cyNvZmZ9IGNhbiBiZSB1c2VkIHRvCiAgICogcmVtb3ZlIGV2ZW50IHJlZ2lzdHJhdGlvbnMuIExpc3RlbmVycyByZWNlaXZlIGFuIGluc3RhbmNlIG9mIHtAbGluayBFdmVudH0KICAgKiBhcyB0aGUgZmlyc3QgYXJndW1lbnQuIEl0IGFsbG93cyB0aGVtIHRvIGhvb2sgaW50byB0aGUgZXZlbnQgZXhlY3V0aW9uLgogICAqCiAgICogYGBgamF2YXNjcmlwdAogICAqCiAgICogLy8gbGlzdGVuIGZvciBldmVudAogICAqIGV2ZW50QnVzLm9uKCdmb28nLCBmdW5jdGlvbihldmVudCkgewogICAqCiAgICogICAvLyBhY2Nlc3MgZXZlbnQgdHlwZQogICAqICAgZXZlbnQudHlwZTsgLy8gJ2ZvbycKICAgKgogICAqICAgLy8gc3RvcCBwcm9wYWdhdGlvbiB0byBvdGhlciBsaXN0ZW5lcnMKICAgKiAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAqCiAgICogICAvLyBwcmV2ZW50IGV2ZW50IGRlZmF1bHQKICAgKiAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICogfSk7CiAgICoKICAgKiAvLyBsaXN0ZW4gZm9yIGV2ZW50IHdpdGggY3VzdG9tIHBheWxvYWQKICAgKiBldmVudEJ1cy5vbignYmFyJywgZnVuY3Rpb24oZXZlbnQsIHBheWxvYWQpIHsKICAgKiAgIGNvbnNvbGUubG9nKHBheWxvYWQpOwogICAqIH0pOwogICAqCiAgICogLy8gbGlzdGVuIGZvciBldmVudCByZXR1cm5pbmcgdmFsdWUKICAgKiBldmVudEJ1cy5vbignZm9vYmFyJywgZnVuY3Rpb24oZXZlbnQpIHsKICAgKgogICAqICAgLy8gc3RvcCBldmVudCBwcm9wYWdhdGlvbiArIHByZXZlbnQgZGVmYXVsdAogICAqICAgcmV0dXJuIGZhbHNlOwogICAqCiAgICogICAvLyBzdG9wIGV2ZW50IHByb3BhZ2F0aW9uICsgcmV0dXJuIGN1c3RvbSByZXN1bHQKICAgKiAgIHJldHVybiB7CiAgICogICAgIGNvbXBsZXg6ICdsaXN0ZW5pbmcgcmVzdWx0JwogICAqICAgfTsKICAgKiB9KTsKICAgKgogICAqCiAgICogLy8gbGlzdGVuIHdpdGggY3VzdG9tIHByaW9yaXR5IChkZWZhdWx0PTEwMDAsIGhpZ2hlciBpcyBiZXR0ZXIpCiAgICogZXZlbnRCdXMub24oJ3ByaW9yaXR5Zm9vJywgMTUwMCwgZnVuY3Rpb24oZXZlbnQpIHsKICAgKiAgIGNvbnNvbGUubG9nKCdpbnZva2VkIGZpcnN0IScpOwogICAqIH0pOwogICAqCiAgICoKICAgKiAvLyBsaXN0ZW4gZm9yIGV2ZW50IGFuZCBwYXNzIHRoZSBjb250ZXh0IChgdGhpc2ApCiAgICogZXZlbnRCdXMub24oJ2Zvb2JhcicsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICogICB0aGlzLmZvbygpOwogICAqIH0sIHRoaXMpOwogICAqIGBgYAogICAqCiAgICoKICAgKiAjIyBFbWl0dGluZyBFdmVudHMKICAgKgogICAqIEV2ZW50cyBjYW4gYmUgZW1pdHRlZCB2aWEgdGhlIGV2ZW50IGJ1cyB1c2luZyB7QGxpbmsgRXZlbnRCdXMjZmlyZX0uCiAgICoKICAgKiBgYGBqYXZhc2NyaXB0CiAgICoKICAgKiAvLyBmYWxzZSBpbmRpY2F0ZXMgdGhhdCB0aGUgZGVmYXVsdCBhY3Rpb24KICAgKiAvLyB3YXMgcHJldmVudGVkIGJ5IGxpc3RlbmVycwogICAqIGlmIChldmVudEJ1cy5maXJlKCdmb28nKSA9PT0gZmFsc2UpIHsKICAgKiAgIGNvbnNvbGUubG9nKCdkZWZhdWx0IGhhcyBiZWVuIHByZXZlbnRlZCEnKTsKICAgKiB9OwogICAqCiAgICoKICAgKiAvLyBjdXN0b20gYXJncyArIHJldHVybiB2YWx1ZSBsaXN0ZW5lcgogICAqIGV2ZW50QnVzLm9uKCdzdW0nLCBmdW5jdGlvbihldmVudCwgYSwgYikgewogICAqICAgcmV0dXJuIGEgKyBiOwogICAqIH0pOwogICAqCiAgICogLy8geW91IGNhbiBwYXNzIGN1c3RvbSBhcmd1bWVudHMgKyByZXRyaWV2ZSByZXN1bHQgdmFsdWVzLgogICAqIHZhciBzdW0gPSBldmVudEJ1cy5maXJlKCdzdW0nLCAxLCAyKTsKICAgKiBjb25zb2xlLmxvZyhzdW0pOyAvLyAzCiAgICogYGBgCiAgICovCiAgZnVuY3Rpb24gRXZlbnRCdXMoKSB7CiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTsKCiAgICAvLyBjbGVhbnVwIG9uIGRlc3Ryb3kgb24gbG93ZXN0IHByaW9yaXR5IHRvIGFsbG93CiAgICAvLyBtZXNzYWdlIHBhc3NpbmcgdW50aWwgdGhlIGJpdHRlciBlbmQKICAgIHRoaXMub24oJ2RpYWdyYW0uZGVzdHJveScsIDEsIHRoaXMuX2Rlc3Ryb3ksIHRoaXMpOwogIH0KCiAgLyoqCiAgICogUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIGV2ZW50cyB3aXRoIHRoZSBnaXZlbiBuYW1lLgogICAqCiAgICogVGhlIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCB3aXRoIGBldmVudCwgLi4uYWRkaXRpb25hbEFyZ3VtZW50c2AKICAgKiB0aGF0IGhhdmUgYmVlbiBwYXNzZWQgdG8ge0BsaW5rIEV2ZW50QnVzI2ZpcmV9LgogICAqCiAgICogUmV0dXJuaW5nIGZhbHNlIGZyb20gYSBsaXN0ZW5lciB3aWxsIHByZXZlbnQgdGhlIGV2ZW50cyBkZWZhdWx0IGFjdGlvbgogICAqIChpZiBhbnkgaXMgc3BlY2lmaWVkKS4gVG8gc3RvcCBhbiBldmVudCBmcm9tIGJlaW5nIHByb2Nlc3NlZCBmdXJ0aGVyIGluCiAgICogb3RoZXIgbGlzdGVuZXJzIGV4ZWN1dGUge0BsaW5rIEV2ZW50I3N0b3BQcm9wYWdhdGlvbn0uCiAgICoKICAgKiBSZXR1cm5pbmcgYW55dGhpbmcgYnV0IGB1bmRlZmluZWRgIGZyb20gYSBsaXN0ZW5lciB3aWxsIHN0b3AgdGhlIGxpc3RlbmVyIHByb3BhZ2F0aW9uLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8c3RyaW5nPn0gZXZlbnRzCiAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmlvcml0eT0xMDAwXSB0aGUgcHJpb3JpdHkgaW4gd2hpY2ggdGhpcyBsaXN0ZW5lciBpcyBjYWxsZWQsIGxhcmdlciBpcyBoaWdoZXIKICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjawogICAqIEBwYXJhbSB7T2JqZWN0fSBbdGhhdF0gUGFzcyBjb250ZXh0IChgdGhpc2ApIHRvIHRoZSBjYWxsYmFjawogICAqLwogIEV2ZW50QnVzLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudHMsIHByaW9yaXR5LCBjYWxsYmFjaywgdGhhdCkgewogICAgZXZlbnRzID0gaXNBcnJheSQyKGV2ZW50cykgPyBldmVudHMgOiBbZXZlbnRzXTsKICAgIGlmIChpc0Z1bmN0aW9uKHByaW9yaXR5KSkgewogICAgICB0aGF0ID0gY2FsbGJhY2s7CiAgICAgIGNhbGxiYWNrID0gcHJpb3JpdHk7CiAgICAgIHByaW9yaXR5ID0gREVGQVVMVF9QUklPUklUWTsKICAgIH0KICAgIGlmICghaXNOdW1iZXIkMihwcmlvcml0eSkpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcmlvcml0eSBtdXN0IGJlIGEgbnVtYmVyJyk7CiAgICB9CiAgICB2YXIgYWN0dWFsQ2FsbGJhY2sgPSBjYWxsYmFjazsKICAgIGlmICh0aGF0KSB7CiAgICAgIGFjdHVhbENhbGxiYWNrID0gYmluZChjYWxsYmFjaywgdGhhdCk7CgogICAgICAvLyBtYWtlIHN1cmUgd2UgcmVtZW1iZXIgYW5kIGFyZSBhYmxlIHRvIHJlbW92ZQogICAgICAvLyBib3VuZCBjYWxsYmFja3MgdmlhIHtAbGluayAjb2ZmfSB1c2luZyB0aGUgb3JpZ2luYWwKICAgICAgLy8gY2FsbGJhY2sKICAgICAgYWN0dWFsQ2FsbGJhY2tbRk5fUkVGXSA9IGNhbGxiYWNrW0ZOX1JFRl0gfHwgY2FsbGJhY2s7CiAgICB9CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkgewogICAgICBzZWxmLl9hZGRMaXN0ZW5lcihlLCB7CiAgICAgICAgcHJpb3JpdHk6IHByaW9yaXR5LAogICAgICAgIGNhbGxiYWNrOiBhY3R1YWxDYWxsYmFjaywKICAgICAgICBuZXh0OiBudWxsCiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgLyoqCiAgICogUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBpcyBleGVjdXRlZCBvbmx5IG9uY2UuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgdGhlIGV2ZW50IG5hbWUgdG8gcmVnaXN0ZXIgZm9yCiAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmlvcml0eT0xMDAwXSB0aGUgcHJpb3JpdHkgaW4gd2hpY2ggdGhpcyBsaXN0ZW5lciBpcyBjYWxsZWQsIGxhcmdlciBpcyBoaWdoZXIKICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgdG8gZXhlY3V0ZQogICAqIEBwYXJhbSB7T2JqZWN0fSBbdGhhdF0gUGFzcyBjb250ZXh0IChgdGhpc2ApIHRvIHRoZSBjYWxsYmFjawogICAqLwogIEV2ZW50QnVzLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBwcmlvcml0eSwgY2FsbGJhY2ssIHRoYXQpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGlmIChpc0Z1bmN0aW9uKHByaW9yaXR5KSkgewogICAgICB0aGF0ID0gY2FsbGJhY2s7CiAgICAgIGNhbGxiYWNrID0gcHJpb3JpdHk7CiAgICAgIHByaW9yaXR5ID0gREVGQVVMVF9QUklPUklUWTsKICAgIH0KICAgIGlmICghaXNOdW1iZXIkMihwcmlvcml0eSkpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcmlvcml0eSBtdXN0IGJlIGEgbnVtYmVyJyk7CiAgICB9CiAgICBmdW5jdGlvbiB3cmFwcGVkQ2FsbGJhY2soKSB7CiAgICAgIHdyYXBwZWRDYWxsYmFjay5fX2lzVG9tYiA9IHRydWU7CiAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjay5hcHBseSh0aGF0LCBhcmd1bWVudHMpOwogICAgICBzZWxmLm9mZihldmVudCwgd3JhcHBlZENhbGxiYWNrKTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvLyBtYWtlIHN1cmUgd2UgcmVtZW1iZXIgYW5kIGFyZSBhYmxlIHRvIHJlbW92ZQogICAgLy8gYm91bmQgY2FsbGJhY2tzIHZpYSB7QGxpbmsgI29mZn0gdXNpbmcgdGhlIG9yaWdpbmFsCiAgICAvLyBjYWxsYmFjawogICAgd3JhcHBlZENhbGxiYWNrW0ZOX1JFRl0gPSBjYWxsYmFjazsKICAgIHRoaXMub24oZXZlbnQsIHByaW9yaXR5LCB3cmFwcGVkQ2FsbGJhY2spOwogIH07CgogIC8qKgogICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGJ5IGV2ZW50IGFuZCBjYWxsYmFjay4KICAgKgogICAqIElmIG5vIGNhbGxiYWNrIGlzIGdpdmVuLCBhbGwgbGlzdGVuZXJzIGZvciBhIGdpdmVuIGV2ZW50IG5hbWUgYXJlIGJlaW5nIHJlbW92ZWQuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fSBldmVudHMKICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdCiAgICovCiAgRXZlbnRCdXMucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChldmVudHMsIGNhbGxiYWNrKSB7CiAgICBldmVudHMgPSBpc0FycmF5JDIoZXZlbnRzKSA/IGV2ZW50cyA6IFtldmVudHNdOwogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIHNlbGYuX3JlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7CiAgICB9KTsKICB9OwoKICAvKioKICAgKiBDcmVhdGUgYW4gRXZlbnRCdXMgZXZlbnQuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YQogICAqCiAgICogQHJldHVybiB7T2JqZWN0fSBldmVudCwgcmVjb2duaXplZCBieSB0aGUgZXZlbnRCdXMKICAgKi8KICBFdmVudEJ1cy5wcm90b3R5cGUuY3JlYXRlRXZlbnQgPSBmdW5jdGlvbiAoZGF0YSkgewogICAgdmFyIGV2ZW50ID0gbmV3IEludGVybmFsRXZlbnQoKTsKICAgIGV2ZW50LmluaXQoZGF0YSk7CiAgICByZXR1cm4gZXZlbnQ7CiAgfTsKCiAgLyoqCiAgICogRmlyZXMgYSBuYW1lZCBldmVudC4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiAvLyBmaXJlIGV2ZW50IGJ5IG5hbWUKICAgKiBldmVudHMuZmlyZSgnZm9vJyk7CiAgICoKICAgKiAvLyBmaXJlIGV2ZW50IG9iamVjdCB3aXRoIG5lc3RlZCB0eXBlCiAgICogdmFyIGV2ZW50ID0geyB0eXBlOiAnZm9vJyB9OwogICAqIGV2ZW50cy5maXJlKGV2ZW50KTsKICAgKgogICAqIC8vIGZpcmUgZXZlbnQgd2l0aCBleHBsaWNpdCB0eXBlCiAgICogdmFyIGV2ZW50ID0geyB4OiAxMCwgeTogMjAgfTsKICAgKiBldmVudHMuZmlyZSgnZWxlbWVudC5tb3ZlZCcsIGV2ZW50KTsKICAgKgogICAqIC8vIHBhc3MgYWRkaXRpb25hbCBhcmd1bWVudHMgdG8gdGhlIGV2ZW50CiAgICogZXZlbnRzLm9uKCdmb28nLCBmdW5jdGlvbihldmVudCwgYmFyKSB7CiAgICogICBhbGVydChiYXIpOwogICAqIH0pOwogICAqCiAgICogZXZlbnRzLmZpcmUoeyB0eXBlOiAnZm9vJyB9LCAnSSBhbSBiYXIhJyk7CiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWVdIHRoZSBvcHRpb25hbCBldmVudCBuYW1lCiAgICogQHBhcmFtIHtPYmplY3R9IFtldmVudF0gdGhlIGV2ZW50IG9iamVjdAogICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBhZGRpdGlvbmFsIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9ucwogICAqCiAgICogQHJldHVybiB7Ym9vbGVhbn0gdGhlIGV2ZW50cyByZXR1cm4gdmFsdWUsIGlmIHNwZWNpZmllZCBvciBmYWxzZSBpZiB0aGUKICAgKiAgICAgICAgICAgICAgICAgICBkZWZhdWx0IGFjdGlvbiB3YXMgcHJldmVudGVkIGJ5IGxpc3RlbmVycwogICAqLwogIEV2ZW50QnVzLnByb3RvdHlwZS5maXJlID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEpIHsKICAgIHZhciBldmVudCwgZmlyc3RMaXN0ZW5lciwgcmV0dXJuVmFsdWUsIGFyZ3M7CiAgICBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpOwogICAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JykgewogICAgICBkYXRhID0gdHlwZTsKICAgICAgdHlwZSA9IGRhdGEudHlwZTsKICAgIH0KICAgIGlmICghdHlwZSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGV2ZW50IHR5cGUgc3BlY2lmaWVkJyk7CiAgICB9CiAgICBmaXJzdExpc3RlbmVyID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdOwogICAgaWYgKCFmaXJzdExpc3RlbmVyKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyB3ZSBtYWtlIHN1cmUgd2UgZmlyZSBpbnN0YW5jZXMgb2Ygb3VyIGhvbWUgbWFkZQogICAgLy8gZXZlbnRzIGhlcmUuIFdlIHdyYXAgdGhlbSBvbmx5IG9uY2UsIHRob3VnaAogICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBJbnRlcm5hbEV2ZW50KSB7CiAgICAgIC8vIHdlIGFyZSBmaW5lLCB3ZSBhbHJlYWQgaGF2ZSBhbiBldmVudAogICAgICBldmVudCA9IGRhdGE7CiAgICB9IGVsc2UgewogICAgICBldmVudCA9IHRoaXMuY3JlYXRlRXZlbnQoZGF0YSk7CiAgICB9CgogICAgLy8gZW5zdXJlIHdlIHBhc3MgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIKICAgIGFyZ3NbMF0gPSBldmVudDsKCiAgICAvLyBvcmlnaW5hbCBldmVudCB0eXBlIChpbiBjYXNlIHdlIGRlbGVnYXRlKQogICAgdmFyIG9yaWdpbmFsVHlwZSA9IGV2ZW50LnR5cGU7CgogICAgLy8gdXBkYXRlIGV2ZW50IHR5cGUgYmVmb3JlIGRlbGVnYXRpb24KICAgIGlmICh0eXBlICE9PSBvcmlnaW5hbFR5cGUpIHsKICAgICAgZXZlbnQudHlwZSA9IHR5cGU7CiAgICB9CiAgICB0cnkgewogICAgICByZXR1cm5WYWx1ZSA9IHRoaXMuX2ludm9rZUxpc3RlbmVycyhldmVudCwgYXJncywgZmlyc3RMaXN0ZW5lcik7CiAgICB9IGZpbmFsbHkgewogICAgICAvLyByZXNldCBldmVudCB0eXBlIGFmdGVyIGRlbGVnYXRpb24KICAgICAgaWYgKHR5cGUgIT09IG9yaWdpbmFsVHlwZSkgewogICAgICAgIGV2ZW50LnR5cGUgPSBvcmlnaW5hbFR5cGU7CiAgICAgIH0KICAgIH0KCiAgICAvLyBzZXQgdGhlIHJldHVybiB2YWx1ZSB0byBmYWxzZSBpZiB0aGUgZXZlbnQgZGVmYXVsdAogICAgLy8gZ290IHByZXZlbnRlZCBhbmQgbm8gb3RoZXIgcmV0dXJuIHZhbHVlIGV4aXN0cwogICAgaWYgKHJldHVyblZhbHVlID09PSB1bmRlZmluZWQgJiYgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgewogICAgICByZXR1cm5WYWx1ZSA9IGZhbHNlOwogICAgfQogICAgcmV0dXJuIHJldHVyblZhbHVlOwogIH07CiAgRXZlbnRCdXMucHJvdG90eXBlLmhhbmRsZUVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7CiAgICByZXR1cm4gdGhpcy5maXJlKCdlcnJvcicsIHsKICAgICAgZXJyb3I6IGVycm9yCiAgICB9KSA9PT0gZmFsc2U7CiAgfTsKICBFdmVudEJ1cy5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTsKICB9OwogIEV2ZW50QnVzLnByb3RvdHlwZS5faW52b2tlTGlzdGVuZXJzID0gZnVuY3Rpb24gKGV2ZW50LCBhcmdzLCBsaXN0ZW5lcikgewogICAgdmFyIHJldHVyblZhbHVlOwogICAgd2hpbGUgKGxpc3RlbmVyKSB7CiAgICAgIC8vIGhhbmRsZSBzdG9wcGVkIHByb3BhZ2F0aW9uCiAgICAgIGlmIChldmVudC5jYW5jZWxCdWJibGUpIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICByZXR1cm5WYWx1ZSA9IHRoaXMuX2ludm9rZUxpc3RlbmVyKGV2ZW50LCBhcmdzLCBsaXN0ZW5lcik7CiAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDsKICAgIH0KICAgIHJldHVybiByZXR1cm5WYWx1ZTsKICB9OwogIEV2ZW50QnVzLnByb3RvdHlwZS5faW52b2tlTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MsIGxpc3RlbmVyKSB7CiAgICB2YXIgcmV0dXJuVmFsdWU7CiAgICBpZiAobGlzdGVuZXIuY2FsbGJhY2suX19pc1RvbWIpIHsKICAgICAgcmV0dXJuIHJldHVyblZhbHVlOwogICAgfQogICAgdHJ5IHsKICAgICAgLy8gcmV0dXJuaW5nIGZhbHNlIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbgogICAgICByZXR1cm5WYWx1ZSA9IGludm9rZUZ1bmN0aW9uKGxpc3RlbmVyLmNhbGxiYWNrLCBhcmdzKTsKCiAgICAgIC8vIHN0b3AgcHJvcGFnYXRpb24gb24gcmV0dXJuIHZhbHVlCiAgICAgIGlmIChyZXR1cm5WYWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSByZXR1cm5WYWx1ZTsKICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgfQoKICAgICAgLy8gcHJldmVudCBkZWZhdWx0IG9uIHJldHVybiBmYWxzZQogICAgICBpZiAocmV0dXJuVmFsdWUgPT09IGZhbHNlKSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgaWYgKCF0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ3VuaGFuZGxlZCBlcnJvciBpbiBldmVudCBsaXN0ZW5lcicsIGVycm9yKTsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJldHVyblZhbHVlOwogIH07CgogIC8qCiAgICogQWRkIG5ldyBsaXN0ZW5lciB3aXRoIGEgY2VydGFpbiBwcmlvcml0eSB0byB0aGUgbGlzdAogICAqIG9mIGxpc3RlbmVycyAoZm9yIHRoZSBnaXZlbiBldmVudCkuCiAgICoKICAgKiBUaGUgc2VtYW50aWNzIG9mIGxpc3RlbmVyIHJlZ2lzdHJhdGlvbiAvIGxpc3RlbmVyIGV4ZWN1dGlvbiBhcmUKICAgKiBmaXJzdCByZWdpc3RlciwgZmlyc3Qgc2VydmU6IE5ldyBsaXN0ZW5lcnMgd2lsbCBhbHdheXMgYmUgaW5zZXJ0ZWQKICAgKiBhZnRlciBleGlzdGluZyBsaXN0ZW5lcnMgd2l0aCB0aGUgc2FtZSBwcmlvcml0eS4KICAgKgogICAqIEV4YW1wbGU6IEluc2VydGluZyB0d28gbGlzdGVuZXJzIHdpdGggcHJpb3JpdHkgMTAwMCBhbmQgMTMwMAogICAqCiAgICogICAgKiBiZWZvcmU6IFsgMTUwMCwgMTUwMCwgMTAwMCwgMTAwMCBdCiAgICogICAgKiBhZnRlcjogWyAxNTAwLCAxNTAwLCAobmV3PTEzMDApLCAxMDAwLCAxMDAwLCAobmV3PTEwMDApIF0KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudAogICAqIEBwYXJhbSB7T2JqZWN0fSBsaXN0ZW5lciB7IHByaW9yaXR5LCBjYWxsYmFjayB9CiAgICovCiAgRXZlbnRCdXMucHJvdG90eXBlLl9hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCwgbmV3TGlzdGVuZXIpIHsKICAgIHZhciBsaXN0ZW5lciA9IHRoaXMuX2dldExpc3RlbmVycyhldmVudCksCiAgICAgIHByZXZpb3VzTGlzdGVuZXI7CgogICAgLy8gbm8gcHJpb3IgbGlzdGVuZXJzCiAgICBpZiAoIWxpc3RlbmVyKSB7CiAgICAgIHRoaXMuX3NldExpc3RlbmVycyhldmVudCwgbmV3TGlzdGVuZXIpOwogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gZW5zdXJlIHdlIG9yZGVyIGxpc3RlbmVycyBieSBwcmlvcml0eSBmcm9tCiAgICAvLyAwIChoaWdoKSB0byBuID4gMCAobG93KQogICAgd2hpbGUgKGxpc3RlbmVyKSB7CiAgICAgIGlmIChsaXN0ZW5lci5wcmlvcml0eSA8IG5ld0xpc3RlbmVyLnByaW9yaXR5KSB7CiAgICAgICAgbmV3TGlzdGVuZXIubmV4dCA9IGxpc3RlbmVyOwogICAgICAgIGlmIChwcmV2aW91c0xpc3RlbmVyKSB7CiAgICAgICAgICBwcmV2aW91c0xpc3RlbmVyLm5leHQgPSBuZXdMaXN0ZW5lcjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5fc2V0TGlzdGVuZXJzKGV2ZW50LCBuZXdMaXN0ZW5lcik7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBwcmV2aW91c0xpc3RlbmVyID0gbGlzdGVuZXI7CiAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDsKICAgIH0KCiAgICAvLyBhZGQgbmV3IGxpc3RlbmVyIHRvIGJhY2sKICAgIHByZXZpb3VzTGlzdGVuZXIubmV4dCA9IG5ld0xpc3RlbmVyOwogIH07CiAgRXZlbnRCdXMucHJvdG90eXBlLl9nZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgewogICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVyc1tuYW1lXTsKICB9OwogIEV2ZW50QnVzLnByb3RvdHlwZS5fc2V0TGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUsIGxpc3RlbmVyKSB7CiAgICB0aGlzLl9saXN0ZW5lcnNbbmFtZV0gPSBsaXN0ZW5lcjsKICB9OwogIEV2ZW50QnVzLnByb3RvdHlwZS5fcmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7CiAgICB2YXIgbGlzdGVuZXIgPSB0aGlzLl9nZXRMaXN0ZW5lcnMoZXZlbnQpLAogICAgICBuZXh0TGlzdGVuZXIsCiAgICAgIHByZXZpb3VzTGlzdGVuZXIsCiAgICAgIGxpc3RlbmVyQ2FsbGJhY2s7CiAgICBpZiAoIWNhbGxiYWNrKSB7CiAgICAgIC8vIGNsZWFyIGxpc3RlbmVycwogICAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoZXZlbnQsIG51bGwpOwogICAgICByZXR1cm47CiAgICB9CiAgICB3aGlsZSAobGlzdGVuZXIpIHsKICAgICAgbmV4dExpc3RlbmVyID0gbGlzdGVuZXIubmV4dDsKICAgICAgbGlzdGVuZXJDYWxsYmFjayA9IGxpc3RlbmVyLmNhbGxiYWNrOwogICAgICBpZiAobGlzdGVuZXJDYWxsYmFjayA9PT0gY2FsbGJhY2sgfHwgbGlzdGVuZXJDYWxsYmFja1tGTl9SRUZdID09PSBjYWxsYmFjaykgewogICAgICAgIGlmIChwcmV2aW91c0xpc3RlbmVyKSB7CiAgICAgICAgICBwcmV2aW91c0xpc3RlbmVyLm5leHQgPSBuZXh0TGlzdGVuZXI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIG5ldyBmaXJzdCBsaXN0ZW5lcgogICAgICAgICAgdGhpcy5fc2V0TGlzdGVuZXJzKGV2ZW50LCBuZXh0TGlzdGVuZXIpOwogICAgICAgIH0KICAgICAgfQogICAgICBwcmV2aW91c0xpc3RlbmVyID0gbGlzdGVuZXI7CiAgICAgIGxpc3RlbmVyID0gbmV4dExpc3RlbmVyOwogICAgfQogIH07CgogIC8qKgogICAqIEEgZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHZpYSB0aGUgZXZlbnQgYnVzLgogICAqLwogIGZ1bmN0aW9uIEludGVybmFsRXZlbnQoKSB7fQogIEludGVybmFsRXZlbnQucHJvdG90eXBlLnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuY2FuY2VsQnViYmxlID0gdHJ1ZTsKICB9OwogIEludGVybmFsRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsKICB9OwogIEludGVybmFsRXZlbnQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoZGF0YSkgewogICAgYXNzaWduKHRoaXMsIGRhdGEgfHwge30pOwogIH07CgogIC8qKgogICAqIEludm9rZSBmdW5jdGlvbi4gQmUgZmFzdC4uLgogICAqCiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4KICAgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IGFyZ3MKICAgKgogICAqIEByZXR1cm4ge0FueX0KICAgKi8KICBmdW5jdGlvbiBpbnZva2VGdW5jdGlvbihmbiwgYXJncykgewogICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3MpOwogIH0KCiAgZnVuY3Rpb24gY291bnREZWNpbWFscyhudW1iZXIpIHsKICAgIGNvbnN0IG51bSA9IEJpZyhudW1iZXIpOwogICAgaWYgKG51bS50b1N0cmluZygpID09PSBudW0udG9GaXhlZCgwKSkgcmV0dXJuIDA7CiAgICByZXR1cm4gbnVtLnRvRml4ZWQoKS5zcGxpdCgnLicpWzFdLmxlbmd0aCB8fCAwOwogIH0KICBmdW5jdGlvbiBpc1ZhbGlkTnVtYmVyKHZhbHVlKSB7CiAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgJiYgdmFsdWUgIT09ICcnICYmICFpc05hTihOdW1iZXIodmFsdWUpKTsKICB9CiAgZnVuY3Rpb24gd2lsbEtleVByb2R1Y2VWYWxpZE51bWJlcihrZXksIHByZXZpb3VzVmFsdWUsIGNhcmV0SW5kZXgsIHNlbGVjdGlvbldpZHRoLCBkZWNpbWFsRGlnaXRzKSB7CiAgICAvLyBEb3QgYW5kIGNvbW1hIGFyZSBib3RoIHRyZWF0ZWQgYXMgZG90CiAgICBwcmV2aW91c1ZhbHVlID0gcHJldmlvdXNWYWx1ZS5yZXBsYWNlKCcsJywgJy4nKTsKICAgIGNvbnN0IGlzRmlyc3REb3QgPSAhcHJldmlvdXNWYWx1ZS5pbmNsdWRlcygnLicpICYmIChrZXkgPT09ICcuJyB8fCBrZXkgPT09ICcsJyk7CiAgICBjb25zdCBpc0ZpcnN0TWludXMgPSAhcHJldmlvdXNWYWx1ZS5pbmNsdWRlcygnLScpICYmIGtleSA9PT0gJy0nICYmIGNhcmV0SW5kZXggPT09IDA7CiAgICBjb25zdCBrZXlwcmVzc0lzTnVtZXJpYyA9IC9eWzAtOV0kL2kudGVzdChrZXkpOwogICAgY29uc3QgZG90SW5kZXggPSBwcmV2aW91c1ZhbHVlID09PSB1bmRlZmluZWQgPyAtMSA6IHByZXZpb3VzVmFsdWUuaW5kZXhPZignLicpOwoKICAgIC8vIElmIHRoZSBjYXJldCBpcyBwb3NpdGlvbmVkIGFmdGVyIGEgZG90LCBhbmQgdGhlIGN1cnJlbnQgZGVjaW1hbCBkaWdpdHMgY291bnQgaXMgZXF1YWwgb3IgZ3JlYXRlciB0byB0aGUgbWF4aW11bSwgZGlzYWxsb3cgdGhlIGtleSBwcmVzcwogICAgY29uc3Qgb3ZlcmZsb3dzRGVjaW1hbFNwYWNlID0gdHlwZW9mIGRlY2ltYWxEaWdpdHMgPT09ICdudW1iZXInICYmIHNlbGVjdGlvbldpZHRoID09PSAwICYmIGRvdEluZGV4ICE9PSAtMSAmJiBwcmV2aW91c1ZhbHVlLmluY2x1ZGVzKCcuJykgJiYgcHJldmlvdXNWYWx1ZS5zcGxpdCgnLicpWzFdLmxlbmd0aCA+PSBkZWNpbWFsRGlnaXRzICYmIGNhcmV0SW5kZXggPiBkb3RJbmRleDsKICAgIGNvbnN0IGtleXByZXNzSXNBbGxvd2VkQ2hhciA9IGtleXByZXNzSXNOdW1lcmljIHx8IGRlY2ltYWxEaWdpdHMgIT09IDAgJiYgaXNGaXJzdERvdCB8fCBpc0ZpcnN0TWludXM7CiAgICByZXR1cm4ga2V5cHJlc3NJc0FsbG93ZWRDaGFyICYmICFvdmVyZmxvd3NEZWNpbWFsU3BhY2U7CiAgfQogIGZ1bmN0aW9uIGlzTnVsbEVxdWl2YWxlbnRWYWx1ZSh2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICcnOwogIH0KCiAgY29uc3QgRU1BSUxfUEFUVEVSTiA9IC9eW2EtekEtWjAtOS4hIyQlJicqKy89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvOwogIGNvbnN0IFBIT05FX1BBVFRFUk4gPSAvKFwrfDAwKSgyOTd8OTN8MjQ0fDEyNjR8MzU4fDM1NXwzNzZ8OTcxfDU0fDM3NHwxNjg0fDEyNjh8NjF8NDN8OTk0fDI1N3wzMnwyMjl8MjI2fDg4MHwzNTl8OTczfDEyNDJ8Mzg3fDU5MHwzNzV8NTAxfDE0NDF8NTkxfDU1fDEyNDZ8NjczfDk3NXwyNjd8MjM2fDF8NjF8NDF8NTZ8ODZ8MjI1fDIzN3wyNDN8MjQyfDY4Mnw1N3wyNjl8MjM4fDUwNnw1M3w1OTk5fDYxfDEzNDV8MzU3fDQyMHw0OXwyNTN8MTc2N3w0NXwxODA5fDE4Mjl8MTg0OXwyMTN8NTkzfDIwfDI5MXwyMTJ8MzR8MzcyfDI1MXwzNTh8Njc5fDUwMHwzM3wyOTh8NjkxfDI0MXw0NHw5OTV8NDR8MjMzfDM1MHwyMjR8NTkwfDIyMHwyNDV8MjQwfDMwfDE0NzN8Mjk5fDUwMnw1OTR8MTY3MXw1OTJ8ODUyfDUwNHwzODV8NTA5fDM2fDYyfDQ0fDkxfDI0NnwzNTN8OTh8OTY0fDM1NHw5NzJ8Mzl8MTg3Nnw0NHw5NjJ8ODF8NzZ8Nzd8MjU0fDk5Nnw4NTV8Njg2fDE4Njl8ODJ8MzgzfDk2NXw4NTZ8OTYxfDIzMXwyMTh8MTc1OHw0MjN8OTR8MjY2fDM3MHwzNTJ8MzcxfDg1M3w1OTB8MjEyfDM3N3wzNzN8MjYxfDk2MHw1Mnw2OTJ8Mzg5fDIyM3wzNTZ8OTV8MzgyfDk3NnwxNjcwfDI1OHwyMjJ8MTY2NHw1OTZ8MjMwfDI2NXw2MHwyNjJ8MjY0fDY4N3wyMjd8NjcyfDIzNHw1MDV8NjgzfDMxfDQ3fDk3N3w2NzR8NjR8OTY4fDkyfDUwN3w2NHw1MXw2M3w2ODB8Njc1fDQ4fDE3ODd8MTkzOXw4NTB8MzUxfDU5NXw5NzB8Njg5fDk3NHwyNjJ8NDB8N3wyNTB8OTY2fDI0OXwyMjF8NjV8NTAwfDQ3Nzl8Njc3fDIzMnw1MDN8Mzc4fDI1Mnw1MDh8MzgxfDIxMXwyMzl8NTk3fDQyMXwzODZ8NDZ8MjY4fDE3MjF8MjQ4fDk2M3wxNjQ5fDIzNXwyMjh8NjZ8OTkyfDY5MHw5OTN8NjcwfDY3NnwxODY4fDIxNnw5MHw2ODh8ODg2fDI1NXwyNTZ8MzgwfDU5OHwxfDk5OHwzOTA2Njk4fDM3OXwxNzg0fDU4fDEyODR8MTM0MHw4NHw2Nzh8NjgxfDY4NXw5Njd8Mjd8MjYwfDI2MykoOVs5NzZdXGR8OFs5ODc1MzBdXGR8Nls5ODddXGR8NVs5MF1cZHw0MlxkfDNbODc1XVxkfDJbOTg2NTQzMjFdXGR8OVs4NTQzMjEwXXw4WzY0MjFdfDZbNjU0MzIxMF18NVs4NzY1NDMyMV18NFs5ODc2NTQzMTBdfDNbOTY0MzIxMF18Mls3MF18N3wxKVxkezQsMjB9JC87CiAgY2xhc3MgVmFsaWRhdG9yIHsKICAgIHZhbGlkYXRlRmllbGQoZmllbGQsIHZhbHVlKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICB0eXBlLAogICAgICAgIHZhbGlkYXRlCiAgICAgIH0gPSBmaWVsZDsKICAgICAgbGV0IGVycm9ycyA9IFtdOwogICAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHsKICAgICAgICBjb25zdCB7CiAgICAgICAgICBkZWNpbWFsRGlnaXRzLAogICAgICAgICAgc3RlcAogICAgICAgIH0gPSBmaWVsZDsKICAgICAgICBpZiAodmFsdWUgPT09ICdOYU4nKSB7CiAgICAgICAgICBlcnJvcnMgPSBbLi4uZXJyb3JzLCAnVmFsdWUgaXMgbm90IGEgbnVtYmVyLiddOwogICAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHsKICAgICAgICAgIGlmIChkZWNpbWFsRGlnaXRzID49IDAgJiYgY291bnREZWNpbWFscyh2YWx1ZSkgPiBkZWNpbWFsRGlnaXRzKSB7CiAgICAgICAgICAgIGVycm9ycyA9IFsuLi5lcnJvcnMsICdWYWx1ZSBpcyBleHBlY3RlZCB0byAnICsgKGRlY2ltYWxEaWdpdHMgPT09IDAgPyAnYmUgYW4gaW50ZWdlcicgOiBgaGF2ZSBhdCBtb3N0ICR7ZGVjaW1hbERpZ2l0c30gZGVjaW1hbCBkaWdpdCR7ZGVjaW1hbERpZ2l0cyA+IDEgPyAncycgOiAnJ31gKSArICcuJ107CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc3RlcCkgewogICAgICAgICAgICBjb25zdCBiaWdWYWx1ZSA9IEJpZyh2YWx1ZSk7CiAgICAgICAgICAgIGNvbnN0IGJpZ1N0ZXAgPSBCaWcoc3RlcCk7CiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGJpZ1ZhbHVlLm1vZChiaWdTdGVwKTsKICAgICAgICAgICAgaWYgKG9mZnNldC5jbXAoMCkgIT09IDApIHsKICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c1ZhbHVlID0gYmlnVmFsdWUubWludXMob2Zmc2V0KTsKICAgICAgICAgICAgICBjb25zdCBuZXh0VmFsdWUgPSBwcmV2aW91c1ZhbHVlLnBsdXMoYmlnU3RlcCk7CiAgICAgICAgICAgICAgZXJyb3JzID0gWy4uLmVycm9ycywgYFBsZWFzZSBzZWxlY3QgYSB2YWxpZCB2YWx1ZSwgdGhlIHR3byBuZWFyZXN0IHZhbGlkIHZhbHVlcyBhcmUgJHtwcmV2aW91c1ZhbHVlfSBhbmQgJHtuZXh0VmFsdWV9LmBdOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICghdmFsaWRhdGUpIHsKICAgICAgICByZXR1cm4gZXJyb3JzOwogICAgICB9CiAgICAgIGlmICh2YWxpZGF0ZS5wYXR0ZXJuICYmIHZhbHVlICYmICFuZXcgUmVnRXhwKHZhbGlkYXRlLnBhdHRlcm4pLnRlc3QodmFsdWUpKSB7CiAgICAgICAgZXJyb3JzID0gWy4uLmVycm9ycywgYEZpZWxkIG11c3QgbWF0Y2ggcGF0dGVybiAke3ZhbGlkYXRlLnBhdHRlcm59LmBdOwogICAgICB9CiAgICAgIGlmICh2YWxpZGF0ZS5yZXF1aXJlZCAmJiAoaXNOaWwodmFsdWUpIHx8IHZhbHVlID09PSAnJykpIHsKICAgICAgICBlcnJvcnMgPSBbLi4uZXJyb3JzLCAnRmllbGQgaXMgcmVxdWlyZWQuJ107CiAgICAgIH0KICAgICAgaWYgKCdtaW4nIGluIHZhbGlkYXRlICYmIHZhbHVlICYmIHZhbHVlIDwgdmFsaWRhdGUubWluKSB7CiAgICAgICAgZXJyb3JzID0gWy4uLmVycm9ycywgYEZpZWxkIG11c3QgaGF2ZSBtaW5pbXVtIHZhbHVlIG9mICR7dmFsaWRhdGUubWlufS5gXTsKICAgICAgfQogICAgICBpZiAoJ21heCcgaW4gdmFsaWRhdGUgJiYgdmFsdWUgJiYgdmFsdWUgPiB2YWxpZGF0ZS5tYXgpIHsKICAgICAgICBlcnJvcnMgPSBbLi4uZXJyb3JzLCBgRmllbGQgbXVzdCBoYXZlIG1heGltdW0gdmFsdWUgb2YgJHt2YWxpZGF0ZS5tYXh9LmBdOwogICAgICB9CiAgICAgIGlmICgnbWluTGVuZ3RoJyBpbiB2YWxpZGF0ZSAmJiB2YWx1ZSAmJiB2YWx1ZS50cmltKCkubGVuZ3RoIDwgdmFsaWRhdGUubWluTGVuZ3RoKSB7CiAgICAgICAgZXJyb3JzID0gWy4uLmVycm9ycywgYEZpZWxkIG11c3QgaGF2ZSBtaW5pbXVtIGxlbmd0aCBvZiAke3ZhbGlkYXRlLm1pbkxlbmd0aH0uYF07CiAgICAgIH0KICAgICAgaWYgKCdtYXhMZW5ndGgnIGluIHZhbGlkYXRlICYmIHZhbHVlICYmIHZhbHVlLnRyaW0oKS5sZW5ndGggPiB2YWxpZGF0ZS5tYXhMZW5ndGgpIHsKICAgICAgICBlcnJvcnMgPSBbLi4uZXJyb3JzLCBgRmllbGQgbXVzdCBoYXZlIG1heGltdW0gbGVuZ3RoIG9mICR7dmFsaWRhdGUubWF4TGVuZ3RofS5gXTsKICAgICAgfQogICAgICBpZiAoJ3ZhbGlkYXRpb25UeXBlJyBpbiB2YWxpZGF0ZSAmJiB2YWx1ZSAmJiB2YWxpZGF0ZS52YWxpZGF0aW9uVHlwZSA9PT0gJ3Bob25lJyAmJiAhUEhPTkVfUEFUVEVSTi50ZXN0KHZhbHVlKSkgewogICAgICAgIGVycm9ycyA9IFsuLi5lcnJvcnMsICdGaWVsZCBtdXN0IGJlIGEgdmFsaWQgIGludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVyLiAoZS5nLiArNDkzMDY2NDA0MDkwMCknXTsKICAgICAgfQogICAgICBpZiAoJ3ZhbGlkYXRpb25UeXBlJyBpbiB2YWxpZGF0ZSAmJiB2YWx1ZSAmJiB2YWxpZGF0ZS52YWxpZGF0aW9uVHlwZSA9PT0gJ2VtYWlsJyAmJiAhRU1BSUxfUEFUVEVSTi50ZXN0KHZhbHVlKSkgewogICAgICAgIGVycm9ycyA9IFsuLi5lcnJvcnMsICdGaWVsZCBtdXN0IGJlIGEgdmFsaWQgZW1haWwuJ107CiAgICAgIH0KICAgICAgcmV0dXJuIGVycm9yczsKICAgIH0KICB9CiAgVmFsaWRhdG9yLiRpbmplY3QgPSBbXTsKCiAgY2xhc3MgRm9ybUZpZWxkUmVnaXN0cnkgewogICAgY29uc3RydWN0b3IoZXZlbnRCdXMpIHsKICAgICAgdGhpcy5fZXZlbnRCdXMgPSBldmVudEJ1czsKICAgICAgdGhpcy5fZm9ybUZpZWxkcyA9IHt9OwogICAgICBldmVudEJ1cy5vbignZm9ybS5jbGVhcicsICgpID0+IHRoaXMuY2xlYXIoKSk7CiAgICAgIHRoaXMuX2lkcyA9IG5ldyBJZHMoWzMyLCAzNiwgMV0pOwogICAgICB0aGlzLl9rZXlzID0gbmV3IElkcyhbMzIsIDM2LCAxXSk7CiAgICB9CiAgICBhZGQoZm9ybUZpZWxkKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBpZAogICAgICB9ID0gZm9ybUZpZWxkOwogICAgICBpZiAodGhpcy5fZm9ybUZpZWxkc1tpZF0pIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZvcm0gZmllbGQgd2l0aCBJRCAke2lkfSBhbHJlYWR5IGV4aXN0c2ApOwogICAgICB9CiAgICAgIHRoaXMuX2V2ZW50QnVzLmZpcmUoJ2Zvcm1GaWVsZC5hZGQnLCB7CiAgICAgICAgZm9ybUZpZWxkCiAgICAgIH0pOwogICAgICB0aGlzLl9mb3JtRmllbGRzW2lkXSA9IGZvcm1GaWVsZDsKICAgIH0KICAgIHJlbW92ZShmb3JtRmllbGQpIHsKICAgICAgY29uc3QgewogICAgICAgIGlkCiAgICAgIH0gPSBmb3JtRmllbGQ7CiAgICAgIGlmICghdGhpcy5fZm9ybUZpZWxkc1tpZF0pIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy5fZXZlbnRCdXMuZmlyZSgnZm9ybUZpZWxkLnJlbW92ZScsIHsKICAgICAgICBmb3JtRmllbGQKICAgICAgfSk7CiAgICAgIGRlbGV0ZSB0aGlzLl9mb3JtRmllbGRzW2lkXTsKICAgIH0KICAgIGdldChpZCkgewogICAgICByZXR1cm4gdGhpcy5fZm9ybUZpZWxkc1tpZF07CiAgICB9CiAgICBnZXRBbGwoKSB7CiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuX2Zvcm1GaWVsZHMpOwogICAgfQogICAgZm9yRWFjaChjYWxsYmFjaykgewogICAgICB0aGlzLmdldEFsbCgpLmZvckVhY2goZm9ybUZpZWxkID0+IGNhbGxiYWNrKGZvcm1GaWVsZCkpOwogICAgfQogICAgY2xlYXIoKSB7CiAgICAgIHRoaXMuX2Zvcm1GaWVsZHMgPSB7fTsKICAgICAgdGhpcy5faWRzLmNsZWFyKCk7CiAgICAgIHRoaXMuX2tleXMuY2xlYXIoKTsKICAgIH0KICB9CiAgRm9ybUZpZWxkUmVnaXN0cnkuJGluamVjdCA9IFsnZXZlbnRCdXMnXTsKCiAgLyoqCiAgICogUmV0cmlldmUgdmFyaWFibGUgbmFtZXMgZnJvbSBnaXZlbiBGRUVMIHVuYXJ5IHRlc3QuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdW5hcnlUZXN0CiAgICogQHJldHVybnMge3N0cmluZ1tdfQogICAqLwogIGZ1bmN0aW9uIGdldFZhcmlhYmxlTmFtZXModW5hcnlUZXN0KSB7CiAgICBjb25zdCB0cmVlID0gcGFyc2VVbmFyeVRlc3RzKHVuYXJ5VGVzdCk7CiAgICBjb25zdCBjdXJzb3IgPSB0cmVlLmN1cnNvcigpOwogICAgY29uc3QgdmFyaWFibGVzID0gbmV3IFNldCgpOwogICAgZG8gewogICAgICBjb25zdCBub2RlID0gY3Vyc29yLm5vZGU7CiAgICAgIGlmIChub2RlLnR5cGUubmFtZSA9PT0gJ1ZhcmlhYmxlTmFtZScpIHsKICAgICAgICB2YXJpYWJsZXMuYWRkKHVuYXJ5VGVzdC5zbGljZShub2RlLmZyb20sIG5vZGUudG8pKTsKICAgICAgfQogICAgfSB3aGlsZSAoY3Vyc29yLm5leHQoKSk7CiAgICByZXR1cm4gQXJyYXkuZnJvbSh2YXJpYWJsZXMpOwogIH0KCiAgLyoqCiAgICogUmV0cmlldmUgdmFyaWFibGUgbmFtZXMgZnJvbSBnaXZlbiBGRUVMIGV4cHJlc3Npb24uCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbgogICAqIEByZXR1cm5zIHtzdHJpbmdbXX0KICAgKi8KICBmdW5jdGlvbiBnZXRFeHByZXNzaW9uVmFyaWFibGVOYW1lcyhleHByZXNzaW9uKSB7CiAgICBjb25zdCB0cmVlID0gcGFyc2VFeHByZXNzaW9ucyhleHByZXNzaW9uKTsKICAgIGNvbnN0IGN1cnNvciA9IHRyZWUuY3Vyc29yKCk7CiAgICBjb25zdCB2YXJpYWJsZXMgPSBuZXcgU2V0KCk7CiAgICBkbyB7CiAgICAgIGNvbnN0IG5vZGUgPSBjdXJzb3Iubm9kZTsKICAgICAgaWYgKG5vZGUudHlwZS5uYW1lID09PSAnVmFyaWFibGVOYW1lJykgewogICAgICAgIHZhcmlhYmxlcy5hZGQoZXhwcmVzc2lvbi5zbGljZShub2RlLmZyb20sIG5vZGUudG8pKTsKICAgICAgfQogICAgfSB3aGlsZSAoY3Vyc29yLm5leHQoKSk7CiAgICByZXR1cm4gQXJyYXkuZnJvbSh2YXJpYWJsZXMpOwogIH0KICBmdW5jdGlvbiBpc0V4cHJlc3Npb24kMih2YWx1ZSkgewogICAgcmV0dXJuIGlzU3RyaW5nJDIodmFsdWUpICYmIHZhbHVlLnN0YXJ0c1dpdGgoJz0nKTsKICB9CgogIC8vIGNvbmZpZyAgLy8vLy8vLy8vLy8vLy8vLy8vLwoKICBjb25zdCBNSU5VVEVTX0lOX0RBWSA9IDYwICogMjQ7CiAgY29uc3QgREFURVRJTUVfU1VCVFlQRVMgPSB7CiAgICBEQVRFOiAnZGF0ZScsCiAgICBUSU1FOiAndGltZScsCiAgICBEQVRFVElNRTogJ2RhdGV0aW1lJwogIH07CiAgY29uc3QgVElNRV9TRVJJQUxJU0lOR19GT1JNQVRTID0gewogICAgVVRDX09GRlNFVDogJ3V0Y19vZmZzZXQnLAogICAgVVRDX05PUk1BTElaRUQ6ICd1dGNfbm9ybWFsaXplZCcsCiAgICBOT19USU1FWk9ORTogJ25vX3RpbWV6b25lJwogIH07CiAgY29uc3QgREFURVRJTUVfU1VCVFlQRV9QQVRIID0gWydzdWJ0eXBlJ107CiAgY29uc3QgREFURV9MQUJFTF9QQVRIID0gWydkYXRlTGFiZWwnXTsKCiAgZnVuY3Rpb24gY3JlYXRlSW5qZWN0b3IoYm9vdHN0cmFwTW9kdWxlcykgewogICAgY29uc3QgaW5qZWN0b3IgPSBuZXcgSW5qZWN0b3IoYm9vdHN0cmFwTW9kdWxlcyk7CiAgICBpbmplY3Rvci5pbml0KCk7CiAgICByZXR1cm4gaW5qZWN0b3I7CiAgfQoKICAvKioKICAgKiBAcGFyYW0ge3N0cmluZz99IHByZWZpeAogICAqCiAgICogQHJldHVybnMgRWxlbWVudAogICAqLwogIGZ1bmN0aW9uIGNyZWF0ZUZvcm1Db250YWluZXIocHJlZml4ID0gJ2ZqcycpIHsKICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoYCR7cHJlZml4fS1jb250YWluZXJgKTsKICAgIHJldHVybiBjb250YWluZXI7CiAgfQoKICBjb25zdCBFWFBSRVNTSU9OX1BST1BFUlRJRVMgPSBbJ2FsdCcsICdzb3VyY2UnLCAndGV4dCddOwogIGZ1bmN0aW9uIGZpbmRFcnJvcnMoZXJyb3JzLCBwYXRoKSB7CiAgICByZXR1cm4gZXJyb3JzW3BhdGhTdHJpbmdpZnkocGF0aCldOwogIH0KICBmdW5jdGlvbiBwYXRoU3RyaW5naWZ5KHBhdGgpIHsKICAgIGlmICghcGF0aCkgewogICAgICByZXR1cm4gJyc7CiAgICB9CiAgICByZXR1cm4gcGF0aC5qb2luKCcuJyk7CiAgfQogIGNvbnN0IGluZGljZXMgPSB7fTsKICBmdW5jdGlvbiBnZW5lcmF0ZUluZGV4Rm9yVHlwZSh0eXBlKSB7CiAgICBpZiAodHlwZSBpbiBpbmRpY2VzKSB7CiAgICAgIGluZGljZXNbdHlwZV0rKzsKICAgIH0gZWxzZSB7CiAgICAgIGluZGljZXNbdHlwZV0gPSAxOwogICAgfQogICAgcmV0dXJuIGluZGljZXNbdHlwZV07CiAgfQogIGZ1bmN0aW9uIGdlbmVyYXRlSWRGb3JUeXBlKHR5cGUpIHsKICAgIHJldHVybiBgJHt0eXBlfSR7Z2VuZXJhdGVJbmRleEZvclR5cGUodHlwZSl9YDsKICB9CgogIC8qKgogICAqIEB0ZW1wbGF0ZSBUCiAgICogQHBhcmFtIHtUfSBkYXRhCiAgICogQHBhcmFtIHsodGhpczogYW55LCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSkgPT4gYW55fSBbcmVwbGFjZXJdCiAgICogQHJldHVybiB7VH0KICAgKi8KICBmdW5jdGlvbiBjbG9uZShkYXRhLCByZXBsYWNlcikgewogICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSwgcmVwbGFjZXIpKTsKICB9CgogIC8qKgogICAqIFBhcnNlIHRoZSBzY2hlbWEgZm9yIGlucHV0IHZhcmlhYmxlcyBhIGZvcm0gbWlnaHQgbWFrZSB1c2Ugb2YKICAgKgogICAqIEBwYXJhbSB7YW55fSBzY2hlbWEKICAgKgogICAqIEByZXR1cm4ge3N0cmluZ1tdfQogICAqLwogIGZ1bmN0aW9uIGdldFNjaGVtYVZhcmlhYmxlcyhzY2hlbWEpIHsKICAgIGlmICghc2NoZW1hLmNvbXBvbmVudHMpIHsKICAgICAgcmV0dXJuIFtdOwogICAgfQogICAgY29uc3QgdmFyaWFibGVzID0gc2NoZW1hLmNvbXBvbmVudHMucmVkdWNlKCh2YXJpYWJsZXMsIGNvbXBvbmVudCkgPT4gewogICAgICBjb25zdCB7CiAgICAgICAga2V5LAogICAgICAgIHZhbHVlc0tleSwKICAgICAgICB0eXBlLAogICAgICAgIGNvbmRpdGlvbmFsCiAgICAgIH0gPSBjb21wb25lbnQ7CiAgICAgIGlmIChbJ2J1dHRvbiddLmluY2x1ZGVzKHR5cGUpKSB7CiAgICAgICAgcmV0dXJuIHZhcmlhYmxlczsKICAgICAgfQogICAgICBpZiAoa2V5KSB7CiAgICAgICAgdmFyaWFibGVzID0gWy4uLnZhcmlhYmxlcywga2V5XTsKICAgICAgfQogICAgICBpZiAodmFsdWVzS2V5KSB7CiAgICAgICAgdmFyaWFibGVzID0gWy4uLnZhcmlhYmxlcywgdmFsdWVzS2V5XTsKICAgICAgfQogICAgICBpZiAoY29uZGl0aW9uYWwgJiYgY29uZGl0aW9uYWwuaGlkZSkgewogICAgICAgIC8vIGN1dCBvZmYgaW5pdGlhbCAnPScKICAgICAgICBjb25zdCBjb25kaXRpb25WYXJpYWJsZXMgPSBnZXRWYXJpYWJsZU5hbWVzKGNvbmRpdGlvbmFsLmhpZGUuc2xpY2UoMSkpOwogICAgICAgIHZhcmlhYmxlcyA9IFsuLi52YXJpYWJsZXMsIC4uLmNvbmRpdGlvblZhcmlhYmxlc107CiAgICAgIH0KICAgICAgRVhQUkVTU0lPTl9QUk9QRVJUSUVTLmZvckVhY2gocHJvcCA9PiB7CiAgICAgICAgY29uc3QgcHJvcGVydHkgPSBjb21wb25lbnRbcHJvcF07CiAgICAgICAgaWYgKHByb3BlcnR5ICYmIGlzRXhwcmVzc2lvbiQxKHByb3BlcnR5KSkgewogICAgICAgICAgLy8gY3V0IG9mZiBpbml0aWFsICc9JwogICAgICAgICAgY29uc3QgZXhwcmVzc2lvblZhcmlhYmxlcyA9IGdldEV4cHJlc3Npb25WYXJpYWJsZU5hbWVzKHByb3BlcnR5LnNsaWNlKDEpKTsKICAgICAgICAgIHZhcmlhYmxlcyA9IFsuLi52YXJpYWJsZXMsIC4uLmV4cHJlc3Npb25WYXJpYWJsZXNdOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiB2YXJpYWJsZXM7CiAgICB9LCBbXSk7CgogICAgLy8gcmVtb3ZlIGR1cGxpY2F0ZXMKICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQodmFyaWFibGVzKSk7CiAgfQoKICAvLyBoZWxwZXIgLy8vLy8vLy8vLy8vLy8vCgogIGZ1bmN0aW9uIGlzRXhwcmVzc2lvbiQxKHZhbHVlKSB7CiAgICByZXR1cm4gaXNTdHJpbmckMih2YWx1ZSkgJiYgdmFsdWUuc3RhcnRzV2l0aCgnPScpOwogIH0KCiAgY2xhc3MgSW1wb3J0ZXIgewogICAgLyoqCiAgICAgKiBAY29uc3RydWN0b3IKICAgICAqIEBwYXJhbSB7IGltcG9ydCgnLi4vY29yZScpLkZvcm1GaWVsZFJlZ2lzdHJ5IH0gZm9ybUZpZWxkUmVnaXN0cnkKICAgICAqIEBwYXJhbSB7IGltcG9ydCgnLi4vcmVuZGVyL0Zvcm1GaWVsZHMnKS5kZWZhdWx0IH0gZm9ybUZpZWxkcwogICAgICovCiAgICBjb25zdHJ1Y3Rvcihmb3JtRmllbGRSZWdpc3RyeSwgZm9ybUZpZWxkcykgewogICAgICB0aGlzLl9mb3JtRmllbGRSZWdpc3RyeSA9IGZvcm1GaWVsZFJlZ2lzdHJ5OwogICAgICB0aGlzLl9mb3JtRmllbGRzID0gZm9ybUZpZWxkczsKICAgIH0KCiAgICAvKioKICAgICAqIEltcG9ydCBzY2hlbWEgYWRkaW5nIGBpZGAsIGBfcGFyZW50YCBhbmQgYF9wYXRoYAogICAgICogaW5mb3JtYXRpb24gdG8gZWFjaCBmaWVsZCBhbmQgYWRkaW5nIGl0IHRvIHRoZQogICAgICogZm9ybSBmaWVsZCByZWdpc3RyeS4KICAgICAqCiAgICAgKiBAcGFyYW0ge2FueX0gc2NoZW1hCiAgICAgKiBAcGFyYW0ge2FueX0gW2RhdGFdCiAgICAgKgogICAgICogQHJldHVybiB7IHsgd2FybmluZ3M6IEFycmF5PGFueT4sIHNjaGVtYTogYW55LCBkYXRhOiBhbnkgfSB9CiAgICAgKi8KICAgIGltcG9ydFNjaGVtYShzY2hlbWEsIGRhdGEgPSB7fSkgewogICAgICAvLyBUT0RPOiBBZGQgd2FybmluZ3MgLSBodHRwczovL2dpdGh1Yi5jb20vYnBtbi1pby9mb3JtLWpzL2lzc3Vlcy8yODkKICAgICAgY29uc3Qgd2FybmluZ3MgPSBbXTsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBpbXBvcnRlZFNjaGVtYSA9IHRoaXMuaW1wb3J0Rm9ybUZpZWxkKGNsb25lKHNjaGVtYSkpLAogICAgICAgICAgaW5pdGlhbGl6ZWREYXRhID0gdGhpcy5pbml0aWFsaXplRmllbGRWYWx1ZXMoY2xvbmUoZGF0YSkpOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICB3YXJuaW5ncywKICAgICAgICAgIHNjaGVtYTogaW1wb3J0ZWRTY2hlbWEsCiAgICAgICAgICBkYXRhOiBpbml0aWFsaXplZERhdGEKICAgICAgICB9OwogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBlcnIud2FybmluZ3MgPSB3YXJuaW5nczsKICAgICAgICB0aHJvdyBlcnI7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBwYXJhbSB7YW55fSBmb3JtRmllbGQKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyZW50SWRdCiAgICAgKgogICAgICogQHJldHVybiB7YW55fSBpbXBvcnRlZEZpZWxkCiAgICAgKi8KICAgIGltcG9ydEZvcm1GaWVsZChmb3JtRmllbGQsIHBhcmVudElkKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBjb21wb25lbnRzLAogICAgICAgIGtleSwKICAgICAgICB0eXBlLAogICAgICAgIGlkID0gZ2VuZXJhdGVJZEZvclR5cGUodHlwZSkKICAgICAgfSA9IGZvcm1GaWVsZDsKICAgICAgaWYgKHBhcmVudElkKSB7CiAgICAgICAgLy8gc2V0IGZvcm0gZmllbGQgcGFyZW50CiAgICAgICAgZm9ybUZpZWxkLl9wYXJlbnQgPSBwYXJlbnRJZDsKICAgICAgfQogICAgICBpZiAoIXRoaXMuX2Zvcm1GaWVsZHMuZ2V0KHR5cGUpKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBmb3JtIGZpZWxkIG9mIHR5cGUgPCR7dHlwZX0+IG5vdCBzdXBwb3J0ZWRgKTsKICAgICAgfQogICAgICBpZiAoa2V5KSB7CiAgICAgICAgLy8gdmFsaWRhdGUgPGtleT4gdW5pcXVlbmVzcwogICAgICAgIGlmICh0aGlzLl9mb3JtRmllbGRSZWdpc3RyeS5fa2V5cy5hc3NpZ25lZChrZXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZvcm0gZmllbGQgd2l0aCBrZXkgPCR7a2V5fT4gYWxyZWFkeSBleGlzdHNgKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5fZm9ybUZpZWxkUmVnaXN0cnkuX2tleXMuY2xhaW0oa2V5LCBmb3JtRmllbGQpOwoKICAgICAgICAvLyBUT0RPOiBidXR0b25zIHNob3VsZCBub3QgaGF2ZSBrZXkKICAgICAgICBpZiAodHlwZSAhPT0gJ2J1dHRvbicpIHsKICAgICAgICAgIC8vIHNldCBmb3JtIGZpZWxkIHBhdGgKICAgICAgICAgIGZvcm1GaWVsZC5fcGF0aCA9IFtrZXldOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoaWQpIHsKICAgICAgICAvLyB2YWxpZGF0ZSA8aWQ+IHVuaXF1ZW5lc3MKICAgICAgICBpZiAodGhpcy5fZm9ybUZpZWxkUmVnaXN0cnkuX2lkcy5hc3NpZ25lZChpZCkpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZm9ybSBmaWVsZCB3aXRoIGlkIDwke2lkfT4gYWxyZWFkeSBleGlzdHNgKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5fZm9ybUZpZWxkUmVnaXN0cnkuX2lkcy5jbGFpbShpZCwgZm9ybUZpZWxkKTsKICAgICAgfQoKICAgICAgLy8gc2V0IGZvcm0gZmllbGQgSUQKICAgICAgZm9ybUZpZWxkLmlkID0gaWQ7CiAgICAgIHRoaXMuX2Zvcm1GaWVsZFJlZ2lzdHJ5LmFkZChmb3JtRmllbGQpOwogICAgICBpZiAoY29tcG9uZW50cykgewogICAgICAgIHRoaXMuaW1wb3J0Rm9ybUZpZWxkcyhjb21wb25lbnRzLCBpZCk7CiAgICAgIH0KICAgICAgcmV0dXJuIGZvcm1GaWVsZDsKICAgIH0KICAgIGltcG9ydEZvcm1GaWVsZHMoY29tcG9uZW50cywgcGFyZW50SWQpIHsKICAgICAgY29tcG9uZW50cy5mb3JFYWNoKGNvbXBvbmVudCA9PiB7CiAgICAgICAgdGhpcy5pbXBvcnRGb3JtRmllbGQoY29tcG9uZW50LCBwYXJlbnRJZCk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEKICAgICAqCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluaXRpYWxpemVkRGF0YQogICAgICovCiAgICBpbml0aWFsaXplRmllbGRWYWx1ZXMoZGF0YSkgewogICAgICByZXR1cm4gdGhpcy5fZm9ybUZpZWxkUmVnaXN0cnkuZ2V0QWxsKCkucmVkdWNlKChpbml0aWFsaXplZERhdGEsIGZvcm1GaWVsZCkgPT4gewogICAgICAgIGNvbnN0IHsKICAgICAgICAgIGRlZmF1bHRWYWx1ZSwKICAgICAgICAgIF9wYXRoLAogICAgICAgICAgdHlwZQogICAgICAgIH0gPSBmb3JtRmllbGQ7CgogICAgICAgIC8vIHRyeSB0byBnZXQgdmFsdWUgZnJvbSBkYXRhCiAgICAgICAgLy8gaWYgdW5hdmFpbGFibGUgLSB0cnkgdG8gZ2V0IGRlZmF1bHQgdmFsdWUgZnJvbSBmb3JtIGZpZWxkCiAgICAgICAgLy8gaWYgdW5hdmFpbGFibGUgLSBnZXQgZW1wdHkgdmFsdWUgZnJvbSBmb3JtIGZpZWxkCgogICAgICAgIGlmIChfcGF0aCkgewogICAgICAgICAgY29uc3QgZmllbGRJbXBsZW1lbnRhdGlvbiA9IHRoaXMuX2Zvcm1GaWVsZHMuZ2V0KHR5cGUpOwogICAgICAgICAgbGV0IHZhbHVlRGF0YSA9IGdldChkYXRhLCBfcGF0aCk7CiAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkJDEodmFsdWVEYXRhKSAmJiBmaWVsZEltcGxlbWVudGF0aW9uLnNhbml0aXplVmFsdWUpIHsKICAgICAgICAgICAgdmFsdWVEYXRhID0gZmllbGRJbXBsZW1lbnRhdGlvbi5zYW5pdGl6ZVZhbHVlKHsKICAgICAgICAgICAgICBmb3JtRmllbGQsCiAgICAgICAgICAgICAgZGF0YSwKICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVEYXRhCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgaW5pdGlhbGl6ZWRGaWVsZFZhbHVlID0gIWlzVW5kZWZpbmVkJDEodmFsdWVEYXRhKSA/IHZhbHVlRGF0YSA6ICFpc1VuZGVmaW5lZCQxKGRlZmF1bHRWYWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiBmaWVsZEltcGxlbWVudGF0aW9uLmVtcHR5VmFsdWU7CiAgICAgICAgICBpbml0aWFsaXplZERhdGEgPSB7CiAgICAgICAgICAgIC4uLmluaXRpYWxpemVkRGF0YSwKICAgICAgICAgICAgW19wYXRoWzBdXTogaW5pdGlhbGl6ZWRGaWVsZFZhbHVlCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICByZXR1cm4gaW5pdGlhbGl6ZWREYXRhOwogICAgICB9LCBkYXRhKTsKICAgIH0KICB9CiAgSW1wb3J0ZXIuJGluamVjdCA9IFsnZm9ybUZpZWxkUmVnaXN0cnknLCAnZm9ybUZpZWxkcyddOwoKICB2YXIgaW1wb3J0TW9kdWxlID0gewogICAgaW1wb3J0ZXI6IFsndHlwZScsIEltcG9ydGVyXQogIH07CgogIGNvbnN0IE5PREVfVFlQRV9URVhUID0gMywKICAgIE5PREVfVFlQRV9FTEVNRU5UID0gMTsKICBjb25zdCBBTExPV0VEX05PREVTID0gWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzcGFuJywgJ2VtJywgJ2EnLCAncCcsICdkaXYnLCAndWwnLCAnb2wnLCAnbGknLCAnaHInLCAnYmxvY2txdW90ZScsICdpbWcnLCAncHJlJywgJ2NvZGUnLCAnYnInLCAnc3Ryb25nJ107CiAgY29uc3QgQUxMT1dFRF9BVFRSSUJVVEVTID0gWydhbGlnbicsICdhbHQnLCAnY2xhc3MnLCAnaHJlZicsICdpZCcsICduYW1lJywgJ3JlbCcsICd0YXJnZXQnLCAnc3JjJ107CiAgY29uc3QgQUxMT1dFRF9VUklfUEFUVEVSTiA9IC9eKD86KD86KD86ZnxodCl0cHM/fG1haWx0b3x0ZWx8Y2FsbHRvfGNpZHx4bXBwKTp8W15hLXpdfFthLXorLlwtXSsoPzpbXmEteisuXC06XXwkKSkvaTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2VsZXNzLWVzY2FwZQogIGNvbnN0IEFMTE9XRURfSU1BR0VfU1JDX1BBVFRFUk4gPSAvXihodHRwcz98ZGF0YSk6LiovaTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2VsZXNzLWVzY2FwZQogIGNvbnN0IEFUVFJfV0hJVEVTUEFDRV9QQVRURVJOID0gL1tcdTAwMDAtXHUwMDIwXHUwMEEwXHUxNjgwXHUxODBFXHUyMDAwLVx1MjAyOVx1MjA1Rlx1MzAwMF0vZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb250cm9sLXJlZ2V4CgogIGNvbnN0IEZPUk1fRUxFTUVOVCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTsKCiAgLyoqCiAgICogU2FuaXRpemUgYSBIVE1MIHN0cmluZyBhbmQgcmV0dXJuIHRoZSBjbGVhbmVkLCBzYWZlIHZlcnNpb24uCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gaHRtbAogICAqIEByZXR1cm4ge3N0cmluZ30KICAgKi8KICBmdW5jdGlvbiBzYW5pdGl6ZUhUTUwoaHRtbCkgewogICAgY29uc3QgZG9jID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhgPCFET0NUWVBFIGh0bWw+XG48aHRtbD48Ym9keT48ZGl2PiR7aHRtbH1gLCAndGV4dC9odG1sJyk7CiAgICBkb2Mubm9ybWFsaXplKCk7CiAgICBjb25zdCBlbGVtZW50ID0gZG9jLmJvZHkuZmlyc3RDaGlsZDsKICAgIGlmIChlbGVtZW50KSB7CiAgICAgIHNhbml0aXplTm9kZSggLyoqIEB0eXBlIEVsZW1lbnQgKi9lbGVtZW50KTsKICAgICAgcmV0dXJuIG5ldyBYTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoZWxlbWVudCk7CiAgICB9IGVsc2UgewogICAgICAvLyBoYW5kbGUgdGhlIGNhc2UgdGhhdCBkb2N1bWVudCBwYXJzaW5nCiAgICAgIC8vIGRvZXMgbm90IHdvcmsgYXQgYWxsLCBkdWUgdG8gSFRNTCBnaWJiZXJpc2gKICAgICAgcmV0dXJuICcnOwogICAgfQogIH0KICBmdW5jdGlvbiBzYW5pdGl6ZUltYWdlU291cmNlKHNyYykgewogICAgY29uc3QgdmFsaWQgPSBBTExPV0VEX0lNQUdFX1NSQ19QQVRURVJOLnRlc3Qoc3JjKTsKICAgIHJldHVybiB2YWxpZCA/IHNyYyA6ICcnOwogIH0KCiAgLyoqCiAgICogUmVjdXJzaXZlbHkgc2FuaXRpemUgYSBIVE1MIG5vZGUsIHBvdGVudGlhbGx5CiAgICogcmVtb3ZpbmcgaXQsIGl0cyBjaGlsZHJlbiBvciBhdHRyaWJ1dGVzLgogICAqCiAgICogSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RldmVsb3BpdC9zbmFya2Rvd24vaXNzdWVzLzcwCiAgICogYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9jdXJlNTMvRE9NUHVyaWZ5LiBTaW1wbGlmaWVkCiAgICogZm9yIG91ciB1c2UtY2FzZS4KICAgKgogICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZQogICAqLwogIGZ1bmN0aW9uIHNhbml0aXplTm9kZShub2RlKSB7CiAgICAvLyBhbGxvdyB0ZXh0IG5vZGVzCiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIGRpc2FsbG93IGFsbCBvdGhlciBub2RlcyBidXQgRWxlbWVudAogICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5PREVfVFlQRV9FTEVNRU5UKSB7CiAgICAgIHJldHVybiBub2RlLnJlbW92ZSgpOwogICAgfQogICAgY29uc3QgbGNUYWcgPSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKTsKCiAgICAvLyBkaXNhbGxvdyBub24td2hpdGVsaXN0ZWQgdGFncwogICAgaWYgKCFBTExPV0VEX05PREVTLmluY2x1ZGVzKGxjVGFnKSkgewogICAgICByZXR1cm4gbm9kZS5yZW1vdmUoKTsKICAgIH0KICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7CgogICAgLy8gY2xlYW4gYXR0cmlidXRlcwogICAgZm9yIChsZXQgaSA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBpLS07KSB7CiAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07CiAgICAgIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGUubmFtZTsKICAgICAgY29uc3QgbGNOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpOwoKICAgICAgLy8gbm9ybWFsaXplIG5vZGUgdmFsdWUKICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGUudmFsdWUudHJpbSgpOwogICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsKICAgICAgY29uc3QgdmFsaWQgPSBpc1ZhbGlkQXR0cmlidXRlKGxjVGFnLCBsY05hbWUsIHZhbHVlKTsKICAgICAgaWYgKHZhbGlkKSB7CiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpOwogICAgICB9CiAgICB9CgogICAgLy8gZm9yY2Ugbm9vcGVuZXIgb24gdGFyZ2V0PSJfYmxhbmsiIGxpbmtzCiAgICBpZiAobGNUYWcgPT09ICdhJyAmJiBub2RlLmdldEF0dHJpYnV0ZSgndGFyZ2V0JykgPT09ICdfYmxhbmsnICYmIG5vZGUuZ2V0QXR0cmlidXRlKCdyZWwnKSAhPT0gJ25vb3BlbmVyJykgewogICAgICBub2RlLnNldEF0dHJpYnV0ZSgncmVsJywgJ25vb3BlbmVyJyk7CiAgICB9CiAgICBmb3IgKGxldCBpID0gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaS0tOykgewogICAgICBzYW5pdGl6ZU5vZGUoIC8qKiBAdHlwZSBFbGVtZW50ICovbm9kZS5jaGlsZE5vZGVzW2ldKTsKICAgIH0KICB9CgogIC8qKgogICAqIFZhbGlkYXRlcyBhdHRyaWJ1dGVzIGZvciB2YWxpZGl0eS4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBsY1RhZwogICAqIEBwYXJhbSB7c3RyaW5nfSBsY05hbWUKICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUKICAgKiBAcmV0dXJuIHtib29sZWFufQogICAqLwogIGZ1bmN0aW9uIGlzVmFsaWRBdHRyaWJ1dGUobGNUYWcsIGxjTmFtZSwgdmFsdWUpIHsKICAgIC8vIGRpc2FsbG93IG1vc3QgYXR0cmlidXRlcyBiYXNlZCBvbiB3aGl0ZWxpc3QKICAgIGlmICghQUxMT1dFRF9BVFRSSUJVVEVTLmluY2x1ZGVzKGxjTmFtZSkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vIGRpc2FsbG93ICJET00gY2xvYmJlcmluZyIgLyBwb2x1dGlvbiBvZiBkb2N1bWVudCBhbmQgd3JhcHBpbmcgZm9ybSBlbGVtZW50cwogICAgaWYgKChsY05hbWUgPT09ICdpZCcgfHwgbGNOYW1lID09PSAnbmFtZScpICYmICh2YWx1ZSBpbiBkb2N1bWVudCB8fCB2YWx1ZSBpbiBGT1JNX0VMRU1FTlQpKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGlmIChsY05hbWUgPT09ICd0YXJnZXQnICYmIHZhbHVlICE9PSAnX2JsYW5rJykgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLy8gYWxsb3cgdmFsaWQgdXJsIGxpbmtzIG9ubHkKICAgIGlmIChsY05hbWUgPT09ICdocmVmJyAmJiAhQUxMT1dFRF9VUklfUEFUVEVSTi50ZXN0KHZhbHVlLnJlcGxhY2UoQVRUUl9XSElURVNQQUNFX1BBVFRFUk4sICcnKSkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBmb3JtRmllbGRDbGFzc2VzKHR5cGUsIHsKICAgIGVycm9ycyA9IFtdLAogICAgZGlzYWJsZWQgPSBmYWxzZQogIH0gPSB7fSkgewogICAgaWYgKCF0eXBlKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigndHlwZSByZXF1aXJlZCcpOwogICAgfQogICAgcmV0dXJuIGNsYXNzTmFtZXMoJ2Zqcy1mb3JtLWZpZWxkJywgYGZqcy1mb3JtLWZpZWxkLSR7dHlwZX1gLCB7CiAgICAgICdmanMtaGFzLWVycm9ycyc6IGVycm9ycy5sZW5ndGggPiAwLAogICAgICAnZmpzLWRpc2FibGVkJzogZGlzYWJsZWQKICAgIH0pOwogIH0KICBmdW5jdGlvbiBwcmVmaXhJZChpZCwgZm9ybUlkKSB7CiAgICBpZiAoZm9ybUlkKSB7CiAgICAgIHJldHVybiBgZmpzLWZvcm0tJHtmb3JtSWR9LSR7aWR9YDsKICAgIH0KICAgIHJldHVybiBgZmpzLWZvcm0tJHtpZH1gOwogIH0KICBmdW5jdGlvbiBtYXJrZG93blRvSFRNTChtYXJrZG93bikgewogICAgY29uc3QgaHRtbHMgPSBtYXJrZG93bi50b1N0cmluZygpLnNwbGl0KC8oPzpccj9cbil7Mix9LykubWFwKGxpbmUgPT4gL14oKFxkKy4pfFs+PFxzIy0qXSkvLnRlc3QobGluZSkgPyB0JDIobGluZSkgOiBgPHA+JHt0JDIobGluZSl9PC9wPmApOwogICAgcmV0dXJuIGh0bWxzLmpvaW4oJ1xuXG4nKTsKICB9CgogIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGV2ZWxvcGl0L3NuYXJrZG93bi9pc3N1ZXMvNzAKICBmdW5jdGlvbiBzYWZlTWFya2Rvd24obWFya2Rvd24pIHsKICAgIGNvbnN0IGh0bWwgPSBtYXJrZG93blRvSFRNTChtYXJrZG93bik7CiAgICByZXR1cm4gc2FuaXRpemVIVE1MKGh0bWwpOwogIH0KCiAgLyoqCiAgICogU2FuaXRpemVzIGFuIGltYWdlIHNvdXJjZSB0byBlbnN1cmUgd2Ugb25seSBhbGxvdyBmb3IgZGF0YSBVUkkgYW5kIGxpbmtzCiAgICogdGhhdCBzdGFydCB3aXRoIGh0dHAocykuCiAgICoKICAgKiBOb3RlOiBNb3N0IGJyb3dzZXJzIGFueXdheSBkbyBub3Qgc3VwcG9ydCBzY3JpcHQgZXhlY3V0aW9uIGluIDxpbWc+IGVsZW1lbnRzLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IHNyYwogICAqIEByZXR1cm5zIHtzdHJpbmd9CiAgICovCiAgZnVuY3Rpb24gc2FmZUltYWdlU291cmNlKHNyYykgewogICAgcmV0dXJuIHNhbml0aXplSW1hZ2VTb3VyY2Uoc3JjKTsKICB9CgogIGNvbnN0IHR5cGUkYiA9ICdidXR0b24nOwogIGZ1bmN0aW9uIEJ1dHRvbihwcm9wcykgewogICAgY29uc3QgewogICAgICBkaXNhYmxlZCwKICAgICAgZmllbGQKICAgIH0gPSBwcm9wczsKICAgIGNvbnN0IHsKICAgICAgYWN0aW9uID0gJ3N1Ym1pdCcKICAgIH0gPSBmaWVsZDsKICAgIHJldHVybiBlJDIoImRpdiIsIHsKICAgICAgY2xhc3M6IGZvcm1GaWVsZENsYXNzZXModHlwZSRiKSwKICAgICAgY2hpbGRyZW46IGUkMigiYnV0dG9uIiwgewogICAgICAgIGNsYXNzOiAiZmpzLWJ1dHRvbiIsCiAgICAgICAgdHlwZTogYWN0aW9uLAogICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCwKICAgICAgICBjaGlsZHJlbjogZmllbGQubGFiZWwKICAgICAgfSkKICAgIH0pOwogIH0KICBCdXR0b24uY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMgPSB7fSkgewogICAgcmV0dXJuIHsKICAgICAgYWN0aW9uOiAnc3VibWl0JywKICAgICAgLi4ub3B0aW9ucwogICAgfTsKICB9OwogIEJ1dHRvbi50eXBlID0gdHlwZSRiOwogIEJ1dHRvbi5sYWJlbCA9ICdCdXR0b24nOwogIEJ1dHRvbi5rZXllZCA9IHRydWU7CgogIGNvbnN0IEZvcm1SZW5kZXJDb250ZXh0ID0gRCQxKHsKICAgIEVtcHR5OiBwcm9wcyA9PiB7CiAgICAgIHJldHVybiBudWxsOwogICAgfSwKICAgIENoaWxkcmVuOiBwcm9wcyA9PiB7CiAgICAgIHJldHVybiBwcm9wcy5jaGlsZHJlbjsKICAgIH0sCiAgICBFbGVtZW50OiBwcm9wcyA9PiB7CiAgICAgIHJldHVybiBwcm9wcy5jaGlsZHJlbjsKICAgIH0KICB9KTsKCiAgLyoqCiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUKICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzdHJpY3RdCiAgICoKICAgKiBAcmV0dXJucyB7YW55fQogICAqLwogIGZ1bmN0aW9uIGdldFNlcnZpY2UodHlwZSwgc3RyaWN0KSB7fQogIGNvbnN0IEZvcm1Db250ZXh0ID0gRCQxKHsKICAgIGdldFNlcnZpY2UsCiAgICBmb3JtSWQ6IG51bGwKICB9KTsKCiAgZnVuY3Rpb24gRGVzY3JpcHRpb24ocHJvcHMpIHsKICAgIGNvbnN0IHsKICAgICAgZGVzY3JpcHRpb24KICAgIH0gPSBwcm9wczsKICAgIGlmICghZGVzY3JpcHRpb24pIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICByZXR1cm4gZSQyKCJkaXYiLCB7CiAgICAgIGNsYXNzOiAiZmpzLWZvcm0tZmllbGQtZGVzY3JpcHRpb24iLAogICAgICBjaGlsZHJlbjogZGVzY3JpcHRpb24KICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gRXJyb3JzKHByb3BzKSB7CiAgICBjb25zdCB7CiAgICAgIGVycm9ycwogICAgfSA9IHByb3BzOwogICAgaWYgKCFlcnJvcnMubGVuZ3RoKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIGUkMigiZGl2IiwgewogICAgICBjbGFzczogImZqcy1mb3JtLWZpZWxkLWVycm9yIiwKICAgICAgY2hpbGRyZW46IGUkMigidWwiLCB7CiAgICAgICAgY2hpbGRyZW46IGVycm9ycy5tYXAoZXJyb3IgPT4gewogICAgICAgICAgcmV0dXJuIGUkMigibGkiLCB7CiAgICAgICAgICAgIGNoaWxkcmVuOiBlcnJvcgogICAgICAgICAgfSk7CiAgICAgICAgfSkKICAgICAgfSkKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gTGFiZWwocHJvcHMpIHsKICAgIGNvbnN0IHsKICAgICAgaWQsCiAgICAgIGxhYmVsLAogICAgICBjb2xsYXBzZU9uRW1wdHkgPSB0cnVlLAogICAgICByZXF1aXJlZCA9IGZhbHNlCiAgICB9ID0gcHJvcHM7CiAgICByZXR1cm4gZSQyKCJsYWJlbCIsIHsKICAgICAgZm9yOiBpZCwKICAgICAgY2xhc3M6IGNsYXNzTmFtZXMoJ2Zqcy1mb3JtLWZpZWxkLWxhYmVsJywgewogICAgICAgICdmanMtaW5jb2xsYXBzaWJsZS1sYWJlbCc6ICFjb2xsYXBzZU9uRW1wdHkKICAgICAgfSwgcHJvcHNbJ2NsYXNzJ10pLAogICAgICBjaGlsZHJlbjogW3Byb3BzLmNoaWxkcmVuLCBsYWJlbCB8fCAnJywgcmVxdWlyZWQgJiYgZSQyKCJzcGFuIiwgewogICAgICAgIGNsYXNzOiAiZmpzLWFzdGVyaXgiLAogICAgICAgIGNoaWxkcmVuOiAiKiIKICAgICAgfSldCiAgICB9KTsKICB9CgogIGNvbnN0IHR5cGUkYSA9ICdjaGVja2JveCc7CiAgZnVuY3Rpb24gQ2hlY2tib3gocHJvcHMpIHsKICAgIGNvbnN0IHsKICAgICAgZGlzYWJsZWQsCiAgICAgIGVycm9ycyA9IFtdLAogICAgICBmaWVsZCwKICAgICAgdmFsdWUgPSBmYWxzZQogICAgfSA9IHByb3BzOwogICAgY29uc3QgewogICAgICBkZXNjcmlwdGlvbiwKICAgICAgaWQsCiAgICAgIGxhYmVsCiAgICB9ID0gZmllbGQ7CiAgICBjb25zdCBvbkNoYW5nZSA9ICh7CiAgICAgIHRhcmdldAogICAgfSkgPT4gewogICAgICBwcm9wcy5vbkNoYW5nZSh7CiAgICAgICAgZmllbGQsCiAgICAgICAgdmFsdWU6IHRhcmdldC5jaGVja2VkCiAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IHsKICAgICAgZm9ybUlkCiAgICB9ID0gRiQxKEZvcm1Db250ZXh0KTsKICAgIHJldHVybiBlJDIoImRpdiIsIHsKICAgICAgY2xhc3M6IGNsYXNzTmFtZXMoZm9ybUZpZWxkQ2xhc3Nlcyh0eXBlJGEsIHsKICAgICAgICBlcnJvcnMsCiAgICAgICAgZGlzYWJsZWQKICAgICAgfSksIHsKICAgICAgICAnZmpzLWNoZWNrZWQnOiB2YWx1ZQogICAgICB9KSwKICAgICAgY2hpbGRyZW46IFtlJDIoTGFiZWwsIHsKICAgICAgICBpZDogcHJlZml4SWQoaWQsIGZvcm1JZCksCiAgICAgICAgbGFiZWw6IGxhYmVsLAogICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICBjaGlsZHJlbjogZSQyKCJpbnB1dCIsIHsKICAgICAgICAgIGNoZWNrZWQ6IHZhbHVlLAogICAgICAgICAgY2xhc3M6ICJmanMtaW5wdXQiLAogICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLAogICAgICAgICAgaWQ6IHByZWZpeElkKGlkLCBmb3JtSWQpLAogICAgICAgICAgdHlwZTogImNoZWNrYm94IiwKICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZQogICAgICAgIH0pCiAgICAgIH0pLCBlJDIoRGVzY3JpcHRpb24sIHsKICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24KICAgICAgfSksIGUkMihFcnJvcnMsIHsKICAgICAgICBlcnJvcnM6IGVycm9ycwogICAgICB9KV0KICAgIH0pOwogIH0KICBDaGVja2JveC5jcmVhdGUgPSBmdW5jdGlvbiAob3B0aW9ucyA9IHt9KSB7CiAgICByZXR1cm4gewogICAgICAuLi5vcHRpb25zCiAgICB9OwogIH07CiAgQ2hlY2tib3gudHlwZSA9IHR5cGUkYTsKICBDaGVja2JveC5sYWJlbCA9ICdDaGVja2JveCc7CiAgQ2hlY2tib3gua2V5ZWQgPSB0cnVlOwogIENoZWNrYm94LmVtcHR5VmFsdWUgPSBmYWxzZTsKICBDaGVja2JveC5zYW5pdGl6ZVZhbHVlID0gKHsKICAgIHZhbHVlCiAgfSkgPT4gdmFsdWUgPT09IHRydWU7CgogIGZ1bmN0aW9uIHVzZVNlcnZpY2UgKHR5cGUsIHN0cmljdCkgewogICAgY29uc3QgewogICAgICBnZXRTZXJ2aWNlCiAgICB9ID0gRiQxKEZvcm1Db250ZXh0KTsKICAgIHJldHVybiBnZXRTZXJ2aWNlKHR5cGUsIHN0cmljdCk7CiAgfQoKICAvKioKICAgKiBAZW51bSB7IFN0cmluZyB9CiAgICovCiAgY29uc3QgTE9BRF9TVEFURVMgPSB7CiAgICBMT0FESU5HOiAnbG9hZGluZycsCiAgICBMT0FERUQ6ICdsb2FkZWQnLAogICAgRVJST1I6ICdlcnJvcicKICB9OwoKICAvKioKICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBWYWx1ZXNHZXR0ZXIKICAgKiBAcHJvcGVydHkge09iamVjdFtdfSB2YWx1ZXMgLSBUaGUgdmFsdWVzIGRhdGEKICAgKiBAcHJvcGVydHkgeyhMT0FEX1NUQVRFUyl9IHN0YXRlIC0gVGhlIHZhbHVlcyBkYXRhJ3MgbG9hZGluZyBzdGF0ZSwgdG8gdXNlIGZvciBjb25kaXRpb25hbCByZW5kZXJpbmcKICAgKi8KCiAgLyoqCiAgICogQSBob29rIHRvIGxvYWQgdmFsdWVzIGZvciBzaW5nbGUgYW5kIG11bHRpc2VsZWN0IGNvbXBvbmVudHMuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gZmllbGQgLSBUaGUgZm9ybSBmaWVsZCB0byBoYW5kbGUgdmFsdWVzIGZvcgogICAqIEByZXR1cm4ge1ZhbHVlc0dldHRlcn0gdmFsdWVzR2V0dGVyIC0gQSB2YWx1ZXMgZ2V0dGVyIG9iamVjdCBwcm92aWRpbmcgbG9hZGluZyBzdGF0ZSBhbmQgdmFsdWVzCiAgICovCiAgZnVuY3Rpb24gdXNlVmFsdWVzQXN5bmMgKGZpZWxkKSB7CiAgICBjb25zdCB7CiAgICAgIHZhbHVlc0tleSwKICAgICAgdmFsdWVzOiBzdGF0aWNWYWx1ZXMKICAgIH0gPSBmaWVsZDsKICAgIGNvbnN0IFt2YWx1ZXNHZXR0ZXIsIHNldFZhbHVlc0dldHRlcl0gPSBsJDEoewogICAgICB2YWx1ZXM6IFtdLAogICAgICBlcnJvcjogdW5kZWZpbmVkLAogICAgICBzdGF0ZTogTE9BRF9TVEFURVMuTE9BRElORwogICAgfSk7CiAgICBjb25zdCBpbml0aWFsRGF0YSA9IHVzZVNlcnZpY2UoJ2Zvcm0nKS5fZ2V0U3RhdGUoKS5pbml0aWFsRGF0YTsKICAgIHkoKCkgPT4gewogICAgICBsZXQgdmFsdWVzID0gW107CiAgICAgIGlmICh2YWx1ZXNLZXkgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGNvbnN0IGtleWVkVmFsdWVzID0gKGluaXRpYWxEYXRhIHx8IHt9KVt2YWx1ZXNLZXldOwogICAgICAgIGlmIChrZXllZFZhbHVlcyAmJiBBcnJheS5pc0FycmF5KGtleWVkVmFsdWVzKSkgewogICAgICAgICAgdmFsdWVzID0ga2V5ZWRWYWx1ZXM7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHN0YXRpY1ZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdmFsdWVzID0gQXJyYXkuaXNBcnJheShzdGF0aWNWYWx1ZXMpID8gc3RhdGljVmFsdWVzIDogW107CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2V0VmFsdWVzR2V0dGVyKGdldEVycm9yU3RhdGUoJ05vIHZhbHVlcyBzb3VyY2UgZGVmaW5lZCBpbiB0aGUgZm9ybSBkZWZpbml0aW9uJykpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBzZXRWYWx1ZXNHZXR0ZXIoYnVpbGRMb2FkZWRTdGF0ZSh2YWx1ZXMpKTsKICAgIH0sIFt2YWx1ZXNLZXksIHN0YXRpY1ZhbHVlcywgaW5pdGlhbERhdGFdKTsKICAgIHJldHVybiB2YWx1ZXNHZXR0ZXI7CiAgfQogIGNvbnN0IGdldEVycm9yU3RhdGUgPSBlcnJvciA9PiAoewogICAgdmFsdWVzOiBbXSwKICAgIGVycm9yLAogICAgc3RhdGU6IExPQURfU1RBVEVTLkVSUk9SCiAgfSk7CiAgY29uc3QgYnVpbGRMb2FkZWRTdGF0ZSA9IHZhbHVlcyA9PiAoewogICAgdmFsdWVzLAogICAgZXJyb3I6IHVuZGVmaW5lZCwKICAgIHN0YXRlOiBMT0FEX1NUQVRFUy5MT0FERUQKICB9KTsKCiAgY29uc3QgRU5URVJfS0VZRE9XTl9FVkVOVCA9IG5ldyBLZXlib2FyZEV2ZW50KCdrZXlkb3duJywgewogICAgY29kZTogJ0VudGVyJywKICAgIGtleTogJ0VudGVyJywKICAgIGNoYXJDb2RlOiAxMywKICAgIGtleUNvZGU6IDEzLAogICAgdmlldzogd2luZG93LAogICAgYnViYmxlczogdHJ1ZQogIH0pOwogIGZ1bmN0aW9uIGZvY3VzUmVsZXZhbnRGbGF0cGlja2VyRGF5KGZsYXRwaWNrckluc3RhbmNlKSB7CiAgICBpZiAoIWZsYXRwaWNrckluc3RhbmNlKSByZXR1cm47CiAgICAhZmxhdHBpY2tySW5zdGFuY2UuaXNPcGVuICYmIGZsYXRwaWNrckluc3RhbmNlLm9wZW4oKTsKICAgIGNvbnN0IGNvbnRhaW5lciA9IGZsYXRwaWNrckluc3RhbmNlLmNhbGVuZGFyQ29udGFpbmVyOwogICAgY29uc3QgZGF5VG9Gb2N1cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZmxhdHBpY2tyLWRheS5zZWxlY3RlZCcpIHx8IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZmxhdHBpY2tyLWRheS50b2RheScpIHx8IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZmxhdHBpY2tyLWRheScpOwogICAgZGF5VG9Gb2N1cyAmJiBkYXlUb0ZvY3VzLmZvY3VzKCk7CiAgfQogIGZ1bmN0aW9uIGZvcm1hdFRpbWUodXNlMjRoLCBtaW51dGVzKSB7CiAgICBpZiAobWludXRlcyA9PT0gbnVsbCkgcmV0dXJuIG51bGw7CiAgICBjb25zdCB3cmFwcGVkTWludXRlcyA9IG1pbnV0ZXMgJSAoMjQgKiA2MCk7CiAgICBjb25zdCBtaW51dGUgPSBtaW51dGVzICUgNjA7CiAgICBsZXQgaG91ciA9IE1hdGguZmxvb3Iod3JhcHBlZE1pbnV0ZXMgLyA2MCk7CiAgICBpZiAodXNlMjRoKSB7CiAgICAgIHJldHVybiBfZ2V0WmVyb1BhZGRlZFN0cmluZyhob3VyKSArICc6JyArIF9nZXRaZXJvUGFkZGVkU3RyaW5nKG1pbnV0ZSk7CiAgICB9CiAgICBob3VyID0gaG91ciAlIDEyIHx8IDEyOwogICAgY29uc3QgaXNQTSA9IHdyYXBwZWRNaW51dGVzID49IDEyICogNjA7CiAgICByZXR1cm4gX2dldFplcm9QYWRkZWRTdHJpbmcoaG91cikgKyAnOicgKyBfZ2V0WmVyb1BhZGRlZFN0cmluZyhtaW51dGUpICsgJyAnICsgKGlzUE0gPyAnUE0nIDogJ0FNJyk7CiAgfQogIGZ1bmN0aW9uIHBhcnNlSW5wdXRUaW1lKHN0cmluZ1RpbWUpIHsKICAgIGxldCB3b3JraW5nU3RyaW5nID0gc3RyaW5nVGltZS50b0xvd2VyQ2FzZSgpOwogICAgY29uc3QgaXMxMmggPSB3b3JraW5nU3RyaW5nLmluY2x1ZGVzKCdhbScpIHx8IHdvcmtpbmdTdHJpbmcuaW5jbHVkZXMoJ3BtJyk7CiAgICBpZiAoaXMxMmgpIHsKICAgICAgY29uc3QgaXNQTSA9IHdvcmtpbmdTdHJpbmcuaW5jbHVkZXMoJ3BtJyk7CiAgICAgIGNvbnN0IGRpZ2l0cyA9IHdvcmtpbmdTdHJpbmcubWF0Y2goL1xkKy9nKTsKICAgICAgY29uc3QgZGlzcGxheUhvdXIgPSBwYXJzZUludChkaWdpdHM/LlswXSk7CiAgICAgIGNvbnN0IG1pbnV0ZSA9IHBhcnNlSW50KGRpZ2l0cz8uWzFdKSB8fCAwOwogICAgICBjb25zdCBpc1ZhbGlkRGlzcGxheUhvdXIgPSBpc051bWJlciQyKGRpc3BsYXlIb3VyKSAmJiBkaXNwbGF5SG91ciA+PSAxICYmIGRpc3BsYXlIb3VyIDw9IDEyOwogICAgICBjb25zdCBpc1ZhbGlkTWludXRlID0gbWludXRlID49IDAgJiYgbWludXRlIDw9IDU5OwogICAgICBpZiAoIWlzVmFsaWREaXNwbGF5SG91ciB8fCAhaXNWYWxpZE1pbnV0ZSkgcmV0dXJuIG51bGw7CiAgICAgIGNvbnN0IGhvdXIgPSBkaXNwbGF5SG91ciAlIDEyICsgKGlzUE0gPyAxMiA6IDApOwogICAgICByZXR1cm4gaG91ciAqIDYwICsgbWludXRlOwogICAgfSBlbHNlIHsKICAgICAgY29uc3QgZGlnaXRzID0gd29ya2luZ1N0cmluZy5tYXRjaCgvXGQrL2cpOwogICAgICBjb25zdCBob3VyID0gcGFyc2VJbnQoZGlnaXRzPy5bMF0pOwogICAgICBjb25zdCBtaW51dGUgPSBwYXJzZUludChkaWdpdHM/LlsxXSk7CiAgICAgIGNvbnN0IGlzVmFsaWRIb3VyID0gaXNOdW1iZXIkMihob3VyKSAmJiBob3VyID49IDAgJiYgaG91ciA8PSAyMzsKICAgICAgY29uc3QgaXNWYWxpZE1pbnV0ZSA9IGlzTnVtYmVyJDIobWludXRlKSAmJiBtaW51dGUgPj0gMCAmJiBtaW51dGUgPD0gNTk7CiAgICAgIGlmICghaXNWYWxpZEhvdXIgfHwgIWlzVmFsaWRNaW51dGUpIHJldHVybiBudWxsOwogICAgICByZXR1cm4gaG91ciAqIDYwICsgbWludXRlOwogICAgfQogIH0KICBmdW5jdGlvbiBzZXJpYWxpemVUaW1lKG1pbnV0ZXMsIG9mZnNldCwgdGltZVNlcmlhbGl6aW5nRm9ybWF0KSB7CiAgICBpZiAodGltZVNlcmlhbGl6aW5nRm9ybWF0ID09PSBUSU1FX1NFUklBTElTSU5HX0ZPUk1BVFMuVVRDX05PUk1BTElaRUQpIHsKICAgICAgY29uc3Qgbm9ybWFsaXplZE1pbnV0ZXMgPSAobWludXRlcyArIG9mZnNldCArIE1JTlVURVNfSU5fREFZKSAlIE1JTlVURVNfSU5fREFZOwogICAgICByZXR1cm4gX2dldFplcm9QYWRkZWRTdHJpbmcoTWF0aC5mbG9vcihub3JtYWxpemVkTWludXRlcyAvIDYwKSkgKyAnOicgKyBfZ2V0WmVyb1BhZGRlZFN0cmluZyhub3JtYWxpemVkTWludXRlcyAlIDYwKSArICdaJzsKICAgIH0KICAgIGNvbnN0IGJhc2VUaW1lID0gX2dldFplcm9QYWRkZWRTdHJpbmcoTWF0aC5mbG9vcihtaW51dGVzIC8gNjApKSArICc6JyArIF9nZXRaZXJvUGFkZGVkU3RyaW5nKG1pbnV0ZXMgJSA2MCk7CiAgICBjb25zdCBhZGRVVENPZmZzZXQgPSB0aW1lU2VyaWFsaXppbmdGb3JtYXQgPT09IFRJTUVfU0VSSUFMSVNJTkdfRk9STUFUUy5VVENfT0ZGU0VUOwogICAgcmV0dXJuIGJhc2VUaW1lICsgKGFkZFVUQ09mZnNldCA/IGZvcm1hdFRpbWV6b25lT2Zmc2V0KG9mZnNldCkgOiAnJyk7CiAgfQogIGZ1bmN0aW9uIHBhcnNlSXNvVGltZShpc29UaW1lU3RyaW5nKSB7CiAgICBpZiAoIWlzb1RpbWVTdHJpbmcpIHJldHVybiBudWxsOwogICAgY29uc3QgcGFyc2VCYXNpY01pbnV0ZXMgPSB0aW1lU3RyaW5nID0+IHsKICAgICAgY29uc3QgdGltZVNlZ21lbnRzID0gdGltZVN0cmluZy5zcGxpdCgnOicpOwogICAgICBjb25zdCBob3VyID0gcGFyc2VJbnQodGltZVNlZ21lbnRzWzBdKTsKICAgICAgY29uc3QgbWludXRlID0gdGltZVNlZ21lbnRzLmxlbmd0aCA+IDEgPyBwYXJzZUludCh0aW1lU2VnbWVudHNbMV0pIDogMDsKICAgICAgaWYgKGlzTmFOKGhvdXIpIHx8IGhvdXIgPCAwIHx8IGhvdXIgPiAyNCB8fCBpc05hTihtaW51dGUpIHx8IG1pbnV0ZSA8IDAgfHwgbWludXRlID4gNjApIHJldHVybiBudWxsOwogICAgICByZXR1cm4gaG91ciAqIDYwICsgbWludXRlOwogICAgfTsKICAgIGNvbnN0IGxvY2FsT2Zmc2V0ID0gbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpOwoKICAgIC8vIFBhcnNlIG5vcm1hbGl6ZWQgdGltZQogICAgaWYgKGlzb1RpbWVTdHJpbmcuaW5jbHVkZXMoJ1onKSkgewogICAgICBpc29UaW1lU3RyaW5nID0gaXNvVGltZVN0cmluZy5yZXBsYWNlKCdaJywgJycpOwogICAgICBjb25zdCBtaW51dGVzID0gcGFyc2VCYXNpY01pbnV0ZXMoaXNvVGltZVN0cmluZyk7CiAgICAgIGlmIChtaW51dGVzID09PSBudWxsKSByZXR1cm4gbnVsbDsKICAgICAgcmV0dXJuIChtaW51dGVzIC0gbG9jYWxPZmZzZXQgKyBNSU5VVEVTX0lOX0RBWSkgJSBNSU5VVEVTX0lOX0RBWTsKICAgIH0KCiAgICAvLyBQYXJzZSBvZmZzZXQgcG9zaXRpdmUgdGltZQogICAgZWxzZSBpZiAoaXNvVGltZVN0cmluZy5pbmNsdWRlcygnKycpKSB7CiAgICAgIGNvbnN0IFt0aW1lU3RyaW5nLCBvZmZzZXRTdHJpbmddID0gaXNvVGltZVN0cmluZy5zcGxpdCgnKycpOwogICAgICBjb25zdCBtaW51dGVzID0gcGFyc2VCYXNpY01pbnV0ZXModGltZVN0cmluZyk7CiAgICAgIGxldCBpbmJvdW5kT2Zmc2V0ID0gcGFyc2VCYXNpY01pbnV0ZXMob2Zmc2V0U3RyaW5nKTsKICAgICAgaWYgKG1pbnV0ZXMgPT09IG51bGwgfHwgaW5ib3VuZE9mZnNldCA9PT0gbnVsbCkgcmV0dXJuIG51bGw7CgogICAgICAvLyBUaGUgb2Zmc2V0IGlzIGZsaXBwZWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggamF2YXNjcmlwdAogICAgICBpbmJvdW5kT2Zmc2V0ID0gLWluYm91bmRPZmZzZXQ7CiAgICAgIHJldHVybiAobWludXRlcyArIGluYm91bmRPZmZzZXQgLSBsb2NhbE9mZnNldCArIE1JTlVURVNfSU5fREFZKSAlIE1JTlVURVNfSU5fREFZOwogICAgfQoKICAgIC8vIFBhcnNlIG9mZnNldCBuZWdhdGl2ZSB0aW1lCiAgICBlbHNlIGlmIChpc29UaW1lU3RyaW5nLmluY2x1ZGVzKCctJykpIHsKICAgICAgY29uc3QgW3RpbWVTdHJpbmcsIG9mZnNldFN0cmluZ10gPSBpc29UaW1lU3RyaW5nLnNwbGl0KCctJyk7CiAgICAgIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZUJhc2ljTWludXRlcyh0aW1lU3RyaW5nKTsKICAgICAgbGV0IGluYm91bmRPZmZzZXQgPSBwYXJzZUJhc2ljTWludXRlcyhvZmZzZXRTdHJpbmcpOwogICAgICBpZiAobWludXRlcyA9PT0gbnVsbCB8fCBpbmJvdW5kT2Zmc2V0ID09PSBudWxsKSByZXR1cm4gbnVsbDsKICAgICAgcmV0dXJuIChtaW51dGVzICsgaW5ib3VuZE9mZnNldCAtIGxvY2FsT2Zmc2V0ICsgTUlOVVRFU19JTl9EQVkpICUgTUlOVVRFU19JTl9EQVk7CiAgICB9CgogICAgLy8gRGVmYXVsdCB0byBsb2NhbCBwYXJzaW5nCiAgICBlbHNlIHsKICAgICAgcmV0dXJuIHBhcnNlQmFzaWNNaW51dGVzKGlzb1RpbWVTdHJpbmcpOwogICAgfQogIH0KICBmdW5jdGlvbiBzZXJpYWxpemVEYXRlKGRhdGUpIHsKICAgIHZhciBkID0gbmV3IERhdGUoZGF0ZSksCiAgICAgIG1vbnRoID0gJycgKyAoZC5nZXRNb250aCgpICsgMSksCiAgICAgIGRheSA9ICcnICsgZC5nZXREYXRlKCksCiAgICAgIHllYXIgPSBkLmdldEZ1bGxZZWFyKCk7CiAgICBpZiAobW9udGgubGVuZ3RoIDwgMikgbW9udGggPSAnMCcgKyBtb250aDsKICAgIGlmIChkYXkubGVuZ3RoIDwgMikgZGF5ID0gJzAnICsgZGF5OwogICAgcmV0dXJuIFt5ZWFyLCBtb250aCwgZGF5XS5qb2luKCctJyk7CiAgfQoKICAvLyB0aGlzIG1ldGhvZCBpcyB1c2VkIHRvIG1ha2UgdGhlIGBuZXcgRGF0ZSh2YWx1ZSlgIHBhcnNpbmcgYmVoYXZpb3Igc3RyaWN0ZXIKICBmdW5jdGlvbiBpc0RhdGVUaW1lSW5wdXRJbmZvcm1hdGlvblN1ZmZpY2llbnQodmFsdWUpIHsKICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlOwogICAgY29uc3Qgc2VnbWVudHMgPSB2YWx1ZS5zcGxpdCgnVCcpOwogICAgaWYgKHNlZ21lbnRzLmxlbmd0aCAhPSAyKSByZXR1cm4gZmFsc2U7CiAgICBjb25zdCBkYXRlTnVtYmVycyA9IHNlZ21lbnRzWzBdLnNwbGl0KCctJyk7CiAgICBpZiAoZGF0ZU51bWJlcnMubGVuZ3RoICE9IDMpIHJldHVybiBmYWxzZTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gdGhpcyBtZXRob2QgY2hlY2tzIGlmIHRoZSBkYXRlIGlzbid0IGEgZGF0ZXRpbWUsIG9yIGEgcGFydGlhbCBkYXRlCiAgZnVuY3Rpb24gaXNEYXRlSW5wdXRJbmZvcm1hdGlvbk1hdGNoaW5nKHZhbHVlKSB7CiAgICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTsKICAgIGlmICh2YWx1ZS5pbmNsdWRlcygnVCcpKSByZXR1cm4gZmFsc2U7CiAgICBjb25zdCBkYXRlTnVtYmVycyA9IHZhbHVlLnNwbGl0KCctJyk7CiAgICBpZiAoZGF0ZU51bWJlcnMubGVuZ3RoICE9IDMpIHJldHVybiBmYWxzZTsKICAgIHJldHVybiB0cnVlOwogIH0KICBmdW5jdGlvbiBzZXJpYWxpemVEYXRlVGltZShkYXRlLCB0aW1lLCB0aW1lU2VyaWFsaXppbmdGb3JtYXQpIHsKICAgIGNvbnN0IHdvcmtpbmdEYXRlID0gbmV3IERhdGUoKTsKICAgIHdvcmtpbmdEYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSk7CiAgICB3b3JraW5nRGF0ZS5zZXRIb3VycyhNYXRoLmZsb29yKHRpbWUgLyA2MCksIHRpbWUgJSA2MCwgMCwgMCk7CiAgICBpZiAodGltZVNlcmlhbGl6aW5nRm9ybWF0ID09PSBUSU1FX1NFUklBTElTSU5HX0ZPUk1BVFMuVVRDX05PUk1BTElaRUQpIHsKICAgICAgY29uc3QgdGltZXpvbmVPZmZzZXRNaW51dGVzID0gd29ya2luZ0RhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTsKICAgICAgY29uc3QgZGF5T2Zmc2V0ID0gdGltZSArIHRpbWV6b25lT2Zmc2V0TWludXRlcyA8IDAgPyAtMSA6IHRpbWUgKyB0aW1lem9uZU9mZnNldE1pbnV0ZXMgPiBNSU5VVEVTX0lOX0RBWSA/IDEgOiAwOwoKICAgICAgLy8gQXBwbHkgdGhlIGRhdGUgcm9sbG92ZXIgcHJlLWVtcHRpdmVseQogICAgICB3b3JraW5nRGF0ZS5zZXRIb3Vycyh3b3JraW5nRGF0ZS5nZXRIb3VycygpICsgZGF5T2Zmc2V0ICogMjQpOwogICAgfQogICAgcmV0dXJuIHNlcmlhbGl6ZURhdGUod29ya2luZ0RhdGUpICsgJ1QnICsgc2VyaWFsaXplVGltZSh0aW1lLCB3b3JraW5nRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpLCB0aW1lU2VyaWFsaXppbmdGb3JtYXQpOwogIH0KICBmdW5jdGlvbiBmb3JtYXRUaW1lem9uZU9mZnNldChtaW51dGVzKSB7CiAgICByZXR1cm4gX2dldFNpZ25lZFBhZGRlZEhvdXJzKG1pbnV0ZXMpICsgJzonICsgX2dldFplcm9QYWRkZWRTdHJpbmcoTWF0aC5hYnMobWludXRlcyAlIDYwKSk7CiAgfQogIGZ1bmN0aW9uIGlzSW52YWxpZERhdGVTdHJpbmcodmFsdWUpIHsKICAgIHJldHVybiBpc05hTihuZXcgRGF0ZShEYXRlLnBhcnNlKHZhbHVlKSkuZ2V0VGltZSgpKTsKICB9CiAgZnVuY3Rpb24gX2dldFNpZ25lZFBhZGRlZEhvdXJzKG1pbnV0ZXMpIHsKICAgIGlmIChtaW51dGVzID4gMCkgewogICAgICByZXR1cm4gJy0nICsgX2dldFplcm9QYWRkZWRTdHJpbmcoTWF0aC5mbG9vcihtaW51dGVzIC8gNjApKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAnKycgKyBfZ2V0WmVyb1BhZGRlZFN0cmluZyhNYXRoLmZsb29yKCgwIC0gbWludXRlcykgLyA2MCkpOwogICAgfQogIH0KICBmdW5jdGlvbiBfZ2V0WmVyb1BhZGRlZFN0cmluZyh0aW1lKSB7CiAgICByZXR1cm4gdGltZS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7CiAgfQoKICBmdW5jdGlvbiBzYW5pdGl6ZURhdGVUaW1lUGlja2VyVmFsdWUob3B0aW9ucykgewogICAgY29uc3QgewogICAgICBmb3JtRmllbGQsCiAgICAgIHZhbHVlCiAgICB9ID0gb3B0aW9uczsKICAgIGNvbnN0IHsKICAgICAgc3VidHlwZQogICAgfSA9IGZvcm1GaWVsZDsKICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSByZXR1cm4gbnVsbDsKICAgIGlmIChzdWJ0eXBlID09PSBEQVRFVElNRV9TVUJUWVBFUy5EQVRFICYmIChpc0ludmFsaWREYXRlU3RyaW5nKHZhbHVlKSB8fCAhaXNEYXRlSW5wdXRJbmZvcm1hdGlvbk1hdGNoaW5nKHZhbHVlKSkpIHJldHVybiBudWxsOwogICAgaWYgKHN1YnR5cGUgPT09IERBVEVUSU1FX1NVQlRZUEVTLlRJTUUgJiYgcGFyc2VJc29UaW1lKHZhbHVlKSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7CiAgICBpZiAoc3VidHlwZSA9PT0gREFURVRJTUVfU1VCVFlQRVMuREFURVRJTUUgJiYgKGlzSW52YWxpZERhdGVTdHJpbmcodmFsdWUpIHx8ICFpc0RhdGVUaW1lSW5wdXRJbmZvcm1hdGlvblN1ZmZpY2llbnQodmFsdWUpKSkgcmV0dXJuIG51bGw7CiAgICByZXR1cm4gdmFsdWU7CiAgfQogIGZ1bmN0aW9uIHNhbml0aXplU2luZ2xlU2VsZWN0VmFsdWUob3B0aW9ucykgewogICAgY29uc3QgewogICAgICBmb3JtRmllbGQsCiAgICAgIGRhdGEsCiAgICAgIHZhbHVlCiAgICB9ID0gb3B0aW9uczsKICAgIGNvbnN0IHsKICAgICAgdmFsdWVzS2V5LAogICAgICB2YWx1ZXMKICAgIH0gPSBmb3JtRmllbGQ7CiAgICB0cnkgewogICAgICBjb25zdCB2YWxpZFZhbHVlcyA9ICh2YWx1ZXNLZXkgPyBnZXQoZGF0YSwgW3ZhbHVlc0tleV0pIDogdmFsdWVzKS5tYXAodiA9PiB2LnZhbHVlKSB8fCBbXTsKICAgICAgcmV0dXJuIHZhbGlkVmFsdWVzLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogbnVsbDsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIC8vIHVzZSBkZWZhdWx0IHZhbHVlIGluIGNhc2Ugb2YgZm9ybWF0dGluZyBlcnJvcgogICAgICAvLyBUT0RPKEBTa2FpaXIpOiBsb2cgYSB3YXJuaW5nIHdoZW4gdGhpcyBoYXBwZW5zIC0gaHR0cHM6Ly9naXRodWIuY29tL2JwbW4taW8vZm9ybS1qcy9pc3N1ZXMvMjg5CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0KICBmdW5jdGlvbiBzYW5pdGl6ZU11bHRpU2VsZWN0VmFsdWUob3B0aW9ucykgewogICAgY29uc3QgewogICAgICBmb3JtRmllbGQsCiAgICAgIGRhdGEsCiAgICAgIHZhbHVlCiAgICB9ID0gb3B0aW9uczsKICAgIGNvbnN0IHsKICAgICAgdmFsdWVzS2V5LAogICAgICB2YWx1ZXMKICAgIH0gPSBmb3JtRmllbGQ7CiAgICB0cnkgewogICAgICBjb25zdCB2YWxpZFZhbHVlcyA9ICh2YWx1ZXNLZXkgPyBnZXQoZGF0YSwgW3ZhbHVlc0tleV0pIDogdmFsdWVzKS5tYXAodiA9PiB2LnZhbHVlKSB8fCBbXTsKICAgICAgcmV0dXJuIHZhbHVlLmZpbHRlcih2ID0+IHZhbGlkVmFsdWVzLmluY2x1ZGVzKHYpKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIC8vIHVzZSBkZWZhdWx0IHZhbHVlIGluIGNhc2Ugb2YgZm9ybWF0dGluZyBlcnJvcgogICAgICAvLyBUT0RPKEBTa2FpaXIpOiBsb2cgYSB3YXJuaW5nIHdoZW4gdGhpcyBoYXBwZW5zIC0gaHR0cHM6Ly9naXRodWIuY29tL2JwbW4taW8vZm9ybS1qcy9pc3N1ZXMvMjg5CiAgICAgIHJldHVybiBbXTsKICAgIH0KICB9CgogIGNvbnN0IHR5cGUkOSA9ICdjaGVja2xpc3QnOwogIGZ1bmN0aW9uIENoZWNrbGlzdChwcm9wcykgewogICAgY29uc3QgewogICAgICBkaXNhYmxlZCwKICAgICAgZXJyb3JzID0gW10sCiAgICAgIGZpZWxkLAogICAgICB2YWx1ZSA9IFtdCiAgICB9ID0gcHJvcHM7CiAgICBjb25zdCB7CiAgICAgIGRlc2NyaXB0aW9uLAogICAgICBpZCwKICAgICAgbGFiZWwKICAgIH0gPSBmaWVsZDsKICAgIGNvbnN0IHRvZ2dsZUNoZWNrYm94ID0gdiA9PiB7CiAgICAgIGxldCBuZXdWYWx1ZSA9IFsuLi52YWx1ZV07CiAgICAgIGlmICghbmV3VmFsdWUuaW5jbHVkZXModikpIHsKICAgICAgICBuZXdWYWx1ZS5wdXNoKHYpOwogICAgICB9IGVsc2UgewogICAgICAgIG5ld1ZhbHVlID0gbmV3VmFsdWUuZmlsdGVyKHggPT4geCAhPSB2KTsKICAgICAgfQogICAgICBwcm9wcy5vbkNoYW5nZSh7CiAgICAgICAgZmllbGQsCiAgICAgICAgdmFsdWU6IG5ld1ZhbHVlCiAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IHsKICAgICAgc3RhdGU6IGxvYWRTdGF0ZSwKICAgICAgdmFsdWVzOiBvcHRpb25zCiAgICB9ID0gdXNlVmFsdWVzQXN5bmMoZmllbGQpOwogICAgY29uc3QgewogICAgICBmb3JtSWQKICAgIH0gPSBGJDEoRm9ybUNvbnRleHQpOwogICAgcmV0dXJuIGUkMigiZGl2IiwgewogICAgICBjbGFzczogY2xhc3NOYW1lcyhmb3JtRmllbGRDbGFzc2VzKHR5cGUkOSwgewogICAgICAgIGVycm9ycywKICAgICAgICBkaXNhYmxlZAogICAgICB9KSksCiAgICAgIGNoaWxkcmVuOiBbZSQyKExhYmVsLCB7CiAgICAgICAgbGFiZWw6IGxhYmVsCiAgICAgIH0pLCBsb2FkU3RhdGUgPT0gTE9BRF9TVEFURVMuTE9BREVEICYmIG9wdGlvbnMubWFwKCh2LCBpbmRleCkgPT4gewogICAgICAgIHJldHVybiBlJDIoTGFiZWwsIHsKICAgICAgICAgIGlkOiBwcmVmaXhJZChgJHtpZH0tJHtpbmRleH1gLCBmb3JtSWQpLAogICAgICAgICAgbGFiZWw6IHYubGFiZWwsCiAgICAgICAgICBjbGFzczogY2xhc3NOYW1lcyh7CiAgICAgICAgICAgICdmanMtY2hlY2tlZCc6IHZhbHVlLmluY2x1ZGVzKHYudmFsdWUpCiAgICAgICAgICB9KSwKICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICAgIGNoaWxkcmVuOiBlJDIoImlucHV0IiwgewogICAgICAgICAgICBjaGVja2VkOiB2YWx1ZS5pbmNsdWRlcyh2LnZhbHVlKSwKICAgICAgICAgICAgY2xhc3M6ICJmanMtaW5wdXQiLAogICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsCiAgICAgICAgICAgIGlkOiBwcmVmaXhJZChgJHtpZH0tJHtpbmRleH1gLCBmb3JtSWQpLAogICAgICAgICAgICB0eXBlOiAiY2hlY2tib3giLAogICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB0b2dnbGVDaGVja2JveCh2LnZhbHVlKQogICAgICAgICAgfSkKICAgICAgICB9LCBgJHtpZH0tJHtpbmRleH1gKTsKICAgICAgfSksIGUkMihEZXNjcmlwdGlvbiwgewogICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbgogICAgICB9KSwgZSQyKEVycm9ycywgewogICAgICAgIGVycm9yczogZXJyb3JzCiAgICAgIH0pXQogICAgfSk7CiAgfQogIENoZWNrbGlzdC5jcmVhdGUgPSBmdW5jdGlvbiAob3B0aW9ucyA9IHt9KSB7CiAgICBpZiAob3B0aW9ucy52YWx1ZXNLZXkpIHJldHVybiBvcHRpb25zOwogICAgcmV0dXJuIHsKICAgICAgdmFsdWVzOiBbewogICAgICAgIGxhYmVsOiAnVmFsdWUnLAogICAgICAgIHZhbHVlOiAndmFsdWUnCiAgICAgIH1dLAogICAgICAuLi5vcHRpb25zCiAgICB9OwogIH07CiAgQ2hlY2tsaXN0LnR5cGUgPSB0eXBlJDk7CiAgQ2hlY2tsaXN0LmxhYmVsID0gJ0NoZWNrbGlzdCc7CiAgQ2hlY2tsaXN0LmtleWVkID0gdHJ1ZTsKICBDaGVja2xpc3QuZW1wdHlWYWx1ZSA9IFtdOwogIENoZWNrbGlzdC5zYW5pdGl6ZVZhbHVlID0gc2FuaXRpemVNdWx0aVNlbGVjdFZhbHVlOwoKICAvKioKICAgKiBDaGVjayBpZiBjb25kaXRpb24gaXMgbWV0IHdpdGggZ2l2ZW4gdmFyaWFibGVzLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IGNvbmRpdGlvbgogICAqIEBwYXJhbSB7aW1wb3J0KCcuLi8uLi90eXBlcycpLkRhdGF9IGRhdGEKICAgKgogICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGNvbmRpdGlvbiBpcyBtZXQgb3Igbm8gY29uZGl0aW9uIG9yIGNvbmRpdGlvbiBjaGVja2VyIGV4aXN0cwogICAqLwogIGZ1bmN0aW9uIHVzZUNvbmRpdGlvbihjb25kaXRpb24sIGRhdGEpIHsKICAgIGNvbnN0IGluaXRpYWxEYXRhID0gdXNlU2VydmljZSgnZm9ybScpLl9nZXRTdGF0ZSgpLmluaXRpYWxEYXRhOwogICAgY29uc3QgY29uZGl0aW9uQ2hlY2tlciA9IHVzZVNlcnZpY2UoJ2NvbmRpdGlvbkNoZWNrZXInLCBmYWxzZSk7CiAgICBpZiAoIWNvbmRpdGlvbkNoZWNrZXIpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgLy8gbWFrZSBzdXJlIHdlIGRvIG5vdCB1c2UgZGF0YSBmcm9tIGhpZGRlbiBmaWVsZHMKICAgIGNvbnN0IGZpbHRlcmVkRGF0YSA9IHsKICAgICAgLi4uaW5pdGlhbERhdGEsCiAgICAgIC4uLmNvbmRpdGlvbkNoZWNrZXIuYXBwbHlDb25kaXRpb25zKGRhdGEsIGRhdGEpCiAgICB9OwogICAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIuY2hlY2soY29uZGl0aW9uLCBmaWx0ZXJlZERhdGEpOwogIH0KCiAgY29uc3Qgbm9vcCQxID0gKCkgPT4gZmFsc2U7CiAgZnVuY3Rpb24gRm9ybUZpZWxkKHByb3BzKSB7CiAgICBjb25zdCB7CiAgICAgIGZpZWxkLAogICAgICBvbkNoYW5nZQogICAgfSA9IHByb3BzOwogICAgY29uc3QgewogICAgICBfcGF0aAogICAgfSA9IGZpZWxkOwogICAgY29uc3QgZm9ybUZpZWxkcyA9IHVzZVNlcnZpY2UoJ2Zvcm1GaWVsZHMnKSwKICAgICAgZm9ybSA9IHVzZVNlcnZpY2UoJ2Zvcm0nKTsKICAgIGNvbnN0IHsKICAgICAgZGF0YSwKICAgICAgZXJyb3JzLAogICAgICBwcm9wZXJ0aWVzCiAgICB9ID0gZm9ybS5fZ2V0U3RhdGUoKTsKICAgIGNvbnN0IHsKICAgICAgRWxlbWVudCwKICAgICAgRW1wdHkKICAgIH0gPSBGJDEoRm9ybVJlbmRlckNvbnRleHQpOwogICAgY29uc3QgRm9ybUZpZWxkQ29tcG9uZW50ID0gZm9ybUZpZWxkcy5nZXQoZmllbGQudHlwZSk7CiAgICBpZiAoIUZvcm1GaWVsZENvbXBvbmVudCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCByZW5kZXIgZmllbGQgPCR7ZmllbGQudHlwZX0+YCk7CiAgICB9CiAgICBjb25zdCB2YWx1ZSA9IGdldChkYXRhLCBfcGF0aCk7CiAgICBjb25zdCBmaWVsZEVycm9ycyA9IGZpbmRFcnJvcnMoZXJyb3JzLCBfcGF0aCk7CiAgICBjb25zdCBkaXNhYmxlZCA9IHByb3BlcnRpZXMucmVhZE9ubHkgfHwgZmllbGQuZGlzYWJsZWQgfHwgZmFsc2U7CiAgICBjb25zdCBoaWRkZW4gPSB1c2VIaWRlQ29uZGl0aW9uKGZpZWxkLCBkYXRhKTsKICAgIGlmIChoaWRkZW4pIHsKICAgICAgcmV0dXJuIGUkMihFbXB0eSwge30pOwogICAgfQogICAgcmV0dXJuIGUkMihFbGVtZW50LCB7CiAgICAgIGZpZWxkOiBmaWVsZCwKICAgICAgY2hpbGRyZW46IGUkMihGb3JtRmllbGRDb21wb25lbnQsIHsKICAgICAgICAuLi5wcm9wcywKICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsCiAgICAgICAgZXJyb3JzOiBmaWVsZEVycm9ycywKICAgICAgICBvbkNoYW5nZTogZGlzYWJsZWQgPyBub29wJDEgOiBvbkNoYW5nZSwKICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgfSkKICAgIH0pOwogIH0KICBmdW5jdGlvbiB1c2VIaWRlQ29uZGl0aW9uKGZpZWxkLCBkYXRhKSB7CiAgICBjb25zdCBoaWRlQ29uZGl0aW9uID0gZmllbGQuY29uZGl0aW9uYWwgJiYgZmllbGQuY29uZGl0aW9uYWwuaGlkZTsKICAgIHJldHVybiB1c2VDb25kaXRpb24oaGlkZUNvbmRpdGlvbiwgZGF0YSkgPT09IHRydWU7CiAgfQoKICBmdW5jdGlvbiBEZWZhdWx0KHByb3BzKSB7CiAgICBjb25zdCB7CiAgICAgIENoaWxkcmVuLAogICAgICBFbXB0eQogICAgfSA9IEYkMShGb3JtUmVuZGVyQ29udGV4dCk7CiAgICBjb25zdCB7CiAgICAgIGZpZWxkCiAgICB9ID0gcHJvcHM7CiAgICBjb25zdCB7CiAgICAgIGNvbXBvbmVudHMgPSBbXQogICAgfSA9IGZpZWxkOwogICAgcmV0dXJuIGUkMihDaGlsZHJlbiwgewogICAgICBjbGFzczogImZqcy12ZXJ0aWNhbC1sYXlvdXQiLAogICAgICBmaWVsZDogZmllbGQsCiAgICAgIGNoaWxkcmVuOiBbY29tcG9uZW50cy5tYXAoY2hpbGRGaWVsZCA9PiB7CiAgICAgICAgcmV0dXJuIHYkMShGb3JtRmllbGQsIHsKICAgICAgICAgIC4uLnByb3BzLAogICAgICAgICAga2V5OiBjaGlsZEZpZWxkLmlkLAogICAgICAgICAgZmllbGQ6IGNoaWxkRmllbGQKICAgICAgICB9KTsKICAgICAgfSksIGNvbXBvbmVudHMubGVuZ3RoID8gbnVsbCA6IGUkMihFbXB0eSwge30pXQogICAgfSk7CiAgfQogIERlZmF1bHQuY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMgPSB7fSkgewogICAgcmV0dXJuIHsKICAgICAgY29tcG9uZW50czogW10sCiAgICAgIC4uLm9wdGlvbnMKICAgIH07CiAgfTsKICBEZWZhdWx0LnR5cGUgPSAnZGVmYXVsdCc7CiAgRGVmYXVsdC5rZXllZCA9IGZhbHNlOwoKICBmdW5jdGlvbiBfZXh0ZW5kcyRoKCkgeyBfZXh0ZW5kcyRoID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcyRoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0KICB2YXIgQ2FsZW5kYXJJY29uID0gKCh7CiAgICBzdHlsZXMgPSB7fSwKICAgIC4uLnByb3BzCiAgfSkgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInN2ZyIsIF9leHRlbmRzJGgoewogICAgd2lkdGg6ICIxNCIsCiAgICBoZWlnaHQ6ICIxNSIsCiAgICB2aWV3Qm94OiAiMCAwIDI4IDMwIiwKICAgIGZpbGw6ICJub25lIiwKICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicGF0aCIsIHsKICAgIGZpbGxSdWxlOiAiZXZlbm9kZCIsCiAgICBjbGlwUnVsZTogImV2ZW5vZGQiLAogICAgZDogIk0xOSAySDlWMEg3djJIMmEyIDIgMCAwMC0yIDJ2MjRhMiAyIDAgMDAyIDJoMjRhMiAyIDAgMDAyLTJWNGEyIDIgMCAwMC0yLTJoLTVWMGgtMnYyek03IDdWNEgydjVoMjRWNGgtNXYzaC0yVjRIOXYzSDd6bS01IDR2MTdoMjRWMTFIMnoiLAogICAgZmlsbDogIiMwMDAiCiAgfSkpKTsKCiAgZnVuY3Rpb24gSW5wdXRBZG9ybmVyKHByb3BzKSB7CiAgICBjb25zdCB7CiAgICAgIHByZSA9IG51bGwsCiAgICAgIHBvc3QgPSBudWxsLAogICAgICByb290UmVmLAogICAgICBpbnB1dFJlZiwKICAgICAgY2hpbGRyZW4sCiAgICAgIGRpc2FibGVkLAogICAgICBoYXNFcnJvcnMKICAgIH0gPSBwcm9wczsKICAgIGNvbnN0IG9uQWRvcm5tZW50Q2xpY2sgPSAoKSA9PiBpbnB1dFJlZj8uY3VycmVudD8uZm9jdXMoKTsKICAgIHJldHVybiBlJDIoImRpdiIsIHsKICAgICAgY2xhc3M6IGNsYXNzTmFtZXMoJ2Zqcy1pbnB1dC1ncm91cCcsIHsKICAgICAgICAnZGlzYWJsZWQnOiBkaXNhYmxlZAogICAgICB9LCB7CiAgICAgICAgJ2hhc0Vycm9ycyc6IGhhc0Vycm9ycwogICAgICB9KSwKICAgICAgcmVmOiByb290UmVmLAogICAgICBjaGlsZHJlbjogW3ByZSAhPT0gbnVsbCAmJiBlJDIoInNwYW4iLCB7CiAgICAgICAgY2xhc3M6ICJmanMtaW5wdXQtYWRvcm5tZW50IGJvcmRlci1yaWdodCBib3JkZXItcmFkaXVzLWxlZnQiLAogICAgICAgIG9uQ2xpY2s6IG9uQWRvcm5tZW50Q2xpY2ssCiAgICAgICAgY2hpbGRyZW46IFsiICIsIHByZSwgIiAiXQogICAgICB9KSwgY2hpbGRyZW4sIHBvc3QgIT09IG51bGwgJiYgZSQyKCJzcGFuIiwgewogICAgICAgIGNsYXNzOiAiZmpzLWlucHV0LWFkb3JubWVudCBib3JkZXItbGVmdCBib3JkZXItcmFkaXVzLXJpZ2h0IiwKICAgICAgICBvbkNsaWNrOiBvbkFkb3JubWVudENsaWNrLAogICAgICAgIGNoaWxkcmVuOiBbIiAiLCBwb3N0LCAiICJdCiAgICAgIH0pXQogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBEYXRlcGlja2VyKHByb3BzKSB7CiAgICBjb25zdCB7CiAgICAgIGlkLAogICAgICBsYWJlbCwKICAgICAgY29sbGFwc2VMYWJlbE9uRW1wdHksCiAgICAgIGZvcm1JZCwKICAgICAgcmVxdWlyZWQsCiAgICAgIGRpc2FibGVkLAogICAgICBkaXNhbGxvd1Bhc3NlZERhdGVzLAogICAgICBkYXRlLAogICAgICBzZXREYXRlCiAgICB9ID0gcHJvcHM7CiAgICBjb25zdCBkYXRlSW5wdXRSZWYgPSBzKCk7CiAgICBjb25zdCBmb2N1c1Njb3BlUmVmID0gcygpOwogICAgY29uc3QgW2ZsYXRwaWNrckluc3RhbmNlLCBzZXRGbGF0cGlja3JJbnN0YW5jZV0gPSBsJDEobnVsbCk7CiAgICBjb25zdCBbaXNJbnB1dERpcnR5LCBzZXRJc0lucHV0RGlydHldID0gbCQxKGZhbHNlKTsKICAgIGNvbnN0IFtmb3JjZUZvY3VzQ2FsZW5kYXIsIHNldEZvcmNlRm9jdXNDYWxlbmRhcl0gPSBsJDEoZmFsc2UpOwoKICAgIC8vIHNob3J0cyB0aGUgZGF0ZSB2YWx1ZSBiYWNrIHRvIHRoZSBzb3VyY2UKICAgIHkoKCkgPT4gewogICAgICBpZiAoIWZsYXRwaWNrckluc3RhbmNlIHx8ICFmbGF0cGlja3JJbnN0YW5jZS5jb25maWcpIHJldHVybjsKICAgICAgZmxhdHBpY2tySW5zdGFuY2Uuc2V0RGF0ZShkYXRlLCB0cnVlKTsKICAgICAgc2V0SXNJbnB1dERpcnR5KGZhbHNlKTsKICAgIH0sIFtmbGF0cGlja3JJbnN0YW5jZSwgZGF0ZS50b1N0cmluZygpXSk7CiAgICB5KCgpID0+IHsKICAgICAgaWYgKCFmb3JjZUZvY3VzQ2FsZW5kYXIpIHJldHVybjsKICAgICAgZm9jdXNSZWxldmFudEZsYXRwaWNrZXJEYXkoZmxhdHBpY2tySW5zdGFuY2UpOwogICAgICBzZXRGb3JjZUZvY3VzQ2FsZW5kYXIoZmFsc2UpOwogICAgfSwgW2ZsYXRwaWNrckluc3RhbmNlLCBmb3JjZUZvY3VzQ2FsZW5kYXJdKTsKCiAgICAvLyBzZXR1cCBmbGF0cGlja3IgaW5zdGFuY2UKICAgIHkoKCkgPT4gewogICAgICBpZiAoZGlzYWJsZWQpIHsKICAgICAgICBzZXRGbGF0cGlja3JJbnN0YW5jZShudWxsKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgbGV0IGNvbmZpZyA9IHsKICAgICAgICBhbGxvd0lucHV0OiB0cnVlLAogICAgICAgIGRhdGVGb3JtYXQ6ICdtL2QvWScsCiAgICAgICAgc3RhdGljOiB0cnVlLAogICAgICAgIGNsaWNrT3BlbnM6IGZhbHNlLAogICAgICAgIGVycm9ySGFuZGxlcjogKCkgPT4gey8qIGRvIG5vdGhpbmcsIHdlIGV4cGVjdCB0aGUgdmFsdWVzIHRvIHNvbWV0aW1lcyBiZSBlcnJvbm91cyBhbmQgd2UgZG9uJ3Qgd2FudCB3YXJuaW5ncyBwb2xsdXRpbmcgdGhlIGNvbnNvbGUgKi99CiAgICAgIH07CiAgICAgIGlmIChkaXNhbGxvd1Bhc3NlZERhdGVzKSB7CiAgICAgICAgY29uZmlnID0gewogICAgICAgICAgLi4uY29uZmlnLAogICAgICAgICAgbWluRGF0ZTogJ3RvZGF5JwogICAgICAgIH07CiAgICAgIH0KICAgICAgY29uc3QgaW5zdGFuY2UgPSBmbGF0cGlja3IoZGF0ZUlucHV0UmVmLmN1cnJlbnQsIGNvbmZpZyk7CiAgICAgIHNldEZsYXRwaWNrckluc3RhbmNlKGluc3RhbmNlKTsKICAgICAgY29uc3Qgb25DYWxlbmRhckZvY3VzT3V0ID0gZSA9PiB7CiAgICAgICAgaWYgKCFpbnN0YW5jZS5jYWxlbmRhckNvbnRhaW5lci5jb250YWlucyhlLnJlbGF0ZWRUYXJnZXQpICYmIGUucmVsYXRlZFRhcmdldCAhPSBkYXRlSW5wdXRSZWYuY3VycmVudCkgewogICAgICAgICAgaW5zdGFuY2UuY2xvc2UoKTsKICAgICAgICB9CiAgICAgIH07CgogICAgICAvLyByZW1vdmUgZGlydHkgdGFnIHRvIGhhdmUgbW91c2UgZGF5IHNlbGVjdGlvbiBwcmlvcml0aXplIGlucHV0IGJsdXIKICAgICAgY29uc3Qgb25DYWxlbmRhck1vdXNlRG93biA9IGUgPT4gewogICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZsYXRwaWNrci1kYXknKSkgewogICAgICAgICAgc2V0SXNJbnB1dERpcnR5KGZhbHNlKTsKICAgICAgICB9CiAgICAgIH07CgogICAgICAvLyB3aGVuIHRoZSBkcm9wZG93biBvZiB0aGUgZGF0ZXBpY2tyIG9wZW5zLCB3ZSByZWdpc3RlciBhIGZldyBldmVudCBoYW5kbGVycyB0byByZS1pbXBsZW1lbnQgc29tZSBvZiB0aGUKICAgICAgLy8gZmxhdHBpY2tlciBsb2dpYyB0aGF0IHdhcyBsb3N0IHdoZW4gc2V0dGluZyBhbGxvd0lucHV0IHRvIHRydWUKICAgICAgaW5zdGFuY2UuY29uZmlnLm9uT3BlbiA9IFsoKSA9PiBpbnN0YW5jZS5jYWxlbmRhckNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIG9uQ2FsZW5kYXJGb2N1c091dCksICgpID0+IGluc3RhbmNlLmNhbGVuZGFyQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uQ2FsZW5kYXJNb3VzZURvd24pXTsKICAgICAgaW5zdGFuY2UuY29uZmlnLm9uQ2xvc2UgPSBbKCkgPT4gaW5zdGFuY2UuY2FsZW5kYXJDb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCBvbkNhbGVuZGFyRm9jdXNPdXQpLCAoKSA9PiBpbnN0YW5jZS5jYWxlbmRhckNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkNhbGVuZGFyTW91c2VEb3duKV07CiAgICB9LCBbZGlzYWJsZWQsIGRpc2FsbG93UGFzc2VkRGF0ZXNdKTsKCiAgICAvLyBvbkNoYW5nZSBpcyB1cGRhdGVkIGR5bmFtaWNhbGx5LCBzbyBub3QgdG8gcmUtcmVuZGVyIHRoZSBmbGF0cGlja2VyIGV2ZXJ5IHRpbWUgaXQgY2hhbmdlcwogICAgeSgoKSA9PiB7CiAgICAgIGlmICghZmxhdHBpY2tySW5zdGFuY2UgfHwgIWZsYXRwaWNrckluc3RhbmNlLmNvbmZpZykgcmV0dXJuOwogICAgICBmbGF0cGlja3JJbnN0YW5jZS5jb25maWcub25DaGFuZ2UgPSBbZGF0ZSA9PiBzZXREYXRlKG5ldyBEYXRlKGRhdGUpKSwgKCkgPT4gc2V0SXNJbnB1dERpcnR5KGZhbHNlKV07CiAgICB9LCBbZmxhdHBpY2tySW5zdGFuY2UsIHNldERhdGVdKTsKICAgIGNvbnN0IG9uSW5wdXRLZXlEb3duID0gQSQxKGUgPT4gewogICAgICBpZiAoIWZsYXRwaWNrckluc3RhbmNlKSByZXR1cm47CiAgICAgIGlmIChlLmNvZGUgPT09ICdFc2NhcGUnKSB7CiAgICAgICAgZmxhdHBpY2tySW5zdGFuY2UuY2xvc2UoKTsKICAgICAgfQogICAgICBpZiAoZS5jb2RlID09PSAnQXJyb3dEb3duJykgewogICAgICAgIGlmIChpc0lucHV0RGlydHkpIHsKICAgICAgICAgIC8vIHRyaWdnZXIgYW4gZW50ZXIga2V5cHJlc3MgdG8gc3VibWl0IHRoZSBuZXcgaW5wdXQsIHRoZW4gZm9jdXMgY2FsZW5kYXIgZGF5IG9uIHRoZSBuZXh0IHJlbmRlciBjeWNsZQogICAgICAgICAgZGF0ZUlucHV0UmVmLmN1cnJlbnQuZGlzcGF0Y2hFdmVudChFTlRFUl9LRVlET1dOX0VWRU5UKTsKICAgICAgICAgIHNldElzSW5wdXREaXJ0eShmYWxzZSk7CiAgICAgICAgICBzZXRGb3JjZUZvY3VzQ2FsZW5kYXIodHJ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGZvY3VzIGNhbGVuZGFyIGRheSBpbW1lZGlhdGVseQogICAgICAgICAgZm9jdXNSZWxldmFudEZsYXRwaWNrZXJEYXkoZmxhdHBpY2tySW5zdGFuY2UpOwogICAgICAgIH0KICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgIH0KICAgICAgaWYgKGUuY29kZSA9PT0gJ0VudGVyJykgewogICAgICAgIHNldElzSW5wdXREaXJ0eShmYWxzZSk7CiAgICAgIH0KICAgIH0sIFtmbGF0cGlja3JJbnN0YW5jZSwgaXNJbnB1dERpcnR5XSk7CiAgICBjb25zdCBvbklucHV0Rm9jdXMgPSBBJDEoZSA9PiB7CiAgICAgIGlmICghZmxhdHBpY2tySW5zdGFuY2UgfHwgZm9jdXNTY29wZVJlZi5jdXJyZW50LmNvbnRhaW5zKGUucmVsYXRlZFRhcmdldCkpIHJldHVybjsKICAgICAgZmxhdHBpY2tySW5zdGFuY2Uub3BlbigpOwogICAgfSwgW2ZsYXRwaWNrckluc3RhbmNlXSk7CgogICAgLy8gc2ltdWxhdGUgYW4gZW50ZXIgcHJlc3Mgb24gYmx1ciB0byBtYWtlIHN1cmUgdGhlIGRhdGUgdmFsdWUgaXMgc3VibWl0dGVkIGluIGFsbCBzY2VuYXJpb3MKICAgIGNvbnN0IG9uSW5wdXRCbHVyID0gQSQxKGUgPT4gewogICAgICBpZiAoIWlzSW5wdXREaXJ0eSB8fCBlLnJlbGF0ZWRUYXJnZXQgJiYgZS5yZWxhdGVkVGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZmxhdHBpY2tyLWRheScpKSByZXR1cm47CiAgICAgIGRhdGVJbnB1dFJlZi5jdXJyZW50LmRpc3BhdGNoRXZlbnQoRU5URVJfS0VZRE9XTl9FVkVOVCk7CiAgICAgIHNldElzSW5wdXREaXJ0eShmYWxzZSk7CiAgICB9LCBbaXNJbnB1dERpcnR5XSk7CiAgICBjb25zdCBmdWxsSWQgPSBgJHtwcmVmaXhJZChpZCwgZm9ybUlkKX0tLWRhdGVgOwogICAgcmV0dXJuIGUkMigiZGl2IiwgewogICAgICBjbGFzczogImZqcy1kYXRldGltZS1zdWJzZWN0aW9uIiwKICAgICAgY2hpbGRyZW46IFtlJDIoTGFiZWwsIHsKICAgICAgICBpZDogZnVsbElkLAogICAgICAgIGxhYmVsOiBsYWJlbCwKICAgICAgICBjb2xsYXBzZU9uRW1wdHk6IGNvbGxhcHNlTGFiZWxPbkVtcHR5LAogICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZAogICAgICB9KSwgZSQyKElucHV0QWRvcm5lciwgewogICAgICAgIHByZTogZSQyKENhbGVuZGFySWNvbiwge30pLAogICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCwKICAgICAgICByb290UmVmOiBmb2N1c1Njb3BlUmVmLAogICAgICAgIGlucHV0UmVmOiBkYXRlSW5wdXRSZWYsCiAgICAgICAgY2hpbGRyZW46IGUkMigiZGl2IiwgewogICAgICAgICAgY2xhc3M6ICJmanMtZGF0ZXBpY2tlciIsCiAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICB3aWR0aDogJzEwMCUnCiAgICAgICAgICB9LAogICAgICAgICAgY2hpbGRyZW46IGUkMigiaW5wdXQiLCB7CiAgICAgICAgICAgIHJlZjogZGF0ZUlucHV0UmVmLAogICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgIGlkOiBmdWxsSWQsCiAgICAgICAgICAgIGNsYXNzOiAnZmpzLWlucHV0JywKICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLAogICAgICAgICAgICBwbGFjZWhvbGRlcjogIm1tL2RkL3l5eXkiLAogICAgICAgICAgICBhdXRvQ29tcGxldGU6ICJmYWxzZSIsCiAgICAgICAgICAgIG9uRm9jdXM6IG9uSW5wdXRGb2N1cywKICAgICAgICAgICAgb25LZXlEb3duOiBvbklucHV0S2V5RG93biwKICAgICAgICAgICAgb25Nb3VzZURvd246IGUgPT4gIWZsYXRwaWNrckluc3RhbmNlLmlzT3BlbiAmJiBmbGF0cGlja3JJbnN0YW5jZS5vcGVuKCksCiAgICAgICAgICAgIG9uQmx1cjogb25JbnB1dEJsdXIsCiAgICAgICAgICAgIG9uSW5wdXQ6IGUgPT4gc2V0SXNJbnB1dERpcnR5KHRydWUpLAogICAgICAgICAgICAiZGF0YS1pbnB1dCI6IHRydWUKICAgICAgICAgIH0pCiAgICAgICAgfSkKICAgICAgfSldCiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIF9leHRlbmRzJGcoKSB7IF9leHRlbmRzJGcgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzJGcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfQogIHZhciBDbG9ja0ljb24gPSAoKHsKICAgIHN0eWxlcyA9IHt9LAogICAgLi4ucHJvcHMKICB9KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3ZnIiwgX2V4dGVuZHMkZyh7CiAgICB3aWR0aDogIjE2IiwKICAgIGhlaWdodDogIjE2IiwKICAgIHZpZXdCb3g6ICIwIDAgMjggMjkiLAogICAgZmlsbDogIm5vbmUiLAogICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICB9LCBwcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJwYXRoIiwgewogICAgZDogIk0xMyAxNC40MUwxOC41OSAyMCAyMCAxOC41OWwtNS01LjAxVjVoLTJ2OS40MXoiLAogICAgZmlsbDogIiMwMDAiCiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJwYXRoIiwgewogICAgZmlsbFJ1bGU6ICJldmVub2RkIiwKICAgIGNsaXBSdWxlOiAiZXZlbm9kZCIsCiAgICBkOiAiTTYuMjIyIDI1LjY0QTE0IDE0IDAgMTAyMS43NzggMi4zNiAxNCAxNCAwIDAwNi4yMjIgMjUuNjR6TTcuMzMzIDQuMDIzYTEyIDEyIDAgMTExMy4zMzQgMTkuOTU1QTEyIDEyIDAgMDE3LjMzMyA0LjAyMnoiLAogICAgZmlsbDogIiMwMDAiCiAgfSkpKTsKCiAgZnVuY3Rpb24gdXNlS2V5RG93bkFjdGlvbih0YXJnZXRLZXksIGFjdGlvbiwgbGlzdGVuZXJFbGVtZW50ID0gd2luZG93KSB7CiAgICBmdW5jdGlvbiBkb3duSGFuZGxlcih7CiAgICAgIGtleQogICAgfSkgewogICAgICBpZiAoa2V5ID09PSB0YXJnZXRLZXkpIHsKICAgICAgICBhY3Rpb24oKTsKICAgICAgfQogICAgfQogICAgeSgoKSA9PiB7CiAgICAgIGxpc3RlbmVyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZG93bkhhbmRsZXIpOwogICAgICByZXR1cm4gKCkgPT4gewogICAgICAgIGxpc3RlbmVyRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZG93bkhhbmRsZXIpOwogICAgICB9OwogICAgfSk7CiAgfQoKICBjb25zdCBERUZBVUxUX0xBQkVMX0dFVFRFUiA9IHZhbHVlID0+IHZhbHVlOwogIGNvbnN0IE5PT1AgPSAoKSA9PiB7fTsKICBmdW5jdGlvbiBEcm9wZG93bkxpc3QocHJvcHMpIHsKICAgIGNvbnN0IHsKICAgICAga2V5RXZlbnRzTGlzdGVuZXIgPSB3aW5kb3csCiAgICAgIHZhbHVlcyA9IFtdLAogICAgICBnZXRMYWJlbCA9IERFRkFVTFRfTEFCRUxfR0VUVEVSLAogICAgICBvblZhbHVlU2VsZWN0ZWQgPSBOT09QLAogICAgICBoZWlnaHQgPSAyMzUsCiAgICAgIGVtcHR5TGlzdE1lc3NhZ2UgPSAnTm8gcmVzdWx0cycsCiAgICAgIGluaXRpYWxGb2N1c0luZGV4ID0gMAogICAgfSA9IHByb3BzOwogICAgY29uc3QgW21vdXNlQ29udHJvbCwgc2V0TW91c2VDb250cm9sXSA9IGwkMShmYWxzZSk7CiAgICBjb25zdCBbZm9jdXNlZFZhbHVlSW5kZXgsIHNldEZvY3VzZWRWYWx1ZUluZGV4XSA9IGwkMShpbml0aWFsRm9jdXNJbmRleCk7CiAgICBjb25zdCBbc21vb3RoU2Nyb2xsaW5nLCBzZXRTbW9vdGhTY3JvbGxpbmddID0gbCQxKGZhbHNlKTsKICAgIGNvbnN0IGRyb3Bkb3duQ29udGFpbmVyID0gcygpOwogICAgY29uc3QgbW91c2VTY3JlZW5Qb3MgPSBzKCk7CiAgICBjb25zdCBmb2N1c2VkSXRlbSA9IGQoKCkgPT4gdmFsdWVzLmxlbmd0aCA/IHZhbHVlc1tmb2N1c2VkVmFsdWVJbmRleF0gOiBudWxsLCBbZm9jdXNlZFZhbHVlSW5kZXgsIHZhbHVlc10pOwogICAgY29uc3QgY2hhbmdlRm9jdXNlZFZhbHVlSW5kZXggPSBBJDEoZGVsdGEgPT4gewogICAgICBzZXRGb2N1c2VkVmFsdWVJbmRleCh4ID0+IE1hdGgubWluKE1hdGgubWF4KDAsIHggKyBkZWx0YSksIHZhbHVlcy5sZW5ndGggLSAxKSk7CiAgICB9LCBbdmFsdWVzLmxlbmd0aF0pOwogICAgeSgoKSA9PiB7CiAgICAgIGlmIChmb2N1c2VkVmFsdWVJbmRleCA9PT0gMCkgcmV0dXJuOwogICAgICBpZiAoIWZvY3VzZWRWYWx1ZUluZGV4IHx8ICF2YWx1ZXMubGVuZ3RoKSB7CiAgICAgICAgc2V0Rm9jdXNlZFZhbHVlSW5kZXgoMCk7CiAgICAgIH0gZWxzZSBpZiAoZm9jdXNlZFZhbHVlSW5kZXggPj0gdmFsdWVzLmxlbmd0aCkgewogICAgICAgIHNldEZvY3VzZWRWYWx1ZUluZGV4KHZhbHVlcy5sZW5ndGggLSAxKTsKICAgICAgfQogICAgfSwgW2ZvY3VzZWRWYWx1ZUluZGV4LCB2YWx1ZXMubGVuZ3RoXSk7CiAgICB1c2VLZXlEb3duQWN0aW9uKCdBcnJvd1VwJywgKCkgPT4gewogICAgICBpZiAodmFsdWVzLmxlbmd0aCkgewogICAgICAgIGNoYW5nZUZvY3VzZWRWYWx1ZUluZGV4KC0xKTsKICAgICAgICBzZXRNb3VzZUNvbnRyb2woZmFsc2UpOwogICAgICB9CiAgICB9LCBrZXlFdmVudHNMaXN0ZW5lcik7CiAgICB1c2VLZXlEb3duQWN0aW9uKCdBcnJvd0Rvd24nLCAoKSA9PiB7CiAgICAgIGlmICh2YWx1ZXMubGVuZ3RoKSB7CiAgICAgICAgY2hhbmdlRm9jdXNlZFZhbHVlSW5kZXgoMSk7CiAgICAgICAgc2V0TW91c2VDb250cm9sKGZhbHNlKTsKICAgICAgfQogICAgfSwga2V5RXZlbnRzTGlzdGVuZXIpOwogICAgdXNlS2V5RG93bkFjdGlvbignRW50ZXInLCAoKSA9PiB7CiAgICAgIGlmIChmb2N1c2VkSXRlbSkgewogICAgICAgIG9uVmFsdWVTZWxlY3RlZChmb2N1c2VkSXRlbSk7CiAgICAgIH0KICAgIH0sIGtleUV2ZW50c0xpc3RlbmVyKTsKICAgIHkoKCkgPT4gewogICAgICBjb25zdCBpbmRpdmlkdWFsRW50cmllcyA9IGRyb3Bkb3duQ29udGFpbmVyLmN1cnJlbnQuY2hpbGRyZW47CiAgICAgIGlmIChpbmRpdmlkdWFsRW50cmllcy5sZW5ndGggJiYgIW1vdXNlQ29udHJvbCkgewogICAgICAgIGluZGl2aWR1YWxFbnRyaWVzW2ZvY3VzZWRWYWx1ZUluZGV4XS5zY3JvbGxJbnRvVmlldyh7CiAgICAgICAgICBibG9jazogJ25lYXJlc3QnLAogICAgICAgICAgaW5saW5lOiAnbmVhcmVzdCcKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgW2ZvY3VzZWRWYWx1ZUluZGV4LCBtb3VzZUNvbnRyb2xdKTsKICAgIHkoKCkgPT4gewogICAgICBzZXRTbW9vdGhTY3JvbGxpbmcodHJ1ZSk7CiAgICB9LCBbXSk7CiAgICBjb25zdCBvbk1vdXNlTW92ZWRJbktleWJvYXJkTW9kZSA9IChldmVudCwgdmFsdWVJbmRleCkgPT4gewogICAgICBjb25zdCB1c2VyTW92ZWRDdXJzb3IgPSAhbW91c2VTY3JlZW5Qb3MuY3VycmVudCB8fCBtb3VzZVNjcmVlblBvcy5jdXJyZW50LnggIT09IGV2ZW50LnNjcmVlblggJiYgbW91c2VTY3JlZW5Qb3MuY3VycmVudC55ICE9PSBldmVudC5zY3JlZW5ZOwogICAgICBpZiAodXNlck1vdmVkQ3Vyc29yKSB7CiAgICAgICAgbW91c2VTY3JlZW5Qb3MuY3VycmVudCA9IHsKICAgICAgICAgIHg6IGV2ZW50LnNjcmVlblgsCiAgICAgICAgICB5OiBldmVudC5zY3JlZW5ZCiAgICAgICAgfTsKICAgICAgICBzZXRNb3VzZUNvbnRyb2wodHJ1ZSk7CiAgICAgICAgc2V0Rm9jdXNlZFZhbHVlSW5kZXgodmFsdWVJbmRleCk7CiAgICAgIH0KICAgIH07CiAgICByZXR1cm4gZSQyKCJkaXYiLCB7CiAgICAgIHJlZjogZHJvcGRvd25Db250YWluZXIsCiAgICAgIHRhYkluZGV4OiAtMSwKICAgICAgY2xhc3M6ICJmanMtZHJvcGRvd25saXN0IiwKICAgICAgc3R5bGU6IHsKICAgICAgICBtYXhIZWlnaHQ6IGhlaWdodCwKICAgICAgICBzY3JvbGxCZWhhdmlvcjogc21vb3RoU2Nyb2xsaW5nID8gJ3Ntb290aCcgOiAnYXV0bycKICAgICAgfSwKICAgICAgY2hpbGRyZW46IFt2YWx1ZXMubGVuZ3RoID4gMCAmJiB2YWx1ZXMubWFwKCh2LCBpKSA9PiB7CiAgICAgICAgcmV0dXJuIGUkMigiZGl2IiwgewogICAgICAgICAgY2xhc3M6IGNsYXNzTmFtZXMoJ2Zqcy1kcm9wZG93bmxpc3QtaXRlbScsIHsKICAgICAgICAgICAgJ2ZvY3VzZWQnOiBmb2N1c2VkVmFsdWVJbmRleCA9PT0gaQogICAgICAgICAgfSksCiAgICAgICAgICBvbk1vdXNlTW92ZTogbW91c2VDb250cm9sID8gdW5kZWZpbmVkIDogZSA9PiBvbk1vdXNlTW92ZWRJbktleWJvYXJkTW9kZShlLCBpKSwKICAgICAgICAgIG9uTW91c2VFbnRlcjogbW91c2VDb250cm9sID8gKCkgPT4gc2V0Rm9jdXNlZFZhbHVlSW5kZXgoaSkgOiB1bmRlZmluZWQsCiAgICAgICAgICBvbk1vdXNlRG93bjogZSA9PiB7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgb25WYWx1ZVNlbGVjdGVkKHYpOwogICAgICAgICAgfSwKICAgICAgICAgIGNoaWxkcmVuOiBnZXRMYWJlbCh2KQogICAgICAgIH0pOwogICAgICB9KSwgIXZhbHVlcy5sZW5ndGggJiYgZSQyKCJkaXYiLCB7CiAgICAgICAgY2xhc3M6ICJmanMtZHJvcGRvd25saXN0LWVtcHR5IiwKICAgICAgICBjaGlsZHJlbjogZW1wdHlMaXN0TWVzc2FnZQogICAgICB9KV0KICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gVGltZXBpY2tlcihwcm9wcykgewogICAgY29uc3QgewogICAgICBpZCwKICAgICAgbGFiZWwsCiAgICAgIGNvbGxhcHNlTGFiZWxPbkVtcHR5LAogICAgICBmb3JtSWQsCiAgICAgIHJlcXVpcmVkLAogICAgICBkaXNhYmxlZCwKICAgICAgdXNlMjRoID0gZmFsc2UsCiAgICAgIHRpbWVJbnRlcnZhbCwKICAgICAgdGltZSwKICAgICAgc2V0VGltZQogICAgfSA9IHByb3BzOwogICAgY29uc3QgdGltZUlucHV0UmVmID0gcygpOwogICAgY29uc3QgW2Ryb3Bkb3duSXNPcGVuLCBzZXREcm9wZG93bklzT3Blbl0gPSBsJDEoZmFsc2UpOwogICAgY29uc3QgdXNlRHJvcGRvd24gPSBkKCgpID0+IHRpbWVJbnRlcnZhbCAhPT0gMSwgW3RpbWVJbnRlcnZhbF0pOwogICAgY29uc3QgW3Jhd1ZhbHVlLCBzZXRSYXdWYWx1ZV0gPSBsJDEoJycpOwoKICAgIC8vIHBvcHVsYXRlcyB2YWx1ZXMgZnJvbSBzb3VyY2UKICAgIHkoKCkgPT4gewogICAgICBpZiAodGltZSA9PT0gbnVsbCkgewogICAgICAgIHNldFJhd1ZhbHVlKCcnKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3QgaW50ZXJ2YWxBZGp1c3RlZFRpbWUgPSB0aW1lIC0gdGltZSAlIHRpbWVJbnRlcnZhbDsKICAgICAgc2V0UmF3VmFsdWUoZm9ybWF0VGltZSh1c2UyNGgsIGludGVydmFsQWRqdXN0ZWRUaW1lKSk7CiAgICAgIGlmIChpbnRlcnZhbEFkanVzdGVkVGltZSAhPSB0aW1lKSB7CiAgICAgICAgc2V0VGltZShpbnRlcnZhbEFkanVzdGVkVGltZSk7CiAgICAgIH0KICAgIH0sIFt0aW1lLCBzZXRUaW1lLCB1c2UyNGgsIHRpbWVJbnRlcnZhbF0pOwogICAgY29uc3QgcHJvcGFnYXRlUmF3VG9NaW51dGUgPSBBJDEobmV3UmF3VmFsdWUgPT4gewogICAgICBjb25zdCBsb2NhbFJhd1ZhbHVlID0gbmV3UmF3VmFsdWUgfHwgcmF3VmFsdWU7CgogICAgICAvLyBJZiBubyByYXcgdmFsdWUgZXhpc3RzLCBzZXQgdGhlIG1pbnV0ZSB0byBudWxsCiAgICAgIGlmICghbG9jYWxSYXdWYWx1ZSkgewogICAgICAgIHNldFRpbWUobnVsbCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZUlucHV0VGltZShsb2NhbFJhd1ZhbHVlKTsKCiAgICAgIC8vIElmIHJhdyBzdHJpbmcgY291bGRuJ3QgYmUgcGFyc2VkLCBjbGVhbiBldmVyeXRoaW5nIHVwCiAgICAgIGlmICghaXNOdW1iZXIkMihtaW51dGVzKSkgewogICAgICAgIHNldFJhd1ZhbHVlKCcnKTsKICAgICAgICBzZXRUaW1lKG51bGwpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgLy8gRW5mb3JjZSB0aGUgbWludXRlcyB0byBtYXRjaCB0aGUgdGltZUludGVydmFsCiAgICAgIGNvbnN0IGNvcnJlY3RlZE1pbnV0ZXMgPSBtaW51dGVzIC0gbWludXRlcyAlIHRpbWVJbnRlcnZhbDsKCiAgICAgIC8vIEVuZm9yY2UgdGhlIHJhdyB0ZXh0IHRvIGJlIGZvcm1hdHRlZCBwcm9wZXJseQogICAgICBzZXRSYXdWYWx1ZShmb3JtYXRUaW1lKHVzZTI0aCwgY29ycmVjdGVkTWludXRlcykpOwogICAgICBzZXRUaW1lKGNvcnJlY3RlZE1pbnV0ZXMpOwogICAgfSwgW3Jhd1ZhbHVlLCB0aW1lSW50ZXJ2YWwsIHVzZTI0aCwgc2V0VGltZV0pOwogICAgY29uc3QgdGltZU9wdGlvbnMgPSBkKCgpID0+IHsKICAgICAgY29uc3QgbWludXRlc0luRGF5ID0gMjQgKiA2MDsKICAgICAgY29uc3QgaW50ZXJ2YWxDb3VudCA9IE1hdGguZmxvb3IobWludXRlc0luRGF5IC8gdGltZUludGVydmFsKTsKICAgICAgcmV0dXJuIFsuLi5BcnJheShpbnRlcnZhbENvdW50KS5rZXlzKCldLm1hcChpbnRlcnZhbEluZGV4ID0+IGZvcm1hdFRpbWUodXNlMjRoLCBpbnRlcnZhbEluZGV4ICogdGltZUludGVydmFsKSk7CiAgICB9LCBbdGltZUludGVydmFsLCB1c2UyNGhdKTsKICAgIGNvbnN0IGluaXRpYWxGb2N1c0luZGV4ID0gZCgoKSA9PiB7CiAgICAgIC8vIGlmIHRoZXJlIGFyZSBubyBvcHRpb25zLCB0aGVyZSB3aWxsIG5vdCBiZSBhbnkgZm9jdXNpbmcKICAgICAgaWYgKCF0aW1lT3B0aW9ucyB8fCAhdGltZUludGVydmFsKSByZXR1cm4gbnVsbDsKCiAgICAgIC8vIGlmIHRoZXJlIGlzIGEgc2V0IG1pbnV0ZSB2YWx1ZSwgd2UgZm9jdXMgaXQgaW4gdGhlIGRyb3Bkb3duCiAgICAgIGlmICh0aW1lKSByZXR1cm4gdGltZSAvIHRpbWVJbnRlcnZhbDsKICAgICAgY29uc3QgY2FjaGVUaW1lID0gcGFyc2VJbnB1dFRpbWUocmF3VmFsdWUpOwoKICAgICAgLy8gaWYgdGhlcmUgaXMgYSB2YWxpZCB2YWx1ZSBpbiB0aGUgaW5wdXQgY2FjaGUsIHdlIHRyeSBhbmQgZm9jdXMgY2xvc2UgdG8gaXQKICAgICAgaWYgKGNhY2hlVGltZSkgewogICAgICAgIGNvbnN0IGZsb29yZWRDYWNoZVRpbWUgPSBjYWNoZVRpbWUgLSBjYWNoZVRpbWUgJSB0aW1lSW50ZXJ2YWw7CiAgICAgICAgcmV0dXJuIGZsb29yZWRDYWNoZVRpbWUgLyB0aW1lSW50ZXJ2YWw7CiAgICAgIH0KCiAgICAgIC8vIElmIHRoZXJlIGlzIG5vIHNldCB2YWx1ZSwgc2ltcGx5IGZvY3VzIHRoZSBtaWRkbGUgb2YgdGhlIGRyb3Bkb3duICgxMjowMCkKICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGltZU9wdGlvbnMubGVuZ3RoIC8gMik7CiAgICB9LCBbcmF3VmFsdWUsIHRpbWUsIHRpbWVJbnRlcnZhbCwgdGltZU9wdGlvbnNdKTsKICAgIGNvbnN0IG9uSW5wdXRLZXlEb3duID0gZSA9PiB7CiAgICAgIHN3aXRjaCAoZS5rZXkpIHsKICAgICAgICBjYXNlICdBcnJvd1VwJzoKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ0Fycm93RG93bic6CiAgICAgICAgICB1c2VEcm9wZG93biAmJiBzZXREcm9wZG93bklzT3Blbih0cnVlKTsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ0VzY2FwZSc6CiAgICAgICAgICB1c2VEcm9wZG93biAmJiBzZXREcm9wZG93bklzT3BlbihmYWxzZSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdFbnRlcic6CiAgICAgICAgICAhZHJvcGRvd25Jc09wZW4gJiYgcHJvcGFnYXRlUmF3VG9NaW51dGUoKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9OwogICAgY29uc3Qgb25JbnB1dEJsdXIgPSBlID0+IHsKICAgICAgc2V0RHJvcGRvd25Jc09wZW4oZmFsc2UpOwogICAgICBwcm9wYWdhdGVSYXdUb01pbnV0ZSgpOwogICAgfTsKICAgIGNvbnN0IG9uRHJvcGRvd25WYWx1ZVNlbGVjdGVkID0gdmFsdWUgPT4gewogICAgICBzZXREcm9wZG93bklzT3BlbihmYWxzZSk7CiAgICAgIHByb3BhZ2F0ZVJhd1RvTWludXRlKHZhbHVlKTsKICAgIH07CiAgICBjb25zdCBmdWxsSWQgPSBgJHtwcmVmaXhJZChpZCwgZm9ybUlkKX0tLXRpbWVgOwogICAgcmV0dXJuIGUkMigiZGl2IiwgewogICAgICBjbGFzczogImZqcy1kYXRldGltZS1zdWJzZWN0aW9uIiwKICAgICAgY2hpbGRyZW46IFtlJDIoTGFiZWwsIHsKICAgICAgICBpZDogZnVsbElkLAogICAgICAgIGxhYmVsOiBsYWJlbCwKICAgICAgICBjb2xsYXBzZU9uRW1wdHk6IGNvbGxhcHNlTGFiZWxPbkVtcHR5LAogICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZAogICAgICB9KSwgZSQyKElucHV0QWRvcm5lciwgewogICAgICAgIHByZTogZSQyKENsb2NrSWNvbiwge30pLAogICAgICAgIGlucHV0UmVmOiB0aW1lSW5wdXRSZWYsCiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLAogICAgICAgIGNoaWxkcmVuOiBlJDIoImRpdiIsIHsKICAgICAgICAgIGNsYXNzOiAiZmpzLXRpbWVwaWNrZXIgZmpzLXRpbWVwaWNrZXItYW5jaG9yIiwKICAgICAgICAgIGNoaWxkcmVuOiBbZSQyKCJpbnB1dCIsIHsKICAgICAgICAgICAgcmVmOiB0aW1lSW5wdXRSZWYsCiAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgaWQ6IGZ1bGxJZCwKICAgICAgICAgICAgY2xhc3M6ICJmanMtaW5wdXQiLAogICAgICAgICAgICB2YWx1ZTogcmF3VmFsdWUsCiAgICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCwKICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHVzZTI0aCA/ICdoaDptbScgOiAnaGg6bW0gP20nLAogICAgICAgICAgICBhdXRvQ29tcGxldGU6ICJmYWxzZSIsCiAgICAgICAgICAgIG9uRm9jdXM6ICgpID0+IHVzZURyb3Bkb3duICYmIHNldERyb3Bkb3duSXNPcGVuKHRydWUpLAogICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB1c2VEcm9wZG93biAmJiBzZXREcm9wZG93bklzT3Blbih0cnVlKQoKICAgICAgICAgICAgLy8gQHRzLWlnbm9yZQogICAgICAgICAgICAsCiAgICAgICAgICAgIG9uSW5wdXQ6IGUgPT4gewogICAgICAgICAgICAgIHNldFJhd1ZhbHVlKGUudGFyZ2V0LnZhbHVlKTsKICAgICAgICAgICAgICB1c2VEcm9wZG93biAmJiBzZXREcm9wZG93bklzT3BlbihmYWxzZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uQmx1cjogb25JbnB1dEJsdXIsCiAgICAgICAgICAgIG9uS2V5RG93bjogb25JbnB1dEtleURvd24sCiAgICAgICAgICAgICJkYXRhLWlucHV0IjogdHJ1ZQogICAgICAgICAgfSksIGRyb3Bkb3duSXNPcGVuICYmIGUkMihEcm9wZG93bkxpc3QsIHsKICAgICAgICAgICAgdmFsdWVzOiB0aW1lT3B0aW9ucywKICAgICAgICAgICAgaGVpZ2h0OiAxNTAsCiAgICAgICAgICAgIG9uVmFsdWVTZWxlY3RlZDogb25Ecm9wZG93blZhbHVlU2VsZWN0ZWQsCiAgICAgICAgICAgIGxpc3RlbmVyRWxlbWVudDogdGltZUlucHV0UmVmLmN1cnJlbnQsCiAgICAgICAgICAgIGluaXRpYWxGb2N1c0luZGV4OiBpbml0aWFsRm9jdXNJbmRleAogICAgICAgICAgfSldCiAgICAgICAgfSkKICAgICAgfSldCiAgICB9KTsKICB9CgogIGNvbnN0IHR5cGUkOCA9ICdkYXRldGltZSc7CiAgZnVuY3Rpb24gRGF0ZXRpbWUocHJvcHMpIHsKICAgIGNvbnN0IHsKICAgICAgZGlzYWJsZWQsCiAgICAgIGVycm9ycyA9IFtdLAogICAgICBmaWVsZCwKICAgICAgb25DaGFuZ2UsCiAgICAgIHZhbHVlID0gJycKICAgIH0gPSBwcm9wczsKICAgIGNvbnN0IHsKICAgICAgZGVzY3JpcHRpb24sCiAgICAgIGlkLAogICAgICBkYXRlTGFiZWwsCiAgICAgIHRpbWVMYWJlbCwKICAgICAgdmFsaWRhdGUgPSB7fSwKICAgICAgc3VidHlwZSwKICAgICAgdXNlMjRoLAogICAgICBkaXNhbGxvd1Bhc3NlZERhdGVzLAogICAgICB0aW1lSW50ZXJ2YWwsCiAgICAgIHRpbWVTZXJpYWxpemluZ0Zvcm1hdAogICAgfSA9IGZpZWxkOwogICAgY29uc3QgewogICAgICByZXF1aXJlZAogICAgfSA9IHZhbGlkYXRlOwogICAgY29uc3QgewogICAgICBmb3JtSWQKICAgIH0gPSBGJDEoRm9ybUNvbnRleHQpOwogICAgY29uc3QgZ2V0TnVsbERhdGVUaW1lID0gKCkgPT4gKHsKICAgICAgZGF0ZTogbmV3IERhdGUoRGF0ZS5wYXJzZShudWxsKSksCiAgICAgIHRpbWU6IG51bGwKICAgIH0pOwogICAgY29uc3QgW2RhdGVUaW1lLCBzZXREYXRlVGltZV0gPSBsJDEoZ2V0TnVsbERhdGVUaW1lKCkpOwogICAgY29uc3QgW2RhdGVUaW1lVXBkYXRlUmVxdWVzdCwgc2V0RGF0ZVRpbWVVcGRhdGVSZXF1ZXN0XSA9IGwkMShudWxsKTsKICAgIGNvbnN0IGlzVmFsaWREYXRlID0gZGF0ZSA9PiBkYXRlICYmICFpc05hTihkYXRlLmdldFRpbWUoKSk7CiAgICBjb25zdCBpc1ZhbGlkVGltZSA9IHRpbWUgPT4gIWlzTmFOKHBhcnNlSW50KHRpbWUpKTsKICAgIGNvbnN0IHVzZURhdGVQaWNrZXIgPSBkKCgpID0+IHN1YnR5cGUgPT09IERBVEVUSU1FX1NVQlRZUEVTLkRBVEUgfHwgc3VidHlwZSA9PT0gREFURVRJTUVfU1VCVFlQRVMuREFURVRJTUUsIFtzdWJ0eXBlXSk7CiAgICBjb25zdCB1c2VUaW1lUGlja2VyID0gZCgoKSA9PiBzdWJ0eXBlID09PSBEQVRFVElNRV9TVUJUWVBFUy5USU1FIHx8IHN1YnR5cGUgPT09IERBVEVUSU1FX1NVQlRZUEVTLkRBVEVUSU1FLCBbc3VidHlwZV0pOwogICAgeSgoKSA9PiB7CiAgICAgIGxldCB7CiAgICAgICAgZGF0ZSwKICAgICAgICB0aW1lCiAgICAgIH0gPSBnZXROdWxsRGF0ZVRpbWUoKTsKICAgICAgaWYgKCFkaXNhYmxlZCkgewogICAgICAgIHN3aXRjaCAoc3VidHlwZSkgewogICAgICAgICAgY2FzZSBEQVRFVElNRV9TVUJUWVBFUy5EQVRFOgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUucGFyc2UodmFsdWUpKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgY2FzZSBEQVRFVElNRV9TVUJUWVBFUy5USU1FOgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgdGltZSA9IHBhcnNlSXNvVGltZSh2YWx1ZSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIGNhc2UgREFURVRJTUVfU1VCVFlQRVMuREFURVRJTUU6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5wYXJzZSh2YWx1ZSkpOwogICAgICAgICAgICAgIHRpbWUgPSBpc1ZhbGlkRGF0ZShkYXRlKSA/IDYwICogZGF0ZS5nZXRIb3VycygpICsgZGF0ZS5nZXRNaW51dGVzKCkgOiBudWxsOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHNldERhdGVUaW1lKHsKICAgICAgICBkYXRlLAogICAgICAgIHRpbWUKICAgICAgfSk7CiAgICB9LCBbc3VidHlwZSwgdmFsdWUsIGRpc2FibGVkXSk7CiAgICBjb25zdCBjb21wdXRlQW5kU2V0U3RhdGUgPSBBJDEoKHsKICAgICAgZGF0ZSwKICAgICAgdGltZQogICAgfSkgPT4gewogICAgICBsZXQgbmV3RGF0ZVRpbWVWYWx1ZSA9IG51bGw7CiAgICAgIGlmIChzdWJ0eXBlID09PSBEQVRFVElNRV9TVUJUWVBFUy5EQVRFICYmIGlzVmFsaWREYXRlKGRhdGUpKSB7CiAgICAgICAgbmV3RGF0ZVRpbWVWYWx1ZSA9IHNlcmlhbGl6ZURhdGUoZGF0ZSk7CiAgICAgIH0gZWxzZSBpZiAoc3VidHlwZSA9PT0gREFURVRJTUVfU1VCVFlQRVMuVElNRSAmJiBpc1ZhbGlkVGltZSh0aW1lKSkgewogICAgICAgIG5ld0RhdGVUaW1lVmFsdWUgPSBzZXJpYWxpemVUaW1lKHRpbWUsIG5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKSwgdGltZVNlcmlhbGl6aW5nRm9ybWF0KTsKICAgICAgfSBlbHNlIGlmIChzdWJ0eXBlID09PSBEQVRFVElNRV9TVUJUWVBFUy5EQVRFVElNRSAmJiBpc1ZhbGlkRGF0ZShkYXRlKSAmJiBpc1ZhbGlkVGltZSh0aW1lKSkgewogICAgICAgIG5ld0RhdGVUaW1lVmFsdWUgPSBzZXJpYWxpemVEYXRlVGltZShkYXRlLCB0aW1lLCB0aW1lU2VyaWFsaXppbmdGb3JtYXQpOwogICAgICB9CiAgICAgIG9uQ2hhbmdlKHsKICAgICAgICB2YWx1ZTogbmV3RGF0ZVRpbWVWYWx1ZSwKICAgICAgICBmaWVsZAogICAgICB9KTsKICAgIH0sIFtmaWVsZCwgb25DaGFuZ2UsIHN1YnR5cGUsIHRpbWVTZXJpYWxpemluZ0Zvcm1hdF0pOwogICAgeSgoKSA9PiB7CiAgICAgIGlmIChkYXRlVGltZVVwZGF0ZVJlcXVlc3QpIHsKICAgICAgICBpZiAoZGF0ZVRpbWVVcGRhdGVSZXF1ZXN0LnJlZnJlc2hPbmx5KSB7CiAgICAgICAgICBjb21wdXRlQW5kU2V0U3RhdGUoZGF0ZVRpbWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zdCBuZXdEYXRlVGltZSA9IHsKICAgICAgICAgICAgLi4uZGF0ZVRpbWUsCiAgICAgICAgICAgIC4uLmRhdGVUaW1lVXBkYXRlUmVxdWVzdAogICAgICAgICAgfTsKICAgICAgICAgIHNldERhdGVUaW1lKG5ld0RhdGVUaW1lKTsKICAgICAgICAgIGNvbXB1dGVBbmRTZXRTdGF0ZShuZXdEYXRlVGltZSk7CiAgICAgICAgfQogICAgICAgIHNldERhdGVUaW1lVXBkYXRlUmVxdWVzdChudWxsKTsKICAgICAgfQogICAgfSwgW2NvbXB1dGVBbmRTZXRTdGF0ZSwgZGF0ZVRpbWUsIGRhdGVUaW1lVXBkYXRlUmVxdWVzdF0pOwogICAgeSgoKSA9PiB7CiAgICAgIHNldERhdGVUaW1lVXBkYXRlUmVxdWVzdCh7CiAgICAgICAgcmVmcmVzaE9ubHk6IHRydWUKICAgICAgfSk7CiAgICB9LCBbdGltZVNlcmlhbGl6aW5nRm9ybWF0XSk7CiAgICBjb25zdCBhbGxFcnJvcnMgPSBkKCgpID0+IHsKICAgICAgaWYgKHJlcXVpcmVkIHx8IHN1YnR5cGUgIT09IERBVEVUSU1FX1NVQlRZUEVTLkRBVEVUSU1FKSByZXR1cm4gZXJyb3JzOwogICAgICBjb25zdCBpc09ubHlPbmVGaWVsZFNldCA9IGlzVmFsaWREYXRlKGRhdGVUaW1lLmRhdGUpICYmICFpc1ZhbGlkVGltZShkYXRlVGltZS50aW1lKSB8fCAhaXNWYWxpZERhdGUoZGF0ZVRpbWUuZGF0ZSkgJiYgaXNWYWxpZFRpbWUoZGF0ZVRpbWUudGltZSk7CiAgICAgIHJldHVybiBpc09ubHlPbmVGaWVsZFNldCA/IFsnRGF0ZSBhbmQgdGltZSBtdXN0IGJvdGggYmUgZW50ZXJlZC4nLCAuLi5lcnJvcnNdIDogZXJyb3JzOwogICAgfSwgW3JlcXVpcmVkLCBzdWJ0eXBlLCBkYXRlVGltZSwgZXJyb3JzXSk7CiAgICBjb25zdCBzZXREYXRlID0gQSQxKGRhdGUgPT4gewogICAgICBzZXREYXRlVGltZVVwZGF0ZVJlcXVlc3QocHJldiA9PiBwcmV2ID8gewogICAgICAgIC4uLnByZXYsCiAgICAgICAgZGF0ZQogICAgICB9IDogewogICAgICAgIGRhdGUKICAgICAgfSk7CiAgICB9LCBbXSk7CiAgICBjb25zdCBzZXRUaW1lID0gQSQxKHRpbWUgPT4gewogICAgICBzZXREYXRlVGltZVVwZGF0ZVJlcXVlc3QocHJldiA9PiBwcmV2ID8gewogICAgICAgIC4uLnByZXYsCiAgICAgICAgdGltZQogICAgICB9IDogewogICAgICAgIHRpbWUKICAgICAgfSk7CiAgICB9LCBbXSk7CiAgICBjb25zdCBkYXRlUGlja2VyUHJvcHMgPSB7CiAgICAgIGlkLAogICAgICBsYWJlbDogZGF0ZUxhYmVsLAogICAgICBjb2xsYXBzZUxhYmVsT25FbXB0eTogIXRpbWVMYWJlbCwKICAgICAgZm9ybUlkLAogICAgICByZXF1aXJlZCwKICAgICAgZGlzYWJsZWQsCiAgICAgIGRpc2FsbG93UGFzc2VkRGF0ZXMsCiAgICAgIGRhdGU6IGRhdGVUaW1lLmRhdGUsCiAgICAgIHNldERhdGUKICAgIH07CiAgICBjb25zdCB0aW1lUGlja2VyUHJvcHMgPSB7CiAgICAgIGlkLAogICAgICBsYWJlbDogdGltZUxhYmVsLAogICAgICBjb2xsYXBzZUxhYmVsT25FbXB0eTogIWRhdGVMYWJlbCwKICAgICAgZm9ybUlkLAogICAgICByZXF1aXJlZCwKICAgICAgZGlzYWJsZWQsCiAgICAgIHVzZTI0aCwKICAgICAgdGltZUludGVydmFsLAogICAgICB0aW1lOiBkYXRlVGltZS50aW1lLAogICAgICBzZXRUaW1lCiAgICB9OwogICAgcmV0dXJuIGUkMigiZGl2IiwgewogICAgICBjbGFzczogZm9ybUZpZWxkQ2xhc3Nlcyh0eXBlJDgsIHsKICAgICAgICBlcnJvcnM6IGFsbEVycm9ycywKICAgICAgICBkaXNhYmxlZAogICAgICB9KSwKICAgICAgY2hpbGRyZW46IFtlJDIoImRpdiIsIHsKICAgICAgICBjbGFzczogY2xhc3NOYW1lcygnZmpzLXZlcnRpY2FsLWdyb3VwJyksCiAgICAgICAgY2hpbGRyZW46IFt1c2VEYXRlUGlja2VyICYmIGUkMihEYXRlcGlja2VyLCB7CiAgICAgICAgICAuLi5kYXRlUGlja2VyUHJvcHMKICAgICAgICB9KSwgdXNlVGltZVBpY2tlciAmJiB1c2VEYXRlUGlja2VyICYmIGUkMigiZGl2IiwgewogICAgICAgICAgY2xhc3M6ICJmanMtZGF0ZXRpbWUtc2VwYXJhdG9yIgogICAgICAgIH0pLCB1c2VUaW1lUGlja2VyICYmIGUkMihUaW1lcGlja2VyLCB7CiAgICAgICAgICAuLi50aW1lUGlja2VyUHJvcHMKICAgICAgICB9KV0KICAgICAgfSksIGUkMihEZXNjcmlwdGlvbiwgewogICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbgogICAgICB9KSwgZSQyKEVycm9ycywgewogICAgICAgIGVycm9yczogYWxsRXJyb3JzCiAgICAgIH0pXQogICAgfSk7CiAgfQogIERhdGV0aW1lLmNyZWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zID0ge30pIHsKICAgIGNvbnN0IG5ld09wdGlvbnMgPSB7fTsKICAgIHNldChuZXdPcHRpb25zLCBEQVRFVElNRV9TVUJUWVBFX1BBVEgsIERBVEVUSU1FX1NVQlRZUEVTLkRBVEUpOwogICAgc2V0KG5ld09wdGlvbnMsIERBVEVfTEFCRUxfUEFUSCwgJ0RhdGUnKTsKICAgIHJldHVybiB7CiAgICAgIC4uLm5ld09wdGlvbnMsCiAgICAgIC4uLm9wdGlvbnMKICAgIH07CiAgfTsKICBEYXRldGltZS50eXBlID0gdHlwZSQ4OwogIERhdGV0aW1lLmtleWVkID0gdHJ1ZTsKICBEYXRldGltZS5lbXB0eVZhbHVlID0gbnVsbDsKICBEYXRldGltZS5zYW5pdGl6ZVZhbHVlID0gc2FuaXRpemVEYXRlVGltZVBpY2tlclZhbHVlOwoKICAvKioKICAgKiBUaGlzIGZpbGUgbXVzdCBub3QgYmUgY2hhbmdlZCBvciBleGNoYW5nZWQuCiAgICoKICAgKiBAc2VlIGh0dHA6Ly9icG1uLmlvL2xpY2Vuc2UgZm9yIG1vcmUgaW5mb3JtYXRpb24uCiAgICovCiAgZnVuY3Rpb24gTG9nbygpIHsKICAgIHJldHVybiBlJDIoInN2ZyIsIHsKICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgIHZpZXdCb3g6ICIwIDAgMTQuMDIgNS41NyIsCiAgICAgIHdpZHRoOiAiNTMiLAogICAgICBoZWlnaHQ6ICIyMSIsCiAgICAgIHN0eWxlOiAidmVydGljYWwtYWxpZ246bWlkZGxlIiwKICAgICAgY2hpbGRyZW46IFtlJDIoInBhdGgiLCB7CiAgICAgICAgZmlsbDogImN1cnJlbnRDb2xvciIsCiAgICAgICAgZDogIk0xLjg4Ljkydi4xNGMwIC40MS0uMTMuNjgtLjQuOC4zMy4xNC40Ni40NC40Ni44NnYuMzNjMCAuNjEtLjMzLjk1LS45NS45NUgwVjBoLjk1Yy42NSAwIC45My4zLjkzLjkyek0uNjMuNTd2MS4wNmguMjRjLjI0IDAgLjM4LS4xLjM4LS40M1YuOThjMC0uMjgtLjEtLjQtLjMyLS40em0wIDEuNjN2MS4yMmguMzZjLjIgMCAuMzItLjEuMzItLjM5di0uMzVjMC0uMzctLjEyLS40OC0uNC0uNDhILjYzek00LjE4Ljk5di41MmMwIC42NC0uMzEuOTgtLjk0Ljk4aC0uM1Y0aC0uNjJWMGguOTJjLjYzIDAgLjk0LjM1Ljk0Ljk5ek0yLjk0LjU3djEuMzVoLjNjLjIgMCAuMy0uMDkuMy0uMzd2LS42YzAtLjI5LS4xLS4zOC0uMy0uMzhoLS4zem0yLjg5IDIuMjdMNi4yNSAwaC44OHY0aC0uNlYxLjEyTDYuMSAzLjk5aC0uNmwtLjQ2LTIuODJ2Mi44MmgtLjU1VjBoLjg3ek04LjE0IDEuMVY0aC0uNTZWMGguNzlMOSAyLjRWMGguNTZ2NGgtLjY0em0yLjQ5IDIuMjl2LjZoLS42di0uNnpNMTIuMTIgMWMwLS42My4zMy0xIC45NS0xIC42MSAwIC45NS4zNy45NSAxdjIuMDRjMCAuNjQtLjM0IDEtLjk1IDEtLjYyIDAtLjk1LS4zNy0uOTUtMXptLjYyIDIuMDhjMCAuMjguMTMuMzkuMzMuMzlzLjMyLS4xLjMyLS40Vi45OGMwLS4yOS0uMTItLjQtLjMyLS40cy0uMzMuMTEtLjMzLjR6IgogICAgICB9KSwgZSQyKCJwYXRoIiwgewogICAgICAgIGZpbGw6ICJjdXJyZW50Q29sb3IiLAogICAgICAgIGQ6ICJNMCA0LjUzaDE0LjAydjEuMDRIMHpNMTEuMDggMGguNjN2LjYyaC0uNjN6bS42MyA0VjFoLS42M3YyLjk4eiIKICAgICAgfSldCiAgICB9KTsKICB9CiAgZnVuY3Rpb24gTGlnaHRib3gocHJvcHMpIHsKICAgIGNvbnN0IHsKICAgICAgb3BlbgogICAgfSA9IHByb3BzOwogICAgaWYgKCFvcGVuKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIGUkMigiZGl2IiwgewogICAgICBjbGFzczogImZqcy1wb3dlcmVkLWJ5LWxpZ2h0Ym94IiwKICAgICAgc3R5bGU6ICJ6LWluZGV4OiAxMDA7IHBvc2l0aW9uOiBmaXhlZDsgdG9wOiAwOyBsZWZ0OiAwO3JpZ2h0OiAwOyBib3R0b206IDAiLAogICAgICBjaGlsZHJlbjogW2UkMigiZGl2IiwgewogICAgICAgIGNsYXNzOiAiYmFja2Ryb3AiLAogICAgICAgIHN0eWxlOiAid2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgYmFja2dyb3VuZDogcmdiYSg0MCA0MCA0MCAvIDIwJSkiLAogICAgICAgIG9uQ2xpY2s6IHByb3BzLm9uQmFja2Ryb3BDbGljawogICAgICB9KSwgZSQyKCJkaXYiLCB7CiAgICAgICAgY2xhc3M6ICJub3RpY2UiLAogICAgICAgIHN0eWxlOiAicG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiA1MCU7IHRvcDogNDAlOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlKTsgd2lkdGg6IDI2MHB4OyBwYWRkaW5nOiAxMHB4OyBiYWNrZ3JvdW5kOiB3aGl0ZTsgYm94LXNoYWRvdzogMCAgMXB4IDRweCByZ2JhKDAgMCAwIC8gMzAlKTsgZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMTRweDsgZGlzcGxheTogZmxleDsgbGluZS1oZWlnaHQ6IDEuMyIsCiAgICAgICAgY2hpbGRyZW46IFtlJDIoImEiLCB7CiAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9icG1uLmlvIiwKICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICByZWw6ICJub29wZW5lciIsCiAgICAgICAgICBzdHlsZTogIm1hcmdpbjogMTVweCAyMHB4IDE1cHggMTBweDsgYWxpZ24tc2VsZjogY2VudGVyOyBjb2xvcjogIzQwNDA0MCIsCiAgICAgICAgICBjaGlsZHJlbjogZSQyKExvZ28sIHt9KQogICAgICAgIH0pLCBlJDIoInNwYW4iLCB7CiAgICAgICAgICBjaGlsZHJlbjogWyJXZWItYmFzZWQgdG9vbGluZyBmb3IgQlBNTiwgRE1OLCBhbmQgZm9ybXMgcG93ZXJlZCBieSAiLCBlJDIoImEiLCB7CiAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2JwbW4uaW8iLAogICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICByZWw6ICJub29wZW5lciIsCiAgICAgICAgICAgIGNoaWxkcmVuOiAiYnBtbi5pbyIKICAgICAgICAgIH0pLCAiLiJdCiAgICAgICAgfSldCiAgICAgIH0pXQogICAgfSk7CiAgfQogIGZ1bmN0aW9uIExpbmsocHJvcHMpIHsKICAgIHJldHVybiBlJDIoImRpdiIsIHsKICAgICAgY2xhc3M6ICJmanMtcG93ZXJlZC1ieSBmanMtZm9ybS1maWVsZCIsCiAgICAgIHN0eWxlOiAidGV4dC1hbGlnbjogcmlnaHQiLAogICAgICBjaGlsZHJlbjogZSQyKCJhIiwgewogICAgICAgIGhyZWY6ICJodHRwczovL2JwbW4uaW8iLAogICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgcmVsOiAibm9vcGVuZXIiLAogICAgICAgIGNsYXNzOiAiZmpzLXBvd2VyZWQtYnktbGluayIsCiAgICAgICAgdGl0bGU6ICJQb3dlcmVkIGJ5IGJwbW4uaW8iLAogICAgICAgIHN0eWxlOiAiY29sb3I6ICM0MDQwNDAiLAogICAgICAgIG9uQ2xpY2s6IHByb3BzLm9uQ2xpY2ssCiAgICAgICAgY2hpbGRyZW46IGUkMihMb2dvLCB7fSkKICAgICAgfSkKICAgIH0pOwogIH0KICBmdW5jdGlvbiBQb3dlcmVkQnkocHJvcHMpIHsKICAgIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IGwkMShmYWxzZSk7CiAgICBmdW5jdGlvbiB0b2dnbGVPcGVuKG9wZW4pIHsKICAgICAgcmV0dXJuIGV2ZW50ID0+IHsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHNldE9wZW4ob3Blbik7CiAgICAgIH07CiAgICB9CiAgICByZXR1cm4gZSQyKGQkMSwgewogICAgICBjaGlsZHJlbjogW1coZSQyKExpZ2h0Ym94LCB7CiAgICAgICAgb3Blbjogb3BlbiwKICAgICAgICBvbkJhY2tkcm9wQ2xpY2s6IHRvZ2dsZU9wZW4oZmFsc2UpCiAgICAgIH0pLCBkb2N1bWVudC5ib2R5KSwgZSQyKExpbmssIHsKICAgICAgICBvbkNsaWNrOiB0b2dnbGVPcGVuKHRydWUpCiAgICAgIH0pXQogICAgfSk7CiAgfQoKICBjb25zdCBub29wID0gKCkgPT4ge307CiAgZnVuY3Rpb24gRm9ybUNvbXBvbmVudChwcm9wcykgewogICAgY29uc3QgZm9ybSA9IHVzZVNlcnZpY2UoJ2Zvcm0nKTsKICAgIGNvbnN0IHsKICAgICAgc2NoZW1hCiAgICB9ID0gZm9ybS5fZ2V0U3RhdGUoKTsKICAgIGNvbnN0IHsKICAgICAgb25TdWJtaXQgPSBub29wLAogICAgICBvblJlc2V0ID0gbm9vcCwKICAgICAgb25DaGFuZ2UgPSBub29wCiAgICB9ID0gcHJvcHM7CiAgICBjb25zdCBoYW5kbGVTdWJtaXQgPSBldmVudCA9PiB7CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIG9uU3VibWl0KCk7CiAgICB9OwogICAgY29uc3QgaGFuZGxlUmVzZXQgPSBldmVudCA9PiB7CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIG9uUmVzZXQoKTsKICAgIH07CiAgICByZXR1cm4gZSQyKCJmb3JtIiwgewogICAgICBjbGFzczogImZqcy1mb3JtIiwKICAgICAgb25TdWJtaXQ6IGhhbmRsZVN1Ym1pdCwKICAgICAgb25SZXNldDogaGFuZGxlUmVzZXQsCiAgICAgIG5vVmFsaWRhdGU6IHRydWUsCiAgICAgIGNoaWxkcmVuOiBbZSQyKEZvcm1GaWVsZCwgewogICAgICAgIGZpZWxkOiBzY2hlbWEsCiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlCiAgICAgIH0pLCBlJDIoUG93ZXJlZEJ5LCB7fSldCiAgICB9KTsKICB9CgogIC8qKgogICAqCiAgICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IGV4cHJlc3Npb24KICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vdHlwZXMnKS5EYXRhfSBkYXRhCiAgICovCiAgZnVuY3Rpb24gdXNlRXZhbHVhdGlvbihleHByZXNzaW9uLCBkYXRhKSB7CiAgICBjb25zdCBpbml0aWFsRGF0YSA9IHVzZVNlcnZpY2UoJ2Zvcm0nKS5fZ2V0U3RhdGUoKS5pbml0aWFsRGF0YTsKICAgIGNvbnN0IGNvbmRpdGlvbkNoZWNrZXIgPSB1c2VTZXJ2aWNlKCdjb25kaXRpb25DaGVja2VyJywgZmFsc2UpOwogICAgaWYgKCFjb25kaXRpb25DaGVja2VyKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIC8vIG1ha2Ugc3VyZSB3ZSBkbyBub3QgdXNlIGRhdGEgZnJvbSBoaWRkZW4gZmllbGRzCiAgICBjb25zdCBmaWx0ZXJlZERhdGEgPSB7CiAgICAgIC4uLmluaXRpYWxEYXRhLAogICAgICAuLi5jb25kaXRpb25DaGVja2VyLmFwcGx5Q29uZGl0aW9ucyhkYXRhLCBkYXRhKQogICAgfTsKICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyLmV2YWx1YXRlKGV4cHJlc3Npb24sIGZpbHRlcmVkRGF0YSk7CiAgfQoKICAvKioKICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZQogICAqLwogIGZ1bmN0aW9uIHVzZUV4cHJlc3Npb25WYWx1ZSh2YWx1ZSkgewogICAgY29uc3QgZm9ybURhdGEgPSB1c2VTZXJ2aWNlKCdmb3JtJykuX2dldFN0YXRlKCkuZGF0YTsKICAgIGlmICghaXNFeHByZXNzaW9uKHZhbHVlKSkgewogICAgICByZXR1cm4gdmFsdWU7CiAgICB9CgogICAgLy8gV2UgY2FuIGlnbm9yZSB0aGlzIGhvb2sgcnVsZSBhcyB3ZSBkbyBub3QgdXNlCiAgICAvLyBzdGF0ZSBvciBlZmZlY3RzIGluIG91ciBjdXN0b20gaG9va3MKICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcyAqLwogICAgcmV0dXJuIHVzZUV2YWx1YXRpb24odmFsdWUsIGZvcm1EYXRhKTsKICB9CgogIC8vIGhlbHBlciAvLy8vLy8vLy8vLy8vLy8KCiAgZnVuY3Rpb24gaXNFeHByZXNzaW9uKHZhbHVlKSB7CiAgICByZXR1cm4gaXNTdHJpbmckMih2YWx1ZSkgJiYgdmFsdWUuc3RhcnRzV2l0aCgnPScpOwogIH0KCiAgZnVuY3Rpb24gX2V4dGVuZHMkZigpIHsgX2V4dGVuZHMkZiA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMkZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9CiAgdmFyIEltYWdlUGxhY2Vob2xkZXIgPSAoKHsKICAgIHN0eWxlcyA9IHt9LAogICAgLi4ucHJvcHMKICB9KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3ZnIiwgX2V4dGVuZHMkZih7CiAgICB3aWR0aDogIjY0IiwKICAgIGhlaWdodDogIjY0IiwKICAgIHZpZXdCb3g6ICIwIDAgMTI4MCAxMjgwIiwKICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgZmlsbFJ1bGU6ICJldmVub2RkIiwKICAgIGNsaXBSdWxlOiAiZXZlbm9kZCIsCiAgICBzdHJva2VMaW5lam9pbjogInJvdW5kIiwKICAgIHN0cm9rZU1pdGVybGltaXQ6ICIyIgogIH0sIHByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInBhdGgiLCB7CiAgICBmaWxsOiAiI2U1ZTllZCIsCiAgICBkOiAiTTAgMGgxMjgwdjEyODBIMHoiCiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJwYXRoIiwgewogICAgZDogIk05MTAgNDEwSDM3MHY0NzBoNTQwVjQxMHptLTU3LjMzMyA1Ny4zMzN2MzU1LjMzNEg0MjcuMzMzVjQ2Ny4zMzNoNDI1LjMzNHoiLAogICAgZmlsbDogIiNjYWQzZGIiCiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJwYXRoIiwgewogICAgZDogIk04MTAgNzcwSDQ4MHYtNjBsMTAwLTE3MCAxMzAgMTcwIDEwMC02NXYxMjV6IiwKICAgIGZpbGw6ICIjY2FkM2RiIgogIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiY2lyY2xlIiwgewogICAgY3g6ICI3NTAiLAogICAgY3k6ICI1NTAiLAogICAgcjogIjUwIiwKICAgIGZpbGw6ICIjY2FkM2RiIiwKICAgIHRyYW5zZm9ybTogInRyYW5zbGF0ZSgxMCAxMCkiCiAgfSkpKTsKCiAgY29uc3QgdHlwZSQ3ID0gJ2ltYWdlJzsKICBmdW5jdGlvbiBJbWFnZShwcm9wcykgewogICAgY29uc3QgewogICAgICBmaWVsZAogICAgfSA9IHByb3BzOwogICAgY29uc3QgewogICAgICBhbHQsCiAgICAgIGlkLAogICAgICBzb3VyY2UKICAgIH0gPSBmaWVsZDsKICAgIGNvbnN0IHNhZmVTb3VyY2UgPSBzYWZlSW1hZ2VTb3VyY2UodXNlRXhwcmVzc2lvblZhbHVlKHNvdXJjZSkpOwogICAgY29uc3QgYWx0VGV4dCA9IHVzZUV4cHJlc3Npb25WYWx1ZShhbHQpOwogICAgY29uc3QgewogICAgICBmb3JtSWQKICAgIH0gPSBGJDEoRm9ybUNvbnRleHQpOwogICAgcmV0dXJuIGUkMigiZGl2IiwgewogICAgICBjbGFzczogZm9ybUZpZWxkQ2xhc3Nlcyh0eXBlJDcpLAogICAgICBjaGlsZHJlbjogZSQyKCJkaXYiLCB7CiAgICAgICAgY2xhc3M6ICJmanMtaW1hZ2UtY29udGFpbmVyIiwKICAgICAgICBjaGlsZHJlbjogW3NhZmVTb3VyY2UgJiYgZSQyKCJpbWciLCB7CiAgICAgICAgICBhbHQ6IGFsdFRleHQsCiAgICAgICAgICBzcmM6IHNhZmVTb3VyY2UsCiAgICAgICAgICBjbGFzczogImZqcy1pbWFnZSIsCiAgICAgICAgICBpZDogcHJlZml4SWQoaWQsIGZvcm1JZCkKICAgICAgICB9KSwgIXNhZmVTb3VyY2UgJiYgZSQyKCJkaXYiLCB7CiAgICAgICAgICBjbGFzczogImZqcy1pbWFnZS1wbGFjZWhvbGRlciIsCiAgICAgICAgICBjaGlsZHJlbjogZSQyKEltYWdlUGxhY2Vob2xkZXIsIHsKICAgICAgICAgICAgYWx0OiAiVGhpcyBpcyBhbiBpbWFnZSBwbGFjZWhvbGRlciIKICAgICAgICAgIH0pCiAgICAgICAgfSldCiAgICAgIH0pCiAgICB9KTsKICB9CiAgSW1hZ2UuY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMgPSB7fSkgewogICAgcmV0dXJuIHsKICAgICAgLi4ub3B0aW9ucwogICAgfTsKICB9OwogIEltYWdlLnR5cGUgPSB0eXBlJDc7CiAgSW1hZ2Uua2V5ZWQgPSBmYWxzZTsKCiAgY29uc3QgdHlwZSQ2ID0gJ251bWJlcic7CiAgZnVuY3Rpb24gTnVtYmVyZmllbGQocHJvcHMpIHsKICAgIGNvbnN0IHsKICAgICAgZGlzYWJsZWQsCiAgICAgIGVycm9ycyA9IFtdLAogICAgICBmaWVsZCwKICAgICAgdmFsdWUsCiAgICAgIG9uQ2hhbmdlCiAgICB9ID0gcHJvcHM7CiAgICBjb25zdCB7CiAgICAgIGRlc2NyaXB0aW9uLAogICAgICBpZCwKICAgICAgbGFiZWwsCiAgICAgIGFwcGVhcmFuY2UgPSB7fSwKICAgICAgdmFsaWRhdGUgPSB7fSwKICAgICAgZGVjaW1hbERpZ2l0cywKICAgICAgc2VyaWFsaXplVG9TdHJpbmcgPSBmYWxzZSwKICAgICAgaW5jcmVtZW50OiBpbmNyZW1lbnRWYWx1ZQogICAgfSA9IGZpZWxkOwogICAgY29uc3QgewogICAgICBwcmVmaXhBZG9ybmVyLAogICAgICBzdWZmaXhBZG9ybmVyCiAgICB9ID0gYXBwZWFyYW5jZTsKICAgIGNvbnN0IHsKICAgICAgcmVxdWlyZWQKICAgIH0gPSB2YWxpZGF0ZTsKICAgIGNvbnN0IGlucHV0UmVmID0gcygpOwogICAgY29uc3QgW3N0cmluZ1ZhbHVlQ2FjaGUsIHNldFN0cmluZ1ZhbHVlQ2FjaGVdID0gbCQxKCcnKTsKCiAgICAvLyBjaGVja3Mgd2hldGhlciB0aGUgdmFsdWUgY3VycmVudGx5IGluIHRoZSBmb3JtIGRhdGEgaXMgcHJhY3RpY2FsbHkgZGlmZmVyZW50IGZyb20gdGhlIG9uZSBpbiB0aGUgaW5wdXQgZmllbGQgY2FjaGUKICAgIC8vIHRoaXMgYWxsb3dzIHVzIHRvIGd1YXJhbnRlZSB0aGUgZmllbGQgYWx3YXlzIGRpc3BsYXlzIHZhbGlkIGZvcm0gZGF0YSwgYnV0IHdpdGhvdXQgYXV0by1zaW1wbGlmeWluZyB2YWx1ZXMgbGlrZSAxLjAwMCB0byAxCiAgICBjb25zdCBjYWNoZVZhbHVlTWF0Y2hlc1N0YXRlID0gZCgoKSA9PiBOdW1iZXJmaWVsZC5zYW5pdGl6ZVZhbHVlKHsKICAgICAgdmFsdWUsCiAgICAgIGZvcm1GaWVsZDogZmllbGQKICAgIH0pID09PSBOdW1iZXJmaWVsZC5zYW5pdGl6ZVZhbHVlKHsKICAgICAgdmFsdWU6IHN0cmluZ1ZhbHVlQ2FjaGUsCiAgICAgIGZvcm1GaWVsZDogZmllbGQKICAgIH0pLCBbc3RyaW5nVmFsdWVDYWNoZSwgdmFsdWUsIGZpZWxkXSk7CiAgICBjb25zdCBkaXNwbGF5VmFsdWUgPSBkKCgpID0+IHsKICAgICAgaWYgKHZhbHVlID09PSAnTmFOJykgcmV0dXJuICdOYU4nOwogICAgICByZXR1cm4gY2FjaGVWYWx1ZU1hdGNoZXNTdGF0ZSA/IHN0cmluZ1ZhbHVlQ2FjaGUgOiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IEJpZyh2YWx1ZSkudG9GaXhlZCgpIDogJyc7CiAgICB9LCBbc3RyaW5nVmFsdWVDYWNoZSwgdmFsdWUsIGNhY2hlVmFsdWVNYXRjaGVzU3RhdGVdKTsKICAgIGNvbnN0IGFycm93SW5jcmVtZW50VmFsdWUgPSBkKCgpID0+IHsKICAgICAgaWYgKGluY3JlbWVudFZhbHVlKSByZXR1cm4gQmlnKGluY3JlbWVudFZhbHVlKTsKICAgICAgaWYgKGRlY2ltYWxEaWdpdHMpIHJldHVybiBCaWcoYDFlLSR7ZGVjaW1hbERpZ2l0c31gKTsKICAgICAgcmV0dXJuIEJpZygnMScpOwogICAgfSwgW2RlY2ltYWxEaWdpdHMsIGluY3JlbWVudFZhbHVlXSk7CiAgICBjb25zdCBzZXRWYWx1ZSA9IEEkMShzdHJpbmdWYWx1ZSA9PiB7CiAgICAgIGlmIChpc051bGxFcXVpdmFsZW50VmFsdWUoc3RyaW5nVmFsdWUpKSB7CiAgICAgICAgc2V0U3RyaW5nVmFsdWVDYWNoZSgnJyk7CiAgICAgICAgb25DaGFuZ2UoewogICAgICAgICAgZmllbGQsCiAgICAgICAgICB2YWx1ZTogbnVsbAogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgLy8gdHJlYXQgY29tbWFzIGFzIGRvdHMKICAgICAgc3RyaW5nVmFsdWUgPSBzdHJpbmdWYWx1ZS5yZXBsYWNlQWxsKCcsJywgJy4nKTsKICAgICAgaWYgKGlzTmFOKE51bWJlcihzdHJpbmdWYWx1ZSkpKSB7CiAgICAgICAgc2V0U3RyaW5nVmFsdWVDYWNoZSgnTmFOJyk7CiAgICAgICAgb25DaGFuZ2UoewogICAgICAgICAgZmllbGQsCiAgICAgICAgICB2YWx1ZTogJ05hTicKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgc2V0U3RyaW5nVmFsdWVDYWNoZShzdHJpbmdWYWx1ZSk7CiAgICAgIG9uQ2hhbmdlKHsKICAgICAgICBmaWVsZCwKICAgICAgICB2YWx1ZTogc2VyaWFsaXplVG9TdHJpbmcgPyBzdHJpbmdWYWx1ZSA6IE51bWJlcihzdHJpbmdWYWx1ZSkKICAgICAgfSk7CiAgICB9LCBbZmllbGQsIG9uQ2hhbmdlLCBzZXJpYWxpemVUb1N0cmluZ10pOwogICAgY29uc3QgaW5jcmVtZW50ID0gKCkgPT4gewogICAgICBjb25zdCBiYXNlID0gaXNWYWxpZE51bWJlcih2YWx1ZSkgPyBCaWcodmFsdWUpIDogQmlnKDApOwogICAgICBjb25zdCBzdGVwRmxvb3JlZFZhbHVlID0gYmFzZS5taW51cyhiYXNlLm1vZChhcnJvd0luY3JlbWVudFZhbHVlKSk7CgogICAgICAvLyBub3RlOiB0b0ZpeGVkKCkgYmVoYXZlcyBkaWZmZXJlbnRseSBpbiBiaWcuanMKICAgICAgc2V0VmFsdWUoc3RlcEZsb29yZWRWYWx1ZS5wbHVzKGFycm93SW5jcmVtZW50VmFsdWUpLnRvRml4ZWQoKSk7CiAgICB9OwogICAgY29uc3QgZGVjcmVtZW50ID0gKCkgPT4gewogICAgICBjb25zdCBiYXNlID0gaXNWYWxpZE51bWJlcih2YWx1ZSkgPyBCaWcodmFsdWUpIDogQmlnKDApOwogICAgICBjb25zdCBvZmZzZXQgPSBiYXNlLm1vZChhcnJvd0luY3JlbWVudFZhbHVlKTsKICAgICAgaWYgKG9mZnNldC5jbXAoMCkgPT09IDApIHsKICAgICAgICAvLyBpZiB3ZSdyZSBhbHJlYWR5IG9uIGEgdmFsaWQgc3RlcCwgZGVjcmVtZW50CiAgICAgICAgc2V0VmFsdWUoYmFzZS5taW51cyhhcnJvd0luY3JlbWVudFZhbHVlKS50b0ZpeGVkKCkpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIG90aGVyd2lzZSBmbG9vciB0byB0aGUgc3RlcAogICAgICAgIGNvbnN0IHN0ZXBGbG9vcmVkVmFsdWUgPSBiYXNlLm1pbnVzKGJhc2UubW9kKGFycm93SW5jcmVtZW50VmFsdWUpKTsKICAgICAgICBzZXRWYWx1ZShzdGVwRmxvb3JlZFZhbHVlLnRvRml4ZWQoKSk7CiAgICAgIH0KICAgIH07CiAgICBjb25zdCBvbktleURvd24gPSBlID0+IHsKICAgICAgLy8gZGVsZXRlIHRoZSBOYU4gc3RhdGUgYWxsIGF0IG9uY2Ugb24gYmFja3NwYWNlIG9yIGRlbGV0ZQogICAgICBpZiAodmFsdWUgPT09ICdOYU4nICYmIChlLmNvZGUgPT09ICdCYWNrc3BhY2UnIHx8IGUuY29kZSA9PT0gJ0RlbGV0ZScpKSB7CiAgICAgICAgc2V0VmFsdWUobnVsbCk7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAoZS5jb2RlID09PSAnQXJyb3dVcCcpIHsKICAgICAgICBpbmNyZW1lbnQoKTsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmIChlLmNvZGUgPT09ICdBcnJvd0Rvd24nKSB7CiAgICAgICAgZGVjcmVtZW50KCk7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgfTsKCiAgICAvLyBpbnRlcmNlcHQga2V5IHByZXNzZXMgd2hpY2ggd291bGQgbGVhZCB0byBhbiBpbnZhbGlkIG51bWJlcgogICAgY29uc3Qgb25LZXlQcmVzcyA9IGUgPT4gewogICAgICBjb25zdCBjYXJldEluZGV4ID0gaW5wdXRSZWYuY3VycmVudC5zZWxlY3Rpb25TdGFydDsKICAgICAgY29uc3Qgc2VsZWN0aW9uV2lkdGggPSBpbnB1dFJlZi5jdXJyZW50LnNlbGVjdGlvblN0YXJ0IC0gaW5wdXRSZWYuY3VycmVudC5zZWxlY3Rpb25FbmQ7CiAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBpbnB1dFJlZi5jdXJyZW50LnZhbHVlOwogICAgICBpZiAoIXdpbGxLZXlQcm9kdWNlVmFsaWROdW1iZXIoZS5rZXksIHByZXZpb3VzVmFsdWUsIGNhcmV0SW5kZXgsIHNlbGVjdGlvbldpZHRoLCBkZWNpbWFsRGlnaXRzKSkgewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgfQogICAgfTsKICAgIGNvbnN0IHsKICAgICAgZm9ybUlkCiAgICB9ID0gRiQxKEZvcm1Db250ZXh0KTsKICAgIHJldHVybiBlJDIoImRpdiIsIHsKICAgICAgY2xhc3M6IGZvcm1GaWVsZENsYXNzZXModHlwZSQ2LCB7CiAgICAgICAgZXJyb3JzLAogICAgICAgIGRpc2FibGVkCiAgICAgIH0pLAogICAgICBjaGlsZHJlbjogW2UkMihMYWJlbCwgewogICAgICAgIGlkOiBwcmVmaXhJZChpZCwgZm9ybUlkKSwKICAgICAgICBsYWJlbDogbGFiZWwsCiAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkCiAgICAgIH0pLCBlJDIoSW5wdXRBZG9ybmVyLCB7CiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLAogICAgICAgIHByZTogcHJlZml4QWRvcm5lciwKICAgICAgICBwb3N0OiBzdWZmaXhBZG9ybmVyLAogICAgICAgIGNoaWxkcmVuOiBlJDIoImRpdiIsIHsKICAgICAgICAgIGNsYXNzOiBjbGFzc05hbWVzKCdmanMtdmVydGljYWwtZ3JvdXAnLCB7CiAgICAgICAgICAgICdkaXNhYmxlZCc6IGRpc2FibGVkCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgICdoYXNFcnJvcnMnOiBlcnJvcnMubGVuZ3RoCiAgICAgICAgICB9KSwKICAgICAgICAgIGNoaWxkcmVuOiBbZSQyKCJpbnB1dCIsIHsKICAgICAgICAgICAgcmVmOiBpbnB1dFJlZiwKICAgICAgICAgICAgY2xhc3M6ICJmanMtaW5wdXQiLAogICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsCiAgICAgICAgICAgIGlkOiBwcmVmaXhJZChpZCwgZm9ybUlkKSwKICAgICAgICAgICAgb25LZXlEb3duOiBvbktleURvd24sCiAgICAgICAgICAgIG9uS2V5UHJlc3M6IG9uS2V5UHJlc3MKCiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUKICAgICAgICAgICAgLAogICAgICAgICAgICBvbklucHV0OiBlID0+IHNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKSwKICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICBhdXRvQ29tcGxldGU6ICJvZmYiLAogICAgICAgICAgICBzdGVwOiBhcnJvd0luY3JlbWVudFZhbHVlLAogICAgICAgICAgICB2YWx1ZTogZGlzcGxheVZhbHVlCiAgICAgICAgICB9KSwgZSQyKCJkaXYiLCB7CiAgICAgICAgICAgIGNsYXNzOiBjbGFzc05hbWVzKCdmanMtbnVtYmVyLWFycm93LWNvbnRhaW5lcicsIHsKICAgICAgICAgICAgICAnZGlzYWJsZWQnOiBkaXNhYmxlZAogICAgICAgICAgICB9KSwKICAgICAgICAgICAgY2hpbGRyZW46IFtlJDIoImJ1dHRvbiIsIHsKICAgICAgICAgICAgICBjbGFzczogImZqcy1udW1iZXItYXJyb3ctdXAiLAogICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IGluY3JlbWVudCgpLAogICAgICAgICAgICAgIHRhYkluZGV4OiAtMSwKICAgICAgICAgICAgICBjaGlsZHJlbjogIlx1MDJDNCIKICAgICAgICAgICAgfSksIGUkMigiZGl2IiwgewogICAgICAgICAgICAgIGNsYXNzOiAiZmpzLW51bWJlci1hcnJvdy1zZXBhcmF0b3IiCiAgICAgICAgICAgIH0pLCBlJDIoImJ1dHRvbiIsIHsKICAgICAgICAgICAgICBjbGFzczogImZqcy1udW1iZXItYXJyb3ctZG93biIsCiAgICAgICAgICAgICAgb25DbGljazogKCkgPT4gZGVjcmVtZW50KCksCiAgICAgICAgICAgICAgdGFiSW5kZXg6IC0xLAogICAgICAgICAgICAgIGNoaWxkcmVuOiAiXHUwMkM1IgogICAgICAgICAgICB9KV0KICAgICAgICAgIH0pXQogICAgICAgIH0pCiAgICAgIH0pLCBlJDIoRGVzY3JpcHRpb24sIHsKICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24KICAgICAgfSksIGUkMihFcnJvcnMsIHsKICAgICAgICBlcnJvcnM6IGVycm9ycwogICAgICB9KV0KICAgIH0pOwogIH0KICBOdW1iZXJmaWVsZC5jcmVhdGUgPSAob3B0aW9ucyA9IHt9KSA9PiBvcHRpb25zOwogIE51bWJlcmZpZWxkLnNhbml0aXplVmFsdWUgPSAoewogICAgdmFsdWUsCiAgICBmb3JtRmllbGQKICB9KSA9PiB7CiAgICAvLyBudWxsIHN0YXRlIGlzIGFsbG93ZWQKICAgIGlmIChpc051bGxFcXVpdmFsZW50VmFsdWUodmFsdWUpKSByZXR1cm4gbnVsbDsKCiAgICAvLyBpZiBkYXRhIGNhbm5vdCBiZSBwYXJzZWQgYXMgYSB2YWxpZCBudW1iZXIsIGdvIGludG8gaW52YWxpZCBOYU4gc3RhdGUKICAgIGlmICghaXNWYWxpZE51bWJlcih2YWx1ZSkpIHJldHVybiAnTmFOJzsKCiAgICAvLyBvdGhlcndpc2UgcGFyc2UgdG8gZm9ybWF0dGluZyB0eXBlCiAgICByZXR1cm4gZm9ybUZpZWxkLnNlcmlhbGl6ZVRvU3RyaW5nID8gdmFsdWUudG9TdHJpbmcoKSA6IE51bWJlcih2YWx1ZSk7CiAgfTsKICBOdW1iZXJmaWVsZC50eXBlID0gdHlwZSQ2OwogIE51bWJlcmZpZWxkLmtleWVkID0gdHJ1ZTsKICBOdW1iZXJmaWVsZC5sYWJlbCA9ICdOdW1iZXInOwogIE51bWJlcmZpZWxkLmVtcHR5VmFsdWUgPSBudWxsOwoKICBjb25zdCB0eXBlJDUgPSAncmFkaW8nOwogIGZ1bmN0aW9uIFJhZGlvKHByb3BzKSB7CiAgICBjb25zdCB7CiAgICAgIGRpc2FibGVkLAogICAgICBlcnJvcnMgPSBbXSwKICAgICAgZmllbGQsCiAgICAgIHZhbHVlCiAgICB9ID0gcHJvcHM7CiAgICBjb25zdCB7CiAgICAgIGRlc2NyaXB0aW9uLAogICAgICBpZCwKICAgICAgbGFiZWwsCiAgICAgIHZhbGlkYXRlID0ge30KICAgIH0gPSBmaWVsZDsKICAgIGNvbnN0IHsKICAgICAgcmVxdWlyZWQKICAgIH0gPSB2YWxpZGF0ZTsKICAgIGNvbnN0IG9uQ2hhbmdlID0gdiA9PiB7CiAgICAgIHByb3BzLm9uQ2hhbmdlKHsKICAgICAgICBmaWVsZCwKICAgICAgICB2YWx1ZTogdgogICAgICB9KTsKICAgIH07CiAgICBjb25zdCB7CiAgICAgIHN0YXRlOiBsb2FkU3RhdGUsCiAgICAgIHZhbHVlczogb3B0aW9ucwogICAgfSA9IHVzZVZhbHVlc0FzeW5jKGZpZWxkKTsKICAgIGNvbnN0IHsKICAgICAgZm9ybUlkCiAgICB9ID0gRiQxKEZvcm1Db250ZXh0KTsKICAgIHJldHVybiBlJDIoImRpdiIsIHsKICAgICAgY2xhc3M6IGZvcm1GaWVsZENsYXNzZXModHlwZSQ1LCB7CiAgICAgICAgZXJyb3JzLAogICAgICAgIGRpc2FibGVkCiAgICAgIH0pLAogICAgICBjaGlsZHJlbjogW2UkMihMYWJlbCwgewogICAgICAgIGxhYmVsOiBsYWJlbCwKICAgICAgICByZXF1aXJlZDogcmVxdWlyZWQKICAgICAgfSksIGxvYWRTdGF0ZSA9PSBMT0FEX1NUQVRFUy5MT0FERUQgJiYgb3B0aW9ucy5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IHsKICAgICAgICByZXR1cm4gZSQyKExhYmVsLCB7CiAgICAgICAgICBpZDogcHJlZml4SWQoYCR7aWR9LSR7aW5kZXh9YCwgZm9ybUlkKSwKICAgICAgICAgIGxhYmVsOiBvcHRpb24ubGFiZWwsCiAgICAgICAgICBjbGFzczogY2xhc3NOYW1lcyh7CiAgICAgICAgICAgICdmanMtY2hlY2tlZCc6IG9wdGlvbi52YWx1ZSA9PT0gdmFsdWUKICAgICAgICAgIH0pLAogICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgICAgY2hpbGRyZW46IGUkMigiaW5wdXQiLCB7CiAgICAgICAgICAgIGNoZWNrZWQ6IG9wdGlvbi52YWx1ZSA9PT0gdmFsdWUsCiAgICAgICAgICAgIGNsYXNzOiAiZmpzLWlucHV0IiwKICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLAogICAgICAgICAgICBpZDogcHJlZml4SWQoYCR7aWR9LSR7aW5kZXh9YCwgZm9ybUlkKSwKICAgICAgICAgICAgdHlwZTogInJhZGlvIiwKICAgICAgICAgICAgb25DbGljazogKCkgPT4gb25DaGFuZ2Uob3B0aW9uLnZhbHVlKQogICAgICAgICAgfSkKICAgICAgICB9LCBgJHtpZH0tJHtpbmRleH1gKTsKICAgICAgfSksIGUkMihEZXNjcmlwdGlvbiwgewogICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbgogICAgICB9KSwgZSQyKEVycm9ycywgewogICAgICAgIGVycm9yczogZXJyb3JzCiAgICAgIH0pXQogICAgfSk7CiAgfQogIFJhZGlvLmNyZWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zID0ge30pIHsKICAgIGlmIChvcHRpb25zLnZhbHVlc0tleSkgcmV0dXJuIG9wdGlvbnM7CiAgICByZXR1cm4gewogICAgICB2YWx1ZXM6IFt7CiAgICAgICAgbGFiZWw6ICdWYWx1ZScsCiAgICAgICAgdmFsdWU6ICd2YWx1ZScKICAgICAgfV0sCiAgICAgIC4uLm9wdGlvbnMKICAgIH07CiAgfTsKICBSYWRpby50eXBlID0gdHlwZSQ1OwogIFJhZGlvLmxhYmVsID0gJ1JhZGlvJzsKICBSYWRpby5rZXllZCA9IHRydWU7CiAgUmFkaW8uZW1wdHlWYWx1ZSA9IG51bGw7CiAgUmFkaW8uc2FuaXRpemVWYWx1ZSA9IHNhbml0aXplU2luZ2xlU2VsZWN0VmFsdWU7CgogIGNvbnN0IHR5cGUkNCA9ICdzZWxlY3QnOwogIGZ1bmN0aW9uIFNlbGVjdChwcm9wcykgewogICAgY29uc3QgewogICAgICBkaXNhYmxlZCwKICAgICAgZXJyb3JzID0gW10sCiAgICAgIGZpZWxkLAogICAgICB2YWx1ZQogICAgfSA9IHByb3BzOwogICAgY29uc3QgewogICAgICBkZXNjcmlwdGlvbiwKICAgICAgaWQsCiAgICAgIGxhYmVsLAogICAgICB2YWxpZGF0ZSA9IHt9CiAgICB9ID0gZmllbGQ7CiAgICBjb25zdCB7CiAgICAgIHJlcXVpcmVkCiAgICB9ID0gdmFsaWRhdGU7CiAgICBjb25zdCBvbkNoYW5nZSA9ICh7CiAgICAgIHRhcmdldAogICAgfSkgPT4gewogICAgICBwcm9wcy5vbkNoYW5nZSh7CiAgICAgICAgZmllbGQsCiAgICAgICAgdmFsdWU6IHRhcmdldC52YWx1ZSA9PT0gJycgPyBudWxsIDogdGFyZ2V0LnZhbHVlCiAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IHsKICAgICAgc3RhdGU6IGxvYWRTdGF0ZSwKICAgICAgdmFsdWVzOiBvcHRpb25zCiAgICB9ID0gdXNlVmFsdWVzQXN5bmMoZmllbGQpOwogICAgY29uc3QgewogICAgICBmb3JtSWQKICAgIH0gPSBGJDEoRm9ybUNvbnRleHQpOwogICAgcmV0dXJuIGUkMigiZGl2IiwgewogICAgICBjbGFzczogZm9ybUZpZWxkQ2xhc3Nlcyh0eXBlJDQsIHsKICAgICAgICBlcnJvcnMsCiAgICAgICAgZGlzYWJsZWQKICAgICAgfSksCiAgICAgIGNoaWxkcmVuOiBbZSQyKExhYmVsLCB7CiAgICAgICAgaWQ6IHByZWZpeElkKGlkLCBmb3JtSWQpLAogICAgICAgIGxhYmVsOiBsYWJlbCwKICAgICAgICByZXF1aXJlZDogcmVxdWlyZWQKICAgICAgfSksIGUkMigic2VsZWN0IiwgewogICAgICAgIGNsYXNzOiAiZmpzLXNlbGVjdCIsCiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLAogICAgICAgIGlkOiBwcmVmaXhJZChpZCwgZm9ybUlkKSwKICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2UsCiAgICAgICAgdmFsdWU6IHZhbHVlIHx8ICcnLAogICAgICAgIGNoaWxkcmVuOiBbZSQyKCJvcHRpb24iLCB7CiAgICAgICAgICB2YWx1ZTogIiIKICAgICAgICB9KSwgbG9hZFN0YXRlID09IExPQURfU1RBVEVTLkxPQURFRCAmJiBvcHRpb25zLm1hcCgob3B0aW9uLCBpbmRleCkgPT4gewogICAgICAgICAgcmV0dXJuIGUkMigib3B0aW9uIiwgewogICAgICAgICAgICB2YWx1ZTogb3B0aW9uLnZhbHVlLAogICAgICAgICAgICBjaGlsZHJlbjogb3B0aW9uLmxhYmVsCiAgICAgICAgICB9LCBgJHtpZH0tJHtpbmRleH1gKTsKICAgICAgICB9KV0KICAgICAgfSksIGUkMihEZXNjcmlwdGlvbiwgewogICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbgogICAgICB9KSwgZSQyKEVycm9ycywgewogICAgICAgIGVycm9yczogZXJyb3JzCiAgICAgIH0pXQogICAgfSk7CiAgfQogIFNlbGVjdC5jcmVhdGUgPSBmdW5jdGlvbiAob3B0aW9ucyA9IHt9KSB7CiAgICBpZiAob3B0aW9ucy52YWx1ZXNLZXkpIHJldHVybiBvcHRpb25zOwogICAgcmV0dXJuIHsKICAgICAgdmFsdWVzOiBbewogICAgICAgIGxhYmVsOiAnVmFsdWUnLAogICAgICAgIHZhbHVlOiAndmFsdWUnCiAgICAgIH1dLAogICAgICAuLi5vcHRpb25zCiAgICB9OwogIH07CiAgU2VsZWN0LnR5cGUgPSB0eXBlJDQ7CiAgU2VsZWN0LmxhYmVsID0gJ1NlbGVjdCc7CiAgU2VsZWN0LmtleWVkID0gdHJ1ZTsKICBTZWxlY3QuZW1wdHlWYWx1ZSA9IG51bGw7CiAgU2VsZWN0LnNhbml0aXplVmFsdWUgPSBzYW5pdGl6ZVNpbmdsZVNlbGVjdFZhbHVlOwoKICBmdW5jdGlvbiBfZXh0ZW5kcyRlKCkgeyBfZXh0ZW5kcyRlID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcyRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0KICB2YXIgQ2xvc2VJY29uID0gKCh7CiAgICBzdHlsZXMgPSB7fSwKICAgIC4uLnByb3BzCiAgfSkgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInN2ZyIsIF9leHRlbmRzJGUoewogICAgd2lkdGg6ICIxNiIsCiAgICBoZWlnaHQ6ICIxNiIsCiAgICBmaWxsOiAibm9uZSIsCiAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogIH0sIHByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInBhdGgiLCB7CiAgICBmaWxsUnVsZTogImV2ZW5vZGQiLAogICAgY2xpcFJ1bGU6ICJldmVub2RkIiwKICAgIGQ6ICJNMTIgNC43bC0uNy0uN0w4IDcuMyA0LjcgNGwtLjcuN0w3LjMgOCA0IDExLjNsLjcuN0w4IDguN2wzLjMgMy4zLjctLjdMOC43IDggMTIgNC43eiIsCiAgICBmaWxsOiAiY3VycmVudENvbG9yIgogIH0pKSk7CgogIGNvbnN0IHR5cGUkMyA9ICd0YWdsaXN0JzsKICBmdW5jdGlvbiBUYWdsaXN0KHByb3BzKSB7CiAgICBjb25zdCB7CiAgICAgIGRpc2FibGVkLAogICAgICBlcnJvcnMgPSBbXSwKICAgICAgZmllbGQsCiAgICAgIHZhbHVlOiB2YWx1ZXMgPSBbXQogICAgfSA9IHByb3BzOwogICAgY29uc3QgewogICAgICBkZXNjcmlwdGlvbiwKICAgICAgaWQsCiAgICAgIGxhYmVsCiAgICB9ID0gZmllbGQ7CiAgICBjb25zdCB7CiAgICAgIGZvcm1JZAogICAgfSA9IEYkMShGb3JtQ29udGV4dCk7CiAgICBjb25zdCBbZmlsdGVyLCBzZXRGaWx0ZXJdID0gbCQxKCcnKTsKICAgIGNvbnN0IFtmaWx0ZXJlZE9wdGlvbnMsIHNldEZpbHRlcmVkT3B0aW9uc10gPSBsJDEoW10pOwogICAgY29uc3QgW2lzRHJvcGRvd25FeHBhbmRlZCwgc2V0SXNEcm9wZG93bkV4cGFuZGVkXSA9IGwkMShmYWxzZSk7CiAgICBjb25zdCBbaGFzT3B0aW9uc0xlZnQsIHNldEhhc09wdGlvbnNMZWZ0XSA9IGwkMSh0cnVlKTsKICAgIGNvbnN0IFtpc0VzY2FwZUNsb3NlZCwgc2V0SXNFc2NhcGVDbG9zZV0gPSBsJDEoZmFsc2UpOwogICAgY29uc3Qgc2VhcmNoYmFyUmVmID0gcygpOwogICAgY29uc3QgewogICAgICBzdGF0ZTogbG9hZFN0YXRlLAogICAgICB2YWx1ZXM6IG9wdGlvbnMKICAgIH0gPSB1c2VWYWx1ZXNBc3luYyhmaWVsZCk7CgogICAgLy8gV2UgY2FjaGUgYSBtYXAgb2Ygb3B0aW9uIHZhbHVlcyB0byB0aGVpciBpbmRleCBzbyB0aGF0IHdlIGRvbid0IG5lZWQgdG8gc2VhcmNoIHRoZSB3aG9sZSBvcHRpb25zIGFycmF5IGV2ZXJ5IHRpbWUgdG8gY29ycmVsYXRlIHRoZSBsYWJlbAogICAgY29uc3QgdmFsdWVUb09wdGlvbk1hcCA9IGQoKCkgPT4gT2JqZWN0LmFzc2lnbih7fSwgLi4ub3B0aW9ucy5tYXAoKG8sIHgpID0+ICh7CiAgICAgIFtvLnZhbHVlXTogb3B0aW9uc1t4XQogICAgfSkpKSwgW29wdGlvbnNdKTsKCiAgICAvLyBVc2FnZSBvZiBzdHJpbmdpZnkgaXMgbmVjZXNzYXJ5IGhlcmUgYmVjYXVzZSB3ZSB3YW50IHRoaXMgZWZmZWN0IHRvIG9ubHkgdHJpZ2dlciB3aGVuIHRoZXJlIGlzIGEgdmFsdWUgY2hhbmdlIHRvIHRoZSBhcnJheQogICAgeSgoKSA9PiB7CiAgICAgIGlmIChsb2FkU3RhdGUgPT09IExPQURfU1RBVEVTLkxPQURFRCkgewogICAgICAgIHNldEZpbHRlcmVkT3B0aW9ucyhvcHRpb25zLmZpbHRlcihvID0+IG8ubGFiZWwgJiYgby52YWx1ZSAmJiBvLmxhYmVsLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyLnRvTG93ZXJDYXNlKCkpICYmICF2YWx1ZXMuaW5jbHVkZXMoby52YWx1ZSkpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzZXRGaWx0ZXJlZE9wdGlvbnMoW10pOwogICAgICB9CiAgICB9LCBbZmlsdGVyLCBKU09OLnN0cmluZ2lmeSh2YWx1ZXMpLCBvcHRpb25zLCBsb2FkU3RhdGVdKTsKICAgIHkoKCkgPT4gewogICAgICBzZXRIYXNPcHRpb25zTGVmdChvcHRpb25zLmxlbmd0aCA+IHZhbHVlcy5sZW5ndGgpOwogICAgfSwgW29wdGlvbnMubGVuZ3RoLCB2YWx1ZXMubGVuZ3RoXSk7CiAgICBjb25zdCBvbkZpbHRlckNoYW5nZSA9ICh7CiAgICAgIHRhcmdldAogICAgfSkgPT4gewogICAgICBzZXRJc0VzY2FwZUNsb3NlKGZhbHNlKTsKICAgICAgc2V0RmlsdGVyKHRhcmdldC52YWx1ZSk7CiAgICB9OwogICAgY29uc3Qgc2VsZWN0VmFsdWUgPSB2YWx1ZSA9PiB7CiAgICAgIGlmIChmaWx0ZXIpIHsKICAgICAgICBzZXRGaWx0ZXIoJycpOwogICAgICB9CgogICAgICAvLyBFbnN1cmUgdmFsdWVzIGNhbm5vdCBiZSBkb3VibGUgc2VsZWN0ZWQgZHVlIHRvIGxhdGVuY3kKICAgICAgaWYgKHZhbHVlcy5hdCgtMSkgPT09IHZhbHVlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHByb3BzLm9uQ2hhbmdlKHsKICAgICAgICB2YWx1ZTogWy4uLnZhbHVlcywgdmFsdWVdLAogICAgICAgIGZpZWxkCiAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IGRlc2VsZWN0VmFsdWUgPSB2YWx1ZSA9PiB7CiAgICAgIHByb3BzLm9uQ2hhbmdlKHsKICAgICAgICB2YWx1ZTogdmFsdWVzLmZpbHRlcih2ID0+IHYgIT0gdmFsdWUpLAogICAgICAgIGZpZWxkCiAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IG9uSW5wdXRLZXlEb3duID0gZSA9PiB7CiAgICAgIHN3aXRjaCAoZS5rZXkpIHsKICAgICAgICBjYXNlICdBcnJvd1VwJzoKICAgICAgICBjYXNlICdBcnJvd0Rvd24nOgogICAgICAgICAgLy8gV2UgZG8gbm90IHdhbnQgdGhlIGN1cnNvciB0byBzZWVrIGluIHRoZSBzZWFyY2ggZmllbGQgd2hlbiB3ZSBwcmVzcyB1cCBhbmQgZG93bgogICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnQmFja3NwYWNlJzoKICAgICAgICAgIGlmICghZmlsdGVyICYmIHZhbHVlcy5sZW5ndGgpIHsKICAgICAgICAgICAgZGVzZWxlY3RWYWx1ZSh2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ0VzY2FwZSc6CiAgICAgICAgICBzZXRJc0VzY2FwZUNsb3NlKHRydWUpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnRW50ZXInOgogICAgICAgICAgaWYgKGlzRXNjYXBlQ2xvc2VkKSB7CiAgICAgICAgICAgIHNldElzRXNjYXBlQ2xvc2UoZmFsc2UpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH07CiAgICBjb25zdCBvblRhZ1JlbW92ZUNsaWNrID0gKGV2ZW50LCB2YWx1ZSkgPT4gewogICAgICBjb25zdCB7CiAgICAgICAgdGFyZ2V0CiAgICAgIH0gPSBldmVudDsKICAgICAgZGVzZWxlY3RWYWx1ZSh2YWx1ZSk7CgogICAgICAvLyByZXN0b3JlIGZvY3VzIGlmIHRoZXJlIGlzIG5vIG5leHQgc2libGluZyB0byBmb2N1cwogICAgICBjb25zdCBuZXh0VGFnID0gdGFyZ2V0LmNsb3Nlc3QoJy5manMtdGFnbGlzdC10YWcnKS5uZXh0U2libGluZzsKICAgICAgaWYgKCFuZXh0VGFnKSB7CiAgICAgICAgc2VhcmNoYmFyUmVmLmN1cnJlbnQuZm9jdXMoKTsKICAgICAgfQogICAgfTsKICAgIHJldHVybiBlJDIoImRpdiIsIHsKICAgICAgY2xhc3M6IGZvcm1GaWVsZENsYXNzZXModHlwZSQzLCB7CiAgICAgICAgZXJyb3JzLAogICAgICAgIGRpc2FibGVkCiAgICAgIH0pLAogICAgICBjaGlsZHJlbjogW2UkMihMYWJlbCwgewogICAgICAgIGxhYmVsOiBsYWJlbCwKICAgICAgICBpZDogcHJlZml4SWQoYCR7aWR9LXNlYXJjaGAsIGZvcm1JZCkKICAgICAgfSksIGUkMigiZGl2IiwgewogICAgICAgIGNsYXNzOiBjbGFzc05hbWVzKCdmanMtdGFnbGlzdCcsIHsKICAgICAgICAgICdkaXNhYmxlZCc6IGRpc2FibGVkCiAgICAgICAgfSksCiAgICAgICAgY2hpbGRyZW46IFshZGlzYWJsZWQgJiYgbG9hZFN0YXRlID09PSBMT0FEX1NUQVRFUy5MT0FERUQgJiYgZSQyKCJkaXYiLCB7CiAgICAgICAgICBjbGFzczogImZqcy10YWdsaXN0LXRhZ3MiLAogICAgICAgICAgY2hpbGRyZW46IHZhbHVlcy5tYXAodiA9PiB7CiAgICAgICAgICAgIHJldHVybiBlJDIoImRpdiIsIHsKICAgICAgICAgICAgICBjbGFzczogImZqcy10YWdsaXN0LXRhZyIsCiAgICAgICAgICAgICAgb25Nb3VzZURvd246IGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpLAogICAgICAgICAgICAgIGNoaWxkcmVuOiBbZSQyKCJzcGFuIiwgewogICAgICAgICAgICAgICAgY2xhc3M6ICJmanMtdGFnbGlzdC10YWctbGFiZWwiLAogICAgICAgICAgICAgICAgY2hpbGRyZW46IHZhbHVlVG9PcHRpb25NYXBbdl0gPyB2YWx1ZVRvT3B0aW9uTWFwW3ZdLmxhYmVsIDogYHVuZXhwZWN0ZWQgdmFsdWV7JHt2fX1gCiAgICAgICAgICAgICAgfSksIGUkMigiYnV0dG9uIiwgewogICAgICAgICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB0aXRsZTogIlJlbW92ZSB0YWciLAogICAgICAgICAgICAgICAgY2xhc3M6ICJmanMtdGFnbGlzdC10YWctcmVtb3ZlIiwKICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGV2ZW50ID0+IG9uVGFnUmVtb3ZlQ2xpY2soZXZlbnQsIHYpLAogICAgICAgICAgICAgICAgY2hpbGRyZW46IGUkMihDbG9zZUljb24sIHt9KQogICAgICAgICAgICAgIH0pXQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pCiAgICAgICAgfSksIGUkMigiaW5wdXQiLCB7CiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsCiAgICAgICAgICBjbGFzczogImZqcy10YWdsaXN0LWlucHV0IiwKICAgICAgICAgIHJlZjogc2VhcmNoYmFyUmVmLAogICAgICAgICAgaWQ6IHByZWZpeElkKGAke2lkfS1zZWFyY2hgLCBmb3JtSWQpLAogICAgICAgICAgb25DaGFuZ2U6IG9uRmlsdGVyQ2hhbmdlLAogICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgdmFsdWU6IGZpbHRlciwKICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VhcmNoJywKICAgICAgICAgIGF1dG9Db21wbGV0ZTogIm9mZiIsCiAgICAgICAgICBvbktleURvd246IGUgPT4gb25JbnB1dEtleURvd24oZSksCiAgICAgICAgICBvbk1vdXNlRG93bjogKCkgPT4gc2V0SXNFc2NhcGVDbG9zZShmYWxzZSksCiAgICAgICAgICBvbkZvY3VzOiAoKSA9PiBzZXRJc0Ryb3Bkb3duRXhwYW5kZWQodHJ1ZSksCiAgICAgICAgICBvbkJsdXI6ICgpID0+IHsKICAgICAgICAgICAgc2V0SXNEcm9wZG93bkV4cGFuZGVkKGZhbHNlKTsKICAgICAgICAgICAgc2V0RmlsdGVyKCcnKTsKICAgICAgICAgIH0KICAgICAgICB9KV0KICAgICAgfSksIGUkMigiZGl2IiwgewogICAgICAgIGNsYXNzOiAiZmpzLXRhZ2xpc3QtYW5jaG9yIiwKICAgICAgICBjaGlsZHJlbjogIWRpc2FibGVkICYmIGxvYWRTdGF0ZSA9PT0gTE9BRF9TVEFURVMuTE9BREVEICYmIGlzRHJvcGRvd25FeHBhbmRlZCAmJiAhaXNFc2NhcGVDbG9zZWQgJiYgZSQyKERyb3Bkb3duTGlzdCwgewogICAgICAgICAgdmFsdWVzOiBmaWx0ZXJlZE9wdGlvbnMsCiAgICAgICAgICBnZXRMYWJlbDogbyA9PiBvLmxhYmVsLAogICAgICAgICAgb25WYWx1ZVNlbGVjdGVkOiBvID0+IHNlbGVjdFZhbHVlKG8udmFsdWUpLAogICAgICAgICAgZW1wdHlMaXN0TWVzc2FnZTogaGFzT3B0aW9uc0xlZnQgPyAnTm8gcmVzdWx0cycgOiAnQWxsIHZhbHVlcyBzZWxlY3RlZCcsCiAgICAgICAgICBsaXN0ZW5lckVsZW1lbnQ6IHNlYXJjaGJhclJlZi5jdXJyZW50CiAgICAgICAgfSkKICAgICAgfSksIGUkMihEZXNjcmlwdGlvbiwgewogICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbgogICAgICB9KSwgZSQyKEVycm9ycywgewogICAgICAgIGVycm9yczogZXJyb3JzCiAgICAgIH0pXQogICAgfSk7CiAgfQogIFRhZ2xpc3QuY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMgPSB7fSkgewogICAgaWYgKG9wdGlvbnMudmFsdWVzS2V5KSByZXR1cm4gb3B0aW9uczsKICAgIHJldHVybiB7CiAgICAgIHZhbHVlczogW3sKICAgICAgICBsYWJlbDogJ1ZhbHVlJywKICAgICAgICB2YWx1ZTogJ3ZhbHVlJwogICAgICB9XSwKICAgICAgLi4ub3B0aW9ucwogICAgfTsKICB9OwogIFRhZ2xpc3QudHlwZSA9IHR5cGUkMzsKICBUYWdsaXN0LmxhYmVsID0gJ1RhZ2xpc3QnOwogIFRhZ2xpc3Qua2V5ZWQgPSB0cnVlOwogIFRhZ2xpc3QuZW1wdHlWYWx1ZSA9IFtdOwogIFRhZ2xpc3Quc2FuaXRpemVWYWx1ZSA9IHNhbml0aXplTXVsdGlTZWxlY3RWYWx1ZTsKCiAgZnVuY3Rpb24gX2V4dGVuZHMkZCgpIHsgX2V4dGVuZHMkZCA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMkZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9CiAgdmFyIEJ1dHRvbkljb24gPSAoKHsKICAgIHN0eWxlcyA9IHt9LAogICAgLi4ucHJvcHMKICB9KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3ZnIiwgX2V4dGVuZHMkZCh7CiAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgIHdpZHRoOiAiNTQiLAogICAgaGVpZ2h0OiAiNTQiCiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicGF0aCIsIHsKICAgIGZpbGxSdWxlOiAiZXZlbm9kZCIsCiAgICBkOiAiTTQ1IDE3YTMgMyAwIDAxMyAzdjE0YTMgMyAwIDAxLTMgM0g5YTMgMyAwIDAxLTMtM1YyMGEzIDMgMCAwMTMtM2gzNnptLTkgOC44ODlIMTh2Mi4yMjJoMThWMjUuODl6IgogIH0pKSk7CgogIGZ1bmN0aW9uIF9leHRlbmRzJGMoKSB7IF9leHRlbmRzJGMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzJGMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfQogIHZhciBDaGVja2JveEljb24gPSAoKHsKICAgIHN0eWxlcyA9IHt9LAogICAgLi4ucHJvcHMKICB9KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3ZnIiwgX2V4dGVuZHMkYyh7CiAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgIHdpZHRoOiAiNTQiLAogICAgaGVpZ2h0OiAiNTQiCiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicGF0aCIsIHsKICAgIGQ6ICJNMzQgMThIMjBhMiAyIDAgMDAtMiAydjE0YTIgMiAwIDAwMiAyaDE0YTIgMiAwIDAwMi0yVjIwYTIgMiAwIDAwLTItMnptLTkgMTRsLTUtNSAxLjQxLTEuNDFMMjUgMjkuMTdsNy41OS03LjU5TDM0IDIzbC05IDl6IgogIH0pKSk7CgogIGZ1bmN0aW9uIF9leHRlbmRzJGIoKSB7IF9leHRlbmRzJGIgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzJGIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfQogIHZhciBDaGVja2xpc3RJY29uID0gKCh7CiAgICBzdHlsZXMgPSB7fSwKICAgIC4uLnByb3BzCiAgfSkgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInN2ZyIsIF9leHRlbmRzJGIoewogICAgd2lkdGg6ICI1NCIsCiAgICBoZWlnaHQ6ICI1NCIsCiAgICBmaWxsOiAibm9uZSIsCiAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogIH0sIHByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInBhdGgiLCB7CiAgICBmaWxsUnVsZTogImV2ZW5vZGQiLAogICAgY2xpcFJ1bGU6ICJldmVub2RkIiwKICAgIGQ6ICJNMTkgMjRoLTZ2Nmg2di02em0tNi0yYTIgMiAwIDAwLTIgMnY2YTIgMiAwIDAwMiAyaDZhMiAyIDAgMDAyLTJ2LTZhMiAyIDAgMDAtMi0yaC02em02IDE4aC02djZoNnYtNnptLTYtMmEyIDIgMCAwMC0yIDJ2NmEyIDIgMCAwMDIgMmg2YTIgMiAwIDAwMi0ydi02YTIgMiAwIDAwLTItMmgtNnptNi0zMGgtNnY2aDZWOHptLTYtMmEyIDIgMCAwMC0yIDJ2NmEyIDIgMCAwMDIgMmg2YTIgMiAwIDAwMi0yVjhhMiAyIDAgMDAtMi0yaC02eiIsCiAgICBmaWxsOiAiIzIyMjQyQSIKICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInBhdGgiLCB7CiAgICBkOiAiTTI2IDI2YTEgMSAwIDAxMS0xaDE1YTEgMSAwIDAxMSAxdjJhMSAxIDAgMDEtMSAxSDI3YTEgMSAwIDAxLTEtMXYtMnptMCAxNmExIDEgMCAwMTEtMWgxNWExIDEgMCAwMTEgMXYyYTEgMSAwIDAxLTEgMUgyN2ExIDEgMCAwMS0xLTF2LTJ6bTAtMzJhMSAxIDAgMDExLTFoMTVhMSAxIDAgMDExIDF2MmExIDEgMCAwMS0xIDFIMjdhMSAxIDAgMDEtMS0xdi0yeiIsCiAgICBmaWxsOiAiIzIyMjQyQSIKICB9KSkpOwoKICBmdW5jdGlvbiBfZXh0ZW5kcyRhKCkgeyBfZXh0ZW5kcyRhID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcyRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0KICB2YXIgRGF0ZXRpbWVJY29uID0gKCh7CiAgICBzdHlsZXMgPSB7fSwKICAgIC4uLnByb3BzCiAgfSkgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInN2ZyIsIF9leHRlbmRzJGEoewogICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICB3aWR0aDogIjU0IiwKICAgIGhlaWdodDogIjU0IiwKICAgIGZpbGw6ICJub25lIgogIH0sIHByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInBhdGgiLCB7CiAgICBmaWxsOiAiIzAwMCIsCiAgICBmaWxsUnVsZTogImV2ZW5vZGQiLAogICAgZDogIk0zNy45MDggMTMuNDE4aC01LjAwNHYtMi4zNTRoLTEuNzY2djIuMzU0SDIxLjEzdi0yLjM1NGgtMS43NjZ2Mi4zNTRIMTQuMzZjLTEuMTMyIDAtMi4wNi45MjgtMi4wNiAyLjA2djIzLjU0OWMwIDEuMTMyLjkyOCAyLjA2IDIuMDYgMi4wNmg2Ljc3di0xLjc2NmgtNi4zNThhLjcwNy43MDcgMCAwMS0uNzA2LS43MDZWMTUuODljMC0uMzkuMzE2LS43MDcuNzA2LS43MDdoNC41OTJ2Mi4zNTVoMS43NjZ2LTIuMzU1aDEwLjAwOHYyLjM1NWgxLjc2NnYtMi4zNTVoNC41OTJjLjM5IDAgLjcwNy4zMTcuNzA3LjcwN3Y2LjM1OGgxLjc2NXYtNi43N2MwLTEuMTMzLS45MjctMi4wNi0yLjA2LTIuMDZ6IiwKICAgIGNsaXBSdWxlOiAiZXZlbm9kZCIKICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInBhdGgiLCB7CiAgICBmaWxsOiAiIzAwMCIsCiAgICBkOiAiTTM1LjEzIDM3LjYwM2wxLjIzNy0xLjIzNy0zLjQ2OC0zLjQ3NXYtNS45MjZoLTEuNzU0djYuNjU0bDMuOTg0IDMuOTg0eiIKICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInBhdGgiLCB7CiAgICBmaWxsOiAiIzAwMCIsCiAgICBmaWxsUnVsZTogImV2ZW5vZGQiLAogICAgZDogIk0yMy4wOCAzNi45NjJhOS42NzggOS42NzggMCAxMDE3Ljg4My03LjQwOCA5LjY3OCA5LjY3OCAwIDAwLTE3Ljg4MiA3LjQwOHptNC41NC0xMC4yOTJhNy45MjQgNy45MjQgMCAxMTguODA1IDEzLjE3N0E3LjkyNCA3LjkyNCAwIDAxMjcuNjIgMjYuNjd6IiwKICAgIGNsaXBSdWxlOiAiZXZlbm9kZCIKICB9KSkpOwoKICBmdW5jdGlvbiBfZXh0ZW5kcyQ5KCkgeyBfZXh0ZW5kcyQ5ID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcyQ5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0KICB2YXIgVGFnbGlzdEljb24gPSAoKHsKICAgIHN0eWxlcyA9IHt9LAogICAgLi4ucHJvcHMKICB9KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3ZnIiwgX2V4dGVuZHMkOSh7CiAgICB3aWR0aDogIjU0IiwKICAgIGhlaWdodDogIjU0IiwKICAgIGZpbGw6ICJub25lIiwKICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicGF0aCIsIHsKICAgIGZpbGxSdWxlOiAiZXZlbm9kZCIsCiAgICBjbGlwUnVsZTogImV2ZW5vZGQiLAogICAgZDogIk00NSAxNmEzIDMgMCAwMTMgM3YxNmEzIDMgMCAwMS0zIDNIOWEzIDMgMCAwMS0zLTNWMTlhMyAzIDAgMDEzLTNoMzZ6bTAgMkg5YTEgMSAwIDAwLTEgMXYxNmExIDEgMCAwMDEgMWgzNmExIDEgMCAwMDEtMVYxOWExIDEgMCAwMC0xLTF6IiwKICAgIGZpbGw6ICIjMDAwIgogIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicGF0aCIsIHsKICAgIGQ6ICJNMTEgMjJhMSAxIDAgMDExLTFoMTlhMSAxIDAgMDExIDF2MTBhMSAxIDAgMDEtMSAxSDEyYTEgMSAwIDAxLTEtMVYyMnoiLAogICAgZmlsbDogIiM1MDU1NjIiCiAgfSkpKTsKCiAgZnVuY3Rpb24gX2V4dGVuZHMkOCgpIHsgX2V4dGVuZHMkOCA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMkOC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9CiAgdmFyIEZvcm1JY29uID0gKCh7CiAgICBzdHlsZXMgPSB7fSwKICAgIC4uLnByb3BzCiAgfSkgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInN2ZyIsIF9leHRlbmRzJDgoewogICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICB3aWR0aDogIjU0IiwKICAgIGhlaWdodDogIjU0IgogIH0sIHByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInJlY3QiLCB7CiAgICB4OiAiMTUiLAogICAgeTogIjE3IiwKICAgIHdpZHRoOiAiMjQiLAogICAgaGVpZ2h0OiAiNCIsCiAgICByeDogIjEiCiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJyZWN0IiwgewogICAgeDogIjE1IiwKICAgIHk6ICIyNSIsCiAgICB3aWR0aDogIjI0IiwKICAgIGhlaWdodDogIjQiLAogICAgcng6ICIxIgogIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicmVjdCIsIHsKICAgIHg6ICIxNSIsCiAgICB5OiAiMzMiLAogICAgd2lkdGg6ICIxMyIsCiAgICBoZWlnaHQ6ICI0IiwKICAgIHJ4OiAiMSIKICB9KSkpOwoKICBmdW5jdGlvbiBfZXh0ZW5kcyQ3KCkgeyBfZXh0ZW5kcyQ3ID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcyQ3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0KICB2YXIgQ29sdW1uc0ljb24gPSAoKHsKICAgIHN0eWxlcyA9IHt9LAogICAgLi4ucHJvcHMKICB9KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3ZnIiwgX2V4dGVuZHMkNyh7CiAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgIHdpZHRoOiAiNTQiLAogICAgaGVpZ2h0OiAiNTQiCiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicGF0aCIsIHsKICAgIGZpbGxSdWxlOiAiZXZlbm9kZCIsCiAgICBkOiAiTTggMzN2NWExIDEgMCAwMDEgMWg0djJIOWEzIDMgMCAwMS0zLTN2LTVoMnptMTggNnYySDE1di0yaDExem0xMyAwdjJIMjh2LTJoMTF6bTktNnY1YTMgMyAwIDAxLTMgM2gtNHYtMmg0YTEgMSAwIDAwLjk5My0uODgzTDQ2IDM4di01aDJ6TTggMjJ2OUg2di05aDJ6bTQwIDB2OWgtMnYtOWgyem0tMzUtOXYySDlhMSAxIDAgMDAtLjk5My44ODNMOCAxNnY0SDZ2LTRhMyAzIDAgMDEzLTNoNHptMzIgMGEzIDMgMCAwMTMgM3Y0aC0ydi00YTEgMSAwIDAwLS44ODMtLjk5M0w0NSAxNWgtNHYtMmg0em0tNiAwdjJIMjh2LTJoMTF6bS0xMyAwdjJIMTV2LTJoMTF6IgogIH0pKSk7CgogIGZ1bmN0aW9uIF9leHRlbmRzJDYoKSB7IF9leHRlbmRzJDYgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzJDYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfQogIHZhciBOdW1iZXJJY29uID0gKCh7CiAgICBzdHlsZXMgPSB7fSwKICAgIC4uLnByb3BzCiAgfSkgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInN2ZyIsIF9leHRlbmRzJDYoewogICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICB3aWR0aDogIjU0IiwKICAgIGhlaWdodDogIjU0IgogIH0sIHByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInBhdGgiLCB7CiAgICBmaWxsUnVsZTogImV2ZW5vZGQiLAogICAgZDogIk00NSAxNmEzIDMgMCAwMTMgM3YxNmEzIDMgMCAwMS0zIDNIOWEzIDMgMCAwMS0zLTNWMTlhMyAzIDAgMDEzLTNoMzZ6bTAgMkg5YTEgMSAwIDAwLTEgMXYxNmExIDEgMCAwMDEgMWgzNmExIDEgMCAwMDEtMVYxOWExIDEgMCAwMC0xLTF6TTM1IDI4LjQ0NGg3bC0zLjUgNC0zLjUtNHpNMzUgMjZoN2wtMy41LTQtMy41IDR6IgogIH0pKSk7CgogIGZ1bmN0aW9uIF9leHRlbmRzJDUoKSB7IF9leHRlbmRzJDUgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzJDUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfQogIHZhciBSYWRpb0ljb24gPSAoKHsKICAgIHN0eWxlcyA9IHt9LAogICAgLi4ucHJvcHMKICB9KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3ZnIiwgX2V4dGVuZHMkNSh7CiAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgIHdpZHRoOiAiNTQiLAogICAgaGVpZ2h0OiAiNTQiCiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicGF0aCIsIHsKICAgIGQ6ICJNMjcgMjJjLTIuNzYgMC01IDIuMjQtNSA1czIuMjQgNSA1IDUgNS0yLjI0IDUtNS0yLjI0LTUtNS01em0wLTVjLTUuNTIgMC0xMCA0LjQ4LTEwIDEwczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMC00LjQ4LTEwLTEwLTEwem0wIDE4Yy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHoiCiAgfSkpKTsKCiAgZnVuY3Rpb24gX2V4dGVuZHMkNCgpIHsgX2V4dGVuZHMkNCA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMkNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9CiAgdmFyIFNlbGVjdEljb24gPSAoKHsKICAgIHN0eWxlcyA9IHt9LAogICAgLi4ucHJvcHMKICB9KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3ZnIiwgX2V4dGVuZHMkNCh7CiAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgIHdpZHRoOiAiNTQiLAogICAgaGVpZ2h0OiAiNTQiCiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicGF0aCIsIHsKICAgIGZpbGxSdWxlOiAiZXZlbm9kZCIsCiAgICBkOiAiTTQ1IDE2YTMgMyAwIDAxMyAzdjE2YTMgMyAwIDAxLTMgM0g5YTMgMyAwIDAxLTMtM1YxOWEzIDMgMCAwMTMtM2gzNnptMCAySDlhMSAxIDAgMDAtMSAxdjE2YTEgMSAwIDAwMSAxaDM2YTEgMSAwIDAwMS0xVjE5YTEgMSAwIDAwLTEtMXptLTEyIDdoOWwtNC41IDYtNC41LTZ6IgogIH0pKSk7CgogIGZ1bmN0aW9uIF9leHRlbmRzJDMoKSB7IF9leHRlbmRzJDMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzJDMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfQogIHZhciBUZXh0SWNvbiA9ICgoewogICAgc3R5bGVzID0ge30sCiAgICAuLi5wcm9wcwogIH0pID0+IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzdmciLCBfZXh0ZW5kcyQzKHsKICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgd2lkdGg6ICI1NCIsCiAgICBoZWlnaHQ6ICI1NCIKICB9LCBwcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJwYXRoIiwgewogICAgZDogIk0yMC41OCAzMy43N2gtM2wtMS4xOC0zLjA4SDExbC0xLjEgMy4wOEg3bDUuMjctMTMuNTRoMi44OXptLTUtNS4zNmwtMS44Ni01LTEuODMgNXpNMjIgMjAuMjNoNS40MWExNS40NyAxNS40NyAwIDAxMi40LjE0IDMuNDIgMy40MiAwIDAxMS40MS41NSAzLjQ3IDMuNDcgMCAwMTEgMS4xNCAzIDMgMCAwMS40MiAxLjU4IDMuMjYgMy4yNiAwIDAxLTEuOTEgMi45NCAzLjYzIDMuNjMgMCAwMTEuOTEgMS4yMiAzLjI4IDMuMjggMCAwMS42NiAyIDQgNCAwIDAxLS40MyAxLjggMy42MyAzLjYzIDAgMDEtMS4wOSAxLjQgMy44OSAzLjg5IDAgMDEtMS44My42NXEtLjY5LjA3LTMuMy4wOUgyMnptMi43MyAyLjI1djMuMTNoMy44YTEuNzkgMS43OSAwIDAwMS4xLS40OSAxLjQxIDEuNDEgMCAwMC40MS0xIDEuNDkgMS40OSAwIDAwLS4zNS0xIDEuNTQgMS41NCAwIDAwLTEtLjQ4Yy0uMjcgMC0xLjA1LS4wNS0yLjM0LS4wNXptMCA1LjM5djMuNjJoMi41N2ExMS41MiAxMS41MiAwIDAwMS44OC0uMDkgMS42NSAxLjY1IDAgMDAxLS41NCAxLjYgMS42IDAgMDAuMzgtMS4xNCAxLjc1IDEuNzUgMCAwMC0uMjktMSAxLjY5IDEuNjkgMCAwMC0uODYtLjYyIDkuMjggOS4yOCAwIDAwLTIuNDEtLjIzek00NC4zNSAyOC43OWwyLjY1Ljg0YTUuOTQgNS45NCAwIDAxLTIgMy4yOUE1Ljc0IDUuNzQgMCAwMTQxLjM4IDM0YTUuODcgNS44NyAwIDAxLTQuNDQtMS44NCA3LjA5IDcuMDkgMCAwMS0xLjczLTVBNy40MyA3LjQzIDAgMDEzNyAyMS44NyA2IDYgMCAwMTQxLjU0IDIwYTUuNjQgNS42NCAwIDAxNCAxLjQ3QTUuMzMgNS4zMyAwIDAxNDcgMjRsLTIuNy42NWEyLjggMi44IDAgMDAtMi44Ni0yLjI3QTMuMDkgMy4wOSAwIDAwMzkgMjMuNDJhNS4zMSA1LjMxIDAgMDAtLjkzIDMuNSA1LjYyIDUuNjIgMCAwMC45MyAzLjY1IDMgMyAwIDAwMi40IDEuMDkgMi43MiAyLjcyIDAgMDAxLjgyLS42NiA0IDQgMCAwMDEuMTMtMi4yMXoiCiAgfSkpKTsKCiAgZnVuY3Rpb24gX2V4dGVuZHMkMigpIHsgX2V4dGVuZHMkMiA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMkMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9CiAgdmFyIFRleHRmaWVsZEljb24gPSAoKHsKICAgIHN0eWxlcyA9IHt9LAogICAgLi4ucHJvcHMKICB9KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3ZnIiwgX2V4dGVuZHMkMih7CiAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgIHdpZHRoOiAiNTQiLAogICAgaGVpZ2h0OiAiNTQiCiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicGF0aCIsIHsKICAgIGZpbGxSdWxlOiAiZXZlbm9kZCIsCiAgICBkOiAiTTQ1IDE2YTMgMyAwIDAxMyAzdjE2YTMgMyAwIDAxLTMgM0g5YTMgMyAwIDAxLTMtM1YxOWEzIDMgMCAwMTMtM2gzNnptMCAySDlhMSAxIDAgMDAtMSAxdjE2YTEgMSAwIDAwMSAxaDM2YTEgMSAwIDAwMS0xVjE5YTEgMSAwIDAwLTEtMXptLTMyIDR2MTBoLTJWMjJoMnoiCiAgfSkpKTsKCiAgZnVuY3Rpb24gX2V4dGVuZHMkMSgpIHsgX2V4dGVuZHMkMSA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMkMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9CiAgdmFyIFRleHRhcmVhSWNvbiA9ICgoewogICAgc3R5bGVzID0ge30sCiAgICAuLi5wcm9wcwogIH0pID0+IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzdmciLCBfZXh0ZW5kcyQxKHsKICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgd2lkdGg6ICI1NCIsCiAgICBoZWlnaHQ6ICI1NCIKICB9LCBwcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJwYXRoIiwgewogICAgZmlsbFJ1bGU6ICJldmVub2RkIiwKICAgIGQ6ICJNNDUgMTNhMyAzIDAgMDEzIDN2MjJhMyAzIDAgMDEtMyAzSDlhMyAzIDAgMDEtMy0zVjE2YTMgMyAwIDAxMy0zaDM2em0wIDJIOWExIDEgMCAwMC0xIDF2MjJhMSAxIDAgMDAxIDFoMzZhMSAxIDAgMDAxLTFWMTZhMSAxIDAgMDAtMS0xem0tMS4xMzYgMTUuNWwuODQ4Ljg0OS02LjM2MyA2LjM2My0uODQ5LS44NDggNi4zNjQtNi4zNjR6bS4yNjQgMy41bC44NDkuODQ5LTIuODI4IDIuODI4LS44NDktLjg0OUw0NC4xMjggMzR6TTEzIDE5djEwaC0yVjE5aDJ6IgogIH0pKSk7CgogIGZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfQogIHZhciBJbWFnZUljb24gPSAoKHsKICAgIHN0eWxlcyA9IHt9LAogICAgLi4ucHJvcHMKICB9KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3ZnIiwgX2V4dGVuZHMoewogICAgd2lkdGg6ICI1NCIsCiAgICBoZWlnaHQ6ICI1NCIsCiAgICBmaWxsOiAibm9uZSIsCiAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogIH0sIHByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoInBhdGgiLCB7CiAgICBmaWxsUnVsZTogImV2ZW5vZGQiLAogICAgY2xpcFJ1bGU6ICJldmVub2RkIiwKICAgIGQ6ICJNMzQuNjM2IDIxLjkxQTMuODE4IDMuODE4IDAgMTEyNyAyMS45MDhhMy44MTggMy44MTggMCAwMTcuNjM2IDB6bS0yIDBBMS44MTggMS44MTggMCAxMTI5IDIxLjkwOGExLjgxOCAxLjgxOCAwIDAxMy42MzYgMHoiLAogICAgZmlsbDogIiMwMDAiCiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJwYXRoIiwgewogICAgZmlsbFJ1bGU6ICJldmVub2RkIiwKICAgIGNsaXBSdWxlOiAiZXZlbm9kZCIsCiAgICBkOiAiTTE1IDEzYTIgMiAwIDAwLTIgMnYyNGEyIDIgMCAwMDIgMmgyNGEyIDIgMCAwMDItMlYxNWEyIDIgMCAwMC0yLTJIMTV6bTI0IDJIMTV2MTIuNDVsNC43MS00LjcwOWExLjkxIDEuOTEgMCAwMTIuNzAyIDBsNi42OTUgNi42OTUgMi42NTYtMS43N2ExLjkxIDEuOTEgMCAwMTIuNDExLjIzOUwzOSAzMi43M1YxNXpNMTUgMzl2LTguNzU0Yy4wNi0uMDM4LjExNi0uMDgzLjE2OC0uMTM1bDUuODkzLTUuODkzIDYuNjg0IDYuNjg1YTEuOTExIDEuOTExIDAgMDAyLjQxLjIzOGwyLjY1Ny0xLjc3IDYuMDIgNi4wMmMuMDUyLjA1MS4xMDguMDk3LjE2OC4xMzVWMzlIMTV6IiwKICAgIGZpbGw6ICIjMDAwIgogIH0pKSk7CgogIGNvbnN0IGljb25zQnlUeXBlID0gewogICAgYnV0dG9uOiBCdXR0b25JY29uLAogICAgY2hlY2tib3g6IENoZWNrYm94SWNvbiwKICAgIGNoZWNrbGlzdDogQ2hlY2tsaXN0SWNvbiwKICAgIGNvbHVtbnM6IENvbHVtbnNJY29uLAogICAgZGF0ZXRpbWU6IERhdGV0aW1lSWNvbiwKICAgIGltYWdlOiBJbWFnZUljb24sCiAgICBudW1iZXI6IE51bWJlckljb24sCiAgICByYWRpbzogUmFkaW9JY29uLAogICAgc2VsZWN0OiBTZWxlY3RJY29uLAogICAgdGFnbGlzdDogVGFnbGlzdEljb24sCiAgICB0ZXh0OiBUZXh0SWNvbiwKICAgIHRleHRmaWVsZDogVGV4dGZpZWxkSWNvbiwKICAgIHRleHRhcmVhOiBUZXh0YXJlYUljb24sCiAgICBkZWZhdWx0OiBGb3JtSWNvbgogIH07CgogIGNvbnN0IHR5cGUkMiA9ICd0ZXh0JzsKICBmdW5jdGlvbiBUZXh0KHByb3BzKSB7CiAgICBjb25zdCB7CiAgICAgIGZpZWxkLAogICAgICBkaXNhYmxlZAogICAgfSA9IHByb3BzOwogICAgY29uc3QgewogICAgICB0ZXh0ID0gJycKICAgIH0gPSBmaWVsZDsKICAgIGNvbnN0IHRleHRWYWx1ZSA9IHVzZUV4cHJlc3Npb25WYWx1ZSh0ZXh0KSB8fCAnJzsKICAgIHJldHVybiBlJDIoImRpdiIsIHsKICAgICAgY2xhc3M6IGZvcm1GaWVsZENsYXNzZXModHlwZSQyKSwKICAgICAgY2hpbGRyZW46IHJlbmRlclRleHQoZmllbGQsIHRleHRWYWx1ZSwgZGlzYWJsZWQpCiAgICB9KTsKICB9CiAgVGV4dC5jcmVhdGUgPSBmdW5jdGlvbiAob3B0aW9ucyA9IHt9KSB7CiAgICByZXR1cm4gewogICAgICB0ZXh0OiAnIyBUZXh0JywKICAgICAgLi4ub3B0aW9ucwogICAgfTsKICB9OwogIFRleHQudHlwZSA9IHR5cGUkMjsKICBUZXh0LmtleWVkID0gZmFsc2U7CgogIC8vIGhlbHBlciAvLy8vLy8vLy8vLy8vLwoKICBmdW5jdGlvbiByZW5kZXJUZXh0KGZpZWxkLCBjb250ZW50LCBkaXNhYmxlZCkgewogICAgY29uc3QgewogICAgICB0ZXh0CiAgICB9ID0gZmllbGQ7CiAgICBjb25zdCBJY29uID0gaWNvbnNCeVR5cGVbJ3RleHQnXTsKICAgIGlmIChkaXNhYmxlZCkgewogICAgICBpZiAoIXRleHQpIHsKICAgICAgICByZXR1cm4gZSQyKCJkaXYiLCB7CiAgICAgICAgICBjbGFzczogImZqcy1mb3JtLWZpZWxkLXBsYWNlaG9sZGVyIiwKICAgICAgICAgIGNoaWxkcmVuOiBbZSQyKEljb24sIHsKICAgICAgICAgICAgdmlld0JveDogIjAgMCA1NCA1NCIKICAgICAgICAgIH0pLCAiVGV4dCB2aWV3IGlzIGVtcHR5Il0KICAgICAgICB9KTsKICAgICAgfQogICAgICBpZiAoaXNFeHByZXNzaW9uJDIodGV4dCkpIHsKICAgICAgICByZXR1cm4gZSQyKCJkaXYiLCB7CiAgICAgICAgICBjbGFzczogImZqcy1mb3JtLWZpZWxkLXBsYWNlaG9sZGVyIiwKICAgICAgICAgIGNoaWxkcmVuOiBbZSQyKEljb24sIHsKICAgICAgICAgICAgdmlld0JveDogIjAgMCA1NCA1NCIKICAgICAgICAgIH0pLCAiVGV4dCB2aWV3IGlzIHBvcHVsYXRlZCBieSBhbiBleHByZXNzaW9uIl0KICAgICAgICB9KTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGUkMihNYXJrdXAsIHsKICAgICAgbWFya3VwOiBzYWZlTWFya2Rvd24oY29udGVudCksCiAgICAgIHRyaW06IGZhbHNlCiAgICB9KTsKICB9CgogIGNvbnN0IHR5cGUkMSA9ICd0ZXh0ZmllbGQnOwogIGZ1bmN0aW9uIFRleHRmaWVsZChwcm9wcykgewogICAgY29uc3QgewogICAgICBkaXNhYmxlZCwKICAgICAgZXJyb3JzID0gW10sCiAgICAgIGZpZWxkLAogICAgICB2YWx1ZSA9ICcnCiAgICB9ID0gcHJvcHM7CiAgICBjb25zdCB7CiAgICAgIGRlc2NyaXB0aW9uLAogICAgICBpZCwKICAgICAgbGFiZWwsCiAgICAgIGFwcGVhcmFuY2UgPSB7fSwKICAgICAgdmFsaWRhdGUgPSB7fQogICAgfSA9IGZpZWxkOwogICAgY29uc3QgewogICAgICBwcmVmaXhBZG9ybmVyLAogICAgICBzdWZmaXhBZG9ybmVyCiAgICB9ID0gYXBwZWFyYW5jZTsKICAgIGNvbnN0IHsKICAgICAgcmVxdWlyZWQKICAgIH0gPSB2YWxpZGF0ZTsKICAgIGNvbnN0IG9uQ2hhbmdlID0gKHsKICAgICAgdGFyZ2V0CiAgICB9KSA9PiB7CiAgICAgIHByb3BzLm9uQ2hhbmdlKHsKICAgICAgICBmaWVsZCwKICAgICAgICB2YWx1ZTogdGFyZ2V0LnZhbHVlCiAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IHsKICAgICAgZm9ybUlkCiAgICB9ID0gRiQxKEZvcm1Db250ZXh0KTsKICAgIHJldHVybiBlJDIoImRpdiIsIHsKICAgICAgY2xhc3M6IGZvcm1GaWVsZENsYXNzZXModHlwZSQxLCB7CiAgICAgICAgZXJyb3JzLAogICAgICAgIGRpc2FibGVkCiAgICAgIH0pLAogICAgICBjaGlsZHJlbjogW2UkMihMYWJlbCwgewogICAgICAgIGlkOiBwcmVmaXhJZChpZCwgZm9ybUlkKSwKICAgICAgICBsYWJlbDogbGFiZWwsCiAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkCiAgICAgIH0pLCBlJDIoSW5wdXRBZG9ybmVyLCB7CiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLAogICAgICAgIHByZTogcHJlZml4QWRvcm5lciwKICAgICAgICBwb3N0OiBzdWZmaXhBZG9ybmVyLAogICAgICAgIGNoaWxkcmVuOiBlJDIoImlucHV0IiwgewogICAgICAgICAgY2xhc3M6ICJmanMtaW5wdXQiLAogICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLAogICAgICAgICAgaWQ6IHByZWZpeElkKGlkLCBmb3JtSWQpLAogICAgICAgICAgb25JbnB1dDogb25DaGFuZ2UsCiAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICB9KQogICAgICB9KSwgZSQyKERlc2NyaXB0aW9uLCB7CiAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uCiAgICAgIH0pLCBlJDIoRXJyb3JzLCB7CiAgICAgICAgZXJyb3JzOiBlcnJvcnMKICAgICAgfSldCiAgICB9KTsKICB9CiAgVGV4dGZpZWxkLmNyZWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zID0ge30pIHsKICAgIHJldHVybiB7CiAgICAgIC4uLm9wdGlvbnMKICAgIH07CiAgfTsKICBUZXh0ZmllbGQudHlwZSA9IHR5cGUkMTsKICBUZXh0ZmllbGQubGFiZWwgPSAnVGV4dCBmaWVsZCc7CiAgVGV4dGZpZWxkLmtleWVkID0gdHJ1ZTsKICBUZXh0ZmllbGQuZW1wdHlWYWx1ZSA9ICcnOwogIFRleHRmaWVsZC5zYW5pdGl6ZVZhbHVlID0gKHsKICAgIHZhbHVlCiAgfSkgPT4gaXNBcnJheSQyKHZhbHVlKSB8fCBpc09iamVjdCh2YWx1ZSkgPyAnJyA6IFN0cmluZyh2YWx1ZSk7CgogIGNvbnN0IHR5cGUgPSAndGV4dGFyZWEnOwogIGZ1bmN0aW9uIFRleHRhcmVhKHByb3BzKSB7CiAgICBjb25zdCB7CiAgICAgIGRpc2FibGVkLAogICAgICBlcnJvcnMgPSBbXSwKICAgICAgZmllbGQsCiAgICAgIHZhbHVlID0gJycKICAgIH0gPSBwcm9wczsKICAgIGNvbnN0IHsKICAgICAgZGVzY3JpcHRpb24sCiAgICAgIGlkLAogICAgICBsYWJlbCwKICAgICAgdmFsaWRhdGUgPSB7fQogICAgfSA9IGZpZWxkOwogICAgY29uc3QgewogICAgICByZXF1aXJlZAogICAgfSA9IHZhbGlkYXRlOwogICAgY29uc3QgdGV4dGFyZWFSZWYgPSBzKCk7CiAgICBjb25zdCBvbklucHV0ID0gKHsKICAgICAgdGFyZ2V0CiAgICB9KSA9PiB7CiAgICAgIHByb3BzLm9uQ2hhbmdlKHsKICAgICAgICBmaWVsZCwKICAgICAgICB2YWx1ZTogdGFyZ2V0LnZhbHVlCiAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IGF1dG9TaXplVGV4dGFyZWEgPSBBJDEodGV4dGFyZWEgPT4gewogICAgICAvLyBFbnN1cmVzIHRoZSB0ZXh0YXJlYSBzaHJpbmtzIGJhY2ssIGFuZCBpbXByb3ZlcyByZXNpemluZyBiZWhhdmlvciBjb25zaXN0ZW5jeQogICAgICB0ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSAnMHB4JzsKICAgICAgY29uc3QgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0ZXh0YXJlYSk7CiAgICAgIGNvbnN0IGNhbGN1bGF0ZWRIZWlnaHQgPSBwYXJzZUludChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCdib3JkZXItdG9wLXdpZHRoJykpICsgcGFyc2VJbnQoY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy10b3AnKSkgKyB0ZXh0YXJlYS5zY3JvbGxIZWlnaHQgKyBwYXJzZUludChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWJvdHRvbScpKSArIHBhcnNlSW50KGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci1ib3R0b20td2lkdGgnKSk7CiAgICAgIGNvbnN0IG1pbkhlaWdodCA9IDc1OwogICAgICBjb25zdCBtYXhIZWlnaHQgPSAzNTA7CiAgICAgIGNvbnN0IGRpc3BsYXlIZWlnaHQgPSBNYXRoLm1heChNYXRoLm1pbihjYWxjdWxhdGVkSGVpZ2h0LCBtYXhIZWlnaHQpLCBtaW5IZWlnaHQpOwogICAgICB0ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSBgJHtkaXNwbGF5SGVpZ2h0fXB4YDsKCiAgICAgIC8vIE92ZXJmbG93IGlzIGhpZGRlbiBieSBkZWZhdWx0IHRvIGhpZGUgc2Nyb2xsYmFyIGZsaWNrZXJpbmcKICAgICAgdGV4dGFyZWEuc3R5bGUub3ZlcmZsb3cgPSBjYWxjdWxhdGVkSGVpZ2h0ID4gbWF4SGVpZ2h0ID8gJ3Zpc2libGUnIDogJ2hpZGRlbic7CiAgICB9LCBbXSk7CiAgICB5KCgpID0+IHsKICAgICAgYXV0b1NpemVUZXh0YXJlYSh0ZXh0YXJlYVJlZi5jdXJyZW50KTsKICAgIH0sIFthdXRvU2l6ZVRleHRhcmVhLCB2YWx1ZV0pOwogICAgY29uc3QgewogICAgICBmb3JtSWQKICAgIH0gPSBGJDEoRm9ybUNvbnRleHQpOwogICAgcmV0dXJuIGUkMigiZGl2IiwgewogICAgICBjbGFzczogZm9ybUZpZWxkQ2xhc3Nlcyh0eXBlLCB7CiAgICAgICAgZXJyb3JzLAogICAgICAgIGRpc2FibGVkCiAgICAgIH0pLAogICAgICBjaGlsZHJlbjogW2UkMihMYWJlbCwgewogICAgICAgIGlkOiBwcmVmaXhJZChpZCwgZm9ybUlkKSwKICAgICAgICBsYWJlbDogbGFiZWwsCiAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkCiAgICAgIH0pLCBlJDIoInRleHRhcmVhIiwgewogICAgICAgIGNsYXNzOiAiZmpzLXRleHRhcmVhIiwKICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsCiAgICAgICAgaWQ6IHByZWZpeElkKGlkLCBmb3JtSWQpLAogICAgICAgIG9uSW5wdXQ6IG9uSW5wdXQsCiAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgIHJlZjogdGV4dGFyZWFSZWYKICAgICAgfSksIGUkMihEZXNjcmlwdGlvbiwgewogICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbgogICAgICB9KSwgZSQyKEVycm9ycywgewogICAgICAgIGVycm9yczogZXJyb3JzCiAgICAgIH0pXQogICAgfSk7CiAgfQogIFRleHRhcmVhLmNyZWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zID0ge30pIHsKICAgIHJldHVybiB7CiAgICAgIC4uLm9wdGlvbnMKICAgIH07CiAgfTsKICBUZXh0YXJlYS50eXBlID0gdHlwZTsKICBUZXh0YXJlYS5sYWJlbCA9ICdUZXh0IGFyZWEnOwogIFRleHRhcmVhLmtleWVkID0gdHJ1ZTsKICBUZXh0YXJlYS5lbXB0eVZhbHVlID0gJyc7CiAgVGV4dGFyZWEuc2FuaXRpemVWYWx1ZSA9ICh7CiAgICB2YWx1ZQogIH0pID0+IGlzQXJyYXkkMih2YWx1ZSkgfHwgaXNPYmplY3QodmFsdWUpID8gJycgOiBTdHJpbmcodmFsdWUpOwoKICBjb25zdCBmb3JtRmllbGRzID0gW0J1dHRvbiwgQ2hlY2tib3gsIENoZWNrbGlzdCwgRGVmYXVsdCwgSW1hZ2UsIE51bWJlcmZpZWxkLCBEYXRldGltZSwgUmFkaW8sIFNlbGVjdCwgVGFnbGlzdCwgVGV4dCwgVGV4dGZpZWxkLCBUZXh0YXJlYV07CgogIGNsYXNzIEZvcm1GaWVsZHMgewogICAgY29uc3RydWN0b3IoKSB7CiAgICAgIHRoaXMuX2Zvcm1GaWVsZHMgPSB7fTsKICAgICAgZm9ybUZpZWxkcy5mb3JFYWNoKGZvcm1GaWVsZCA9PiB7CiAgICAgICAgY29uc3QgewogICAgICAgICAgdHlwZQogICAgICAgIH0gPSBmb3JtRmllbGQ7CiAgICAgICAgdGhpcy5yZWdpc3Rlcih0eXBlLCBmb3JtRmllbGQpOwogICAgICB9KTsKICAgIH0KICAgIHJlZ2lzdGVyKHR5cGUsIGZvcm1GaWVsZCkgewogICAgICB0aGlzLl9mb3JtRmllbGRzW3R5cGVdID0gZm9ybUZpZWxkOwogICAgfQogICAgZ2V0KHR5cGUpIHsKICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1GaWVsZHNbdHlwZV07CiAgICB9CiAgfQoKICBmdW5jdGlvbiBSZW5kZXJlcihjb25maWcsIGV2ZW50QnVzLCBmb3JtLCBpbmplY3RvcikgewogICAgY29uc3QgQXBwID0gKCkgPT4gewogICAgICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IGwkMShmb3JtLl9nZXRTdGF0ZSgpKTsKICAgICAgY29uc3QgZm9ybUNvbnRleHQgPSB7CiAgICAgICAgZ2V0U2VydmljZSh0eXBlLCBzdHJpY3QgPSB0cnVlKSB7CiAgICAgICAgICByZXR1cm4gaW5qZWN0b3IuZ2V0KHR5cGUsIHN0cmljdCk7CiAgICAgICAgfSwKICAgICAgICBmb3JtSWQ6IGZvcm0uX2lkCiAgICAgIH07CiAgICAgIGV2ZW50QnVzLm9uKCdjaGFuZ2VkJywgbmV3U3RhdGUgPT4gewogICAgICAgIHNldFN0YXRlKG5ld1N0YXRlKTsKICAgICAgfSk7CiAgICAgIGNvbnN0IG9uQ2hhbmdlID0gQSQxKHVwZGF0ZSA9PiBmb3JtLl91cGRhdGUodXBkYXRlKSwgW2Zvcm1dKTsKICAgICAgY29uc3QgewogICAgICAgIHByb3BlcnRpZXMKICAgICAgfSA9IHN0YXRlOwogICAgICBjb25zdCB7CiAgICAgICAgcmVhZE9ubHkKICAgICAgfSA9IHByb3BlcnRpZXM7CiAgICAgIGNvbnN0IG9uU3VibWl0ID0gQSQxKCgpID0+IHsKICAgICAgICBpZiAoIXJlYWRPbmx5KSB7CiAgICAgICAgICBmb3JtLnN1Ym1pdCgpOwogICAgICAgIH0KICAgICAgfSwgW2Zvcm0sIHJlYWRPbmx5XSk7CiAgICAgIGNvbnN0IG9uUmVzZXQgPSBBJDEoKCkgPT4gZm9ybS5yZXNldCgpLCBbZm9ybV0pOwogICAgICBjb25zdCB7CiAgICAgICAgc2NoZW1hCiAgICAgIH0gPSBzdGF0ZTsKICAgICAgaWYgKCFzY2hlbWEpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICByZXR1cm4gZSQyKEZvcm1Db250ZXh0LlByb3ZpZGVyLCB7CiAgICAgICAgdmFsdWU6IGZvcm1Db250ZXh0LAogICAgICAgIGNoaWxkcmVuOiBlJDIoRm9ybUNvbXBvbmVudCwgewogICAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLAogICAgICAgICAgb25TdWJtaXQ6IG9uU3VibWl0LAogICAgICAgICAgb25SZXNldDogb25SZXNldAogICAgICAgIH0pCiAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IHsKICAgICAgY29udGFpbmVyCiAgICB9ID0gY29uZmlnOwogICAgZXZlbnRCdXMub24oJ2Zvcm0uaW5pdCcsICgpID0+IHsKICAgICAgUyQxKGUkMihBcHAsIHt9KSwgY29udGFpbmVyKTsKICAgIH0pOwogICAgZXZlbnRCdXMub24oJ2Zvcm0uZGVzdHJveScsICgpID0+IHsKICAgICAgUyQxKG51bGwsIGNvbnRhaW5lcik7CiAgICB9KTsKICB9CiAgUmVuZGVyZXIuJGluamVjdCA9IFsnY29uZmlnLnJlbmRlcmVyJywgJ2V2ZW50QnVzJywgJ2Zvcm0nLCAnaW5qZWN0b3InXTsKCiAgdmFyIHJlbmRlck1vZHVsZSA9IHsKICAgIF9faW5pdF9fOiBbJ2Zvcm1GaWVsZHMnLCAncmVuZGVyZXInXSwKICAgIGZvcm1GaWVsZHM6IFsndHlwZScsIEZvcm1GaWVsZHNdLAogICAgcmVuZGVyZXI6IFsndHlwZScsIFJlbmRlcmVyXQogIH07CgogIHZhciBjb3JlID0gewogICAgX19kZXBlbmRzX186IFtpbXBvcnRNb2R1bGUsIHJlbmRlck1vZHVsZV0sCiAgICBjb25kaXRpb25DaGVja2VyOiBbJ3R5cGUnLCBDb25kaXRpb25DaGVja2VyXSwKICAgIGV2ZW50QnVzOiBbJ3R5cGUnLCBFdmVudEJ1c10sCiAgICBmb3JtRmllbGRSZWdpc3RyeTogWyd0eXBlJywgRm9ybUZpZWxkUmVnaXN0cnldLAogICAgdmFsaWRhdG9yOiBbJ3R5cGUnLCBWYWxpZGF0b3JdCiAgfTsKCiAgLyoqDQogICAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuL3R5cGVzJykuSW5qZWN0b3IgfSBJbmplY3Rvcg0KICAgKiBAdHlwZWRlZiB7IGltcG9ydCgnLi90eXBlcycpLkRhdGEgfSBEYXRhDQogICAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuL3R5cGVzJykuRXJyb3JzIH0gRXJyb3JzDQogICAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuL3R5cGVzJykuU2NoZW1hIH0gU2NoZW1hDQogICAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuL3R5cGVzJykuRm9ybVByb3BlcnRpZXMgfSBGb3JtUHJvcGVydGllcw0KICAgKiBAdHlwZWRlZiB7IGltcG9ydCgnLi90eXBlcycpLkZvcm1Qcm9wZXJ0eSB9IEZvcm1Qcm9wZXJ0eQ0KICAgKiBAdHlwZWRlZiB7IGltcG9ydCgnLi90eXBlcycpLkZvcm1FdmVudCB9IEZvcm1FdmVudA0KICAgKiBAdHlwZWRlZiB7IGltcG9ydCgnLi90eXBlcycpLkZvcm1PcHRpb25zIH0gRm9ybU9wdGlvbnMNCiAgICoNCiAgICogQHR5cGVkZWYgeyB7DQogICAqICAgZGF0YTogRGF0YSwNCiAgICogICBpbml0aWFsRGF0YTogRGF0YSwNCiAgICogICBlcnJvcnM6IEVycm9ycywNCiAgICogICBwcm9wZXJ0aWVzOiBGb3JtUHJvcGVydGllcywNCiAgICogICBzY2hlbWE6IFNjaGVtYQ0KICAgKiB9IH0gU3RhdGUNCiAgICoNCiAgICogQHR5cGVkZWYgeyAodHlwZTpGb3JtRXZlbnQsIHByaW9yaXR5Om51bWJlciwgaGFuZGxlcjpGdW5jdGlvbikgPT4gdm9pZCB9IE9uRXZlbnRXaXRoUHJpb3JpdHkNCiAgICogQHR5cGVkZWYgeyAodHlwZTpGb3JtRXZlbnQsIGhhbmRsZXI6RnVuY3Rpb24pID0+IHZvaWQgfSBPbkV2ZW50V2l0aE91dFByaW9yaXR5DQogICAqIEB0eXBlZGVmIHsgT25FdmVudFdpdGhQcmlvcml0eSAmIE9uRXZlbnRXaXRoT3V0UHJpb3JpdHkgfSBPbkV2ZW50VHlwZQ0KICAgKi8KCiAgY29uc3QgaWRzID0gbmV3IElkcyhbMzIsIDM2LCAxXSk7CgogIC8qKg0KICAgKiBUaGUgZm9ybS4NCiAgICovCiAgY2xhc3MgRm9ybSB7CiAgICAvKioNCiAgICAgKiBAY29uc3RydWN0b3INCiAgICAgKiBAcGFyYW0ge0Zvcm1PcHRpb25zfSBvcHRpb25zDQogICAgICovCiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHsKICAgICAgLyoqDQogICAgICAgKiBAcHVibGljDQogICAgICAgKiBAdHlwZSB7T25FdmVudFR5cGV9DQogICAgICAgKi8KICAgICAgdGhpcy5vbiA9IHRoaXMuX29uRXZlbnQ7CgogICAgICAvKioNCiAgICAgICAqIEBwdWJsaWMNCiAgICAgICAqIEB0eXBlIHtTdHJpbmd9DQogICAgICAgKi8KICAgICAgdGhpcy5faWQgPSBpZHMubmV4dCgpOwoKICAgICAgLyoqDQogICAgICAgKiBAcHJpdmF0ZQ0KICAgICAgICogQHR5cGUge0VsZW1lbnR9DQogICAgICAgKi8KICAgICAgdGhpcy5fY29udGFpbmVyID0gY3JlYXRlRm9ybUNvbnRhaW5lcigpOwogICAgICBjb25zdCB7CiAgICAgICAgY29udGFpbmVyLAogICAgICAgIGluamVjdG9yID0gdGhpcy5fY3JlYXRlSW5qZWN0b3Iob3B0aW9ucywgdGhpcy5fY29udGFpbmVyKSwKICAgICAgICBwcm9wZXJ0aWVzID0ge30KICAgICAgfSA9IG9wdGlvbnM7CgogICAgICAvKioNCiAgICAgICAqIEBwcml2YXRlDQogICAgICAgKiBAdHlwZSB7U3RhdGV9DQogICAgICAgKi8KICAgICAgdGhpcy5fc3RhdGUgPSB7CiAgICAgICAgaW5pdGlhbERhdGE6IG51bGwsCiAgICAgICAgZGF0YTogbnVsbCwKICAgICAgICBwcm9wZXJ0aWVzLAogICAgICAgIGVycm9yczoge30sCiAgICAgICAgc2NoZW1hOiBudWxsCiAgICAgIH07CiAgICAgIHRoaXMuZ2V0ID0gaW5qZWN0b3IuZ2V0OwogICAgICB0aGlzLmludm9rZSA9IGluamVjdG9yLmludm9rZTsKICAgICAgdGhpcy5nZXQoJ2V2ZW50QnVzJykuZmlyZSgnZm9ybS5pbml0Jyk7CiAgICAgIGlmIChjb250YWluZXIpIHsKICAgICAgICB0aGlzLmF0dGFjaFRvKGNvbnRhaW5lcik7CiAgICAgIH0KICAgIH0KICAgIGNsZWFyKCkgewogICAgICAvLyBjbGVhciBmb3JtIHNlcnZpY2VzCiAgICAgIHRoaXMuX2VtaXQoJ2RpYWdyYW0uY2xlYXInKTsKCiAgICAgIC8vIGNsZWFyIGRpYWdyYW0gc2VydmljZXMgKGUuZy4gRXZlbnRCdXMpCiAgICAgIHRoaXMuX2VtaXQoJ2Zvcm0uY2xlYXInKTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBEZXN0cm95IHRoZSBmb3JtLCByZW1vdmluZyBpdCBmcm9tIERPTSwNCiAgICAgKiBpZiBhdHRhY2hlZC4NCiAgICAgKi8KICAgIGRlc3Ryb3koKSB7CiAgICAgIC8vIGRlc3Ryb3kgZm9ybSBzZXJ2aWNlcwogICAgICB0aGlzLmdldCgnZXZlbnRCdXMnKS5maXJlKCdmb3JtLmRlc3Ryb3knKTsKCiAgICAgIC8vIGRlc3Ryb3kgZGlhZ3JhbSBzZXJ2aWNlcyAoZS5nLiBFdmVudEJ1cykKICAgICAgdGhpcy5nZXQoJ2V2ZW50QnVzJykuZmlyZSgnZGlhZ3JhbS5kZXN0cm95Jyk7CiAgICAgIHRoaXMuX2RldGFjaChmYWxzZSk7CiAgICB9CgogICAgLyoqDQogICAgICogT3BlbiBhIGZvcm0gc2NoZW1hIHdpdGggdGhlIGdpdmVuIGluaXRpYWwgZGF0YS4NCiAgICAgKg0KICAgICAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWENCiAgICAgKiBAcGFyYW0ge0RhdGF9IFtkYXRhXQ0KICAgICAqDQogICAgICogQHJldHVybiBQcm9taXNlPHsgd2FybmluZ3M6IEFycmF5PGFueT4gfT4NCiAgICAgKi8KICAgIGltcG9ydFNjaGVtYShzY2hlbWEsIGRhdGEgPSB7fSkgewogICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgIHRyeSB7CiAgICAgICAgICB0aGlzLmNsZWFyKCk7CiAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHNjaGVtYTogaW1wb3J0ZWRTY2hlbWEsCiAgICAgICAgICAgIGRhdGE6IGluaXRpYWxpemVkRGF0YSwKICAgICAgICAgICAgd2FybmluZ3MKICAgICAgICAgIH0gPSB0aGlzLmdldCgnaW1wb3J0ZXInKS5pbXBvcnRTY2hlbWEoc2NoZW1hLCBkYXRhKTsKICAgICAgICAgIHRoaXMuX3NldFN0YXRlKHsKICAgICAgICAgICAgZGF0YTogaW5pdGlhbGl6ZWREYXRhLAogICAgICAgICAgICBlcnJvcnM6IHt9LAogICAgICAgICAgICBzY2hlbWE6IGltcG9ydGVkU2NoZW1hLAogICAgICAgICAgICBpbml0aWFsRGF0YTogY2xvbmUoaW5pdGlhbGl6ZWREYXRhKQogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLl9lbWl0KCdpbXBvcnQuZG9uZScsIHsKICAgICAgICAgICAgd2FybmluZ3MKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIHJlc29sdmUoewogICAgICAgICAgICB3YXJuaW5ncwogICAgICAgICAgfSk7CiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgIHRoaXMuX2VtaXQoJ2ltcG9ydC5kb25lJywgewogICAgICAgICAgICBlcnJvciwKICAgICAgICAgICAgd2FybmluZ3M6IGVycm9yLndhcm5pbmdzIHx8IFtdCiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgICogU3VibWl0IHRoZSBmb3JtLCB0cmlnZ2VyaW5nIGFsbCBmaWVsZCB2YWxpZGF0aW9ucy4NCiAgICAgKg0KICAgICAqIEByZXR1cm5zIHsgeyBkYXRhOiBEYXRhLCBlcnJvcnM6IEVycm9ycyB9IH0NCiAgICAgKi8KICAgIHN1Ym1pdCgpIHsKICAgICAgY29uc3QgewogICAgICAgIHByb3BlcnRpZXMKICAgICAgfSA9IHRoaXMuX2dldFN0YXRlKCk7CiAgICAgIGlmIChwcm9wZXJ0aWVzLnJlYWRPbmx5KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmb3JtIGlzIHJlYWQtb25seScpOwogICAgICB9CiAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9nZXRTdWJtaXREYXRhKCk7CiAgICAgIGNvbnN0IGVycm9ycyA9IHRoaXMudmFsaWRhdGUoKTsKICAgICAgY29uc3QgZmlsdGVyZWRFcnJvcnMgPSB0aGlzLl9hcHBseUNvbmRpdGlvbnMoZXJyb3JzLCBkYXRhKTsKICAgICAgY29uc3QgcmVzdWx0ID0gewogICAgICAgIGRhdGEsCiAgICAgICAgZXJyb3JzOiBmaWx0ZXJlZEVycm9ycwogICAgICB9OwogICAgICB0aGlzLl9lbWl0KCdzdWJtaXQnLCByZXN1bHQpOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgcmVzZXQoKSB7CiAgICAgIHRoaXMuX2VtaXQoJ3Jlc2V0Jyk7CiAgICAgIHRoaXMuX3NldFN0YXRlKHsKICAgICAgICBkYXRhOiBjbG9uZSh0aGlzLl9zdGF0ZS5pbml0aWFsRGF0YSksCiAgICAgICAgZXJyb3JzOiB7fQogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBAcmV0dXJucyB7RXJyb3JzfQ0KICAgICAqLwogICAgdmFsaWRhdGUoKSB7CiAgICAgIGNvbnN0IGZvcm1GaWVsZFJlZ2lzdHJ5ID0gdGhpcy5nZXQoJ2Zvcm1GaWVsZFJlZ2lzdHJ5JyksCiAgICAgICAgdmFsaWRhdG9yID0gdGhpcy5nZXQoJ3ZhbGlkYXRvcicpOwogICAgICBjb25zdCB7CiAgICAgICAgZGF0YQogICAgICB9ID0gdGhpcy5fZ2V0U3RhdGUoKTsKICAgICAgY29uc3QgZXJyb3JzID0gZm9ybUZpZWxkUmVnaXN0cnkuZ2V0QWxsKCkucmVkdWNlKChlcnJvcnMsIGZpZWxkKSA9PiB7CiAgICAgICAgY29uc3QgewogICAgICAgICAgZGlzYWJsZWQsCiAgICAgICAgICBfcGF0aAogICAgICAgIH0gPSBmaWVsZDsKICAgICAgICBpZiAoZGlzYWJsZWQpIHsKICAgICAgICAgIHJldHVybiBlcnJvcnM7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0KGRhdGEsIF9wYXRoKTsKICAgICAgICBjb25zdCBmaWVsZEVycm9ycyA9IHZhbGlkYXRvci52YWxpZGF0ZUZpZWxkKGZpZWxkLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIHNldChlcnJvcnMsIFtwYXRoU3RyaW5naWZ5KF9wYXRoKV0sIGZpZWxkRXJyb3JzLmxlbmd0aCA/IGZpZWxkRXJyb3JzIDogdW5kZWZpbmVkKTsKICAgICAgfSwgLyoqIEB0eXBlIHtFcnJvcnN9ICove30pOwogICAgICB0aGlzLl9zZXRTdGF0ZSh7CiAgICAgICAgZXJyb3JzCiAgICAgIH0pOwogICAgICByZXR1cm4gZXJyb3JzOwogICAgfQoKICAgIC8qKg0KICAgICAqIEBwYXJhbSB7RWxlbWVudHxzdHJpbmd9IHBhcmVudE5vZGUNCiAgICAgKi8KICAgIGF0dGFjaFRvKHBhcmVudE5vZGUpIHsKICAgICAgaWYgKCFwYXJlbnROb2RlKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYXJlbnROb2RlIHJlcXVpcmVkJyk7CiAgICAgIH0KICAgICAgdGhpcy5kZXRhY2goKTsKICAgICAgaWYgKGlzU3RyaW5nJDIocGFyZW50Tm9kZSkpIHsKICAgICAgICBwYXJlbnROb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJlbnROb2RlKTsKICAgICAgfQogICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLl9jb250YWluZXI7CiAgICAgIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsKICAgICAgdGhpcy5fZW1pdCgnYXR0YWNoJyk7CiAgICB9CiAgICBkZXRhY2goKSB7CiAgICAgIHRoaXMuX2RldGFjaCgpOwogICAgfQoKICAgIC8qKg0KICAgICAqIEBwcml2YXRlDQogICAgICoNCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtlbWl0XQ0KICAgICAqLwogICAgX2RldGFjaChlbWl0ID0gdHJ1ZSkgewogICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLl9jb250YWluZXIsCiAgICAgICAgcGFyZW50Tm9kZSA9IGNvbnRhaW5lci5wYXJlbnROb2RlOwogICAgICBpZiAoIXBhcmVudE5vZGUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYgKGVtaXQpIHsKICAgICAgICB0aGlzLl9lbWl0KCdkZXRhY2gnKTsKICAgICAgfQogICAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7CiAgICB9CgogICAgLyoqDQogICAgICogQHBhcmFtIHtGb3JtUHJvcGVydHl9IHByb3BlcnR5DQogICAgICogQHBhcmFtIHthbnl9IHZhbHVlDQogICAgICovCiAgICBzZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHsKICAgICAgY29uc3QgcHJvcGVydGllcyA9IHNldCh0aGlzLl9nZXRTdGF0ZSgpLnByb3BlcnRpZXMsIFtwcm9wZXJ0eV0sIHZhbHVlKTsKICAgICAgdGhpcy5fc2V0U3RhdGUoewogICAgICAgIHByb3BlcnRpZXMKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgICogQHBhcmFtIHtGb3JtRXZlbnR9IHR5cGUNCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyDQogICAgICovCiAgICBvZmYodHlwZSwgaGFuZGxlcikgewogICAgICB0aGlzLmdldCgnZXZlbnRCdXMnKS5vZmYodHlwZSwgaGFuZGxlcik7CiAgICB9CgogICAgLyoqDQogICAgICogQHByaXZhdGUNCiAgICAgKg0KICAgICAqIEBwYXJhbSB7Rm9ybU9wdGlvbnN9IG9wdGlvbnMNCiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRhaW5lcg0KICAgICAqDQogICAgICogQHJldHVybnMge0luamVjdG9yfQ0KICAgICAqLwogICAgX2NyZWF0ZUluamVjdG9yKG9wdGlvbnMsIGNvbnRhaW5lcikgewogICAgICBjb25zdCB7CiAgICAgICAgYWRkaXRpb25hbE1vZHVsZXMgPSBbXSwKICAgICAgICBtb2R1bGVzID0gW10KICAgICAgfSA9IG9wdGlvbnM7CiAgICAgIGNvbnN0IGNvbmZpZyA9IHsKICAgICAgICByZW5kZXJlcjogewogICAgICAgICAgY29udGFpbmVyCiAgICAgICAgfQogICAgICB9OwogICAgICByZXR1cm4gY3JlYXRlSW5qZWN0b3IoW3sKICAgICAgICBjb25maWc6IFsndmFsdWUnLCBjb25maWddCiAgICAgIH0sIHsKICAgICAgICBmb3JtOiBbJ3ZhbHVlJywgdGhpc10KICAgICAgfSwgY29yZSwgLi4ubW9kdWxlcywgLi4uYWRkaXRpb25hbE1vZHVsZXNdKTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBAcHJpdmF0ZQ0KICAgICAqLwogICAgX2VtaXQodHlwZSwgZGF0YSkgewogICAgICB0aGlzLmdldCgnZXZlbnRCdXMnKS5maXJlKHR5cGUsIGRhdGEpOwogICAgfQoKICAgIC8qKg0KICAgICAqIEBpbnRlcm5hbA0KICAgICAqDQogICAgICogQHBhcmFtIHsgeyBhZGQ/OiBib29sZWFuLCBmaWVsZDogYW55LCByZW1vdmU/OiBudW1iZXIsIHZhbHVlPzogYW55IH0gfSB1cGRhdGUNCiAgICAgKi8KICAgIF91cGRhdGUodXBkYXRlKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBmaWVsZCwKICAgICAgICB2YWx1ZQogICAgICB9ID0gdXBkYXRlOwogICAgICBjb25zdCB7CiAgICAgICAgX3BhdGgKICAgICAgfSA9IGZpZWxkOwogICAgICBsZXQgewogICAgICAgIGRhdGEsCiAgICAgICAgZXJyb3JzCiAgICAgIH0gPSB0aGlzLl9nZXRTdGF0ZSgpOwogICAgICBjb25zdCB2YWxpZGF0b3IgPSB0aGlzLmdldCgndmFsaWRhdG9yJyk7CiAgICAgIGNvbnN0IGZpZWxkRXJyb3JzID0gdmFsaWRhdG9yLnZhbGlkYXRlRmllbGQoZmllbGQsIHZhbHVlKTsKICAgICAgc2V0KGRhdGEsIF9wYXRoLCB2YWx1ZSk7CiAgICAgIHNldChlcnJvcnMsIFtwYXRoU3RyaW5naWZ5KF9wYXRoKV0sIGZpZWxkRXJyb3JzLmxlbmd0aCA/IGZpZWxkRXJyb3JzIDogdW5kZWZpbmVkKTsKICAgICAgdGhpcy5fc2V0U3RhdGUoewogICAgICAgIGRhdGE6IGNsb25lKGRhdGEpLAogICAgICAgIGVycm9yczogY2xvbmUoZXJyb3JzKQogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBAaW50ZXJuYWwNCiAgICAgKi8KICAgIF9nZXRTdGF0ZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlOwogICAgfQoKICAgIC8qKg0KICAgICAqIEBpbnRlcm5hbA0KICAgICAqLwogICAgX3NldFN0YXRlKHN0YXRlKSB7CiAgICAgIHRoaXMuX3N0YXRlID0gewogICAgICAgIC4uLnRoaXMuX3N0YXRlLAogICAgICAgIC4uLnN0YXRlCiAgICAgIH07CiAgICAgIHRoaXMuX2VtaXQoJ2NoYW5nZWQnLCB0aGlzLl9nZXRTdGF0ZSgpKTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBAaW50ZXJuYWwNCiAgICAgKi8KICAgIF9vbkV2ZW50KHR5cGUsIHByaW9yaXR5LCBoYW5kbGVyKSB7CiAgICAgIHRoaXMuZ2V0KCdldmVudEJ1cycpLm9uKHR5cGUsIHByaW9yaXR5LCBoYW5kbGVyKTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBAaW50ZXJuYWwNCiAgICAgKi8KICAgIF9nZXRTdWJtaXREYXRhKCkgewogICAgICBjb25zdCBmb3JtRmllbGRSZWdpc3RyeSA9IHRoaXMuZ2V0KCdmb3JtRmllbGRSZWdpc3RyeScpOwogICAgICBjb25zdCBmb3JtRGF0YSA9IHRoaXMuX2dldFN0YXRlKCkuZGF0YTsKICAgICAgY29uc3Qgc3VibWl0RGF0YSA9IGZvcm1GaWVsZFJlZ2lzdHJ5LmdldEFsbCgpLnJlZHVjZSgocHJldmlvdXMsIGZpZWxkKSA9PiB7CiAgICAgICAgY29uc3QgewogICAgICAgICAgZGlzYWJsZWQsCiAgICAgICAgICBfcGF0aAogICAgICAgIH0gPSBmaWVsZDsKCiAgICAgICAgLy8gZG8gbm90IHN1Ym1pdCBkaXNhYmxlZCBmb3JtIGZpZWxkcwogICAgICAgIGlmIChkaXNhYmxlZCB8fCAhX3BhdGgpIHsKICAgICAgICAgIHJldHVybiBwcmV2aW91czsKICAgICAgICB9CiAgICAgICAgY29uc3QgdmFsdWUgPSBnZXQoZm9ybURhdGEsIF9wYXRoKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgLi4ucHJldmlvdXMsCiAgICAgICAgICBbX3BhdGhbMF1dOiB2YWx1ZQogICAgICAgIH07CiAgICAgIH0sIHt9KTsKICAgICAgY29uc3QgZmlsdGVyZWRTdWJtaXREYXRhID0gdGhpcy5fYXBwbHlDb25kaXRpb25zKHN1Ym1pdERhdGEsIGZvcm1EYXRhKTsKICAgICAgcmV0dXJuIGZpbHRlcmVkU3VibWl0RGF0YTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBAaW50ZXJuYWwNCiAgICAgKi8KICAgIF9hcHBseUNvbmRpdGlvbnModG9GaWx0ZXIsIGRhdGEpIHsKICAgICAgY29uc3QgY29uZGl0aW9uQ2hlY2tlciA9IHRoaXMuZ2V0KCdjb25kaXRpb25DaGVja2VyJyk7CiAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyLmFwcGx5Q29uZGl0aW9ucyh0b0ZpbHRlciwgZGF0YSk7CiAgICB9CiAgfQoKICBjb25zdCBzY2hlbWFWZXJzaW9uID0gNjsKCiAgLyoqDQogICAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuL3R5cGVzJykuQ3JlYXRlRm9ybU9wdGlvbnMgfSBDcmVhdGVGb3JtT3B0aW9ucw0KICAgKi8KCiAgLyoqDQogICAqIENyZWF0ZSBhIGZvcm0uDQogICAqDQogICAqIEBwYXJhbSB7Q3JlYXRlRm9ybU9wdGlvbnN9IG9wdGlvbnMNCiAgICoNCiAgICogQHJldHVybiB7UHJvbWlzZTxGb3JtPn0NCiAgICovCiAgZnVuY3Rpb24gY3JlYXRlRm9ybShvcHRpb25zKSB7CiAgICBjb25zdCB7CiAgICAgIGRhdGEsCiAgICAgIHNjaGVtYSwKICAgICAgLi4ucmVzdAogICAgfSA9IG9wdGlvbnM7CiAgICBjb25zdCBmb3JtID0gbmV3IEZvcm0ocmVzdCk7CiAgICByZXR1cm4gZm9ybS5pbXBvcnRTY2hlbWEoc2NoZW1hLCBkYXRhKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGZvcm07CiAgICB9KTsKICB9CgogIGV4cG9ydHMuRm9ybSA9IEZvcm07CiAgZXhwb3J0cy5jcmVhdGVGb3JtID0gY3JlYXRlRm9ybTsKICBleHBvcnRzLmdldFNjaGVtYVZhcmlhYmxlcyA9IGdldFNjaGVtYVZhcmlhYmxlczsKICBleHBvcnRzLnNjaGVtYVZlcnNpb24gPSBzY2hlbWFWZXJzaW9uOwoKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pOwoKfSkpKTsK</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">3</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">310</HTTPProperty>
        </HTTPPropertySet>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="12" hostname="cdn.jsdelivr.net" path="/npm/signature_pad@4.0.0/dist/signature_pad.umd.min.js" url="https://cdn.jsdelivr.net/npm/signature_pad@4.0.0/dist/signature_pad.umd.min.js" ip="151.101.153.229" port="443" client_ip="192.168.0.112" client_port="64267" connectionId="2420" origin="HTML" encodingType="ANSI" ordinal="8" startDateTime="2024-02-16T16:37:20.033+05:30" startTime="2904" endTime="3128" blockedTime="-1" dnsTime="1" connectTime="123" sendTime="4294967295" waitTime="4294967295" receiveTime="43" sslNegotiateTime="96" responseBodySize="135">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name=":method" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":scheme" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":path" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L25wbS9zaWduYXR1cmVfcGFkQDQuMC4wL2Rpc3Qvc2lnbmF0dXJlX3BhZC51bWQubWluLmpz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":authority" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2RuLmpzZGVsaXZyLm5ldA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9ucG0vc2lnbmF0dXJlX3BhZEA0LjAuMC9kaXN0L3NpZ25hdHVyZV9wYWQudW1kLm1pbi5qcw0KOmF1dGhvcml0eTogY2RuLmpzZGVsaXZyLm5ldA0KUmVmZXJlcjogaHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3DQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTIxLjAuMC4wIFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">3</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">162</HTTPProperty>
        </HTTPPropertySet>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>3543</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Status" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-allow-origin" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-expose-headers" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="timing-allow-origin" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cache-control" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAwLCBzLW1heGFnZT0zMTUzNjAwMCwgaW1tdXRhYmxl</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cross-origin-resource-policy" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y3Jvc3Mtb3JpZ2lu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-content-type-options" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bm9zbmlmZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="strict-transport-security" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnM7IHByZWxvYWQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-type" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDsgY2hhcnNldD11dGYtOA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-jsd-version" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NC4wLjA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-jsd-version-type" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dmVyc2lvbg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="etag" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Vy8iMjhkNS1jaEkydElrRmxKQXBKKzBPL29IdkxPRHFma0Ei</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-encoding" index="12">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="accept-ranges" index="13">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="date" index="14">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="age" index="15">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Mzg0MzE0Mg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-served-by" index="16">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2FjaGUtZnJhLWVkZGY4MjMwMTAwLUZSQSwgY2FjaGUtYm9tNDc0My1CT00=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-cache" index="17">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SElULCBISVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="vary" index="18">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="alt-svc" index="19">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aDM9Ijo0NDMiO21hPTg2NDAwLGgzLTI5PSI6NDQzIjttYT04NjQwMCxoMy0yNz0iOjQ0MyI7bWE9ODY0MDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-length" index="20">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MzU0Mw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQphY2Nlc3MtY29udHJvbC1leHBvc2UtaGVhZGVyczogKg0KdGltaW5nLWFsbG93LW9yaWdpbjogKg0KY2FjaGUtY29udHJvbDogcHVibGljLCBtYXgtYWdlPTMxNTM2MDAwLCBzLW1heGFnZT0zMTUzNjAwMCwgaW1tdXRhYmxlDQpjcm9zcy1vcmlnaW4tcmVzb3VyY2UtcG9saWN5OiBjcm9zcy1vcmlnaW4NCngtY29udGVudC10eXBlLW9wdGlvbnM6IG5vc25pZmYNCnN0cmljdC10cmFuc3BvcnQtc2VjdXJpdHk6IG1heC1hZ2U9MzE1MzYwMDA7IGluY2x1ZGVTdWJEb21haW5zOyBwcmVsb2FkDQpjb250ZW50LXR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQ7IGNoYXJzZXQ9dXRmLTgNCngtanNkLXZlcnNpb246IDQuMC4wDQp4LWpzZC12ZXJzaW9uLXR5cGU6IHZlcnNpb24NCmV0YWc6IFcvIjI4ZDUtY2hJMnRJa0ZsSkFwSiswTy9vSHZMT0RxZmtBIg0KY29udGVudC1lbmNvZGluZzogZ3ppcA0KYWNjZXB0LXJhbmdlczogYnl0ZXMNCmRhdGU6IEZyaSwgMTYgRmViIDIwMjQgMTE6MDc6MjAgR01UDQphZ2U6IDM4NDMxNDINCngtc2VydmVkLWJ5OiBjYWNoZS1mcmEtZWRkZjgyMzAxMDAtRlJBLCBjYWNoZS1ib200NzQzLUJPTQ0KeC1jYWNoZTogSElULCBISVQNCnZhcnk6IEFjY2VwdC1FbmNvZGluZw0KYWx0LXN2YzogaDM9Ijo0NDMiO21hPTg2NDAwLGgzLTI5PSI6NDQzIjttYT04NjQwMCxoMy0yNz0iOjQ0MyI7bWE9ODY0MDANCmNvbnRlbnQtbGVuZ3RoOiAzNTQzDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">3</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">135</HTTPProperty>
        </HTTPPropertySet>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="13" hostname="dev.bluealgo.com" path="/smartformup/ui/loadForm.js" url="https://dev.bluealgo.com/smartformup/ui/loadForm.js" ip="144.126.253.3" port="443" client_ip="192.168.0.112" client_port="64262" connectionId="2220" origin="HTML" encodingType="ANSI" ordinal="9" startDateTime="2024-02-16T16:37:19.909+05:30" startTime="2780" endTime="3257" blockedTime="-1" dnsTime="-1" connectTime="-2" sendTime="4294967295" waitTime="4294967295" receiveTime="283" sslNegotiateTime="-1" responseBodySize="178314">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name=":method" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":scheme" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":path" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L3NtYXJ0Zm9ybXVwL3VpL2xvYWRGb3JtLmpz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":authority" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZGV2LmJsdWVhbGdvLmNvbQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cookie" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD1COEI5REUyNDA1ODE3RDYwMjlFQzM0QzA3NDlEQjJFRg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9zbWFydGZvcm11cC91aS9sb2FkRm9ybS5qcw0KOmF1dGhvcml0eTogZGV2LmJsdWVhbGdvLmNvbQ0KUmVmZXJlcjogaHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3DQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTIxLjAuMC4wIFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCmNvb2tpZTogSlNFU1NJT05JRD1COEI5REUyNDA1ODE3RDYwMjlFQzM0QzA3NDlEQjJFRg0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>QjhCOURFMjQwNTgxN0Q2MDI5RUMzNEMwNzQ5REIyRUY=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">11</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">36</HTTPProperty>
        </HTTPPropertySet>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>180665</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Status" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTgwNjY1</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-allow-origin" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="accept-ranges" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="etag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Vy8iMTgwNjY1LTE3MDU2MTMyOTQwMDAi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="last-modified" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAxOCBKYW4gMjAyNCAyMToyODoxNCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="strict-transport-security" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0xNTcyNDgwMDsgaW5jbHVkZVN1YkRvbWFpbnM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQNCmNvbnRlbnQtdHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KY29udGVudC1sZW5ndGg6IDE4MDY2NQ0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQphY2NlcHQtcmFuZ2VzOiBieXRlcw0KZXRhZzogVy8iMTgwNjY1LTE3MDU2MTMyOTQwMDAiDQpsYXN0LW1vZGlmaWVkOiBUaHUsIDE4IEphbiAyMDI0IDIxOjI4OjE0IEdNVA0Kc3RyaWN0LXRyYW5zcG9ydC1zZWN1cml0eTogbWF4LWFnZT0xNTcyNDgwMDsgaW5jbHVkZVN1YkRvbWFpbnMNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">11</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">194</HTTPProperty>
        </HTTPPropertySet>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="14" hostname="dev.bluealgo.com" path="/smartformup/ui/script.js" url="https://dev.bluealgo.com/smartformup/ui/script.js" ip="144.126.253.3" port="443" client_ip="192.168.0.112" client_port="64262" connectionId="2220" origin="HTML" encodingType="ANSI" ordinal="10" startDateTime="2024-02-16T16:37:19.911+05:30" startTime="2782" endTime="2963" blockedTime="-1" dnsTime="-1" connectTime="-2" sendTime="4294967295" waitTime="4294967295" receiveTime="44" sslNegotiateTime="-1" responseBodySize="26327">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name=":method" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VU</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":scheme" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":path" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>L3NtYXJ0Zm9ybXVwL3VpL3NjcmlwdC5qcw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name=":authority" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZGV2LmJsdWVhbGdvLmNvbQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL2xvYWRpbmRleD9vcHBvcnR1bml0eUlkPTAwNjBvMDAwMDFlU0lKMEFBTyZjdXN0b21lcmlkPWN1c3QxMDA1JmFjY2Vzc3Rva2VuPVJGcFNRVlVJZ2Q0WV9vWU5MODFuYUV4VkxBWWdLUXQ3</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="cookie" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD1COEI5REUyNDA1ODE3RDYwMjlFQzM0QzA3NDlEQjJFRg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9zbWFydGZvcm11cC91aS9zY3JpcHQuanMNCjphdXRob3JpdHk6IGRldi5ibHVlYWxnby5jb20NClJlZmVyZXI6IGh0dHBzOi8vZGV2LmJsdWVhbGdvLmNvbS9zbWFydGZvcm11cC9sb2FkaW5kZXg/b3Bwb3J0dW5pdHlJZD0wMDYwbzAwMDAxZVNJSjBBQU8mY3VzdG9tZXJpZD1jdXN0MTAwNSZhY2Nlc3N0b2tlbj1SRnBTUVZVSWdkNFlfb1lOTDgxbmFFeFZMQVlnS1F0Nw0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpjb29raWU6IEpTRVNTSU9OSUQ9QjhCOURFMjQwNTgxN0Q2MDI5RUMzNEMwNzQ5REIyRUYNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>QjhCOURFMjQwNTgxN0Q2MDI5RUMzNEMwNzQ5REIyRUY=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">13</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">34</HTTPProperty>
        </HTTPPropertySet>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>29516</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Status" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="content-length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Mjk1MTY=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="access-control-allow-origin" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="accept-ranges" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="etag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Vy8iMjk1MTYtMTcwNTI2NDUyNDAwMCI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="last-modified" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U3VuLCAxNCBKYW4gMjAyNCAyMDozNToyNCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="strict-transport-security" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0xNTcyNDgwMDsgaW5jbHVkZVN1YkRvbWFpbnM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQNCmNvbnRlbnQtdHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KY29udGVudC1sZW5ndGg6IDI5NTE2DQphY2Nlc3MtY29udHJvbC1hbGxvdy1vcmlnaW46ICoNCmFjY2VwdC1yYW5nZXM6IGJ5dGVzDQpldGFnOiBXLyIyOTUxNi0xNzA1MjY0NTI0MDAwIg0KbGFzdC1tb2RpZmllZDogU3VuLCAxNCBKYW4gMjAyNCAyMDozNToyNCBHTVQNCnN0cmljdC10cmFuc3BvcnQtc2VjdXJpdHk6IG1heC1hZ2U9MTU3MjQ4MDA7IGluY2x1ZGVTdWJEb21haW5zDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <HTTPPropertySet>
          <HTTPProperty name="StreamID">13</HTTPProperty>
          <HTTPProperty name="TotalHeadersSize">193</HTTPProperty>
        </HTTPPropertySet>
      </HTTPResponse>
    </HTTPTask>
  </HTTPTask>
  <HTTPTask id="8" hostname="cdn.jsdelivr.net" path="/npm/intl-tel-input@18.2.1/build/img/flags.png?1" url="https://cdn.jsdelivr.net/npm/intl-tel-input@18.2.1/build/img/flags.png?1" ip="151.101.153.229" port="443" client_ip="192.168.0.112" client_port="64267" connectionId="2420" origin="ExtraRes" encodingType="ANSI" ordinal="1" startDateTime="2024-02-16T16:37:20.008+05:30" startTime="2879" endTime="3126" blockedTime="-1" dnsTime="23" connectTime="109" sendTime="4294967295" waitTime="4294967295" receiveTime="50" sslNegotiateTime="83" responseBodySize="65969">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>MQ==</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>MQ==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name=":method" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VU</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":scheme" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":path" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>L25wbS9pbnRsLXRlbC1pbnB1dEAxOC4yLjEvYnVpbGQvaW1nL2ZsYWdzLnBuZz8x</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":authority" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2RuLmpzZGVsaXZyLm5ldA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9pbnRsLXRlbC1pbnB1dEAxOC4yLjEvYnVpbGQvY3NzL2ludGxUZWxJbnB1dC5taW4uY3Nz</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9ucG0vaW50bC10ZWwtaW5wdXRAMTguMi4xL2J1aWxkL2ltZy9mbGFncy5wbmc/MQ0KOmF1dGhvcml0eTogY2RuLmpzZGVsaXZyLm5ldA0KUmVmZXJlcjogaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9pbnRsLXRlbC1pbnB1dEAxOC4yLjEvYnVpbGQvY3NzL2ludGxUZWxJbnB1dC5taW4uY3NzDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTIxLjAuMC4wIFNhZmFyaS81MzcuMzYNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPPropertySet>
        <HTTPProperty name="StreamID">1</HTTPProperty>
        <HTTPProperty name="TotalHeadersSize">226</HTTPProperty>
      </HTTPPropertySet>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>70325</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Status" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MjAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="access-control-allow-origin" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Kg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="access-control-expose-headers" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Kg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="timing-allow-origin" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Kg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="cache-control" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAwLCBzLW1heGFnZT0zMTUzNjAwMCwgaW1tdXRhYmxl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="cross-origin-resource-policy" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y3Jvc3Mtb3JpZ2lu</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="x-content-type-options" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm9zbmlmZg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="strict-transport-security" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnM7IHByZWxvYWQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="content-type" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aW1hZ2UvcG5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="x-jsd-version" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTguMi4x</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="x-jsd-version-type" index="10">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dmVyc2lvbg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="etag" index="11">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Vy8iMTEyYjUtdEZHMDIwTVhTY3hBekNwZkp4K1lCOG9oOGRNIg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="accept-ranges" index="12">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ynl0ZXM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="date" index="13">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoyMCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="age" index="14">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>NjMzMDA1NA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="x-served-by" index="15">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2FjaGUtZnJhLWVkZGY4MjMwMTA1LUZSQSwgY2FjaGUtYm9tNDc0My1CT00=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="x-cache" index="16">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SElULCBISVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="vary" index="17">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="alt-svc" index="18">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aDM9Ijo0NDMiO21hPTg2NDAwLGgzLTI5PSI6NDQzIjttYT04NjQwMCxoMy0yNz0iOjQ0MyI7bWE9ODY0MDA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="content-length" index="19">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>NzAzMjU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQphY2Nlc3MtY29udHJvbC1leHBvc2UtaGVhZGVyczogKg0KdGltaW5nLWFsbG93LW9yaWdpbjogKg0KY2FjaGUtY29udHJvbDogcHVibGljLCBtYXgtYWdlPTMxNTM2MDAwLCBzLW1heGFnZT0zMTUzNjAwMCwgaW1tdXRhYmxlDQpjcm9zcy1vcmlnaW4tcmVzb3VyY2UtcG9saWN5OiBjcm9zcy1vcmlnaW4NCngtY29udGVudC10eXBlLW9wdGlvbnM6IG5vc25pZmYNCnN0cmljdC10cmFuc3BvcnQtc2VjdXJpdHk6IG1heC1hZ2U9MzE1MzYwMDA7IGluY2x1ZGVTdWJEb21haW5zOyBwcmVsb2FkDQpjb250ZW50LXR5cGU6IGltYWdlL3BuZw0KeC1qc2QtdmVyc2lvbjogMTguMi4xDQp4LWpzZC12ZXJzaW9uLXR5cGU6IHZlcnNpb24NCmV0YWc6IFcvIjExMmI1LXRGRzAyME1YU2N4QXpDcGZKeCtZQjhvaDhkTSINCmFjY2VwdC1yYW5nZXM6IGJ5dGVzDQpkYXRlOiBGcmksIDE2IEZlYiAyMDI0IDExOjA3OjIwIEdNVA0KYWdlOiA2MzMwMDU0DQp4LXNlcnZlZC1ieTogY2FjaGUtZnJhLWVkZGY4MjMwMTA1LUZSQSwgY2FjaGUtYm9tNDc0My1CT00NCngtY2FjaGU6IEhJVCwgSElUDQp2YXJ5OiBBY2NlcHQtRW5jb2RpbmcNCmFsdC1zdmM6IGgzPSI6NDQzIjttYT04NjQwMCxoMy0yOT0iOjQ0MyI7bWE9ODY0MDAsaDMtMjc9Ijo0NDMiO21hPTg2NDAwDQpjb250ZW50LWxlbmd0aDogNzAzMjUNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData></ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <HTTPPropertySet>
        <HTTPProperty name="StreamID">1</HTTPProperty>
        <HTTPProperty name="TotalHeadersSize">434</HTTPProperty>
      </HTTPPropertySet>
    </HTTPResponse>
  </HTTPTask>
  <HTTPTask id="9" hostname="dev.bluealgo.com" path="/smartformup/ui/lock-ic.png" url="https://dev.bluealgo.com/smartformup/ui/lock-ic.png" ip="144.126.253.3" port="443" client_ip="192.168.0.112" client_port="64262" connectionId="2220" origin="ExtraRes" encodingType="ANSI" ordinal="2" startDateTime="2024-02-16T16:37:19.905+05:30" startTime="2776" endTime="2916" blockedTime="-1" dnsTime="-1" connectTime="-2" sendTime="4294967295" waitTime="4294967295" receiveTime="2" sslNegotiateTime="-1" responseBodySize="4047">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name=":method" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VU</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":scheme" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":path" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>L3NtYXJ0Zm9ybXVwL3VpL2xvY2staWMucG5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":authority" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZGV2LmJsdWVhbGdvLmNvbQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL3VpL3N0eWxlcy5jc3M=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="cookie" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SlNFU1NJT05JRD1COEI5REUyNDA1ODE3RDYwMjlFQzM0QzA3NDlEQjJFRg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9zbWFydGZvcm11cC91aS9sb2NrLWljLnBuZw0KOmF1dGhvcml0eTogZGV2LmJsdWVhbGdvLmNvbQ0KUmVmZXJlcjogaHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL3VpL3N0eWxlcy5jc3MNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMjEuMC4wLjAgU2FmYXJpLzUzNy4zNg0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KY29va2llOiBKU0VTU0lPTklEPUI4QjlERTI0MDU4MTdENjAyOUVDMzRDMDc0OURCMkVGDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="JSESSIONID" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QjhCOURFMjQwNTgxN0Q2MDI5RUMzNEMwNzQ5REIyRUY=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
      <HTTPPropertySet>
        <HTTPProperty name="StreamID">7</HTTPProperty>
        <HTTPProperty name="TotalHeadersSize">73</HTTPProperty>
      </HTTPPropertySet>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>5593</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Status" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MjAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="date" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="content-type" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aW1hZ2UvcG5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="content-length" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>NTU5Mw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="access-control-allow-origin" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Kg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="accept-ranges" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ynl0ZXM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="etag" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Vy8iNTU5My0xNzAzNTg5MDUyMDAwIg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="last-modified" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>VHVlLCAyNiBEZWMgMjAyMyAxMToxMDo1MiBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="strict-transport-security" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bWF4LWFnZT0xNTcyNDgwMDsgaW5jbHVkZVN1YkRvbWFpbnM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQNCmNvbnRlbnQtdHlwZTogaW1hZ2UvcG5nDQpjb250ZW50LWxlbmd0aDogNTU5Mw0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQphY2NlcHQtcmFuZ2VzOiBieXRlcw0KZXRhZzogVy8iNTU5My0xNzAzNTg5MDUyMDAwIg0KbGFzdC1tb2RpZmllZDogVHVlLCAyNiBEZWMgMjAyMyAxMToxMDo1MiBHTVQNCnN0cmljdC10cmFuc3BvcnQtc2VjdXJpdHk6IG1heC1hZ2U9MTU3MjQ4MDA7IGluY2x1ZGVTdWJEb21haW5zDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAA6PAAAOjwHjOWJ6AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAtjcMAnQAAAO90Uk5TAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHiAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs9Pj9AQUJERUZHSUpMTU5PUFFSU1RVVldZWltcXV9gYWJjZGVmZ2hpamxtbm9wcXJzdHV2d3h5ent8fX5/gIGCg4aHiImKi4yNjo+RkpOUlZaXmJmam5ydnp+goaKjpKWmp6ipqqutrq+wsbKztLW2uLm6u7y9vr/AwcLDxcbHyMnKzM3Oz9DR0tPU1dbX2Nna29zd3+Dh4uPk5ebn6Onq6+zt7u/w8fLz9PX29/j5+vv8/f55IfRLAAARgElEQVR42u3d+3+WdR3H8WsbG4PhhiIgEjQwcZzyFIxDEockwAMigkOy1ETCQrQEsjgYCOUpSRumuXUgZSDGZGToTMRChymMQOYBEIEBN9z3/f0X+iHr0UFx2/fzvb6H6/X+C+735/OEXfd1X4coSlLade1XPn76rIUrH6/Z0vDe8RMf5/h7DVtqHl+5cNb08eX9uraLSHApGDxtcc3Ow6pFObyzZvG0wQVMLYjklE78ftX2U6rVObW96vsTS3OYoL8pGn3bqpeOKK0ceWnVbaOLmKV/GTS3NqWEkqqdO4iJepQzpzz2jhLOO49NOZPJepDcoQu2pJWRpLcsGJrLhF3OORVP7VdGs/+pinOYs6Nf9a7ZkFExJLPhGr4iupcLlr2vYsv7yy5g4i6lY8ULKua8UNGRuTuSix88pCzk0IMXM3v7KbnlFWUtr9xSwgasZmBls7Ka5sqBbMFa+j2VUdaTeaofm7CSvqvTyomkV/dlG7Gn96pTypmcWtWbjcSacx9IKaeSeuBcthJbuq84rpzL8RXd2Uws6bK0WTmZ5qVd2I7xFMw/rJzN4fn8SmA4I95QTueN4ezIYIofzCrHk73/DPZkKpP2Kg+yZwKbMpJzfqM8SRXfB+STc+OHypscuIGFCecLm5RX2cjZYcm0u+u48izH5uaxN6kMfk15mFf6szmZTGtWXubIFHYnkPyVytss405j/S9/LyiPU9eNDWqe+t2nvM7ecnaok1tPKs+TuoUttjkdfqkCyOoObLJt6bNNBZFXS9llW3L5QRVIDl7ONlt/7n9BRgWTzAIeNdPK5D6qgsqjPFigdWd/qlVgqc5nqy1PYY0KLjWF7LWl6fS8CjDPd2KzLUvnF1WQebEzu21Jum1TgWYbvwy0ID0bVLBp6Ml+P/P03y4VcHb1YcOnT/93VNB5h8uETpuLP1CB5wMeLHSaDDqkgs8hHjv86cd/e1QCsocjwU/JGdtUIrKNuwc/Me2eVQnJs1wr+klZpRKTVWz7//M9laB8j33/b67LJglA9jo2/t+5LKUSldRl7Pw/c8FBlbAc5IHz/5Huu1TisounSPw7HV9WCczLvHDg4+T8XiUyv+dS4X9mjkpo5rD7KIqii1JJBZC6iO1HUccdKrHZwWFAFP1cJTg/Z//XqETnmqTvv/eHyQbwYcLfNJFn5QEwTZtW3Tt/9szJXx02sHfvgcO+Onnm7Pn3rtrUZOOzvJDsp8ktjHfaJxvWLK4Y+qmveisZWrF4TUPMDyVZmOT9j4jxtU8n6uaPaNENmvkj5tediO9zpUckd/+dG+Macv2iMa16UEuHMYvq48LZmNw7xuK5B/x41aTitny64klV8Tygtjqp+58Zx3RfvEnjH1jnm2K5T3VmMvff1fxNAHsWab/Vs98i89eqH+rKKUADya4ZJ/Jcltxxa0xfrpbIE4JfMjvVzK8Hy33Wwb82+8Sq7JeSt/+cl4we9j9ZJvtxy540+qXgpeRdGjDD4DhPVZ4v/4HPrzT5suIZSdt/8bvmhvm4oZvw+zxu7jO/W5wwAMuNjbJhlLlPPcrc00uWJ2v/ZaZOuB83+/LWgvmmzg2dLEsUgOcMjfG580x/8vOMffQk7f9KQ39Ip8bx4acaOny5Mjn7L9xlZIJVMf2q0rnKyMfflZxHiS4w8nPvt+Ir8C0jPxcvSMr+ex8zML2dl8RZ4ZKdBiocS8rlYSaeBPG7kng7lPzOQImEPDeih/z/nyct3GMzR/6b7IkeiQCwVHxwdt7NVr5XvMjSJOy/5CPxc3+97DTpJX5e8KOSBACYJz21+i62qnSpl+4yL/z9t5e++n5Dkb0yRRuEyzS1Dx7AN6TP/hTYbFMgfU7oG6HvP/dvsgO73/LbuHLvl+3zt9DfLna17LwcuK1G+OamqwMHIPs0oB+7UOnHopVeDnv/XxEd1pNOXEmX86Roqa8EDUD0edAbC9woVbBRstWzIe//QslJverMZXTFr0r2ujBgAL+S/PncoRPnPSQvcPhVuPs/U/B5YPv7udSs3365ZqkzgwXwTcHf/4a7VW244G+D3wwWwGa5ITn3jEXBp11uDnX/veTuBnzavXZPi5XL9goUwB1iI9p9lnvtztotVu+OQAG8JjWgU8NdrDdc7N7B18Lc/8DQ/4XI/Q83MEgAi6XGs97Re6lz1ks1XBzi/nOkHgm272xXK569T6hiY4iPCxgp9c/jWnc7XivVcWSAAB4Wmk2tyyVrhUo+FN7+8w8InQJ0+jZqqdveD+QHB2CC0L+Ne92uea9QzQnBARC6enJvJ7drdhK6W6QqtP0XCt0QOsX1olNkeh4L7V7xUUIXAbnfVOjyoFGBAfiByFQy/d1v2l/mmZI/CAxAnchUvHiutswz0OsCOwSQuSX8iz50/aJI1RNhHQTIHALU+FG2hoMAQ4cAw/woO4yDADOHAM/70vZ5DgKMHAKM8aXuGA4C/icid4TV+9NX5MERId0jdo/EQK7wp+8VEn3vCQiAxPXg73r0is08iafJBnR1uMghwAqfGq/gIED8EOASnxpfwkGA9CHAG35VfoODAOHvxXf5VfmuJJ33+MwIPBku69mDlHsL3AbXFMr+i5N4Xkzi3GcoL5K6VGAWX/et9NcFSl8aCIBp+qNIe/eK9c4CL5qcxpcAD08DC54ODuVrgMAFwR7eLCdwK2QolwZv1R/FWP9aj9VvvTUQAEe1J5Hq6F/rjvpPxDoaxv57JvR3EYFfwHoGAUDgl4CFPvYWeIp0GL8G3JzQu6UF7oe/OQgA92nPobnAx94FzdrF7wsCwLqkXh+pfzZ4XRAA3tKew8N+Ftd/JMZbIey/QP+c6Bw/m+s/PDRdEACAXvrHQuP9bD5ev3kIzwwt0x9DXz+b99VvXhYAgCH65wHz/Gyep38ucEgAAEZrT+F1X6u/rl19dAAAJmlPYY2v1ddoV58UAAD9y0GW+Fp9CZeERBJngm/0tfqNnAuOoui72lO4ytfqV2lX/24AAPQvCBvra3X9a0JCuChsufYUyn2tXq5dfXkAAB7RnkJ/X6v3167+SAAA9F8W6e35UP2z4CG8RHKt9hRKfK1eol19bQAANmlPIc/X6nna1TcFAODPCb42Vvt66D8HAGBHgm+S1b4tekcAAHbpDqHR3+7a78naFQCARgAksjtDAABDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0BwDdGQLdGQLdGQLdGQLdGQLdGQLdGQLdGQLdGQLdGQLdGQLdGQLdGQLdGQLdGQLdGQLdGQLdLSa/z9Dyf0X7kelN5d5GsPvQPvl+7L7n3F/U7U4rIp707rpfzO3p9vbzJjzD7s0qeGaCu2/Q6bBwLxsyn70LO7i5/yE7WE482THExeO+H/Gff3x/CH7k3BFh/62sJc5sdex1qgP2s5N4s3+AS/vvu4+NxJ19fd3Zf69G9hF/Gp15p3L3N9mGjbzZ3Y39525hF3byp1wnAMxhE7Yy24kDwGYWYStHP29//zmb2IO9PGcfwM1swWZusL3/LodZgs0cLLEMYB47sJs5li8A2M0K7Gan3a+CV7EB25loFQBfAayn1ub+BzF/+xloEcBKxm8/Ky0C2M747We7vf2fnWX89pM92xqAK5m+C7nSGoAVDN+FrLAGgAtBnchWW/svyTB8F5Kx9XtAObN3I+WWAHyN0buRr1kCcAOjdyO2LgqYy+jdyFxLAJYyejey1BKARxm9G3nUEoCnGb0beZqLAZKdTZYA1DF6N1IHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDoAUAA4GGyf699+DsTL7rw41w04faHNu7OACARAJqfuHpg4SfVKRxw1eojAAgbQGZjRafTVSqaviEDgGABvD7vc5/d6ty5fwFAkADeHt/SYuPeBEBwAI4vLGx5s/Z3HwNAWADW9Wldt9K1AAgIQOOk1reb1AiAUADUFLWlXlENAMIAUNmubf3aVQIgBAAar1VcCgDvAWRv16l4exYAfgM4OV2v4/STAPAZQHaibsmJWQB4DOCH+i1/CAB/AdTm6rfMrQWArwD2dZOo2W0fAPwEkP6yTM8vpwHgJYB5UkXnAcBHAOtzpIrmrAeAfwAyZXJNyzIA8A7AE5JVnwCAbwDS50tWPT8NAM8ArJbtuhoAfgE4dZ5s1/NOAcArAI9Jl30MAD4BSJdKly1NA8AjAH+Ub/tHAHgE4E75tncCwCMAg+XbDgaAPwD2mqi7FwDeAHjERN1HAOANgCtM1L0CAL4ASHUyUbdTCgCeANhspu9mAHgCoNJM30oAeAJgkZm+iwDgCYBZZvrOAoAnACab6TsZAJ4AGGGm7wgAeAKg1EzfUgB4AqDQTN9CAPgB4JCpwocA4AWAlKnCKQD48SfgLDN9z+JPgCcABpjpOwAAngAYY6bvGAB4AuB6M32vB4AnAO4w0/cOAHgCYIWZvisA4AmAKjN9qwDgCYB6M33rAeAJgExXE3W7ZgDgCQA1w0TdGQoAvgD4rYm6vwWANwCOtJdv2/4IALwBoC6Xb3u5AoA/AB6Sb/sQADwCsEe+7R4AeARADZcuO1wBwCcAtdJlawHgFQA1TrbrOAUAvwBszZGsmrMVAJ4BUFMlq05VAPANwM58uab5OwHgHQB1q1zTWxUA/APwXrFU0eL3AOAhALUuV6Zn7joFAB8BqGUyPZcpAPgJQM2UqDlTAcBXAKmR+i1HpgDgLQD1QaluydIPFAD8BaD+eoZexzP+qgDgMwBVodexQgHAbwCa14fOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJIHYLZex9kA8BzAEr2OSwDgOYDVeh1XA8BzAI16HRsB4DkAdalOxUsVAHwHsEyn4jIAeA/gaI+2N+xxFADeA1A/a3vDnykA+A8gPbqtBUenARAAAHWgb9v69T2gABACANXQqy31ejUoAIQBQDUNaX27IU0KAKEAUMcWFLWuW9GCYwoA4QBQqum27i1v1v22Jp+6AaBFyWy+u2LMhZ+ZMRV3b8741QwACQ8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnD4bGb0b2WgJQDWjdyPVlgA8wOjdyAOWANzD6N3IPZYAzGL0bmSWJQBTGb0bmWoJwFhG70bGWgIwiNG7kUGWAOR9xOxdyEd5lgBE6xm+C1lva//RnQzfhdxpDcAwhu9ChlkDkN/M9O2nOd8aAH4OciEb7e0/+jbjt59vWwTQmb8B1nO0xCIAX96rFnIetLl/TgbaT5lVAFwWZjt/sLv/aDIrsJsJlgG0284ObObVXMsAoqEZtmAv6Ysj67mPNdjLUvv7jzruZA+28lYHBwBEo7Nswk6yoyIn8lNWYSc/cWP/US53iFhJda4jAKL8tWwj/qzNj5xJYS37iDu1hZFDKdrCRuLNlqLIqRQu57tAnMf/ywsj1zKqkb3ElcZRkYMprmQz8aSyOHIzl1WfZDumc7L6ssjddJv3NisymbfndYvcTs7Im5ZU17/PqqTzfn31kptG5kjv6x+Ng/RtvYrM4gAAAABJRU5ErkJggg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <HTTPPropertySet>
        <HTTPProperty name="StreamID">7</HTTPProperty>
        <HTTPProperty name="TotalHeadersSize">182</HTTPProperty>
      </HTTPPropertySet>
    </HTTPResponse>
  </HTTPTask>
  <HTTPTask id="10" hostname="dev.bluealgo.com" path="/smartformup/ui/marked.png" url="https://dev.bluealgo.com/smartformup/ui/marked.png" ip="144.126.253.3" port="443" client_ip="192.168.0.112" client_port="64262" connectionId="2220" origin="ExtraRes" encodingType="ANSI" ordinal="3" startDateTime="2024-02-16T16:37:19.906+05:30" startTime="2777" endTime="2971" blockedTime="-1" dnsTime="-1" connectTime="-2" sendTime="4294967295" waitTime="4294967295" receiveTime="3" sslNegotiateTime="-1" responseBodySize="180">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name=":method" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VU</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":scheme" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":path" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>L3NtYXJ0Zm9ybXVwL3VpL21hcmtlZC5wbmc=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name=":authority" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZGV2LmJsdWVhbGdvLmNvbQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM6Ly9kZXYuYmx1ZWFsZ28uY29tL3NtYXJ0Zm9ybXVwL3VpL3N0eWxlcy5jc3M=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="cookie" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SlNFU1NJT05JRD1COEI5REUyNDA1ODE3RDYwMjlFQzM0QzA3NDlEQjJFRg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Om1ldGhvZDogR0VUDQo6c2NoZW1lOiBodHRwcw0KOnBhdGg6IC9zbWFydGZvcm11cC91aS9tYXJrZWQucG5nDQo6YXV0aG9yaXR5OiBkZXYuYmx1ZWFsZ28uY29tDQpSZWZlcmVyOiBodHRwczovL2Rldi5ibHVlYWxnby5jb20vc21hcnRmb3JtdXAvdWkvc3R5bGVzLmNzcw0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLjAuMCBTYWZhcmkvNTM3LjM2DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpjb29raWU6IEpTRVNTSU9OSUQ9QjhCOURFMjQwNTgxN0Q2MDI5RUMzNEMwNzQ5REIyRUYNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="JSESSIONID" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QjhCOURFMjQwNTgxN0Q2MDI5RUMzNEMwNzQ5REIyRUY=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
      <HTTPPropertySet>
        <HTTPProperty name="StreamID">9</HTTPProperty>
        <HTTPProperty name="TotalHeadersSize">35</HTTPProperty>
      </HTTPPropertySet>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>841</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Status" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MjAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="date" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="content-type" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aW1hZ2UvcG5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="content-length" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ODQx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="access-control-allow-origin" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Kg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="accept-ranges" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ynl0ZXM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="etag" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Vy8iODQxLTE3MDM1ODkwNTIwMDAi</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="last-modified" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>VHVlLCAyNiBEZWMgMjAyMyAxMToxMDo1MiBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="strict-transport-security" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bWF4LWFnZT0xNTcyNDgwMDsgaW5jbHVkZVN1YkRvbWFpbnM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8yLjAgMjAwDQpTdGF0dXM6IDIwMA0KZGF0ZTogRnJpLCAxNiBGZWIgMjAyNCAxMTowNzoxOSBHTVQNCmNvbnRlbnQtdHlwZTogaW1hZ2UvcG5nDQpjb250ZW50LWxlbmd0aDogODQxDQphY2Nlc3MtY29udHJvbC1hbGxvdy1vcmlnaW46ICoNCmFjY2VwdC1yYW5nZXM6IGJ5dGVzDQpldGFnOiBXLyI4NDEtMTcwMzU4OTA1MjAwMCINCmxhc3QtbW9kaWZpZWQ6IFR1ZSwgMjYgRGVjIDIwMjMgMTE6MTA6NTIgR01UDQpzdHJpY3QtdHJhbnNwb3J0LXNlY3VyaXR5OiBtYXgtYWdlPTE1NzI0ODAwOyBpbmNsdWRlU3ViRG9tYWlucw0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAC+0lEQVR4nO1ZTW/TQBC1gHLgyMeJwr8Alf/QQouEQPBDQPyA8iFugFpU+gHHIkigLRcOkThk36QWEom5wYHEu62g5ZxwWTROU4ni1Lv2xg5SRhopkWPve5PZmbdjzxvZyEaW2Vb16lEK6RIk7kLitZD0BYp+CYnf7HufA74W/WYbE1rrI17RVgtr56BwH4pCKNI2LhS1oHAPLYznDvyj+nQGip4JhY4t8H+JoCMk5nzpn84FPEm6CUW7WYHHENkRobgxMOC+9segsOAaOA4SkTTPa7kFL/0TkHg/aPDouaQNXtNd5PMEr3qOD0EQHM9MII+0Qd90wlwm8FVJt4oCjx6JsHY9FXgK6ZRQ+Fk0ASjaTVViuc7nCXTt23r/6xJP7cC3MO6iSZn6UuOFvly+qmfxID6NFDq+9M9bRD+SB7mAXw664CdL05H3I8Gywwg8i6yuTskBfGPlL/Ds/P3d19h0Clk0JhKIVGUBkZ8sTeup8ox+Xl/qe091a/Nicvqw3B1C8OjKjDuJBITCmyLAL9QXE+8Vkl4lE+CDxxCCB7ukenIKWUjlPpvNeMNOlWf0YmPZ+BncWE1SyKj+P9x8ZBy9zJFXPUfbCQEGbwqEwV956wI8mRFISiFOG9NU6HXYLGkD6xQy2MQmKbESvHQYeTLfxKZl9LDUGAh4ZVhGbRpZv8oS26QahzcpmBG4nUxgGxM2D437J1xHHnteU7ULhmIOTZsHx6WMa/BC4bvxNC+amFkucJCES/DoTvJmjcBnOdD0SLgGD4V2tVk969kYTwTSLMZ7IklVpoj+Y8/Wqs3qyWE41AuFndRzU55VFk2AtuhaKvD7JCTNFxZ9SU+8rMbnUKGoVAD49YquHPPcDXdpIz/wWHM23N0nof2xtJXJNm0qriIfZzyrHEh1kviRecPazE153McNJjt4tLnOc9n28jbujiw7bLVTlCoKTZYH1h12EMYii4dOPLdhzc4HDz7ZRS/wupKET3mf+RpLYlaVQ/GadWQj8/5/+wO4yRM6vdI5mQAAAABJRU5ErkJggg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <HTTPPropertySet>
        <HTTPProperty name="StreamID">9</HTTPProperty>
        <HTTPProperty name="TotalHeadersSize">180</HTTPProperty>
      </HTTPPropertySet>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>